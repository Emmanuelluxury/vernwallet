jmp rel 10 if [fp + -4] != 0;
[ap + 0] = [fp + -3], ap++;
call rel 96565;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
ret;
ap += 6;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 110 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 71 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 42;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 3;
[ap + -17] = [ap + 0] + [ap + -11], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -11] + 270, ap++;
jmp rel 15 if [ap + -3] != 0;
ap += 6;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 540, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 96479;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 96478;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 15;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1960, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 32;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13990, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 14 if [ap + -1] != 0;
ap += 6;
[ap + 0] = [ap + -10] + 540, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 96400;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 1470, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -4] + 0], ap++;
[ap + -4] = [[fp + -4] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -4] + 2];
jmp rel 33;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -4] + 0], ap++;
[ap + -3] = [[fp + -4] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -4] + 2];
[fp + -3] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
jmp rel 10 if [ap + -2] != 0;
call rel 96359;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
call rel 96348;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 39;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 23 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 9;
[ap + -1] = [[ap + -4] + 0];
ap += 17;
[ap + 0] = [ap + -21] + 1, ap++;
jmp rel 9;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 17;
ap += 20;
[ap + 0] = [ap + -21], ap++;
call rel 96309;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 4;
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 28 if [fp + -3] != 0;
[ap + 0] = 1000, ap++;
[fp + -4] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 7;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 16;
ap += 12;
call rel 96287;
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 3;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 69;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 23 if [fp + -3] != 0;
[ap + 0] = 340282366920938463463374607431768211455, ap++;
[ap + -1] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 7;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 11;
ap += 3;
[ap + 0] = [ap + -8] + 1, ap++;
jmp rel 47;
ap += 3;
[ap + 0] = [ap + -4], ap++;
jmp rel 28 if [fp + -3] != 0;
[ap + 0] = 1000, ap++;
[fp + -4] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 9;
[ap + -1] = [[ap + -4] + 0];
ap += 7;
[ap + 0] = [ap + -11] + 1, ap++;
jmp rel 14;
call rel 96226;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 10;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 7;
[ap + 0] = [ap + -12] + 1, ap++;
call rel 96212;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
jmp rel 25 if [fp + -3] != 0;
[ap + 0] = 1000, ap++;
[fp + -4] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 10;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
ret;
ap += 4;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[fp + -4] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 13 if [ap + -2] != 0;
ap += 11;
[ap + 0] = [fp + -3], ap++;
call rel 96060;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -6] + 0], ap++;
[ap + -4] = [[ap + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -8] + 2];
jmp rel 44;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -5] + 0], ap++;
[ap + -3] = [[ap + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -7] + 2];
[fp + -4] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [ap + -8] + 3, ap++;
jmp rel 6 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
jmp rel 4;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 10 if [ap + -1] != 0;
call rel 96100;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 4;
call rel 96035;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 12;
call rel 96024;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -4] + 0], ap++;
[ap + -4] = [[fp + -4] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -4] + 2];
jmp rel 32;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -4] + 0], ap++;
[ap + -3] = [[fp + -4] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -4] + 2];
ap += 3;
[fp + -3] = [ap + 0] + [ap + -9], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
jmp rel 6 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
jmp rel 4;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
ret;
call rel 95966;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 683846996683820750284175136427820765332390866701628439304978134485807175402, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 273 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1704892361995056365806582506719143211463188755204853979652856344756200540795, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -2] = [[ap + -8] + 1];
[ap + 0] = [[ap + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -12] + 0], ap++;
[ap + -4] = [[ap + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -15] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -7] = [[ap + -15] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -5] = [[fp + -4] + 8];
[ap + -4] = [[fp + -4] + 9];
[ap + -6] = [[fp + -4] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 196 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [fp + -4] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 152 if [ap + -1] != 0;
[ap + 0] = 1704892361995056365806582506719143211463188755204853979652856344756200540795, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -25] = [[ap + -13] + 1];
[ap + 0] = [[ap + -13] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -6] = [[ap + -21] + 1];
[ap + -5] = [[ap + -21] + 2];
[ap + -7] = [[ap + -21] + 3];
[ap + -4] = [[ap + -21] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 6], ap++;
jmp rel 78 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = 683846996683820750284175136427820765332390866701628439304978134485807175402, ap++;
[ap + -1] = [[ap + -6] + 0];
[fp + -3] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -37] + 7];
[ap + -5] = [[ap + -37] + 8];
[ap + -4] = [[ap + -37] + 9];
[ap + -6] = [[ap + -37] + 10];
[ap + -55] = [[ap + -37] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -37] + 7) %}
[ap + 0] = [[ap + -37] + 13], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -38] + 12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -42] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -38] + 12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -42] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -44] + 14], ap++;
[ap + 0] = [[ap + -45] + 15], ap++;
ret;
ap += 10;
[ap + 0] = [[ap + -32] + 5], ap++;
call rel 127843;
[ap + 0] = [ap + -1] + 127842, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12110, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -42] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -44] + 7], ap++;
[ap + 0] = [[ap + -45] + 8], ap++;
ret;
ap += 20;
call rel 127823;
[ap + 0] = [ap + -1] + 127822, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 24220, ap++;
call rel 95725;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -38] + [ap + -8], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 33;
[ap + 0] = [[fp + -4] + 11], ap++;
call rel 127799;
[ap + 0] = [ap + -1] + 127798, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 25790, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [[fp + -4] + 14], ap++;
ret;
ap += 51;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 127776;
[ap + 0] = [ap + -1] + 127775, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 38620, ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
[ap + -4] = [[fp + -6] + 2];
[ap + -5] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 48 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 6;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11] + 540, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 95593;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2] + 1470, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel 12 if [fp + -3] != 0;
ap += 17;
call rel 95567;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 15 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 6;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 26, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 42;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = 35, ap++;
[ap + -1] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 27;
[ap + -1] = [[ap + -8] + 1];
ap += 1;
[ap + 0] = [ap + -9] + 2, ap++;
jmp rel 10 if [fp + -3] != 0;
call rel 95507;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9] + 2, ap++;
jmp rel 6;
ap += 3;
[ap + 0] = [ap + -9] + 1, ap++;
call rel 95490;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 686 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 698825930367399625235315650030086715175536112812254075365890532169265202282, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -7] = [[fp + -5] + 6];
[ap + -6] = [[fp + -5] + 7];
[ap + -5] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 648 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -5] = [[fp + -7] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 614 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = 86400, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -7] + memory[ap + -2]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -8] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -7] + 2];
jmp rel 583;
[ap + 1] = [ap + -8] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + -16] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 3];
jmp rel 106;
[ap + -1] = [[fp + -7] + 3];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -6] = [[ap + -18] + 1];
[ap + -5] = [[ap + -18] + 2];
[ap + -4] = [[ap + -18] + 3];
[ap + -3] = [[ap + -18] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 6], ap++;
jmp rel 69 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 5], ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 7];
[ap + -5] = [[ap + -26] + 8];
[ap + -4] = [[ap + -26] + 9];
[ap + -3] = [[ap + -26] + 10];
[ap + -2] = [[ap + -26] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26] + 7) %}
[ap + 0] = [[ap + -26] + 13], ap++;
jmp rel 38 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 698825930367399625235315650030086715175536112812254075365890532169265202282, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -32] + 14];
[ap + -4] = [[ap + -32] + 15];
[ap + -3] = [[ap + -32] + 16];
[ap + -2] = [[ap + -32] + 17];
[ap + -38] = [[ap + -32] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -32] + 14) %}
[ap + 0] = [[ap + -32] + 20], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [[ap + -33] + 19], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -36] + 21, ap++;
jmp rel 50;
ap += 84;
[ap + 0] = [[ap + -117] + 19], ap++;
[ap + 0] = [ap + -102], ap++;
[ap + 0] = [ap + -2] + 51900, ap++;
[ap + 0] = [ap + -120] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -122] + 21], ap++;
[ap + 0] = [[ap + -123] + 22], ap++;
ret;
ap += 86;
[ap + 0] = [[ap + -113] + 12], ap++;
[ap + 0] = [ap + -1] + 62580, ap++;
[ap + 0] = [ap + -115] + 16, ap++;
[ap + 0] = [[ap + -116] + 14], ap++;
[ap + 0] = [[ap + -117] + 15], ap++;
jmp rel 11;
ap += 94;
[ap + 0] = [[ap + -113] + 5], ap++;
[ap + 0] = [ap + -1] + 74000, ap++;
[ap + 0] = [ap + -115] + 9, ap++;
[ap + 0] = [[ap + -116] + 7], ap++;
[ap + 0] = [[ap + -117] + 8], ap++;
[ap + 0] = [ap + -102], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 21;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -26] + 33590, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + -3] = [[ap + -4] + 2];
[ap + -2] = [[ap + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -4]) %}
[ap + 0] = [[ap + -4] + 5], ap++;
jmp rel 428 if [ap + -1] != 0;
[ap + 0] = [[ap + -5] + 4], ap++;
[ap + 0] = [[ap + -6] + 6], ap++;
[ap + 0] = [ap + -7] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -12] + 0], ap++;
[ap + 3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -17] + 2];
jmp rel 385 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -12] + 0];
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 352 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 314 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 277 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 234 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 201 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 163 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -28] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -47] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 87;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 72 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + -24] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 47;
[ap + -1] = [[ap + -7] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -28] = [ap + 0] + [ap + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 12;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15] + 1450, ap++;
jmp rel 18;
[ap + 0] = [ap + -2], ap++;
[ap + -42] = [ap + 1] + [ap + -9], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 17;
[ap + -1] = [[ap + -6] + 0];
ap += 9;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -13] + 1010, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 6;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 910, ap++;
call rel 94997;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 10;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 1440, ap++;
jmp rel 8;
ap += 13;
[ap + 0] = [ap + -25] + 2, ap++;
[ap + 0] = [ap + -18] + 1810, ap++;
call rel 94983;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
call rel 94980;
[ap + 0] = [ap + -35] + 3, ap++;
[ap + 0] = [ap + -30] + 2160, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 36;
[ap + 0] = [[ap + -46] + 4], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 4870, ap++;
[ap + 0] = [ap + -49] + 8, ap++;
[ap + 0] = [[ap + -50] + 6], ap++;
[ap + 0] = [[ap + -51] + 7], ap++;
jmp rel 30;
ap += 28;
call rel 94955;
[ap + 0] = [ap + -47] + 3, ap++;
[ap + 0] = [ap + -42] + 14010, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 48;
[ap + 0] = [[ap + -57] + 4], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 16720, ap++;
[ap + 0] = [ap + -60] + 8, ap++;
[ap + 0] = [[ap + -61] + 6], ap++;
[ap + 0] = [[ap + -62] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 39;
call rel 94919;
[ap + 0] = [ap + -58] + 3, ap++;
[ap + 0] = [ap + -53] + 25570, ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 59;
[ap + 0] = [[ap + -69] + 4], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -2] + 28280, ap++;
[ap + 0] = [ap + -72] + 8, ap++;
[ap + 0] = [[ap + -73] + 6], ap++;
[ap + 0] = [[ap + -74] + 7], ap++;
jmp rel 30;
ap += 51;
call rel 94894;
[ap + 0] = [ap + -74] + 3, ap++;
[ap + 0] = [ap + -65] + 37420, ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 71;
[ap + 0] = [[ap + -76] + 4], ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -2] + 40130, ap++;
[ap + 0] = [ap + -79] + 8, ap++;
[ap + 0] = [[ap + -80] + 6], ap++;
[ap + 0] = [[ap + -81] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 103;
call rel 94867;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -114] + 85380, ap++;
[ap + 0] = [ap + -120], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 98;
call rel 94862;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -113] + 84930, ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 114;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 87080, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 130;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 99020, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 280 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 0], ap++;
[ap + 3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 2];
jmp rel 237 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 204 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 166 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -24] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 90;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 75 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -38] + 12], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -41] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -34] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -36] + 16, ap++;
[ap + 0] = [[ap + -37] + 14], ap++;
[ap + 0] = [[ap + -38] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -36] + 9, ap++;
[ap + 0] = [[ap + -37] + 7], ap++;
[ap + 0] = [[ap + -38] + 8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 9;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + 21810, ap++;
jmp rel 8;
ap += 12;
[ap + 0] = [ap + -24] + 2, ap++;
[ap + 0] = [ap + -17] + 22180, ap++;
call rel 94552;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
call rel 94549;
[ap + 0] = [ap + -34] + 3, ap++;
[ap + 0] = [ap + -29] + 22530, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 35;
[ap + 0] = [[ap + -45] + 4], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -2] + 25240, ap++;
[ap + 0] = [ap + -48] + 8, ap++;
[ap + 0] = [[ap + -49] + 6], ap++;
[ap + 0] = [[ap + -50] + 7], ap++;
jmp rel 30;
ap += 27;
call rel 94524;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -41] + 34380, ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 47;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 37090, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 281 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 242 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 210;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 10 if [ap + -3] != 0;
ap += 17;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19] + 12340, ap++;
[ap + 0] = [ap + -29], ap++;
jmp rel 52;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 156 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 124;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + -31] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 97 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + -6] = [[ap + -5] + 1];
[ap + -4] = [[ap + -5] + 2];
[ap + -3] = [[ap + -5] + 3];
[ap + -2] = [[ap + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -5]) %}
[ap + 0] = [[ap + -5] + 6], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -6] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -9] + 7];
[ap + -2] = [[ap + -9] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9] + 7) %}
[ap + 0] = [[ap + -9] + 10], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 9], ap++;
[ap + 0] = [[ap + -11] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -18] + 12];
[ap + -5] = [[ap + -18] + 13];
[ap + -4] = [[ap + -18] + 14];
[ap + -3] = [[ap + -18] + 15];
[ap + -2] = [[ap + -18] + 16];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18] + 12) %}
[ap + 0] = [[ap + -18] + 18], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 17], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -22] + 19, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -19] + 17], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -22] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -24] + 19], ap++;
[ap + 0] = [[ap + -25] + 20], ap++;
ret;
ap += 9;
[ap + 0] = [[ap + -19] + 9], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -2] + 11310, ap++;
[ap + 0] = [ap + -22] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -24] + 11], ap++;
[ap + 0] = [[ap + -25] + 12], ap++;
ret;
ap += 13;
[ap + 0] = [[ap + -19] + 5], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -2] + 21970, ap++;
[ap + 0] = [ap + -22] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -24] + 7], ap++;
[ap + 0] = [[ap + -25] + 8], ap++;
ret;
ap += 16;
call rel 94304;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24] + 32740, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 13;
call rel 94120;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -27] + 32370, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 28;
[ap + 0] = [[ap + -43] + 4], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -2] + 34430, ap++;
[ap + 0] = [ap + -46] + 8, ap++;
[ap + 0] = [[ap + -47] + 6], ap++;
[ap + 0] = [[ap + -48] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 30;
call rel 94089;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -44] + 44910, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 45;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 46970, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 62;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 59000, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
ret;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 48 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 6;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11] + 540, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 94143;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2] + 1470, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 195 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 156 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 124;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 82 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 52;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
ap += 1;
[ap + -30] = [ap + 0] + [ap + -24], ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 8 if [ap + -3] != 0;
ap += 7;
[ap + 0] = [ap + -8] + 630, ap++;
jmp rel 10;
[ap + -33] = [ap + 0] + [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 16 if [ap + -2] != 0;
ap += 5;
[ap + 0] = [ap + -6] + 450, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 93979;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 93798;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 10, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 15;
[ap + 0] = [[ap + -28] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 1970, ap++;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = [[ap + -32] + 6], ap++;
[ap + 0] = [[ap + -33] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
call rel 93767;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -29] + 12170, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 30;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 14230, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 47;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 26260, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
ret;
[ap + 0] = [fp + -21], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = 5807899970288901803324239333710, ap++;
call rel -2387;
jmp rel 1222 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = 7021320231821291044729975883292901210285196230045550926, ap++;
call rel -2395;
[ap + 0] = [fp + -20], ap++;
jmp rel 1202 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -19] + 0];
[ap + -4] = [[fp + -19] + 1];
[ap + -3] = [[fp + -19] + 2];
[ap + -2] = [[fp + -19] + 3];
[fp + -18] = [[fp + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -19]) %}
[ap + 0] = [[fp + -19] + 6], ap++;
jmp rel 1174 if [ap + -1] != 0;
[ap + 0] = [[fp + -19] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -19] + 7];
[ap + -4] = [[fp + -19] + 8];
[ap + -3] = [[fp + -19] + 9];
[ap + -2] = [[fp + -19] + 10];
[fp + -17] = [[fp + -19] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -19] + 7) %}
[ap + 0] = [[fp + -19] + 13], ap++;
jmp rel 1145 if [ap + -1] != 0;
[ap + 0] = [[fp + -19] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -19] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -24] + 0], ap++;
[ap + -4] = [[ap + -25] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -26] + 2];
jmp rel 1107;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -23] + 0], ap++;
[ap + -3] = [[ap + -24] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -25] + 2];
[fp + -16] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 205;
call rel 93659;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [ap + -213] + 275010, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 1092;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 1047;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -15] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 195;
call rel 93617;
[ap + 0] = [ap + -203], ap++;
[ap + 0] = [ap + -203] + 273600, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 1032;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 987;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -14] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 185;
call rel 93575;
[ap + 0] = [ap + -193], ap++;
[ap + 0] = [ap + -193] + 272190, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 972;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 927;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -13] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 175;
call rel 93533;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = [ap + -183] + 270780, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 912;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 867;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -12] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 165;
call rel 93491;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -173] + 269370, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 852;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 807;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -11] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 155;
call rel 93449;
[ap + 0] = [ap + -163], ap++;
[ap + 0] = [ap + -163] + 267960, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 792;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 747;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -10] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 145;
call rel 93407;
[ap + 0] = [ap + -153], ap++;
[ap + 0] = [ap + -153] + 266550, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 732;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -74] + 0];
[ap + -4] = [[ap + -74] + 1];
[ap + -3] = [[ap + -74] + 2];
[ap + -2] = [[ap + -74] + 3];
[fp + -16] = [[ap + -74] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -74]) %}
[ap + 0] = [[ap + -74] + 6], ap++;
jmp rel 694 if [ap + -1] != 0;
[ap + 0] = [[ap + -75] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1526171809504728374681023080986779835603913378952539665964907005446042711382, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -80] + 7];
[ap + -4] = [[ap + -80] + 8];
[ap + -3] = [[ap + -80] + 9];
[ap + -2] = [[ap + -80] + 10];
[fp + -15] = [[ap + -80] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -80] + 7) %}
[ap + 0] = [[ap + -80] + 13], ap++;
jmp rel 665 if [ap + -1] != 0;
[ap + 0] = [[ap + -81] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -86] + 14];
[ap + -4] = [[ap + -86] + 15];
[ap + -3] = [[ap + -86] + 16];
[ap + -2] = [[ap + -86] + 17];
[fp + -14] = [[ap + -86] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -86] + 14) %}
[ap + 0] = [[ap + -86] + 20], ap++;
jmp rel 636 if [ap + -1] != 0;
[ap + 0] = [[ap + -87] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 434428485796416085034498104175908286789185203756459893121763025398211911987, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -92] + 21];
[ap + -4] = [[ap + -92] + 22];
[ap + -3] = [[ap + -92] + 23];
[ap + -2] = [[ap + -92] + 24];
[fp + -13] = [[ap + -92] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -92] + 21) %}
[ap + 0] = [[ap + -92] + 27], ap++;
jmp rel 607 if [ap + -1] != 0;
[ap + 0] = [[ap + -93] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -98] + 28];
[ap + -4] = [[ap + -98] + 29];
[ap + -3] = [[ap + -98] + 30];
[ap + -2] = [[ap + -98] + 31];
[fp + -12] = [[ap + -98] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -98] + 28) %}
[ap + 0] = [[ap + -98] + 34], ap++;
jmp rel 578 if [ap + -1] != 0;
[ap + 0] = [[ap + -99] + 33], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -104] + 35];
[ap + -4] = [[ap + -104] + 36];
[ap + -3] = [[ap + -104] + 37];
[ap + -2] = [[ap + -104] + 38];
[fp + -11] = [[ap + -104] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -104] + 35) %}
[ap + 0] = [[ap + -104] + 41], ap++;
jmp rel 549 if [ap + -1] != 0;
[ap + 0] = [[ap + -105] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 523410893316558122378830306191683135863976721326799590270659346354002858736, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -110] + 42];
[ap + -4] = [[ap + -110] + 43];
[ap + -3] = [[ap + -110] + 44];
[ap + -2] = [[ap + -110] + 45];
[fp + -10] = [[ap + -110] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -110] + 42) %}
[ap + 0] = [[ap + -110] + 48], ap++;
jmp rel 520 if [ap + -1] != 0;
[ap + 0] = [[ap + -111] + 47], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 760565771580090624121121792023365464265448761272770967981882436800089234901, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -116] + 49];
[ap + -4] = [[ap + -116] + 50];
[ap + -3] = [[ap + -116] + 51];
[ap + -2] = [[ap + -116] + 52];
[fp + -9] = [[ap + -116] + 53];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -116] + 49) %}
[ap + 0] = [[ap + -116] + 55], ap++;
jmp rel 491 if [ap + -1] != 0;
[ap + 0] = [[ap + -117] + 54], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 394323579402937197825070278441497235490914917810450857249771331122744639564, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -122] + 56];
[ap + -4] = [[ap + -122] + 57];
[ap + -3] = [[ap + -122] + 58];
[ap + -2] = [[ap + -122] + 59];
[fp + -8] = [[ap + -122] + 60];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -122] + 56) %}
[ap + 0] = [[ap + -122] + 62], ap++;
jmp rel 462 if [ap + -1] != 0;
[ap + 0] = [[ap + -123] + 61], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 863347913503261957104720878708744394926083541396783723686988354578931871543, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -128] + 63];
[ap + -4] = [[ap + -128] + 64];
[ap + -3] = [[ap + -128] + 65];
[ap + -2] = [[ap + -128] + 66];
[fp + -7] = [[ap + -128] + 67];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -128] + 63) %}
[ap + 0] = [[ap + -128] + 69], ap++;
jmp rel 433 if [ap + -1] != 0;
[ap + 0] = [[ap + -129] + 68], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -135] + 70];
[ap + -5] = [[ap + -135] + 71];
[ap + -4] = [[ap + -135] + 72];
[ap + -3] = [[ap + -135] + 73];
[ap + -2] = [[ap + -135] + 74];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -135] + 70) %}
[ap + 0] = [[ap + -135] + 76], ap++;
jmp rel 402 if [ap + -1] != 0;
[ap + 0] = [[ap + -136] + 75], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -142] + 77];
[ap + -5] = [[ap + -142] + 78];
[ap + -4] = [[ap + -142] + 79];
[ap + -3] = [[ap + -142] + 80];
[ap + -2] = [[ap + -142] + 81];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -142] + 77) %}
[ap + 0] = [[ap + -142] + 83], ap++;
jmp rel 371 if [ap + -1] != 0;
[ap + 0] = [[ap + -143] + 82], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -146] + 84];
[ap + -2] = [[ap + -146] + 85];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -146] + 84) %}
[ap + 0] = [[ap + -146] + 87], ap++;
jmp rel 349 if [ap + -1] != 0;
[ap + 0] = [[ap + -147] + 86], ap++;
[ap + 0] = [[ap + -148] + 88], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -155] + 89];
[ap + -5] = [[ap + -155] + 90];
[ap + -4] = [[ap + -155] + 91];
[ap + -3] = [[ap + -155] + 92];
[ap + -2] = [[ap + -155] + 93];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -155] + 89) %}
[ap + 0] = [[ap + -155] + 95], ap++;
jmp rel 317 if [ap + -1] != 0;
[ap + 0] = [[ap + -156] + 94], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -161] + 96];
[ap + -4] = [[ap + -161] + 97];
[ap + -3] = [[ap + -161] + 98];
[ap + -2] = [[ap + -161] + 99];
[fp + -6] = [[ap + -161] + 100];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -161] + 96) %}
[ap + 0] = [[ap + -161] + 102], ap++;
jmp rel 284 if [ap + -1] != 0;
[ap + 0] = [[ap + -162] + 101], ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -168] + 103];
[ap + -4] = [[ap + -168] + 104];
[ap + -3] = [[ap + -168] + 105];
[ap + -2] = [[ap + -168] + 106];
[fp + -5] = [[ap + -168] + 107];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -168] + 103) %}
[ap + 0] = [[ap + -168] + 109], ap++;
jmp rel 255 if [ap + -1] != 0;
[ap + 0] = [[ap + -169] + 108], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -175] + 110];
[ap + -5] = [[ap + -175] + 111];
[ap + -4] = [[ap + -175] + 112];
[ap + -3] = [[ap + -175] + 113];
[ap + -2] = [[ap + -175] + 114];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -175] + 110) %}
[ap + 0] = [[ap + -175] + 116], ap++;
jmp rel 220 if [ap + -1] != 0;
[ap + 0] = [[ap + -176] + 115], ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -183] + 117];
[ap + -5] = [[ap + -183] + 118];
[ap + -4] = [[ap + -183] + 119];
[ap + -3] = [[ap + -183] + 120];
[ap + -2] = [[ap + -183] + 121];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -183] + 117) %}
[ap + 0] = [[ap + -183] + 123], ap++;
jmp rel 189 if [ap + -1] != 0;
[ap + 0] = [[ap + -184] + 122], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -187] + 124];
[ap + -2] = [[ap + -187] + 125];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -187] + 124) %}
[ap + 0] = [[ap + -187] + 127], ap++;
jmp rel 167 if [ap + -1] != 0;
[ap + 0] = [[ap + -188] + 126], ap++;
[ap + 0] = [[ap + -189] + 128], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 698825930367399625235315650030086715175536112812254075365890532169265202282, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -196] + 129];
[ap + -5] = [[ap + -196] + 130];
[ap + -4] = [[ap + -196] + 131];
[ap + -3] = [[ap + -196] + 132];
[ap + -2] = [[ap + -196] + 133];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -196] + 129) %}
[ap + 0] = [[ap + -196] + 135], ap++;
jmp rel 135 if [ap + -1] != 0;
[ap + 0] = [[ap + -197] + 134], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -202] + 136];
[ap + -4] = [[ap + -202] + 137];
[ap + -3] = [[ap + -202] + 138];
[ap + -2] = [[ap + -202] + 139];
[fp + -4] = [[ap + -202] + 140];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -202] + 136) %}
[ap + 0] = [[ap + -202] + 142], ap++;
jmp rel 102 if [ap + -1] != 0;
[ap + 0] = [[ap + -203] + 141], ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -209] + 143];
[ap + -4] = [[ap + -209] + 144];
[ap + -3] = [[ap + -209] + 145];
[ap + -2] = [[ap + -209] + 146];
[fp + -3] = [[ap + -209] + 147];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -209] + 143) %}
[ap + 0] = [[ap + -209] + 149], ap++;
jmp rel 73 if [ap + -1] != 0;
[ap + 0] = [[ap + -210] + 148], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 424430062299509631194636216159545428754079010585937662617424618645861123492, ap++;
[ap + 0] = 100, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -216] + 150];
[ap + -5] = [[ap + -216] + 151];
[ap + -4] = [[ap + -216] + 152];
[ap + -3] = [[ap + -216] + 153];
[ap + -2] = [[ap + -216] + 154];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -216] + 150) %}
[ap + 0] = [[ap + -216] + 156], ap++;
jmp rel 42 if [ap + -1] != 0;
[ap + 0] = [[ap + -217] + 155], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1186423139533537089827846530073695414305470307342419724096222587041583312528, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -223] + 157];
[ap + -5] = [[ap + -223] + 158];
[ap + -4] = [[ap + -223] + 159];
[ap + -3] = [[ap + -223] + 160];
[ap + -2] = [[ap + -223] + 161];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -223] + 157) %}
[ap + 0] = [[ap + -223] + 163], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -224] + 162], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -227] + 164, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -224] + 162], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -227] + 166, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 164], ap++;
[ap + 0] = [[ap + -230] + 165], ap++;
ret;
ap += 7;
[ap + 0] = [[ap + -224] + 155], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 11130, ap++;
[ap + 0] = [ap + -227] + 159, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 157], ap++;
[ap + 0] = [[ap + -230] + 158], ap++;
ret;
ap += 10;
[ap + 0] = [[ap + -220] + 148], ap++;
[ap + 0] = [ap + -1] + 21900, ap++;
[ap + 0] = [ap + -222] + 152, ap++;
[ap + 0] = [[ap + -223] + 150], ap++;
[ap + 0] = [[ap + -224] + 151], ap++;
jmp rel 11;
ap += 17;
[ap + 0] = [[ap + -220] + 141], ap++;
[ap + 0] = [ap + -1] + 33230, ap++;
[ap + 0] = [ap + -222] + 145, ap++;
[ap + 0] = [[ap + -223] + 143], ap++;
[ap + 0] = [[ap + -224] + 144], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [[ap + -224] + 134], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 44730, ap++;
[ap + 0] = [ap + -227] + 138, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 136], ap++;
[ap + 0] = [[ap + -230] + 137], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -224] + 126], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 56140, ap++;
[ap + 0] = [ap + -227] + 130, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 128], ap++;
[ap + 0] = [[ap + -230] + 129], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -220] + 122], ap++;
[ap + 0] = [ap + -1] + 66340, ap++;
[ap + 0] = [ap + -222] + 126, ap++;
[ap + 0] = [[ap + -223] + 124], ap++;
[ap + 0] = [[ap + -224] + 125], ap++;
jmp rel 11;
ap += 44;
[ap + 0] = [[ap + -220] + 115], ap++;
[ap + 0] = [ap + -1] + 77760, ap++;
[ap + 0] = [ap + -222] + 119, ap++;
[ap + 0] = [[ap + -223] + 117], ap++;
[ap + 0] = [[ap + -224] + 118], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 51;
[ap + 0] = [[ap + -220] + 108], ap++;
[ap + 0] = [ap + -1] + 88890, ap++;
[ap + 0] = [ap + -222] + 112, ap++;
[ap + 0] = [[ap + -223] + 110], ap++;
[ap + 0] = [[ap + -224] + 111], ap++;
jmp rel 11;
ap += 58;
[ap + 0] = [[ap + -220] + 101], ap++;
[ap + 0] = [ap + -1] + 100220, ap++;
[ap + 0] = [ap + -222] + 105, ap++;
[ap + 0] = [[ap + -223] + 103], ap++;
[ap + 0] = [[ap + -224] + 104], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 68;
[ap + 0] = [[ap + -224] + 94], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 111720, ap++;
[ap + 0] = [ap + -227] + 98, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 96], ap++;
[ap + 0] = [[ap + -230] + 97], ap++;
ret;
ap += 77;
[ap + 0] = [[ap + -224] + 86], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 123130, ap++;
[ap + 0] = [ap + -227] + 90, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 88], ap++;
[ap + 0] = [[ap + -230] + 89], ap++;
ret;
ap += 81;
[ap + 0] = [[ap + -224] + 82], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 133790, ap++;
[ap + 0] = [ap + -227] + 86, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 84], ap++;
[ap + 0] = [[ap + -230] + 85], ap++;
ret;
ap += 88;
[ap + 0] = [[ap + -224] + 75], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 145020, ap++;
[ap + 0] = [ap + -227] + 79, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 77], ap++;
[ap + 0] = [[ap + -230] + 78], ap++;
ret;
ap += 95;
[ap + 0] = [[ap + -224] + 68], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 156250, ap++;
[ap + 0] = [ap + -227] + 72, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 70], ap++;
[ap + 0] = [[ap + -230] + 71], ap++;
ret;
ap += 101;
[ap + 0] = [[ap + -224] + 61], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 167390, ap++;
[ap + 0] = [ap + -227] + 65, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 63], ap++;
[ap + 0] = [[ap + -230] + 64], ap++;
ret;
ap += 107;
[ap + 0] = [[ap + -224] + 54], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 178530, ap++;
[ap + 0] = [ap + -227] + 58, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 56], ap++;
[ap + 0] = [[ap + -230] + 57], ap++;
ret;
ap += 113;
[ap + 0] = [[ap + -224] + 47], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 189670, ap++;
[ap + 0] = [ap + -227] + 51, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 49], ap++;
[ap + 0] = [[ap + -230] + 50], ap++;
ret;
ap += 119;
[ap + 0] = [[ap + -224] + 40], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 200810, ap++;
[ap + 0] = [ap + -227] + 44, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 42], ap++;
[ap + 0] = [[ap + -230] + 43], ap++;
ret;
ap += 125;
[ap + 0] = [[ap + -224] + 33], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 211950, ap++;
[ap + 0] = [ap + -227] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 35], ap++;
[ap + 0] = [[ap + -230] + 36], ap++;
ret;
ap += 131;
[ap + 0] = [[ap + -224] + 26], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 223090, ap++;
[ap + 0] = [ap + -227] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 28], ap++;
[ap + 0] = [[ap + -230] + 29], ap++;
ret;
ap += 137;
[ap + 0] = [[ap + -224] + 19], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 234230, ap++;
[ap + 0] = [ap + -227] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 21], ap++;
[ap + 0] = [[ap + -230] + 22], ap++;
ret;
ap += 143;
[ap + 0] = [[ap + -224] + 12], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 245370, ap++;
[ap + 0] = [ap + -227] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 14], ap++;
[ap + 0] = [[ap + -230] + 15], ap++;
ret;
ap += 149;
[ap + 0] = [[ap + -224] + 5], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -2] + 256510, ap++;
[ap + 0] = [ap + -227] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -229] + 7], ap++;
[ap + 0] = [[ap + -230] + 8], ap++;
ret;
ap += 147;
call rel 92685;
[ap + 0] = [ap + -163] + 3, ap++;
[ap + 0] = [ap + -161] + 266830, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -227], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 157;
call rel 92667;
[ap + 0] = [ap + -173] + 3, ap++;
[ap + 0] = [ap + -171] + 268240, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -227], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 167;
call rel 92649;
[ap + 0] = [ap + -183] + 3, ap++;
[ap + 0] = [ap + -181] + 269650, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -227], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 177;
call rel 92631;
[ap + 0] = [ap + -193] + 3, ap++;
[ap + 0] = [ap + -191] + 271060, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -227], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 187;
call rel 92613;
[ap + 0] = [ap + -203] + 3, ap++;
[ap + 0] = [ap + -201] + 272470, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -227], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 197;
call rel 92595;
[ap + 0] = [ap + -213] + 3, ap++;
[ap + 0] = [ap + -211] + 273880, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -227], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 207;
call rel 92577;
[ap + 0] = [ap + -239] + 3, ap++;
[ap + 0] = [ap + -221] + 275290, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -227], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 226;
[ap + 0] = [[fp + -19] + 12], ap++;
[ap + 0] = [ap + -243], ap++;
[ap + 0] = [ap + -2] + 277610, ap++;
[ap + 0] = [fp + -19] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -19] + 14], ap++;
[ap + 0] = [[fp + -19] + 15], ap++;
ret;
ap += 232;
[ap + 0] = [[fp + -19] + 5], ap++;
[ap + 0] = [ap + -243], ap++;
[ap + 0] = [ap + -2] + 288750, ap++;
[ap + 0] = [fp + -19] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -19] + 7], ap++;
[ap + 0] = [[fp + -19] + 8], ap++;
ret;
ap += 238;
[ap + 0] = [ap + -243], ap++;
[ap + 0] = [ap + -240] + 299890, ap++;
[ap + 0] = [fp + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -245], ap++;
[ap + 0] = [ap + -245], ap++;
ret;
ap += 273;
[ap + 0] = [ap + -277], ap++;
[ap + 0] = [fp + -20] + 304460, ap++;
[ap + 0] = [fp + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -279], ap++;
[ap + 0] = [ap + -279], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 256 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 223 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 191;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 165 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
[fp + -3] = [[ap + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 6], ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 21, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 92531;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -52] + 7];
[ap + -2] = [[ap + -52] + 8];
[ap + -6] = [[ap + -52] + 9];
[ap + -5] = [[ap + -52] + 10];
[ap + -4] = [[ap + -52] + 11];
[ap + -3] = [[ap + -52] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -52] + 7) %}
[ap + 0] = [[ap + -52] + 14], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -53] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -56] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -53] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -56] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -58] + 15], ap++;
[ap + 0] = [[ap + -59] + 16], ap++;
ret;
ap += 40;
[ap + 0] = [[ap + -53] + 5], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 15300, ap++;
[ap + 0] = [ap + -56] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -58] + 7], ap++;
[ap + 0] = [[ap + -59] + 8], ap++;
ret;
ap += 35;
call rel 92291;
[ap + 0] = [ap + -58] + 3, ap++;
[ap + 0] = [ap + -49] + 25150, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 50;
[ap + 0] = [[ap + -65] + 4], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -2] + 27210, ap++;
[ap + 0] = [ap + -68] + 8, ap++;
[ap + 0] = [[ap + -69] + 6], ap++;
[ap + 0] = [[ap + -70] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 50;
call rel 92251;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58] + 37510, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 52;
call rel 92248;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -66] + 37590, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 67;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 39650, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 79;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 51330, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 92154;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 242 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 202 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 2];
jmp rel 163;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 130 if [ap + -3] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
[fp + -3] = [[ap + -24] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 6], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 92182;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -64] + 7];
[ap + -2] = [[ap + -64] + 8];
[ap + -6] = [[ap + -64] + 9];
[ap + -5] = [[ap + -64] + 10];
[ap + -4] = [[ap + -64] + 11];
[ap + -3] = [[ap + -64] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -64] + 7) %}
[ap + 0] = [[ap + -64] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -65] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -65] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 15], ap++;
[ap + 0] = [[ap + -72] + 16], ap++;
ret;
ap += 40;
[ap + 0] = [[ap + -65] + 5], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 15300, ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 7], ap++;
[ap + 0] = [[ap + -72] + 8], ap++;
ret;
ap += 39;
call rel 124108;
[ap + 0] = [ap + -1] + 124107, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26320, ap++;
call rel 91922;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -53] + [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 41;
call rel 124089;
[ap + 0] = [ap + -1] + 124088, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26400, ap++;
call rel 91912;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -61] + [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 56;
[ap + 0] = [[fp + -5] + 9], ap++;
call rel 124068;
[ap + 0] = [ap + -1] + 124067, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28460, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 19;
ap += 68;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 124049;
[ap + 0] = [ap + -1] + 124048, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40140, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 30 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 640, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 242 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 202 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 2];
jmp rel 163;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 130 if [ap + -3] != 0;
[ap + 0] = 1090654979984666118274814236676208321276316261611326539512404368163006837786, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
[fp + -3] = [[ap + -24] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 6], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 91818;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -64] + 7];
[ap + -2] = [[ap + -64] + 8];
[ap + -6] = [[ap + -64] + 9];
[ap + -5] = [[ap + -64] + 10];
[ap + -4] = [[ap + -64] + 11];
[ap + -3] = [[ap + -64] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -64] + 7) %}
[ap + 0] = [[ap + -64] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -65] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -65] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 15], ap++;
[ap + 0] = [[ap + -72] + 16], ap++;
ret;
ap += 40;
[ap + 0] = [[ap + -65] + 5], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 15300, ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 7], ap++;
[ap + 0] = [[ap + -72] + 8], ap++;
ret;
ap += 39;
call rel 123744;
[ap + 0] = [ap + -1] + 123743, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26320, ap++;
call rel 91558;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -53] + [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 41;
call rel 123725;
[ap + 0] = [ap + -1] + 123724, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26400, ap++;
call rel 91548;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -61] + [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 56;
[ap + 0] = [[fp + -5] + 9], ap++;
call rel 123704;
[ap + 0] = [ap + -1] + 123703, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28460, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 19;
ap += 68;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 123685;
[ap + 0] = [ap + -1] + 123684, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40140, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1090654979984666118274814236676208321276316261611326539512404368163006837786, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 30 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 640, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -10] = [[fp + -8] + 1];
[ap + -3] = [[fp + -8] + 2];
[ap + -2] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 742 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 715 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 678 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 634 if [ap + -1] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -7] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 0], ap++;
[ap + -4] = [[fp + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -11] + 1], ap++;
[ap + -7] = [[fp + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 557 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 530 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -5025;
[ap + 0] = [ap + -41], ap++;
jmp rel 501 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 5807899970288901803406028129614, ap++;
call rel -4830;
[ap + 0] = [ap + -35], ap++;
jmp rel 471 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 25 if [fp + -3] != 0;
ap += 393;
call rel 123437;
[ap + 0] = [ap + -1] + 123436, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 287610, ap++;
call rel 91831;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = [ap + -408] + [ap + -8], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -488], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
jmp rel 25 if [fp + -4] != 0;
ap += 392;
call rel 123411;
[ap + 0] = [ap + -1] + 123410, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 287420, ap++;
call rel 91814;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = [ap + -407] + [ap + -8], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -488], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -82] + 0];
[ap + -2] = [[ap + -82] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -82]) %}
[ap + 0] = [[ap + -82] + 3], ap++;
jmp rel 388 if [ap + -1] != 0;
[ap + 0] = [[ap + -83] + 2], ap++;
[ap + 0] = [[ap + -84] + 4], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -88] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
call rel -4725;
jmp rel 355 if [ap + -3] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[ap + -6] + 0];
[fp + -7] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -5] = [[ap + -18] + 1];
[ap + -4] = [[ap + -18] + 2];
[ap + -6] = [[ap + -18] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 5], ap++;
jmp rel 280 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 4], ap++;
[ap + 0] = [[ap + -20] + 6], ap++;
[ap + 0] = [ap + -21] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 255 if [ap + -3] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -9] + 0];
[fp + -7] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -5] = [[ap + -16] + 1];
[ap + -4] = [[ap + -16] + 2];
[ap + -6] = [[ap + -16] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 5], ap++;
jmp rel 191 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 4], ap++;
[ap + 0] = [[ap + -18] + 6], ap++;
[ap + 0] = [ap + -19] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 265;
call rel 91662;
[ap + 0] = [ap + -282], ap++;
[ap + 0] = [ap + -276] + 197430, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -280], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -4308;
jmp rel 135 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -2] = [[ap + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 3], ap++;
jmp rel 113 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 2], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -16] + 5];
[ap + -7] = [[ap + -16] + 6];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16] + 5) %}
[ap + 0] = [[ap + -16] + 8], ap++;
jmp rel 84 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 7], ap++;
[ap + 0] = [[ap + -18] + 9], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -21] + 10, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -3636;
jmp rel 60 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -83], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 91184;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -42] + 0];
[ap + -2] = [[ap + -42] + 1];
[ap + -6] = [[ap + -42] + 2];
[ap + -5] = [[ap + -42] + 3];
[ap + -4] = [[ap + -42] + 4];
[ap + -3] = [[ap + -42] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42]) %}
[ap + 0] = [[ap + -42] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -47] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -47] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -49] + 8], ap++;
[ap + 0] = [[ap + -50] + 9], ap++;
ret;
ap += 40;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -46] + 15300, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
ret;
ap += 111;
[ap + 0] = [[ap + -128] + 7], ap++;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = [ap + -2] + 65250, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -132] + 11, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -134] + 9], ap++;
[ap + 0] = [[ap + -135] + 10], ap++;
ret;
ap += 121;
[ap + 0] = [[ap + -128] + 2], ap++;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = [ap + -2] + 76450, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -132] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -134] + 4], ap++;
[ap + 0] = [[ap + -135] + 5], ap++;
ret;
ap += 125;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = [ap + -131] + 87110, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -132], ap++;
ret;
ap += 278;
[ap + 0] = [[ap + -295] + 4], ap++;
[ap + 0] = [ap + -282], ap++;
[ap + 0] = [ap + -2] + 199000, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -299] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -301] + 6], ap++;
[ap + 0] = [[ap + -302] + 7], ap++;
ret;
ap += 278;
call rel 123058;
[ap + 0] = [ap + -1] + 123057, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 210010, ap++;
call rel 90971;
[ap + 0] = [ap + -291] + [ap + -7], ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 18;
ap += 287;
[ap + 0] = [[ap + -306] + 4], ap++;
call rel 123039;
[ap + 0] = [ap + -1] + 123038, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 211120, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -314] + 8, ap++;
[ap + 0] = [[ap + -315] + 6], ap++;
[ap + 0] = [[ap + -316] + 7], ap++;
[ap + 0] = [ap + -301], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -304], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 306;
call rel 123015;
[ap + 0] = [ap + -1] + 123014, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 224040, ap++;
[ap + 0] = [ap + -320], ap++;
[ap + 0] = [ap + -320] + [ap + -2], ap++;
[ap + 0] = [ap + -320], ap++;
[ap + 0] = [ap + -320], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -320], ap++;
[ap + 0] = [ap + -320], ap++;
ret;
ap += 394;
[ap + 0] = [[ap + -477] + 2], ap++;
call rel 122993;
[ap + 0] = [ap + -1] + 122992, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 277400, ap++;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -488] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -490] + 4], ap++;
[ap + 0] = [[ap + -491] + 5], ap++;
ret;
ap += 400;
call rel 122971;
[ap + 0] = [ap + -1] + 122970, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 288440, ap++;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = [ap + -409] + [ap + -2], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -488], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -415], ap++;
[ap + 0] = [ap + -415], ap++;
ret;
ap += 435;
call rel 122950;
[ap + 0] = [ap + -1] + 122949, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 293010, ap++;
[ap + 0] = [ap + -447], ap++;
[ap + 0] = [ap + -444] + [ap + -2], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -488], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -450], ap++;
[ap + 0] = [ap + -450], ap++;
ret;
ap += 466;
call rel 122929;
[ap + 0] = [ap + -1] + 122928, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 297720, ap++;
call rel 90930;
[ap + 0] = [ap + -480] + [ap + -7], ap++;
[ap + 0] = [ap + -482], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 475;
[ap + 0] = [[ap + -496] + 4], ap++;
call rel 122908;
[ap + 0] = [ap + -1] + 122907, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 298830, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -505] + 8, ap++;
[ap + 0] = [[ap + -506] + 6], ap++;
[ap + 0] = [[ap + -507] + 7], ap++;
[ap + 0] = [ap + -490], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 489;
call rel 122882;
[ap + 0] = [ap + -1] + 122881, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 311200, ap++;
call rel 91303;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -507] + [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -511], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 502;
[ap + 0] = [[ap + -509] + 4], ap++;
call rel 122858;
[ap + 0] = [ap + -1] + 122857, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 312770, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -520] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -522] + 6], ap++;
[ap + 0] = [[ap + -523] + 7], ap++;
ret;
ap += 498;
call rel 122836;
[ap + 0] = [ap + -1] + 122835, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 322710, ap++;
call rel 90666;
[ap + 0] = [ap + -512] + [ap + -7], ap++;
[ap + 0] = [ap + -514], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 507;
[ap + 0] = [[fp + -8] + 4], ap++;
call rel 122815;
[ap + 0] = [ap + -1] + 122814, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 323820, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 396 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -9] = [[fp + -7] + 6];
[ap + -8] = [[fp + -7] + 7];
[ap + -7] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 356 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 317;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 284 if [ap + -3] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 5], ap++;
jmp rel 220 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 56;
call rel 91097;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -67] + 17790, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 0];
jmp rel 49;
[ap + -1] = [[ap + -15] + 0];
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 27 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 11;
[ap + -1] = [[ap + -6] + 0];
ap += 44;
[ap + 0] = [ap + -50] + 1, ap++;
[ap + 0] = [ap + -48] + 16170, ap++;
jmp rel 12;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 24;
ap += 48;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -50] + 16800, ap++;
call rel 91047;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -7] + 0], ap++;
[ap + -4] = [[ap + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -9] + 2];
jmp rel 90;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -6] + 0], ap++;
[ap + -3] = [[ap + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -8] + 2];
[fp + -5] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [ap + -9] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 16 if [ap + -3] != 0;
ap += 34;
call rel 90953;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42] + 14660, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 37, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 90535;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -66] + 0];
[ap + -2] = [[ap + -66] + 1];
[ap + -6] = [[ap + -66] + 2];
[ap + -5] = [[ap + -66] + 3];
[ap + -4] = [[ap + -66] + 4];
[ap + -3] = [[ap + -66] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -66]) %}
[ap + 0] = [[ap + -66] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -67] + 6], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -67] + 6], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -73] + 8], ap++;
[ap + 0] = [[ap + -74] + 9], ap++;
ret;
ap += 36;
call rel 90333;
[ap + 0] = [ap + -51] + 3, ap++;
[ap + 0] = [ap + -51] + 14840, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 69;
[ap + 0] = [[ap + -94] + 4], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 19360, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -98] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -100] + 6], ap++;
[ap + 0] = [[ap + -101] + 7], ap++;
ret;
ap += 68;
call rel 122446;
[ap + 0] = [ap + -1] + 122445, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 30280, ap++;
call rel 90260;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -82] + [ap + -8], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 70;
call rel 122427;
[ap + 0] = [ap + -1] + 122426, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 30360, ap++;
call rel 90250;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -90] + [ap + -8], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 85;
[ap + 0] = [[fp + -7] + 9], ap++;
call rel 122406;
[ap + 0] = [ap + -1] + 122405, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 32420, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
jmp rel 19;
ap += 97;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 122387;
[ap + 0] = [ap + -1] + 122386, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 44100, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -7] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 0], ap++;
[ap + -4] = [[fp + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -11] + 1], ap++;
[ap + -7] = [[fp + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -10] = [[fp + -8] + 1];
[ap + -4] = [[fp + -8] + 2];
[ap + -5] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 148 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 49;
call rel 90732;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -60] + 36610, ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -2] = [[ap + -8] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 3], ap++;
jmp rel 91 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -18] + 5];
[ap + -7] = [[ap + -18] + 6];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18] + 5) %}
[ap + 0] = [[ap + -18] + 8], ap++;
jmp rel 62 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 7], ap++;
[ap + 0] = [[ap + -20] + 9], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 35, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 90255;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -59] + 10];
[ap + -2] = [[ap + -59] + 11];
[ap + -6] = [[ap + -59] + 12];
[ap + -5] = [[ap + -59] + 13];
[ap + -4] = [[ap + -59] + 14];
[ap + -3] = [[ap + -59] + 15];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -59] + 10) %}
[ap + 0] = [[ap + -59] + 17], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -60] + 16], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -64] + 18, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -60] + 16], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -64] + 20, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -66] + 18], ap++;
[ap + 0] = [[ap + -67] + 19], ap++;
ret;
ap += 41;
[ap + 0] = [[ap + -60] + 7], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2] + 15390, ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -64] + 11, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -66] + 9], ap++;
[ap + 0] = [[ap + -67] + 10], ap++;
ret;
ap += 51;
[ap + 0] = [[ap + -60] + 2], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2] + 26590, ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -64] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -66] + 4], ap++;
[ap + 0] = [[ap + -67] + 5], ap++;
ret;
ap += 62;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2] + 38180, ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 273 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -9] = [[fp + -7] + 6];
[ap + -8] = [[fp + -7] + 7];
[ap + -7] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 233 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 194;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 161 if [ap + -3] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 5], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 34;
call rel 90461;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -45] + 14660, ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 33, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 90007;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -49] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -49] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -51] + 8], ap++;
[ap + 0] = [[ap + -52] + 9], ap++;
ret;
ap += 47;
[ap + 0] = [[ap + -72] + 4], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2] + 16230, ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -76] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -78] + 6], ap++;
[ap + 0] = [[ap + -79] + 7], ap++;
ret;
ap += 46;
call rel 121933;
[ap + 0] = [ap + -1] + 121932, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 27150, ap++;
call rel 89747;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60] + [ap + -8], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 48;
call rel 121914;
[ap + 0] = [ap + -1] + 121913, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 27230, ap++;
call rel 89737;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -68] + [ap + -8], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 63;
[ap + 0] = [[fp + -7] + 9], ap++;
call rel 121893;
[ap + 0] = [ap + -1] + 121892, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 29290, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
jmp rel 19;
ap += 75;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 121874;
[ap + 0] = [ap + -1] + 121873, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40970, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 61 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 31, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 89839;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -2] = [[fp + -6] + 6];
[ap + -6] = [[fp + -6] + 7];
[ap + -5] = [[fp + -6] + 8];
[ap + -4] = [[fp + -6] + 9];
[ap + -3] = [[fp + -6] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -6] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = [[fp + -6] + 14], ap++;
ret;
ap += 41;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [ap + -1] + 15390, ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -12] = [[fp + -10] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 3], ap++;
jmp rel 493 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -10] + 5];
[ap + -9] = [[fp + -10] + 6];
[ap + -8] = [[fp + -10] + 7];
[ap + -7] = [[fp + -10] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 5) %}
[ap + 0] = [[fp + -10] + 10], ap++;
jmp rel 451 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [fp + -10] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -13] + 0], ap++;
[ap + -4] = [[fp + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -13] + 2];
jmp rel 410;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -13] + 0], ap++;
[ap + -3] = [[fp + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -13] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 375 if [ap + -3] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -9] = [[fp + -11] + 1];
[ap + 0] = [[fp + -11] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 5], ap++;
jmp rel 304 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 23 if [ap + -1] != 0;
ap += 92;
call rel 121639;
[ap + 0] = [ap + -1] + 121638, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 43290, ap++;
call rel 90071;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [ap + -109] + [ap + -8], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1090654979984666118274814236676208321276316261611326539512404368163006837786, ap++;
[ap + -1] = [[ap + -13] + 0];
[fp + -9] = [[ap + -13] + 1];
[ap + 0] = [[ap + -13] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 198 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 58 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 33, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 89547;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -47] + 8, ap++;
jmp rel 61;
ap += 41;
[ap + 0] = [[ap + -86] + 6], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2] + 15490, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -90] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -92] + 8], ap++;
[ap + 0] = [[ap + -93] + 9], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 27700496323012974, ap++;
[ap + 0] = 510983966385352810443144247626396267, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 89487;
[ap + 0] = [ap + -40] + 100, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 66 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -47] + 8, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 89445;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -38] + 0];
[ap + -39] = [[ap + -38] + 1];
[ap + -5] = [[ap + -38] + 2];
[ap + -4] = [[ap + -38] + 3];
[ap + -3] = [[ap + -38] + 4];
[ap + -2] = [[ap + -38] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -38]) %}
[ap + 0] = [[ap + -38] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -39] + 6], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -43] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -39] + 6], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -43] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -45] + 8], ap++;
[ap + 0] = [[ap + -46] + 9], ap++;
ret;
ap += 41;
[ap + 0] = [[ap + -86] + 6], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2] + 15390, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -90] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -92] + 8], ap++;
[ap + 0] = [[ap + -93] + 9], ap++;
ret;
ap += 88;
[ap + 0] = [[ap + -109] + 4], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2] + 31820, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -113] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -115] + 6], ap++;
[ap + 0] = [[ap + -116] + 7], ap++;
ret;
ap += 105;
[ap + 0] = [[ap + -130] + 4], ap++;
call rel 121357;
[ap + 0] = [ap + -1] + 121356, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 44860, ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -140] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -142] + 6], ap++;
[ap + 0] = [[ap + -143] + 7], ap++;
ret;
ap += 109;
call rel 121337;
[ap + 0] = [ap + -1] + 121336, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 56230, ap++;
call rel 89149;
[ap + 0] = [ap + -124], ap++;
[ap + 0] = [ap + -124] + [ap + -8], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 111;
call rel 121316;
[ap + 0] = [ap + -1] + 121315, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 56310, ap++;
call rel 89137;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [ap + -132] + [ap + -8], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 126;
[ap + 0] = [[fp + -10] + 9], ap++;
call rel 121293;
[ap + 0] = [ap + -1] + 121292, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 58370, ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -10] + 13, ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [[fp + -10] + 12], ap++;
jmp rel 21;
ap += 138;
[ap + 0] = [[fp + -10] + 2], ap++;
call rel 121272;
[ap + 0] = [ap + -1] + 121271, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 70050, ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -10] + 6, ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -12] = [[fp + -10] + 1];
[ap + -3] = [[fp + -10] + 2];
[ap + -2] = [[fp + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 5], ap++;
jmp rel 979 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [[fp + -10] + 6], ap++;
[ap + 0] = [fp + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 952 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 915 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 871 if [ap + -1] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -6] = [[fp + -11] + 1];
[ap + 0] = [[fp + -11] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -13] + 0], ap++;
[ap + -4] = [[fp + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -13] + 1], ap++;
[ap + -7] = [[fp + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 796 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 771 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
call rel -7349;
[ap + 0] = [ap + -41], ap++;
jmp rel 744 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 20 if [fp + -7] != 0;
ap += 419;
call rel 121122;
[ap + 0] = [ap + -1] + 121121, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 228710, ap++;
call rel 89044;
[ap + 0] = [ap + -437], ap++;
[ap + 0] = [ap + -433] + [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 714;
[ap + 0] = [ap + -1], ap++;
%{ memory[ap + 0] = (memory[fp + -7] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -7] = [[ap + -8] + 0];
[ap + 0] = [fp + -7] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -9] + 420, ap++;
[ap + 0] = [fp + -7], ap++;
jmp rel 7;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 26, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 648;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 35, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 1];
jmp rel 621;
[ap + -1] = [[ap + -10] + 1];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20 if [fp + -7] != 0;
ap += 399;
call rel 121039;
[ap + 0] = [ap + -1] + 121038, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 225960, ap++;
call rel 88970;
[ap + 0] = [ap + -413], ap++;
[ap + 0] = [ap + -413] + [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 631;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 24944740430830204917384312225949778138452, ap++;
call rel -7258;
[ap + 0] = [ap + -35], ap++;
jmp rel 569 if [ap + -4] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 530;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[fp + -3] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 23 if [ap + -3] != 0;
ap += 358;
call rel 120981;
[ap + 0] = [ap + -1] + 120980, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 220440, ap++;
call rel 89377;
[ap + 0] = [ap + -372], ap++;
[ap + 0] = [ap + -372] + [ap + -8], ap++;
[ap + 0] = [ap + -487], ap++;
[ap + 0] = [ap + -482], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 63;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 34 if [fp + -4] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 18;
[ap + -1] = [[ap + -6] + 0];
ap += 346;
call rel 120931;
[ap + 0] = [ap + -1] + 120930, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 218820, ap++;
[ap + 0] = [ap + -358] + 1, ap++;
[ap + 0] = [ap + -356] + [ap + -2], ap++;
jmp rel 19;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 31;
ap += 350;
call rel 120911;
[ap + 0] = [ap + -1] + 120910, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 219450, ap++;
[ap + 0] = [ap + -358], ap++;
[ap + 0] = [ap + -358] + [ap + -2], ap++;
call rel 89359;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -487], ap++;
[ap + 0] = [ap + -482], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -129] + 0];
[fp + -6] = [[ap + -129] + 1];
[ap + 0] = [[ap + -129] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -138] + 3, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -135] + 0];
[ap + -14] = [[ap + -135] + 1];
[ap + -4] = [[ap + -135] + 2];
[ap + -5] = [[ap + -135] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -135]) %}
[ap + 0] = [[ap + -135] + 5], ap++;
jmp rel 354 if [ap + -1] != 0;
[ap + 0] = [[ap + -136] + 4], ap++;
[ap + 0] = [[ap + -137] + 6], ap++;
[ap + 0] = [ap + -138] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 329;
call rel 89234;
[ap + 0] = [ap + -346], ap++;
[ap + 0] = [ap + -340] + 205680, ap++;
[ap + 0] = [ap + -349], ap++;
[ap + 0] = [ap + -344], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
call rel -6736;
jmp rel 298 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -2] = [[ap + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 3], ap++;
jmp rel 276 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 2], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [fp + -9] + [fp + -8], ap++;
[ap + 0] = [ap + -1] + [fp + -7], ap++;
[ap + 0] = [ap + -1] + [fp + -6], ap++;
[ap + 0] = [ap + -1] + [fp + -3], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -17] + 5, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [[ap + -11] + 0], ap++;
[ap + 0] = [[ap + -12] + 1], ap++;
[ap + 0] = [[ap + -13] + 2], ap++;
[ap + 0] = [[ap + -14] + 3], ap++;
[ap + 0] = [[ap + -15] + 4], ap++;
%{ memory[ap + 0] = memory[ap + -8] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -9], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -27] + 0], ap++;
[ap + 3] = [[ap + -28] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -12] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -32] + 2];
jmp rel 219 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -9] = [[ap + -27] + 0];
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
call rel -6092;
jmp rel 194 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 19, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -83], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -15], ap++;
call rel 88725;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 143 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -47] + 8, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -55] + 0], ap++;
[ap + -4] = [[ap + -56] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -57] + 2];
jmp rel 108;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -54] + 0], ap++;
[ap + -3] = [[ap + -55] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -56] + 2];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -62] + 3], ap++;
[ap + -4] = [[ap + -63] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -64] + 5];
jmp rel 68;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -61] + 3], ap++;
[ap + -3] = [[ap + -62] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -63] + 5];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 27, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 88638;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -100] + 6, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -53] + 0];
[ap + -3] = [[ap + -53] + 1];
[ap + -7] = [[ap + -53] + 2];
[ap + -6] = [[ap + -53] + 3];
[ap + -5] = [[ap + -53] + 4];
[ap + -4] = [[ap + -53] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -53]) %}
[ap + 0] = [[ap + -53] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -54] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -349], ap++;
[ap + 0] = [ap + -58] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = [ap + -101], ap++;
ret;
[ap + 0] = [[ap + -54] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -349], ap++;
[ap + 0] = [ap + -58] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -60] + 8], ap++;
[ap + 0] = [[ap + -61] + 9], ap++;
ret;
ap += 34;
call rel 88436;
[ap + 0] = [ap + -104] + 6, ap++;
[ap + 0] = [ap + -48] + 14560, ap++;
[ap + 0] = [ap + -349], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 41;
call rel 88421;
[ap + 0] = [ap + -104] + 3, ap++;
[ap + 0] = [ap + -55] + 15600, ap++;
[ap + 0] = [ap + -349], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 56;
[ap + 0] = [[ap + -101] + 6], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -2] + 17560, ap++;
[ap + 0] = [ap + -349], ap++;
[ap + 0] = [ap + -105] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -107] + 8], ap++;
[ap + 0] = [[ap + -108] + 9], ap++;
ret;
ap += 98;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -104] + 33140, ap++;
[ap + 0] = [ap + -349], ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = [ap + -105], ap++;
ret;
ap += 157;
call rel 88380;
[ap + 0] = [ap + -195] + 3, ap++;
[ap + 0] = [ap + -176] + 81370, ap++;
[ap + 0] = [ap + -349], ap++;
[ap + 0] = [ap + -179], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 185;
[ap + 0] = [[ap + -192] + 2], ap++;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = [ap + -2] + 84700, ap++;
[ap + 0] = [ap + -349], ap++;
[ap + 0] = [ap + -196] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -198] + 4], ap++;
[ap + 0] = [[ap + -199] + 5], ap++;
ret;
ap += 189;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = [ap + -195] + 95360, ap++;
[ap + 0] = [ap + -349], ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = [ap + -196], ap++;
ret;
ap += 342;
[ap + 0] = [[ap + -478] + 4], ap++;
[ap + 0] = [ap + -346], ap++;
[ap + 0] = [ap + -2] + 207250, ap++;
[ap + 0] = [ap + -349], ap++;
[ap + 0] = [ap + -482] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -484] + 6], ap++;
[ap + 0] = [[ap + -485] + 7], ap++;
ret;
ap += 360;
call rel 120467;
[ap + 0] = [ap + -1] + 120466, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 220620, ap++;
call rel 88317;
[ap + 0] = [ap + -385] + 3, ap++;
[ap + 0] = [ap + -380] + [ap + -8], ap++;
[ap + 0] = [ap + -487], ap++;
[ap + 0] = [ap + -482], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 374;
call rel 120445;
[ap + 0] = [ap + -1] + 120444, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 222490, ap++;
[ap + 0] = [ap + -385], ap++;
[ap + 0] = [ap + -382] + [ap + -2], ap++;
[ap + 0] = [ap + -487], ap++;
[ap + 0] = [ap + -482], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -388], ap++;
[ap + 0] = [ap + -388], ap++;
ret;
ap += 398;
call rel 120426;
[ap + 0] = [ap + -1] + 120425, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 225870, ap++;
[ap + 0] = [ap + -415] + 2, ap++;
[ap + 0] = [ap + -409] + [ap + -2], ap++;
jmp rel 15;
ap += 402;
call rel 120411;
[ap + 0] = [ap + -1] + 120410, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 226500, ap++;
[ap + 0] = [ap + -415] + 1, ap++;
[ap + 0] = [ap + -415] + [ap + -2], ap++;
call rel 88348;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -487], ap++;
[ap + 0] = [ap + -482], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 430;
call rel 120383;
[ap + 0] = [ap + -1] + 120382, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 230000, ap++;
[ap + 0] = [ap + -441], ap++;
[ap + 0] = [ap + -438] + [ap + -2], ap++;
[ap + 0] = [ap + -487], ap++;
[ap + 0] = [ap + -482], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -444], ap++;
[ap + 0] = [ap + -444], ap++;
ret;
ap += 461;
call rel 120364;
[ap + 0] = [ap + -1] + 120363, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 234710, ap++;
call rel 88367;
[ap + 0] = [ap + -474] + [ap + -7], ap++;
[ap + 0] = [ap + -476], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 18;
ap += 470;
[ap + 0] = [[ap + -491] + 4], ap++;
call rel 120345;
[ap + 0] = [ap + -1] + 120344, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 235820, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -499] + 8, ap++;
[ap + 0] = [[ap + -500] + 6], ap++;
[ap + 0] = [[ap + -501] + 7], ap++;
[ap + 0] = [ap + -484], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -487], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 483;
call rel 120321;
[ap + 0] = [ap + -1] + 120320, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 248100, ap++;
call rel 88742;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -501] + [ap + -8], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -505], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 496;
[ap + 0] = [[ap + -503] + 4], ap++;
call rel 120297;
[ap + 0] = [ap + -1] + 120296, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 249670, ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -514] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -516] + 6], ap++;
[ap + 0] = [[ap + -517] + 7], ap++;
ret;
ap += 492;
call rel 120275;
[ap + 0] = [ap + -1] + 120274, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 259610, ap++;
call rel 88105;
[ap + 0] = [ap + -506] + [ap + -7], ap++;
[ap + 0] = [ap + -508], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 501;
[ap + 0] = [[fp + -10] + 4], ap++;
call rel 120254;
[ap + 0] = [ap + -1] + 120253, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 260720, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [fp + -10] + 8, ap++;
[ap + 0] = [[fp + -10] + 6], ap++;
[ap + 0] = [[fp + -10] + 7], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -11] = [[fp + -9] + 1];
[ap + -3] = [[fp + -9] + 2];
[ap + -2] = [[fp + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 5], ap++;
jmp rel 874 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 6], ap++;
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 847 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 810 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 766 if [ap + -1] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -8] = [[fp + -10] + 1];
[ap + 0] = [[fp + -10] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -12] + 0], ap++;
[ap + -4] = [[fp + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -12] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -12] + 1], ap++;
[ap + -7] = [[fp + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 691 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 666 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -8366;
[ap + 0] = [ap + -41], ap++;
jmp rel 639 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 20 if [fp + -5] != 0;
ap += 373;
call rel 120105;
[ap + 0] = [ap + -1] + 120104, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 222640, ap++;
call rel 88027;
[ap + 0] = [ap + -391], ap++;
[ap + 0] = [ap + -387] + [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 609;
[ap + 0] = [ap + -1], ap++;
%{ memory[ap + 0] = (memory[fp + -5] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -5] = [[ap + -8] + 0];
[ap + 0] = [fp + -5] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -9] + 420, ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 7;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 26, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 543;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 35, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 1];
jmp rel 516;
[ap + -1] = [[ap + -10] + 1];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20 if [fp + -5] != 0;
ap += 353;
call rel 120022;
[ap + 0] = [ap + -1] + 120021, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 219890, ap++;
call rel 87953;
[ap + 0] = [ap + -367], ap++;
[ap + 0] = [ap + -367] + [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 526;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 63;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 34 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 18;
[ap + -1] = [[ap + -6] + 0];
ap += 345;
call rel 119975;
[ap + 0] = [ap + -1] + 119974, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 218730, ap++;
[ap + 0] = [ap + -357] + 1, ap++;
[ap + 0] = [ap + -355] + [ap + -2], ap++;
jmp rel 19;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 31;
ap += 349;
call rel 119955;
[ap + 0] = [ap + -1] + 119954, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 219360, ap++;
[ap + 0] = [ap + -357], ap++;
[ap + 0] = [ap + -357] + [ap + -2], ap++;
call rel 88412;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -441], ap++;
[ap + 0] = [ap + -436], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -84] + 0];
[fp + -8] = [[ap + -84] + 1];
[ap + 0] = [[ap + -84] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -93] + 3, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -90] + 0];
[ap + -14] = [[ap + -90] + 1];
[ap + -4] = [[ap + -90] + 2];
[ap + -5] = [[ap + -90] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -90]) %}
[ap + 0] = [[ap + -90] + 5], ap++;
jmp rel 351 if [ap + -1] != 0;
[ap + 0] = [[ap + -91] + 4], ap++;
[ap + 0] = [[ap + -92] + 6], ap++;
[ap + 0] = [ap + -93] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 328;
call rel 88278;
[ap + 0] = [ap + -345], ap++;
[ap + 0] = [ap + -339] + 205590, ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -343], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -7692;
jmp rel 295 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -2] = [[ap + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 3], ap++;
jmp rel 273 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 2], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [fp + -7] + [fp + -6], ap++;
[ap + 0] = [ap + -1] + [fp + -5], ap++;
[ap + 0] = [ap + -1] + [fp + -8], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -16] + 5, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -10] + 0], ap++;
[ap + 0] = [[ap + -11] + 1], ap++;
[ap + 0] = [[ap + -12] + 2], ap++;
[ap + 0] = [[ap + -13] + 3], ap++;
[ap + 0] = [[ap + -14] + 4], ap++;
%{ memory[ap + 0] = memory[ap + -8] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -9], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -26] + 0], ap++;
[ap + 3] = [[ap + -27] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -12] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -31] + 2];
jmp rel 217 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -9] = [[ap + -26] + 0];
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -7047;
jmp rel 192 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 17, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -83], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -15], ap++;
call rel 87770;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 141 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -47] + 8, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -55] + 0], ap++;
[ap + -4] = [[ap + -56] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -57] + 2];
jmp rel 106;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -54] + 0], ap++;
[ap + -3] = [[ap + -55] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -56] + 2];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -62] + 3], ap++;
[ap + -4] = [[ap + -63] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -64] + 5];
jmp rel 66;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -61] + 3], ap++;
[ap + -3] = [[ap + -62] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -63] + 5];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 27, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -141], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 87685;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -100] + 6, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -53] + 0];
[ap + -3] = [[ap + -53] + 1];
[ap + -7] = [[ap + -53] + 2];
[ap + -6] = [[ap + -53] + 3];
[ap + -5] = [[ap + -53] + 4];
[ap + -4] = [[ap + -53] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -53]) %}
[ap + 0] = [[ap + -53] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -54] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -58] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = [ap + -101], ap++;
ret;
[ap + 0] = [[ap + -54] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -58] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -60] + 8], ap++;
[ap + 0] = [[ap + -61] + 9], ap++;
ret;
ap += 34;
call rel 87483;
[ap + 0] = [ap + -104] + 6, ap++;
[ap + 0] = [ap + -48] + 14560, ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 41;
call rel 87468;
[ap + 0] = [ap + -104] + 3, ap++;
[ap + 0] = [ap + -55] + 15600, ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 56;
[ap + 0] = [[ap + -101] + 6], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -2] + 17560, ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -105] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -107] + 8], ap++;
[ap + 0] = [[ap + -108] + 9], ap++;
ret;
ap += 98;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -104] + 33140, ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = [ap + -105], ap++;
ret;
ap += 157;
call rel 87427;
[ap + 0] = [ap + -194] + 3, ap++;
[ap + 0] = [ap + -176] + 81370, ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -179], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 184;
[ap + 0] = [[ap + -191] + 2], ap++;
[ap + 0] = [ap + -194], ap++;
[ap + 0] = [ap + -2] + 84610, ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -195] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -197] + 4], ap++;
[ap + 0] = [[ap + -198] + 5], ap++;
ret;
ap += 188;
[ap + 0] = [ap + -194], ap++;
[ap + 0] = [ap + -194] + 95270, ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = [ap + -195], ap++;
ret;
ap += 341;
[ap + 0] = [[ap + -432] + 4], ap++;
[ap + 0] = [ap + -345], ap++;
[ap + 0] = [ap + -2] + 207160, ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -436] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -438] + 6], ap++;
[ap + 0] = [[ap + -439] + 7], ap++;
ret;
ap += 352;
call rel 119514;
[ap + 0] = [ap + -1] + 119513, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 219800, ap++;
[ap + 0] = [ap + -369] + 2, ap++;
[ap + 0] = [ap + -363] + [ap + -2], ap++;
jmp rel 15;
ap += 356;
call rel 119499;
[ap + 0] = [ap + -1] + 119498, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 220430, ap++;
[ap + 0] = [ap + -369] + 1, ap++;
[ap + 0] = [ap + -369] + [ap + -2], ap++;
call rel 87436;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -441], ap++;
[ap + 0] = [ap + -436], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 384;
call rel 119471;
[ap + 0] = [ap + -1] + 119470, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 223930, ap++;
[ap + 0] = [ap + -395], ap++;
[ap + 0] = [ap + -392] + [ap + -2], ap++;
[ap + 0] = [ap + -441], ap++;
[ap + 0] = [ap + -436], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -398], ap++;
[ap + 0] = [ap + -398], ap++;
ret;
ap += 415;
call rel 119452;
[ap + 0] = [ap + -1] + 119451, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 228640, ap++;
call rel 87455;
[ap + 0] = [ap + -428] + [ap + -7], ap++;
[ap + 0] = [ap + -430], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 18;
ap += 424;
[ap + 0] = [[ap + -445] + 4], ap++;
call rel 119433;
[ap + 0] = [ap + -1] + 119432, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 229750, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -453] + 8, ap++;
[ap + 0] = [[ap + -454] + 6], ap++;
[ap + 0] = [[ap + -455] + 7], ap++;
[ap + 0] = [ap + -438], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -441], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 437;
call rel 119409;
[ap + 0] = [ap + -1] + 119408, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 242030, ap++;
call rel 87830;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -455] + [ap + -8], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -459], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 450;
[ap + 0] = [[ap + -457] + 4], ap++;
call rel 119385;
[ap + 0] = [ap + -1] + 119384, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 243600, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -468] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -470] + 6], ap++;
[ap + 0] = [[ap + -471] + 7], ap++;
ret;
ap += 446;
call rel 119363;
[ap + 0] = [ap + -1] + 119362, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 253540, ap++;
call rel 87193;
[ap + 0] = [ap + -460] + [ap + -7], ap++;
[ap + 0] = [ap + -462], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 455;
[ap + 0] = [[fp + -9] + 4], ap++;
call rel 119342;
[ap + 0] = [ap + -1] + 119341, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 254650, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [fp + -9] + 8, ap++;
[ap + 0] = [[fp + -9] + 6], ap++;
[ap + 0] = [[fp + -9] + 7], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -13] = [[fp + -11] + 1];
[ap + -3] = [[fp + -11] + 2];
[ap + -2] = [[fp + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11]) %}
[ap + 0] = [[fp + -11] + 5], ap++;
jmp rel 1140 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 4], ap++;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [fp + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 1113 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 1076 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 1032 if [ap + -1] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -9] = [[fp + -12] + 1];
[ap + 0] = [[fp + -12] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -14] + 0], ap++;
[ap + -4] = [[fp + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -14] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -14] + 1], ap++;
[ap + -7] = [[fp + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 955 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 928 if [ap + -3] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[ap + -9] + 0];
[fp + -8] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -5] = [[ap + -16] + 1];
[ap + -4] = [[ap + -16] + 2];
[ap + -6] = [[ap + -16] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 5], ap++;
jmp rel 851 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 4], ap++;
[ap + 0] = [[ap + -18] + 6], ap++;
[ap + 0] = [ap + -19] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 824 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -9335;
[ap + 0] = [ap + -41], ap++;
jmp rel 795 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 97440392307930487958532469632616319310, ap++;
call rel -9140;
[ap + 0] = [ap + -35], ap++;
jmp rel 765 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 24944740430830204917384312225949778138452, ap++;
call rel -9149;
[ap + 0] = [ap + -35], ap++;
jmp rel 735 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = 1486822392393958861669744346678610, ap++;
call rel -9158;
[ap + 0] = [ap + -35], ap++;
jmp rel 705 if [ap + -4] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 664;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[fp + -3] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 367;
call rel 119081;
[ap + 0] = [ap + -1] + 119080, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 213580, ap++;
call rel 87475;
[ap + 0] = [ap + -382], ap++;
[ap + 0] = [ap + -382] + [ap + -8], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 67;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [fp + -4] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 355;
call rel 119029;
[ap + 0] = [ap + -1] + 119028, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 211960, ap++;
[ap + 0] = [ap + -368] + 1, ap++;
[ap + 0] = [ap + -366] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 359;
call rel 119007;
[ap + 0] = [ap + -1] + 119006, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 212590, ap++;
[ap + 0] = [ap + -368], ap++;
[ap + 0] = [ap + -368] + [ap + -2], ap++;
call rel 87453;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -178] + 0];
[fp + -9] = [[ap + -178] + 1];
[ap + 0] = [[ap + -178] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -187] + 3, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -184] + 0];
[ap + -14] = [[ap + -184] + 1];
[ap + -4] = [[ap + -184] + 2];
[ap + -5] = [[ap + -184] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -184]) %}
[ap + 0] = [[ap + -184] + 5], ap++;
jmp rel 475 if [ap + -1] != 0;
[ap + 0] = [[ap + -185] + 4], ap++;
[ap + 0] = [[ap + -186] + 6], ap++;
[ap + 0] = [ap + -187] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 23 if [ap + -1] != 0;
ap += 333;
call rel 118906;
[ap + 0] = [ap + -1] + 118905, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 198370, ap++;
call rel 87320;
[ap + 0] = [ap + -356], ap++;
[ap + 0] = [ap + -350] + [ap + -8], ap++;
[ap + 0] = [ap + -359], ap++;
[ap + 0] = [ap + -354], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -13] + 0];
[fp + -8] = [[ap + -13] + 1];
[ap + 0] = [[ap + -13] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 369 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 316;
call rel 87236;
[ap + 0] = [ap + -333], ap++;
[ap + 0] = [ap + -327] + 185330, ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -331], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -8734;
jmp rel 313 if [ap + -3] != 0;
[ap + 0] = 200, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[fp + -7] + memory[fp + -6] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + 0] = [[ap + -9] + 1], ap++;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [[ap + -11] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -15] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -15] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [fp + -7], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -24] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[fp + -6] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -28] + 6], ap++;
[ap + -2] = [[ap + -29] + 7], ap++;
[ap + -2] = [[ap + -30] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -34] + 9], ap++;
[ap + -1] = [[ap + -35] + 10], ap++;
[ap + -3] = [[ap + -36] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -40] + 12], ap++;
[ap + -3] = [[ap + -41] + 13], ap++;
[ap + -27] = [[ap + -42] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -41], ap++;
[fp + -6] = [ap + 1] + [ap + -34], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -46] + 15];
jmp rel 13;
[ap + -1] = [[ap + -45] + 15];
ap += 1;
[ap + 0] = [ap + -46] + 16, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -46] + 16, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[fp + -7] = [ap + 1] + [ap + -42], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 155;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 140 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 114;
[ap + -1] = [[ap + -7] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -8] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -4], ap++;
[ap + -11] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 79;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -8223;
jmp rel 56 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 27, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 86599;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -42] + 0];
[ap + -2] = [[ap + -42] + 1];
[ap + -6] = [[ap + -42] + 2];
[ap + -5] = [[ap + -42] + 3];
[ap + -4] = [[ap + -42] + 4];
[ap + -3] = [[ap + -42] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42]) %}
[ap + 0] = [[ap + -42] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -47] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -121], ap++;
[ap + 0] = [ap + -121], ap++;
ret;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -47] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -49] + 8], ap++;
[ap + 0] = [[ap + -50] + 9], ap++;
ret;
ap += 40;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -46] + 15300, ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
ret;
ap += 101;
[ap + 0] = [ap + -110] + 1, ap++;
[ap + 0] = [ap + -106] + 64050, ap++;
jmp rel 8;
ap += 109;
[ap + 0] = [ap + -117] + 1, ap++;
[ap + 0] = [ap + -114] + 65240, ap++;
call rel 86993;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 113;
[ap + 0] = [ap + -117], ap++;
[ap + 0] = [ap + -117] + 65770, ap++;
jmp rel 8;
ap += 116;
[ap + 0] = [ap + -128] + 2, ap++;
[ap + 0] = [ap + -121] + 66140, ap++;
call rel 86978;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 176;
[ap + 0] = [ap + -182], ap++;
[ap + 0] = [ap + -182] + 75010, ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = [ap + -183], ap++;
ret;
ap += 329;
[ap + 0] = [[ap + -350] + 4], ap++;
[ap + 0] = [ap + -333], ap++;
[ap + 0] = [ap + -2] + 186900, ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -354] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -356] + 6], ap++;
[ap + 0] = [[ap + -357] + 7], ap++;
ret;
ap += 346;
[ap + 0] = [[ap + -531] + 4], ap++;
call rel 118453;
[ap + 0] = [ap + -1] + 118452, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 199940, ap++;
[ap + 0] = [ap + -356], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -359], ap++;
[ap + 0] = [ap + -541] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -543] + 6], ap++;
[ap + 0] = [[ap + -544] + 7], ap++;
ret;
ap += 369;
call rel 118433;
[ap + 0] = [ap + -1] + 118432, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 213760, ap++;
call rel 86281;
[ap + 0] = [ap + -395] + 3, ap++;
[ap + 0] = [ap + -390] + [ap + -8], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 383;
call rel 118409;
[ap + 0] = [ap + -1] + 118408, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 215630, ap++;
[ap + 0] = [ap + -395], ap++;
[ap + 0] = [ap + -392] + [ap + -2], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -398], ap++;
[ap + 0] = [ap + -398], ap++;
ret;
ap += 418;
call rel 118388;
[ap + 0] = [ap + -1] + 118387, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 220200, ap++;
[ap + 0] = [ap + -430], ap++;
[ap + 0] = [ap + -427] + [ap + -2], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -433], ap++;
[ap + 0] = [ap + -433], ap++;
ret;
ap += 453;
call rel 118367;
[ap + 0] = [ap + -1] + 118366, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 224770, ap++;
[ap + 0] = [ap + -465], ap++;
[ap + 0] = [ap + -462] + [ap + -2], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -468], ap++;
[ap + 0] = [ap + -468], ap++;
ret;
ap += 488;
call rel 118346;
[ap + 0] = [ap + -1] + 118345, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 229340, ap++;
[ap + 0] = [ap + -500], ap++;
[ap + 0] = [ap + -497] + [ap + -2], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -503], ap++;
[ap + 0] = [ap + -503], ap++;
ret;
ap += 519;
call rel 118325;
[ap + 0] = [ap + -1] + 118324, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 234050, ap++;
call rel 86326;
[ap + 0] = [ap + -533] + [ap + -7], ap++;
[ap + 0] = [ap + -535], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 528;
[ap + 0] = [[ap + -545] + 4], ap++;
call rel 118304;
[ap + 0] = [ap + -1] + 118303, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 235160, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -554] + 8, ap++;
[ap + 0] = [[ap + -555] + 6], ap++;
[ap + 0] = [[ap + -556] + 7], ap++;
[ap + 0] = [ap + -543], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 538;
call rel 118278;
[ap + 0] = [ap + -1] + 118277, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 247070, ap++;
call rel 86279;
[ap + 0] = [ap + -552] + [ap + -7], ap++;
[ap + 0] = [ap + -554], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 547;
[ap + 0] = [[ap + -568] + 4], ap++;
call rel 118257;
[ap + 0] = [ap + -1] + 118256, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 248180, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -577] + 8, ap++;
[ap + 0] = [[ap + -578] + 6], ap++;
[ap + 0] = [[ap + -579] + 7], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -565], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 561;
call rel 118231;
[ap + 0] = [ap + -1] + 118230, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 260550, ap++;
call rel 86652;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -579] + [ap + -8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -583], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 574;
[ap + 0] = [[ap + -581] + 4], ap++;
call rel 118207;
[ap + 0] = [ap + -1] + 118206, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 262120, ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -592] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -594] + 6], ap++;
[ap + 0] = [[ap + -595] + 7], ap++;
ret;
ap += 570;
call rel 118185;
[ap + 0] = [ap + -1] + 118184, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 272060, ap++;
call rel 86015;
[ap + 0] = [ap + -584] + [ap + -7], ap++;
[ap + 0] = [ap + -586], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 579;
[ap + 0] = [[fp + -11] + 4], ap++;
call rel 118164;
[ap + 0] = [ap + -1] + 118163, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 273170, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [fp + -11] + 8, ap++;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [[fp + -11] + 7], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 200, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[fp + -7] + memory[fp + -6] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[fp + -13] + 0], ap++;
[ap + 0] = [[fp + -13] + 1], ap++;
[ap + 0] = [[fp + -13] + 2], ap++;
[ap + 0] = [[fp + -13] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[fp + -13] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[fp + -13] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [fp + -7], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -13] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[fp + -6] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -13] + 6], ap++;
[ap + -2] = [[fp + -13] + 7], ap++;
[ap + -2] = [[fp + -13] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -13] + 9], ap++;
[ap + -1] = [[fp + -13] + 10], ap++;
[ap + -3] = [[fp + -13] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -13] + 12], ap++;
[ap + -3] = [[fp + -13] + 13], ap++;
[ap + -27] = [[fp + -13] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[fp + -6] = [ap + 1] + [ap + -33], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -13] + 15];
jmp rel 13;
[ap + -1] = [[fp + -13] + 15];
ap += 1;
[ap + 0] = [fp + -13] + 16, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [fp + -13] + 16, ap++;
[ap + 0] = [fp + -12] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[fp + -7] = [ap + 1] + [ap + -41], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 132;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 117 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 92;
[ap + -1] = [[ap + -7] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -8] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -4], ap++;
[ap + -11] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 57;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 27, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 85954;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + -38] = [[fp + -11] + 1];
[ap + -5] = [[fp + -11] + 2];
[ap + -4] = [[fp + -11] + 3];
[ap + -3] = [[fp + -11] + 4];
[ap + -2] = [[fp + -11] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11]) %}
[ap + 0] = [[fp + -11] + 7], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -11] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
ret;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -11] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 8], ap++;
[ap + 0] = [[fp + -11] + 9], ap++;
ret;
ap += 32;
[ap + 0] = [ap + -41] + 1, ap++;
[ap + 0] = [ap + -37] + 14280, ap++;
jmp rel 8;
ap += 40;
[ap + 0] = [ap + -48] + 1, ap++;
[ap + 0] = [ap + -45] + 15470, ap++;
call rel 86363;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 44;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48] + 16000, ap++;
jmp rel 8;
ap += 47;
[ap + 0] = [ap + -59] + 2, ap++;
[ap + 0] = [ap + -52] + 16370, ap++;
call rel 86349;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -8] = [[fp + -7] + 1];
[ap + -3] = [[fp + -7] + 2];
[ap + -2] = [[fp + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 5], ap++;
jmp rel 540 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 522 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 495 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 461 if [ap + -1] != 0;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -10685;
[ap + 0] = [ap + -44], ap++;
jmp rel 442 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 13 if [fp + -4] != 0;
ap += 341;
call rel 85716;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -349] + 207830, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 420;
[ap + 0] = [ap + -1], ap++;
%{ memory[ap + 0] = (memory[fp + -4] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -9] + 420, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 26, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 361;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 35, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 1];
jmp rel 341;
[ap + -1] = [[ap + -10] + 1];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 13 if [fp + -4] != 0;
ap += 321;
call rel 85649;
[ap + 0] = [ap + -329], ap++;
[ap + 0] = [ap + -329] + 205080, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 344;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 24944740430830204917346695914468432760404, ap++;
call rel -10580;
[ap + 0] = [ap + -35], ap++;
jmp rel 304 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 434428485796416085034498104175908286789185203756459893121763025398211911987, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -107] + 0];
[ap + -4] = [[ap + -107] + 1];
[ap + -3] = [[ap + -107] + 2];
[ap + -2] = [[ap + -107] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -107]) %}
[ap + 0] = [[ap + -107] + 5], ap++;
jmp rel 272 if [ap + -1] != 0;
[ap + 0] = [[ap + -108] + 4], ap++;
[ap + 0] = [[ap + -109] + 6], ap++;
[ap + 0] = [ap + -110] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 0], ap++;
[ap + -4] = [[ap + -19] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -20] + 2];
jmp rel 240;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -19] + 2];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -25] + 3], ap++;
[ap + -4] = [[ap + -26] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -27] + 5];
jmp rel 197;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -24] + 3], ap++;
[ap + -3] = [[ap + -25] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -26] + 5];
[ap + -15] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -27] + 6, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 262;
call rel 85467;
[ap + 0] = [ap + -270], ap++;
[ap + 0] = [ap + -270] + 186930, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 182;
[ap + 0] = [fp + -6] + [fp + -5], ap++;
[ap + 0] = [ap + -1] + [fp + -4], ap++;
[ap + 0] = [ap + -1] + [fp + -3], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -8], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 126 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -9963;
jmp rel 102 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -9265;
jmp rel 82 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -2] = [[ap + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 3], ap++;
jmp rel 61 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 2], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -226], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 19, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -15], ap++;
call rel 85542;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -49] + 5];
[ap + -2] = [[ap + -49] + 6];
[ap + -6] = [[ap + -49] + 7];
[ap + -5] = [[ap + -49] + 8];
[ap + -4] = [[ap + -49] + 9];
[ap + -3] = [[ap + -49] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -49] + 5) %}
[ap + 0] = [[ap + -49] + 12], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[ap + -50] + 11], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44], ap++;
ret;
[ap + 0] = [[ap + -50] + 11], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -55] + 13], ap++;
[ap + 0] = [[ap + -56] + 14], ap++;
ret;
ap += 43;
[ap + 0] = [[ap + -50] + 2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -2] + 15570, ap++;
[ap + 0] = [ap + -53] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -55] + 4], ap++;
[ap + 0] = [[ap + -56] + 5], ap++;
ret;
ap += 47;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -53] + 26230, ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -53], ap++;
ret;
ap += 117;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -123] + 76090, ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -123], ap++;
ret;
ap += 252;
call rel 85309;
[ap + 0] = [ap + -274] + 3, ap++;
[ap + 0] = [ap + -266] + 185420, ap++;
[ap + 0] = [ap + -291], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 264;
call rel 85295;
[ap + 0] = [ap + -297] + 6, ap++;
[ap + 0] = [ap + -278] + 187210, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -291], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 270;
call rel 85250;
[ap + 0] = [ap + -296] + 3, ap++;
[ap + 0] = [ap + -284] + 188060, ap++;
[ap + 0] = [ap + -286], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 285;
[ap + 0] = [[ap + -393] + 4], ap++;
[ap + 0] = [ap + -296], ap++;
[ap + 0] = [ap + -2] + 190120, ap++;
[ap + 0] = [ap + -396] + 8, ap++;
[ap + 0] = [[ap + -397] + 6], ap++;
[ap + 0] = [[ap + -398] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 296;
[ap + 0] = [ap + -301], ap++;
[ap + 0] = [ap + -298] + 201610, ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -303], ap++;
[ap + 0] = [ap + -303], ap++;
ret;
ap += 320;
[ap + 0] = [ap + -331] + 2, ap++;
[ap + 0] = [ap + -325] + 204990, ap++;
jmp rel 8;
ap += 324;
[ap + 0] = [ap + -331] + 1, ap++;
[ap + 0] = [ap + -331] + 205620, ap++;
call rel 85313;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 352;
[ap + 0] = [ap + -357], ap++;
[ap + 0] = [ap + -354] + 209120, ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -359], ap++;
[ap + 0] = [ap + -359], ap++;
ret;
ap += 387;
call rel 85769;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -398] + 214290, ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 400;
[ap + 0] = [[ap + -407] + 4], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -2] + 215860, ap++;
[ap + 0] = [ap + -410] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -412] + 6], ap++;
[ap + 0] = [[ap + -413] + 7], ap++;
ret;
ap += 396;
call rel 85152;
[ap + 0] = [ap + -403] + 225800, ap++;
[ap + 0] = [ap + -405], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 11;
ap += 405;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -1] + 226910, ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [[fp + -7] + 7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 523 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 505 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 478 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 444 if [ap + -1] != 0;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel -11253;
[ap + 0] = [ap + -44], ap++;
jmp rel 425 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 13 if [fp + -3] != 0;
ap += 308;
call rel 85148;
[ap + 0] = [ap + -320], ap++;
[ap + 0] = [ap + -316] + 203440, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 403;
[ap + 0] = [ap + -1], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[ap + -8] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -9] + 420, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 7;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 26, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 344;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 35, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 1];
jmp rel 324;
[ap + -1] = [[ap + -10] + 1];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 13 if [fp + -3] != 0;
ap += 288;
call rel 85081;
[ap + 0] = [ap + -296], ap++;
[ap + 0] = [ap + -296] + 200690, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 327;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -72] + 0];
[ap + -4] = [[ap + -72] + 1];
[ap + -3] = [[ap + -72] + 2];
[ap + -2] = [[ap + -72] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -72]) %}
[ap + 0] = [[ap + -72] + 5], ap++;
jmp rel 275 if [ap + -1] != 0;
[ap + 0] = [[ap + -73] + 4], ap++;
[ap + 0] = [[ap + -74] + 6], ap++;
[ap + 0] = [ap + -75] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 243;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -22] + 3], ap++;
[ap + -4] = [[ap + -23] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -24] + 5];
jmp rel 200;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -21] + 3], ap++;
[ap + -3] = [[ap + -22] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -23] + 5];
[ap + -15] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -24] + 6, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 264;
call rel 84908;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = [ap + -272] + 187110, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 185;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -2] = [[ap + -19] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 3], ap++;
jmp rel 154 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 2], ap++;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + 0] = [fp + -5] + [fp + -4], ap++;
[ap + 0] = [ap + -1] + [fp + -3], ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -30] + 5, ap++;
[ap + 0] = [ap + -11], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -18] + 0], ap++;
[ap + 3] = [[ap + -19] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -23] + 2];
jmp rel 103 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel -10535;
jmp rel 79 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel -9837;
jmp rel 59 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -222], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 17, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -236], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -15], ap++;
call rel 84980;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -48] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44], ap++;
ret;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -48] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -50] + 8], ap++;
[ap + 0] = [[ap + -51] + 9], ap++;
ret;
ap += 42;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48] + 15480, ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48], ap++;
ret;
ap += 112;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -118] + 65340, ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -118], ap++;
ret;
ap += 247;
call rel 84760;
[ap + 0] = [ap + -276] + 3, ap++;
[ap + 0] = [ap + -261] + 174670, ap++;
[ap + 0] = [ap + -263], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 270;
[ap + 0] = [[ap + -290] + 2], ap++;
[ap + 0] = [ap + -276], ap++;
[ap + 0] = [ap + -2] + 177550, ap++;
[ap + 0] = [ap + -293] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -295] + 4], ap++;
[ap + 0] = [[ap + -296] + 5], ap++;
ret;
ap += 266;
call rel 84733;
[ap + 0] = [ap + -296] + 6, ap++;
[ap + 0] = [ap + -280] + 187390, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 272;
call rel 84688;
[ap + 0] = [ap + -295] + 3, ap++;
[ap + 0] = [ap + -286] + 188240, ap++;
[ap + 0] = [ap + -288], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 287;
[ap + 0] = [[ap + -360] + 4], ap++;
[ap + 0] = [ap + -295], ap++;
[ap + 0] = [ap + -2] + 190300, ap++;
[ap + 0] = [ap + -363] + 8, ap++;
[ap + 0] = [[ap + -364] + 6], ap++;
[ap + 0] = [[ap + -365] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 287;
[ap + 0] = [ap + -298] + 2, ap++;
[ap + 0] = [ap + -292] + 200600, ap++;
jmp rel 8;
ap += 291;
[ap + 0] = [ap + -298] + 1, ap++;
[ap + 0] = [ap + -298] + 201230, ap++;
call rel 84762;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -368], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 319;
[ap + 0] = [ap + -324], ap++;
[ap + 0] = [ap + -321] + 204730, ap++;
[ap + 0] = [ap + -368], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -326], ap++;
[ap + 0] = [ap + -326], ap++;
ret;
ap += 354;
call rel 85218;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -365] + 209900, ap++;
[ap + 0] = [ap + -368], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 367;
[ap + 0] = [[ap + -374] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 211470, ap++;
[ap + 0] = [ap + -377] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -379] + 6], ap++;
[ap + 0] = [[ap + -380] + 7], ap++;
ret;
ap += 363;
call rel 84601;
[ap + 0] = [ap + -370] + 221410, ap++;
[ap + 0] = [ap + -372], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 11;
ap += 372;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -1] + 222520, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -11] = [[fp + -10] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 3], ap++;
jmp rel 227 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -10] + 5];
[ap + -9] = [[fp + -10] + 6];
[ap + -8] = [[fp + -10] + 7];
[ap + -7] = [[fp + -10] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 5) %}
[ap + 0] = [[fp + -10] + 10], ap++;
jmp rel 194 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [fp + -10] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -12] + 0], ap++;
[ap + -4] = [[fp + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -12] + 2];
jmp rel 162;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -12] + 0], ap++;
[ap + -3] = [[fp + -12] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -12] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 136 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 17;
[ap + -1] = [[ap + -6] + 0];
ap += 39;
call rel 85154;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -49] + 15510, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 15 if [fp + -9] != 0;
ap += 36;
call rel 85144;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44] + 15040, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
jmp rel 15 if [fp + -8] != 0;
ap += 35;
call rel 85137;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -43] + 14850, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
jmp rel 15 if [fp + -7] != 0;
ap += 34;
call rel 85130;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -42] + 14660, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 84595;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -57] + 0];
[ap + -2] = [[ap + -57] + 1];
[ap + -6] = [[ap + -57] + 2];
[ap + -5] = [[ap + -57] + 3];
[ap + -4] = [[ap + -57] + 4];
[ap + -3] = [[ap + -57] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -57]) %}
[ap + 0] = [[ap + -57] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -58] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -61] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
ret;
[ap + 0] = [[ap + -58] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -61] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -63] + 8], ap++;
[ap + 0] = [[ap + -64] + 9], ap++;
ret;
ap += 38;
call rel 84360;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -46] + 15490, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 40;
call rel 84357;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [ap + -54] + 15570, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 55;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 17630, ap++;
[ap + 0] = [fp + -10] + 13, ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [[fp + -10] + 12], ap++;
jmp rel 12;
ap += 67;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 29310, ap++;
[ap + 0] = [fp + -10] + 6, ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 750 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 732 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 705 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 671 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
jmp rel 15 if [fp + -5] != 0;
ap += 134;
call rel 84955;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -142] + 99980, ap++;
[ap + 0] = [ap + -149], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[ap + -3] = [[ap + -11] + 2];
[ap + -2] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 623 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -8] + 0], ap++;
[ap + 3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -8] + 2];
jmp rel 580 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -8] + 0];
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 547 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 509 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 481;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[fp + -4] = [ap + 1] + [ap + -23], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 448;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + -4] = [[ap + -17] + 1];
[ap + -3] = [[ap + -17] + 2];
[ap + -2] = [[ap + -17] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17]) %}
[ap + 0] = [[ap + -17] + 5], ap++;
jmp rel 413 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 4], ap++;
[ap + 0] = [[ap + -19] + 6], ap++;
[ap + 0] = [ap + -20] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -16] + 2];
jmp rel 381;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -15] + 2];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -21] + 3], ap++;
[ap + -4] = [[ap + -22] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -23] + 5];
jmp rel 338;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -20] + 3], ap++;
[ap + -3] = [[ap + -21] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -22] + 5];
[ap + -15] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -23] + 6, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 74;
call rel 84064;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -82] + 61180, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 323;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1186423139533537089827846530073695414305470307342419724096222587041583312528, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -4] = [[ap + -21] + 1];
[ap + -3] = [[ap + -21] + 2];
[ap + -2] = [[ap + -21] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 5], ap++;
jmp rel 281 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 4], ap++;
[ap + 0] = [[ap + -23] + 6], ap++;
[ap + 0] = [ap + -24] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 247 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -12] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 424430062299509631194636216159545428754079010585937662617424618645861123492, ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 207 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 173 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + -18] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 2];
jmp rel 17;
[ap + -1] = [[ap + -12] + 2];
ap += 52;
call rel 84649;
[ap + 0] = [ap + -70] + 3, ap++;
[ap + 0] = [ap + -62] + 37450, ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -23] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -24] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -18] + 3];
jmp rel 118;
[ap + 1] = [ap + -24] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -18] + 3];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1186423139533537089827846530073695414305470307342419724096222587041583312528, ap++;
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -5] = [[ap + -18] + 1];
[ap + -4] = [[ap + -18] + 2];
[ap + -3] = [[ap + -18] + 3];
[ap + -6] = [[ap + -18] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 6], ap++;
jmp rel 84 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -22] + 7];
[ap + -2] = [[ap + -22] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22] + 7) %}
[ap + 0] = [[ap + -22] + 10], ap++;
jmp rel 62 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 9], ap++;
[ap + 0] = [[ap + -24] + 11], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -8] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 84053;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -63] + 12];
[ap + -2] = [[ap + -63] + 13];
[ap + -6] = [[ap + -63] + 14];
[ap + -5] = [[ap + -63] + 15];
[ap + -4] = [[ap + -63] + 16];
[ap + -3] = [[ap + -63] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -63] + 12) %}
[ap + 0] = [[ap + -63] + 19], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -64] + 18], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -67] + 20, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -64] + 18], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -67] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -69] + 20], ap++;
[ap + 0] = [[ap + -70] + 21], ap++;
ret;
ap += 41;
[ap + 0] = [[ap + -64] + 9], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 15390, ap++;
[ap + 0] = [ap + -67] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -69] + 11], ap++;
[ap + 0] = [[ap + -70] + 12], ap++;
ret;
ap += 45;
[ap + 0] = [[ap + -64] + 5], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 26050, ap++;
[ap + 0] = [ap + -67] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -69] + 7], ap++;
[ap + 0] = [[ap + -70] + 8], ap++;
ret;
ap += 46;
call rel 84517;
[ap + 0] = [ap + -70] + 4, ap++;
[ap + 0] = [ap + -57] + 36540, ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 45;
call rel 84512;
[ap + 0] = [ap + -65] + 3, ap++;
[ap + 0] = [ap + -60] + 36720, ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 61;
[ap + 0] = [[ap + -71] + 4], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 38870, ap++;
[ap + 0] = [ap + -74] + 8, ap++;
[ap + 0] = [[ap + -75] + 6], ap++;
[ap + 0] = [[ap + -76] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 57;
call rel 84481;
[ap + 0] = [ap + -81] + 3, ap++;
[ap + 0] = [ap + -72] + 48640, ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 73;
[ap + 0] = [[ap + -95] + 4], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -2] + 50790, ap++;
[ap + 0] = [ap + -98] + 8, ap++;
[ap + 0] = [[ap + -99] + 6], ap++;
[ap + 0] = [[ap + -100] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 76;
call rel 83751;
[ap + 0] = [ap + -105] + 6, ap++;
[ap + 0] = [ap + -90] + 61460, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 82;
call rel 83706;
[ap + 0] = [ap + -104] + 3, ap++;
[ap + 0] = [ap + -96] + 62310, ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 97;
[ap + 0] = [[ap + -115] + 4], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -2] + 64370, ap++;
[ap + 0] = [ap + -118] + 8, ap++;
[ap + 0] = [[ap + -119] + 6], ap++;
[ap + 0] = [[ap + -120] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 100;
[ap + 0] = [ap + -107] + 1, ap++;
[ap + 0] = [ap + -105] + 74840, ap++;
jmp rel 8;
ap += 106;
[ap + 0] = [ap + -118] + 2, ap++;
[ap + 0] = [ap + -111] + 75850, ap++;
call rel 84398;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 97;
call rel 83795;
[ap + 0] = [ap + -116] + 3, ap++;
[ap + 0] = [ap + -111] + 74570, ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 117;
[ap + 0] = [[ap + -127] + 4], ap++;
[ap + 0] = [ap + -121], ap++;
[ap + 0] = [ap + -2] + 77280, ap++;
[ap + 0] = [ap + -130] + 8, ap++;
[ap + 0] = [[ap + -131] + 6], ap++;
[ap + 0] = [[ap + -132] + 7], ap++;
jmp rel 30;
ap += 109;
call rel 83770;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -123] + 86420, ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 129;
[ap + 0] = [[ap + -141] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 89130, ap++;
[ap + 0] = [ap + -144] + 8, ap++;
[ap + 0] = [[ap + -145] + 6], ap++;
[ap + 0] = [[ap + -146] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 135;
call rel 84190;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -146] + 100170, ap++;
[ap + 0] = [ap + -149], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 148;
[ap + 0] = [[ap + -155] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 101740, ap++;
[ap + 0] = [ap + -158] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -160] + 6], ap++;
[ap + 0] = [[ap + -161] + 7], ap++;
ret;
ap += 144;
call rel 83573;
[ap + 0] = [ap + -151] + 111680, ap++;
[ap + 0] = [ap + -153], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 11;
ap += 153;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -1] + 112790, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 236 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 203 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 171;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 145 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -5] = [[ap + -15] + 1];
[ap + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
[ap + -2] = [[ap + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 6], ap++;
jmp rel 115 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -2] = [[ap + -19] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 10], ap++;
jmp rel 93 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [[ap + -21] + 11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -29] + 12];
[ap + -7] = [[ap + -29] + 13];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29] + 12) %}
[ap + 0] = [[ap + -29] + 15], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 14], ap++;
[ap + 0] = [[ap + -31] + 16], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [[ap + -11] + 1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 83598;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -71] + 17];
[ap + -2] = [[ap + -71] + 18];
[ap + -6] = [[ap + -71] + 19];
[ap + -5] = [[ap + -71] + 20];
[ap + -4] = [[ap + -71] + 21];
[ap + -3] = [[ap + -71] + 22];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -71] + 17) %}
[ap + 0] = [[ap + -71] + 24], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -72] + 23], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -75] + 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -72] + 23], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -75] + 27, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 25], ap++;
[ap + 0] = [[ap + -78] + 26], ap++;
ret;
ap += 42;
[ap + 0] = [[ap + -72] + 14], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 15480, ap++;
[ap + 0] = [ap + -75] + 18, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 16], ap++;
[ap + 0] = [[ap + -78] + 17], ap++;
ret;
ap += 52;
[ap + 0] = [[ap + -72] + 9], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 26680, ap++;
[ap + 0] = [ap + -75] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 11], ap++;
[ap + 0] = [[ap + -78] + 12], ap++;
ret;
ap += 56;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 37340, ap++;
[ap + 0] = [ap + -75] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 7], ap++;
[ap + 0] = [[ap + -78] + 8], ap++;
ret;
ap += 52;
call rel 83323;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60] + 47380, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 54;
call rel 83320;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -68] + 47460, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 69;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 49520, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 81;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 61200, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 236 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 203 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 171;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 145 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -5] = [[ap + -15] + 1];
[ap + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
[ap + -2] = [[ap + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 6], ap++;
jmp rel 115 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -2] = [[ap + -19] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 10], ap++;
jmp rel 93 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [[ap + -21] + 11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -29] + 12];
[ap + -7] = [[ap + -29] + 13];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29] + 12) %}
[ap + 0] = [[ap + -29] + 15], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 14], ap++;
[ap + 0] = [[ap + -31] + 16], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [[ap + -11] + 1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 83339;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -71] + 17];
[ap + -2] = [[ap + -71] + 18];
[ap + -6] = [[ap + -71] + 19];
[ap + -5] = [[ap + -71] + 20];
[ap + -4] = [[ap + -71] + 21];
[ap + -3] = [[ap + -71] + 22];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -71] + 17) %}
[ap + 0] = [[ap + -71] + 24], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -72] + 23], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -75] + 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -72] + 23], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -75] + 27, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 25], ap++;
[ap + 0] = [[ap + -78] + 26], ap++;
ret;
ap += 42;
[ap + 0] = [[ap + -72] + 14], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 15480, ap++;
[ap + 0] = [ap + -75] + 18, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 16], ap++;
[ap + 0] = [[ap + -78] + 17], ap++;
ret;
ap += 52;
[ap + 0] = [[ap + -72] + 9], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 26680, ap++;
[ap + 0] = [ap + -75] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 11], ap++;
[ap + 0] = [[ap + -78] + 12], ap++;
ret;
ap += 56;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 37340, ap++;
[ap + 0] = [ap + -75] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 7], ap++;
[ap + 0] = [[ap + -78] + 8], ap++;
ret;
ap += 52;
call rel 83064;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60] + 47380, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 54;
call rel 83061;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -68] + 47460, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 69;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 49520, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 81;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 61200, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 28 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 640, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 82916;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 82839;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 434428485796416085034498104175908286789185203756459893121763025398211911987, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 82762;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 82685;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 82608;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 523410893316558122378830306191683135863976721326799590270659346354002858736, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 82531;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 760565771580090624121121792023365464265448761272770967981882436800089234901, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
ret;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 394323579402937197825070278441497235490914917810450857249771331122744639564, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 83148;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 1494 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 1467 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 1430 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 1386 if [ap + -1] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 1309 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 1282 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -14029;
[ap + 0] = [ap + -41], ap++;
jmp rel 1253 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 5807899970288901803406028129614, ap++;
call rel -13834;
[ap + 0] = [ap + -35], ap++;
jmp rel 1223 if [ap + -4] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -85] + 0];
[fp + -5] = [[ap + -85] + 1];
[ap + 0] = [[ap + -85] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -95] + 3, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -92] + 0];
[ap + -5] = [[ap + -92] + 1];
[ap + -4] = [[ap + -92] + 2];
[ap + -6] = [[ap + -92] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -92]) %}
[ap + 0] = [[ap + -92] + 5], ap++;
jmp rel 1150 if [ap + -1] != 0;
[ap + 0] = [[ap + -93] + 4], ap++;
[ap + 0] = [[ap + -94] + 6], ap++;
[ap + 0] = [ap + -95] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 25 if [ap + -1] != 0;
ap += 1124;
call rel 114365;
[ap + 0] = [ap + -1] + 114364, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 625460, ap++;
call rel 82777;
[ap + 0] = [ap + -1148], ap++;
[ap + 0] = [ap + -1142] + [ap + -8], ap++;
[ap + 0] = [ap + -1151], ap++;
[ap + 0] = [ap + -1146], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -2] = [[ap + -8] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 3], ap++;
jmp rel 1075 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -18] + 5];
[ap + -7] = [[ap + -18] + 6];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18] + 5) %}
[ap + 0] = [[ap + -18] + 8], ap++;
jmp rel 1037 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 7], ap++;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[ap + -29] + 0];
[ap + -9] = [[ap + -29] + 1];
[ap + 0] = [[ap + -29] + 2], ap++;
[ap + -1] = [[ap + -30] + 3];
[fp + -5] = [[ap + -30] + 4];
[ap + 0] = [[ap + -30] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -34] + 0], ap++;
[ap + -4] = [[ap + -35] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -37] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -34] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -36] + 1], ap++;
[ap + -7] = [[ap + -37] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -37] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -34] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 82848;
[ap + 0] = [[ap + -161] + 0], ap++;
[ap + 0] = [[ap + -162] + 1], ap++;
[ap + 0] = [[ap + -163] + 2], ap++;
[ap + 0] = [ap + -191] + 6, ap++;
jmp rel 956 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 936 if [ap + -14] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -12], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 0];
jmp rel 60;
[ap + -1] = [[ap + -22] + 0];
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -16] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -19], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 653;
call rel 114230;
[ap + 0] = [ap + -1] + 114229, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 327670, ap++;
[ap + 0] = [ap + -666] + 1, ap++;
[ap + 0] = [ap + -664] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 26;
ap += 657;
call rel 114208;
[ap + 0] = [ap + -1] + 114207, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 328300, ap++;
[ap + 0] = [ap + -666], ap++;
[ap + 0] = [ap + -666] + [ap + -2], ap++;
[ap + 0] = [ap + -674], ap++;
[ap + 0] = [ap + -689], ap++;
jmp rel 20;
ap += 6;
[ap + 0] = [ap + -29] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -188], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 83685;
jmp rel 832 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 25 if [ap + -685] != 0;
[ap + 0] = [ap + -3], ap++;
jmp rel 19 if [ap + -685] != 0;
ap += 19;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -21] + 2430, ap++;
[ap + 0] = [ap + -869], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -704], ap++;
[ap + 0] = [ap + -705], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 83;
[ap + 0] = [ap + -1], ap++;
jmp rel 6;
ap += 1;
[ap + 0] = [ap + -4] + 190, ap++;
[ap + 1] = [ap + -686] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 13;
[ap + -1] = [[ap + -8] + 0];
ap += 1;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -694] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 717;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 693 if [ap + -12] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = 1786449290591910003246333706333060122114570550634379142335606457909262123456, ap++;
[ap + -1] = [[ap + -33] + 0];
[fp + -5] = [[ap + -33] + 1];
[ap + 0] = [[ap + -33] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -42] + 3, ap++;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -22] = [[ap + -44] + 1];
[ap + -4] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 5], ap++;
jmp rel 606 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 4], ap++;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -47] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 554 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 514 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 467 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 1] = [ap + -13] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 1];
jmp rel 13;
[ap + -1] = [[ap + -19] + 1];
ap += 1;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -13] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -31] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 373;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 349 if [ap + -12] != 0;
[ap + 0] = 1786449290591910003246333706333060122114570550634379142335606457909262123456, ap++;
[ap + -1] = [[ap + -48] + 0];
[fp + -5] = [[ap + -48] + 1];
[ap + 0] = [[ap + -48] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -58] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -5] = [[ap + -44] + 1];
[ap + -4] = [[ap + -44] + 2];
[ap + -6] = [[ap + -44] + 3];
[ap + -16] = [[ap + -44] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 6], ap++;
jmp rel 271 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -50] + 7];
[ap + -4] = [[ap + -50] + 8];
[ap + -3] = [[ap + -50] + 9];
[ap + -2] = [[ap + -50] + 10];
[ap + -21] = [[ap + -50] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -50] + 7) %}
[ap + 0] = [[ap + -50] + 13], ap++;
jmp rel 235 if [ap + -1] != 0;
[ap + 0] = [[ap + -51] + 12], ap++;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -957] = [[ap + -12] + 1];
[ap + 0] = [[ap + -12] + 2], ap++;
[ap + -1] = [[ap + -13] + 3];
[fp + -5] = [[ap + -13] + 4];
[ap + 0] = [[ap + -13] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -64] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
call rel 84539;
[ap + 0] = [ap + -123] + 6, ap++;
jmp rel 160 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 149 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 1] = [ap + -168] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 13;
[ap + -1] = [[ap + -12] + 0];
ap += 1;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -186] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 75;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 60 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -1094], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 81682;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -64] + 0];
[ap + -2] = [[ap + -64] + 1];
[ap + -6] = [[ap + -64] + 2];
[ap + -5] = [[ap + -64] + 3];
[ap + -4] = [[ap + -64] + 4];
[ap + -3] = [[ap + -64] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -64]) %}
[ap + 0] = [[ap + -64] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -65] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -69] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -65] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -69] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 8], ap++;
[ap + 0] = [[ap + -72] + 9], ap++;
ret;
ap += 32;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -36] + 14380, ap++;
jmp rel 8;
ap += 35;
[ap + 0] = [ap + -47] + 2, ap++;
[ap + 0] = [ap + -40] + 14750, ap++;
call rel 81577;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 56;
[ap + 0] = [ap + -57] + 17460, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
jmp rel 8;
ap += 57;
[ap + 0] = [ap + -64] + 17750, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 162;
[ap + 0] = [[ap + -213] + 12], ap++;
call rel 113574;
[ap + 0] = [ap + -1] + 113573, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 113860, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -222] + 16, ap++;
[ap + 0] = [[ap + -223] + 14], ap++;
[ap + 0] = [[ap + -224] + 15], ap++;
jmp rel 20;
ap += 168;
[ap + 0] = [[ap + -213] + 5], ap++;
call rel 113554;
[ap + 0] = [ap + -1] + 113553, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 125100, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -222] + 9, ap++;
[ap + 0] = [[ap + -223] + 7], ap++;
[ap + 0] = [[ap + -224] + 8], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 180;
call rel 113528;
[ap + 0] = [ap + -1] + 113527, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 137290, ap++;
[ap + 0] = [ap + -191], ap++;
[ap + 0] = [ap + -191] + [ap + -2], ap++;
jmp rel 17;
ap += 183;
call rel 113512;
[ap + 0] = [ap + -1] + 113511, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 137660, ap++;
[ap + 0] = [ap + -202] + 2, ap++;
[ap + 0] = [ap + -195] + [ap + -2], ap++;
call rel 81465;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 194;
call rel 113486;
[ap + 0] = [ap + -1] + 113485, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 138730, ap++;
call rel 81451;
[ap + 0] = [ap + -220] + 3, ap++;
[ap + 0] = [ap + -215] + [ap + -8], ap++;
[ap + 0] = [ap + -217], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 214;
[ap + 0] = [[ap + -223] + 4], ap++;
call rel 113463;
[ap + 0] = [ap + -1] + 113462, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 141440, ap++;
[ap + 0] = [ap + -225], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -233] + 8, ap++;
[ap + 0] = [[ap + -234] + 6], ap++;
[ap + 0] = [[ap + -235] + 7], ap++;
jmp rel 48;
ap += 205;
call rel 113443;
[ap + 0] = [ap + -1] + 113442, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 150490, ap++;
call rel 81408;
[ap + 0] = [ap + -231] + 3, ap++;
[ap + 0] = [ap + -226] + [ap + -8], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 225;
[ap + 0] = [[ap + -270] + 4], ap++;
call rel 113415;
[ap + 0] = [ap + -1] + 113414, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 153200, ap++;
[ap + 0] = [ap + -236], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -280] + 8, ap++;
[ap + 0] = [[ap + -281] + 6], ap++;
[ap + 0] = [[ap + -282] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 247;
call rel 113388;
[ap + 0] = [ap + -1] + 113387, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 166190, ap++;
[ap + 0] = [ap + -258], ap++;
[ap + 0] = [ap + -258] + [ap + -2], ap++;
jmp rel 17;
ap += 250;
call rel 113372;
[ap + 0] = [ap + -1] + 113371, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 166560, ap++;
[ap + 0] = [ap + -269] + 2, ap++;
[ap + 0] = [ap + -262] + [ap + -2], ap++;
call rel 81325;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -286], ap++;
[ap + 0] = [ap + -286], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 279;
call rel 113346;
[ap + 0] = [ap + -1] + 113345, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 170390, ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = [ap + -293] + [ap + -2], ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = [ap + -293], ap++;
ret;
ap += 946;
call rel 113325;
[ap + 0] = [ap + -1] + 113324, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 499960, ap++;
[ap + 0] = [ap + -954] + [ap + -1], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -961], ap++;
jmp rel 17;
ap += 947;
call rel 113308;
[ap + 0] = [ap + -1] + 113307, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 500250, ap++;
[ap + 0] = [ap + -970] + [ap + -1], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -974], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -960], ap++;
[ap + 0] = [ap + -975], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1116;
[ap + 0] = [[ap + -1135] + 7], ap++;
call rel 113283;
[ap + 0] = [ap + -1] + 113282, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 604240, ap++;
[ap + 0] = [ap + -1148], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -1151], ap++;
[ap + 0] = [ap + -1146] + 11, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -1148] + 9], ap++;
[ap + 0] = [[ap + -1149] + 10], ap++;
ret;
ap += 1126;
[ap + 0] = [[ap + -1135] + 2], ap++;
call rel 113260;
[ap + 0] = [ap + -1] + 113259, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 615440, ap++;
[ap + 0] = [ap + -1148], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -1151], ap++;
[ap + 0] = [ap + -1146] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -1148] + 4], ap++;
[ap + 0] = [[ap + -1149] + 5], ap++;
ret;
ap += 1137;
[ap + 0] = [[ap + -1230] + 4], ap++;
call rel 113237;
[ap + 0] = [ap + -1] + 113236, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 627030, ap++;
[ap + 0] = [ap + -1148], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -1151], ap++;
[ap + 0] = [ap + -1241] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -1243] + 6], ap++;
[ap + 0] = [[ap + -1244] + 7], ap++;
ret;
ap += 1153;
call rel 113215;
[ap + 0] = [ap + -1] + 113214, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 639680, ap++;
[ap + 0] = [ap + -1165], ap++;
[ap + 0] = [ap + -1162] + [ap + -2], ap++;
[ap + 0] = [ap + -1246], ap++;
[ap + 0] = [ap + -1241], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1168], ap++;
[ap + 0] = [ap + -1168], ap++;
ret;
ap += 1188;
call rel 113194;
[ap + 0] = [ap + -1] + 113193, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 644250, ap++;
[ap + 0] = [ap + -1200], ap++;
[ap + 0] = [ap + -1197] + [ap + -2], ap++;
[ap + 0] = [ap + -1246], ap++;
[ap + 0] = [ap + -1241], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1203], ap++;
[ap + 0] = [ap + -1203], ap++;
ret;
ap += 1219;
call rel 113173;
[ap + 0] = [ap + -1] + 113172, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 648960, ap++;
call rel 81174;
[ap + 0] = [ap + -1233] + [ap + -7], ap++;
[ap + 0] = [ap + -1235], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 1228;
[ap + 0] = [[ap + -1249] + 4], ap++;
call rel 113152;
[ap + 0] = [ap + -1] + 113151, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 650070, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -1258] + 8, ap++;
[ap + 0] = [[ap + -1259] + 6], ap++;
[ap + 0] = [[ap + -1260] + 7], ap++;
[ap + 0] = [ap + -1243], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -1246], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1242;
call rel 113126;
[ap + 0] = [ap + -1] + 113125, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 15, ap++;
[ap + 0] = [ap + -1] + 662440, ap++;
call rel 81547;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -1260] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -1264], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1255;
[ap + 0] = [[ap + -1262] + 4], ap++;
call rel 113102;
[ap + 0] = [ap + -1] + 113101, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 15, ap++;
[ap + 0] = [ap + -1] + 664010, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -1273] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -1275] + 6], ap++;
[ap + 0] = [[ap + -1276] + 7], ap++;
ret;
ap += 1251;
call rel 113080;
[ap + 0] = [ap + -1] + 113079, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 15, ap++;
[ap + 0] = [ap + -1] + 673950, ap++;
call rel 80910;
[ap + 0] = [ap + -1265] + [ap + -7], ap++;
[ap + 0] = [ap + -1267], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 1260;
[ap + 0] = [[fp + -6] + 4], ap++;
call rel 113059;
[ap + 0] = [ap + -1] + 113058, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 15, ap++;
[ap + 0] = [ap + -1] + 675060, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 1142 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -2] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[fp + -5] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 81555;
[ap + 0] = [fp + -7] + 6, ap++;
jmp rel 1064 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 1044 if [ap + -11] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -9], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 67;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -13] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 932;
call rel 112940;
[ap + 0] = [ap + -1] + 112939, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 499040, ap++;
[ap + 0] = [ap + -945] + 1, ap++;
[ap + 0] = [ap + -943] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 936;
call rel 112918;
[ap + 0] = [ap + -1] + 112917, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 499670, ap++;
[ap + 0] = [ap + -945], ap++;
[ap + 0] = [ap + -945] + [ap + -2], ap++;
call rel 84109;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -973], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + -20] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 928;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -24] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -27] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 886;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 67;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 36 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 910;
call rel 112822;
[ap + 0] = [ap + -1] + 112821, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 495880, ap++;
[ap + 0] = [ap + -923] + 1, ap++;
[ap + 0] = [ap + -921] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 914;
call rel 112800;
[ap + 0] = [ap + -1] + 112799, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 496510, ap++;
[ap + 0] = [ap + -923], ap++;
[ap + 0] = [ap + -923] + [ap + -2], ap++;
call rel 81237;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -973], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12] + 810, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -200], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 82270;
jmp rel 772 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + -700] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 13;
[ap + -1] = [[ap + -10] + 0];
ap += 1;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -708] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 689;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 665 if [ap + -12] != 0;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -875] = [[ap + -25] + 1];
[ap + 0] = [[ap + -25] + 2], ap++;
[ap + -1] = [[ap + -26] + 3];
[fp + -5] = [[ap + -26] + 4];
[ap + 0] = [[ap + -26] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -736], ap++;
[ap + 0] = [ap + -736], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -736], ap++;
[ap + 0] = [ap + -736], ap++;
[ap + 0] = [ap + -736], ap++;
[ap + 0] = [ap + -736], ap++;
call rel 83429;
[ap + 0] = [ap + -136] + 6, ap++;
jmp rel 583 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 563 if [ap + -5] != 0;
[ap + 0] = 1786449290591910003246333706333060122114570550634379142335606457909262123456, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -5] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -18] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -7] = [[ap + -18] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -5] = [[ap + -21] + 1];
[ap + -4] = [[ap + -21] + 2];
[ap + -6] = [[ap + -21] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 5], ap++;
jmp rel 487 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 4], ap++;
[ap + 0] = [[ap + -23] + 6], ap++;
[ap + 0] = [ap + -24] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 437 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 399 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 354 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -23] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 270;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 248 if [ap + -12] != 0;
[ap + 0] = 1786449290591910003246333706333060122114570550634379142335606457909262123456, ap++;
[ap + -1] = [[ap + -40] + 0];
[fp + -5] = [[ap + -40] + 1];
[ap + 0] = [[ap + -40] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -5] = [[ap + -36] + 1];
[ap + -4] = [[ap + -36] + 2];
[ap + -6] = [[ap + -36] + 3];
[ap + -16] = [[ap + -36] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 6], ap++;
jmp rel 179 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -42] + 7];
[ap + -4] = [[ap + -42] + 8];
[ap + -3] = [[ap + -42] + 9];
[ap + -2] = [[ap + -42] + 10];
[ap + -21] = [[ap + -42] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42] + 7) %}
[ap + 0] = [[ap + -42] + 13], ap++;
jmp rel 152 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 12], ap++;
[ap + 0] = [ap + -44] + 14, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -47] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 0];
jmp rel 13;
[ap + -1] = [[ap + -14] + 0];
ap += 1;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -65] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 75;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 60 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -1085], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 80315;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -58] + 0];
[ap + -2] = [[ap + -58] + 1];
[ap + -6] = [[ap + -58] + 2];
[ap + -5] = [[ap + -58] + 3];
[ap + -4] = [[ap + -58] + 4];
[ap + -3] = [[ap + -58] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -58]) %}
[ap + 0] = [[ap + -58] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -59] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -63] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -59] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -63] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -65] + 8], ap++;
[ap + 0] = [[ap + -66] + 9], ap++;
ret;
ap += 32;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -36] + 14380, ap++;
jmp rel 8;
ap += 35;
[ap + 0] = [ap + -47] + 2, ap++;
[ap + 0] = [ap + -40] + 14750, ap++;
call rel 80729;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 56;
[ap + 0] = [[ap + -99] + 12], ap++;
[ap + 0] = [ap + -1] + 17460, ap++;
[ap + 0] = [ap + -101] + 16, ap++;
[ap + 0] = [[ap + -102] + 14], ap++;
[ap + 0] = [[ap + -103] + 15], ap++;
jmp rel 11;
ap += 62;
[ap + 0] = [[ap + -99] + 5], ap++;
[ap + 0] = [ap + -1] + 28700, ap++;
[ap + 0] = [ap + -101] + 9, ap++;
[ap + 0] = [[ap + -102] + 7], ap++;
[ap + 0] = [[ap + -103] + 8], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 68;
call rel 112202;
[ap + 0] = [ap + -1] + 112201, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40350, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -78] + [ap + -2], ap++;
jmp rel 15;
ap += 71;
call rel 112188;
[ap + 0] = [ap + -1] + 112187, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40720, ap++;
[ap + 0] = [ap + -89] + 2, ap++;
[ap + 0] = [ap + -82] + [ap + -2], ap++;
call rel 80662;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 74;
call rel 112164;
[ap + 0] = [ap + -1] + 112163, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 41070, ap++;
call rel 80131;
[ap + 0] = [ap + -99] + 3, ap++;
[ap + 0] = [ap + -94] + [ap + -8], ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 94;
[ap + 0] = [[ap + -103] + 4], ap++;
call rel 112143;
[ap + 0] = [ap + -1] + 112142, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 43780, ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -112] + 8, ap++;
[ap + 0] = [[ap + -113] + 6], ap++;
[ap + 0] = [[ap + -114] + 7], ap++;
jmp rel 44;
ap += 85;
call rel 112125;
[ap + 0] = [ap + -1] + 112124, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 52830, ap++;
call rel 80092;
[ap + 0] = [ap + -110] + 3, ap++;
[ap + 0] = [ap + -105] + [ap + -8], ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 105;
[ap + 0] = [[ap + -127] + 4], ap++;
call rel 112099;
[ap + 0] = [ap + -1] + 112098, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 55540, ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -136] + 8, ap++;
[ap + 0] = [[ap + -137] + 6], ap++;
[ap + 0] = [[ap + -138] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 122;
call rel 112074;
[ap + 0] = [ap + -1] + 112073, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 68180, ap++;
[ap + 0] = [ap + -130] + [ap + -1], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -134], ap++;
jmp rel 17;
ap += 123;
call rel 112057;
[ap + 0] = [ap + -1] + 112056, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 68470, ap++;
[ap + 0] = [ap + -137] + [ap + -1], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -141], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [ap + -142], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 231;
call rel 112033;
[ap + 0] = [ap + -1] + 112032, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 164750, ap++;
[ap + 0] = [ap + -242], ap++;
[ap + 0] = [ap + -242] + [ap + -2], ap++;
jmp rel 17;
ap += 234;
call rel 112017;
[ap + 0] = [ap + -1] + 112016, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 165120, ap++;
[ap + 0] = [ap + -253] + 2, ap++;
[ap + 0] = [ap + -246] + [ap + -2], ap++;
call rel 80489;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 258;
call rel 111991;
[ap + 0] = [ap + -1] + 111990, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 168200, ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = [ap + -272] + [ap + -2], ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = [ap + -272], ap++;
ret;
ap += 920;
call rel 111970;
[ap + 0] = [ap + -1] + 111969, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 497120, ap++;
[ap + 0] = [ap + -934] + 1, ap++;
[ap + 0] = [ap + -932] + [ap + -2], ap++;
jmp rel 17;
ap += 926;
call rel 111953;
[ap + 0] = [ap + -1] + 111952, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 498130, ap++;
[ap + 0] = [ap + -938] + 1, ap++;
[ap + 0] = [ap + -938] + [ap + -2], ap++;
call rel 83152;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -973], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 947;
call rel 111927;
[ap + 0] = [ap + -1] + 111926, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 500930, ap++;
[ap + 0] = [ap + -955] + [ap + -1], ap++;
[ap + 0] = [ap + -959], ap++;
[ap + 0] = [ap + -959], ap++;
jmp rel 17;
ap += 948;
call rel 111910;
[ap + 0] = [ap + -1] + 111909, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 501220, ap++;
[ap + 0] = [ap + -968] + [ap + -1], ap++;
[ap + 0] = [ap + -959], ap++;
[ap + 0] = [ap + -959], ap++;
[ap + 0] = [ap + -972], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -973], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1114;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 111885;
[ap + 0] = [ap + -1] + 111884, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 604940, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 488 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 81352;
jmp rel 454 if [ap + -3] != 0;
[ap + 0] = 289265142035346446792964224515421021597899183432205077896626966918004183212, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -656] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -5] = [[ap + -18] + 1];
[ap + -4] = [[ap + -18] + 2];
[ap + -6] = [[ap + -18] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 5], ap++;
jmp rel 378 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 4], ap++;
[ap + 0] = [[ap + -20] + 6], ap++;
[ap + 0] = [ap + -21] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 328 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 290 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 245 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -4] = [ap + 1] + [ap + -8], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 63;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 34 if [ap + -12] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -25], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 18;
[ap + -1] = [[ap + -6] + 0];
ap += 52;
call rel 111690;
[ap + 0] = [ap + -1] + 111689, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38290, ap++;
[ap + 0] = [ap + -64] + 1, ap++;
[ap + 0] = [ap + -62] + [ap + -2], ap++;
jmp rel 19;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 31;
ap += 56;
call rel 111670;
[ap + 0] = [ap + -1] + 111669, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38920, ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64] + [ap + -2], ap++;
call rel 82881;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -21] + 2, ap++;
[ap + 0] = [ap + -13] + 810, ap++;
[ap + 0] = 289265142035346446792964224515421021597899183432205077896626966918004183212, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -702] = [[ap + -36] + 1];
[ap + 0] = [[ap + -36] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -46] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -32] + 0];
[ap + -15] = [[ap + -32] + 1];
[ap + -5] = [[ap + -32] + 2];
[ap + -6] = [[ap + -32] + 3];
[ap + -4] = [[ap + -32] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -32]) %}
[ap + 0] = [[ap + -32] + 6], ap++;
jmp rel 92 if [ap + -1] != 0;
[ap + 0] = [[ap + -33] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -39] + 7];
[ap + -5] = [[ap + -39] + 8];
[ap + -4] = [[ap + -39] + 9];
[ap + -3] = [[ap + -39] + 10];
[ap + -2] = [[ap + -39] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -39] + 7) %}
[ap + 0] = [[ap + -39] + 13], ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + 0] = [[ap + -40] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -731], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 79570;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -79] + 14];
[ap + -2] = [[ap + -79] + 15];
[ap + -6] = [[ap + -79] + 16];
[ap + -5] = [[ap + -79] + 17];
[ap + -4] = [[ap + -79] + 18];
[ap + -3] = [[ap + -79] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -79] + 14) %}
[ap + 0] = [[ap + -79] + 21], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -80] + 20], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -84] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -80] + 20], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -84] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 22], ap++;
[ap + 0] = [[ap + -87] + 23], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -76] + 12], ap++;
[ap + 0] = [ap + -1] + 14840, ap++;
[ap + 0] = [ap + -78] + 16, ap++;
[ap + 0] = [[ap + -79] + 14], ap++;
[ap + 0] = [[ap + -80] + 15], ap++;
jmp rel 11;
ap += 43;
[ap + 0] = [[ap + -76] + 5], ap++;
[ap + 0] = [ap + -1] + 26170, ap++;
[ap + 0] = [ap + -78] + 9, ap++;
[ap + 0] = [[ap + -79] + 7], ap++;
[ap + 0] = [[ap + -80] + 8], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 51;
call rel 111481;
[ap + 0] = [ap + -1] + 111480, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38000, ap++;
call rel 79448;
[ap + 0] = [ap + -76] + 3, ap++;
[ap + 0] = [ap + -71] + [ap + -8], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 71;
[ap + 0] = [[ap + -80] + 4], ap++;
call rel 111460;
[ap + 0] = [ap + -1] + 111459, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40710, ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -89] + 8, ap++;
[ap + 0] = [[ap + -90] + 6], ap++;
[ap + 0] = [[ap + -91] + 7], ap++;
jmp rel 44;
ap += 62;
call rel 111442;
[ap + 0] = [ap + -1] + 111441, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 49760, ap++;
call rel 79409;
[ap + 0] = [ap + -87] + 3, ap++;
[ap + 0] = [ap + -82] + [ap + -8], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 82;
[ap + 0] = [[ap + -101] + 4], ap++;
call rel 111416;
[ap + 0] = [ap + -1] + 111415, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 52470, ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -110] + 8, ap++;
[ap + 0] = [[ap + -111] + 6], ap++;
[ap + 0] = [[ap + -112] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 102;
call rel 111391;
[ap + 0] = [ap + -1] + 111390, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 65480, ap++;
[ap + 0] = [ap + -116], ap++;
[ap + 0] = [ap + -116] + [ap + -2], ap++;
[ap + 0] = [ap + -116], ap++;
[ap + 0] = [ap + -116], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -116], ap++;
[ap + 0] = [ap + -116], ap++;
ret;
ap += 762;
[ap + 0] = [[fp + -4] + 2], ap++;
call rel 111369;
[ap + 0] = [ap + -1] + 111368, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 9, ap++;
[ap + 0] = [ap + -1] + 393880, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
ret;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 79880;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 41 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 17 if [ap + -11] != 0;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = 289265142035346446792964224515421021597899183432205077896626966918004183212, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel 79077;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel 79053;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1786449290591910003246333706333060122114570550634379142335606457909262123456, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel 78882;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel 78858;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 189 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 2];
jmp rel 110;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 79 if [ap + -3] != 0;
ap += 1;
[ap + 0] = 1331680487542315342050552882940934570364094189087734488524537652590749950424, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -5] = [[ap + -25] + 1];
[ap + -4] = [[ap + -25] + 2];
[ap + -6] = [[ap + -25] + 3];
[fp + -3] = [[ap + -25] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25]) %}
[ap + 0] = [[ap + -25] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -32] + 7], ap++;
[ap + 0] = [[ap + -33] + 8], ap++;
ret;
call rel 110708;
[ap + 0] = [ap + -1] + 110707, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11120, ap++;
call rel 78522;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 2;
call rel 110689;
[ap + 0] = [ap + -1] + 110688, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11100, ap++;
call rel 78512;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -22] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 17;
[ap + 0] = [[fp + -5] + 9], ap++;
call rel 110668;
[ap + 0] = [ap + -1] + 110667, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13160, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 19;
ap += 29;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 110649;
[ap + 0] = [ap + -1] + 110648, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 24840, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 488 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 446 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 405;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 370 if [ap + -3] != 0;
[ap + 0] = 1255235991522866093190400328027936434203587216166838216390545567461445183904, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 5], ap++;
jmp rel 294 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 244 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 206 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 161 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1255235991522866093190400328027936434203587216166838216390545567461445183904, ap++;
[ap + -1] = [[ap + -21] + 0];
[fp + -5] = [[ap + -21] + 1];
[ap + 0] = [[ap + -21] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -4] = [[ap + -15] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -17] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -16] + 2], ap++;
[ap + -7] = [[ap + -17] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -31] + 3, ap++;
[ap + 0] = [ap + -20] + 4, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + -5] = [[ap + -17] + 1];
[ap + -4] = [[ap + -17] + 2];
[ap + -6] = [[ap + -17] + 3];
[fp + -4] = [[ap + -17] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17]) %}
[ap + 0] = [[ap + -17] + 6], ap++;
jmp rel 89 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -23] + 7];
[ap + -4] = [[ap + -23] + 8];
[ap + -3] = [[ap + -23] + 9];
[ap + -2] = [[ap + -23] + 10];
[fp + -3] = [[ap + -23] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -23] + 7) %}
[ap + 0] = [[ap + -23] + 13], ap++;
jmp rel 62 if [ap + -1] != 0;
[ap + 0] = [[ap + -24] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 78374;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -63] + 14];
[ap + -2] = [[ap + -63] + 15];
[ap + -6] = [[ap + -63] + 16];
[ap + -5] = [[ap + -63] + 17];
[ap + -4] = [[ap + -63] + 18];
[ap + -3] = [[ap + -63] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -63] + 14) %}
[ap + 0] = [[ap + -63] + 21], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -64] + 20], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -68] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -64] + 20], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -68] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -70] + 22], ap++;
[ap + 0] = [[ap + -71] + 23], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -60] + 12], ap++;
[ap + 0] = [ap + -1] + 14840, ap++;
[ap + 0] = [ap + -62] + 16, ap++;
[ap + 0] = [[ap + -63] + 14], ap++;
[ap + 0] = [[ap + -64] + 15], ap++;
jmp rel 11;
ap += 42;
[ap + 0] = [[ap + -60] + 5], ap++;
[ap + 0] = [ap + -1] + 26080, ap++;
[ap + 0] = [ap + -62] + 9, ap++;
[ap + 0] = [[ap + -63] + 7], ap++;
[ap + 0] = [[ap + -64] + 8], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 35;
call rel 110285;
[ap + 0] = [ap + -1] + 110284, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 35920, ap++;
call rel 78252;
[ap + 0] = [ap + -60] + 3, ap++;
[ap + 0] = [ap + -55] + [ap + -8], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 55;
[ap + 0] = [[ap + -64] + 4], ap++;
call rel 110264;
[ap + 0] = [ap + -1] + 110263, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38630, ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -73] + 8, ap++;
[ap + 0] = [[ap + -74] + 6], ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
jmp rel 44;
ap += 46;
call rel 110246;
[ap + 0] = [ap + -1] + 110245, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 47680, ap++;
call rel 78213;
[ap + 0] = [ap + -71] + 3, ap++;
[ap + 0] = [ap + -66] + [ap + -8], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 66;
[ap + 0] = [[ap + -91] + 4], ap++;
call rel 110220;
[ap + 0] = [ap + -1] + 110219, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 50390, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -100] + 8, ap++;
[ap + 0] = [[ap + -101] + 6], ap++;
[ap + 0] = [[ap + -102] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 75;
call rel 110195;
[ap + 0] = [ap + -1] + 110194, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 62210, ap++;
call rel 78007;
[ap + 0] = [ap + -90], ap++;
[ap + 0] = [ap + -90] + [ap + -8], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 77;
call rel 110174;
[ap + 0] = [ap + -1] + 110173, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 62290, ap++;
call rel 77995;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -98] + [ap + -8], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 92;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 110151;
[ap + 0] = [ap + -1] + 110150, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 64350, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 21;
ap += 104;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 110130;
[ap + 0] = [ap + -1] + 110129, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 76030, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1255235991522866093190400328027936434203587216166838216390545567461445183904, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel 77946;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel 77922;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 77632;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 77629;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 77535;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 189 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 110;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 79 if [ap + -3] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -6] = [[ap + -25] + 1];
[ap + -5] = [[ap + -25] + 2];
[ap + -7] = [[ap + -25] + 3];
[ap + -4] = [[ap + -25] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25]) %}
[ap + 0] = [[ap + -25] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -32] + 7], ap++;
[ap + 0] = [[ap + -33] + 8], ap++;
ret;
call rel 109542;
[ap + 0] = [ap + -1] + 109541, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11110, ap++;
call rel 77356;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 2;
call rel 109523;
[ap + 0] = [ap + -1] + 109522, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11090, ap++;
call rel 77346;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
call rel 109502;
[ap + 0] = [ap + -1] + 109501, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13150, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 19;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
call rel 109483;
[ap + 0] = [ap + -1] + 109482, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 24830, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 189 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 110;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 79 if [ap + -3] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -6] = [[ap + -25] + 1];
[ap + -5] = [[ap + -25] + 2];
[ap + -7] = [[ap + -25] + 3];
[ap + -4] = [[ap + -25] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25]) %}
[ap + 0] = [[ap + -25] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -32] + 7], ap++;
[ap + 0] = [[ap + -33] + 8], ap++;
ret;
call rel 109322;
[ap + 0] = [ap + -1] + 109321, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11110, ap++;
call rel 77136;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 2;
call rel 109303;
[ap + 0] = [ap + -1] + 109302, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11090, ap++;
call rel 77126;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
call rel 109282;
[ap + 0] = [ap + -1] + 109281, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13150, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 19;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
call rel 109263;
[ap + 0] = [ap + -1] + 109262, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 24830, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 30 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 640, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 76835;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 76832;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -5] + 0], ap++;
[ap + 3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -5] + 2];
jmp rel 85 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 17 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
call rel 76836;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -28] + 8, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
jmp rel 31;
ap += 12;
call rel 76812;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -26] + 11750, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13910, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -5] + 0], ap++;
[ap + 3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -5] + 2];
jmp rel 85 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 17 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
call rel 76678;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -28] + 8, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
jmp rel 31;
ap += 12;
call rel 76654;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -26] + 11750, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13910, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 76330;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 76327;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -5] + 0], ap++;
[ap + 3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -5] + 2];
jmp rel 85 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 17 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
call rel 76331;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -28] + 8, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
jmp rel 31;
ap += 12;
call rel 76307;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -26] + 11750, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13910, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 76237;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1186423139533537089827846530073695414305470307342419724096222587041583312528, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 76724;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 863347913503261957104720878708744394926083541396783723686988354578931871543, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
ret;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -17999;
jmp rel 95 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[ap + -2] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -13] + 7];
[ap + -2] = [[ap + -13] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13] + 7) %}
[ap + 0] = [[ap + -13] + 10], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 9], ap++;
[ap + 0] = [[ap + -15] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -22] + 12];
[ap + -5] = [[ap + -22] + 13];
[ap + -4] = [[ap + -22] + 14];
[ap + -3] = [[ap + -22] + 15];
[ap + -2] = [[ap + -22] + 16];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22] + 12) %}
[ap + 0] = [[ap + -22] + 18], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 17], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -26] + 19, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -23] + 17], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -26] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 19], ap++;
[ap + 0] = [[ap + -29] + 20], ap++;
ret;
ap += 9;
[ap + 0] = [[ap + -23] + 9], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2] + 11310, ap++;
[ap + 0] = [ap + -26] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 11], ap++;
[ap + 0] = [[ap + -29] + 12], ap++;
ret;
ap += 13;
[ap + 0] = [[ap + -23] + 5], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2] + 21970, ap++;
[ap + 0] = [ap + -26] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
ret;
ap += 20;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26] + 33200, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 132 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 99 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 67;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 43 if [ap + -3] != 0;
ap += 4;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -5] = [[ap + -19] + 1];
[ap + -4] = [[ap + -19] + 2];
[ap + -3] = [[ap + -19] + 3];
[ap + -2] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 75720;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10140, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 75717;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -16] + 10120, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 12180, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 23860, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 28 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 640, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 29980 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768181476, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 1085;
[fp + -6] = [ap + 0] + 29980, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 1043 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 1022;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 975 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 954;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 907 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 886;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 839 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 818;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 771 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 750;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 703 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 682;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 635 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 614;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 567 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 546;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 499 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 478;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 451;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 410 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -19] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -21] + 1], ap++;
[ap + -5] = [[ap + -22] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 386 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -17] + 1];
[ap + 0] = [ap + -17] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 361;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -14] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 320 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -16] + 0], ap++;
[ap + 3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -21] + 2];
jmp rel 292 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 258 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 230 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 186 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -13] + 0], ap++;
[ap + 3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -18] + 2];
jmp rel 158 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 124 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 96 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 78288;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 107047;
[ap + 0] = [ap + -1] + 107046, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 314110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 314110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 48;
[ap + -3] = [ap + 0] + 314110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -200], ap++;
[ap + 0] = [ap + -187], ap++;
[ap + 0] = [ap + -174], ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = [ap + -148], ap++;
[ap + 0] = [ap + -135], ap++;
[ap + 0] = [ap + -122], ap++;
[ap + 0] = [ap + -109], ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -31], ap++;
call rel -18885;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78225;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 78203;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3470, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5080, ap++;
jmp rel 11;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -8] + 5140, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 6750, ap++;
call rel 78182;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78181;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 8150, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -9] + 7680, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 9190, ap++;
call rel 78170;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78169;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 10590, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 10590, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 11900, ap++;
call rel 78158;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 12700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 14010, ap++;
call rel 78148;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 14810, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 16120, ap++;
call rel 78138;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 16920, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 18230, ap++;
call rel 78128;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 19030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 20340, ap++;
call rel 78118;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 21140, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 22450, ap++;
call rel 78108;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 23250, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 24560, ap++;
call rel 78098;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 25360, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 26670, ap++;
call rel 78088;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 27470, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 28780, ap++;
call rel 78078;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77942;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 77855;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 106614;
[ap + 0] = [ap + -1] + 106613, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 63820 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 63820, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 63820, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -18064;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77807;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 77913;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77777;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 77739;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 106498;
[ap + 0] = [ap + -1] + 106497, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 74254;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77636;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77625;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 192;
[fp + -6] = [ap + 0] + 4780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 149 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 128;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 77517;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 106275;
[ap + 0] = [ap + -1] + 106274, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 53520, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + -6] = [ap + 0] + [ap + -17], ap++;
call rel -18052;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 77461;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 77566;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 2270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3580, ap++;
call rel 77554;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 77417;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 230;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 187 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 166;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 77329;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 106087;
[ap + 0] = [ap + -1] + 106086, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13410, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 109;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -20] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 45 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 77202;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 77307;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 77170;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 192;
[fp + -6] = [ap + 0] + 4780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 149 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 128;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 77061;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 105819;
[ap + 0] = [ap + -1] + 105818, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 53520, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + -6] = [ap + 0] + [ap + -17], ap++;
call rel -18144;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 77005;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 77110;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 2270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3580, ap++;
call rel 77098;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76961;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 230;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 187 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 166;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 76873;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 105631;
[ap + 0] = [ap + -1] + 105630, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13410, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 109;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 1090654979984666118274814236676208321276316261611326539512404368163006837786, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -20] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 45 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 76746;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 76851;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76714;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 8220 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203236, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 339;
[fp + -6] = [ap + 0] + 8220, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 296 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 275;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 227 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 199 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 165 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 137 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 114;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 92;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 76504;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 105262;
[ap + 0] = [ap + -1] + 105261, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 342190, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -24] + 0];
jmp rel 39;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -23] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -18340;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76445;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76532;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76529;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1630, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3240, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3300, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4910, ap++;
call rel 76506;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 5710, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7020, ap++;
call rel 76495;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76358;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 13270 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768198186, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 528;
[fp + -6] = [ap + 0] + 13270, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 485 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 457 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 423 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 395 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 372;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -11] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 328 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 0], ap++;
[ap + -4] = [[ap + -21] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -22] + 2];
jmp rel 307;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -19] + 0], ap++;
[ap + -3] = [[ap + -20] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -21] + 2];
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 259 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 231 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 197 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 169 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 124 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 103;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 76003;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 104761;
[ap + 0] = [ap + -1] + 104760, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 279430, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 44;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -30], ap++;
call rel -16519;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75939;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 76008;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2740, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4350, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4410, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6020, ap++;
call rel 75986;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -8] + 6820, ap++;
jmp rel 5;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -6] + 8130, ap++;
call rel 75975;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75973;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 9730, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 8790, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 10400, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 10460, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 12070, ap++;
call rel 75950;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75813;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 10960 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768200496, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 456;
[fp + -6] = [ap + 0] + 10960, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 413 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 392;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 344 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 316 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 282 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 254 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 231;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 9;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 187 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -18] + 0], ap++;
[ap + 3] = [[ap + -19] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -23] + 2];
jmp rel 159 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 125 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 97 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 75509;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 104267;
[ap + 0] = [ap + -1] + 104266, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 272800, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 43;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -75], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -25], ap++;
call rel -15995;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75446;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 75513;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75511;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 5310, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5980, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 6040, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7650, ap++;
call rel 75488;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 8450, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 9760, ap++;
call rel 75477;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75340;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 16890 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768194566, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 645;
[fp + -6] = [ap + 0] + 16890, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 602 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 581;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 533 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 512;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 464 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 443;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 395 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 367 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 333 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 305 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 260 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -13] + 0], ap++;
[ap + 3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -18] + 2];
jmp rel 232 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 198 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 170 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 125 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 104;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 74897;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 103655;
[ap + 0] = [ap + -1] + 103654, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 292760, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 45;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -114], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -31], ap++;
call rel -15697;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 74832;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 74892;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2740, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4350, ap++;
jmp rel 11;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -8] + 4410, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 6020, ap++;
call rel 74870;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 6080, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7690, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 7750, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 9360, ap++;
call rel 74848;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 10160, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 11470, ap++;
call rel 74837;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 12270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 13580, ap++;
call rel 74826;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 14380, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 15690, ap++;
call rel 74815;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 74678;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7520 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203936, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 310;
[fp + -6] = [ap + 0] + 7520, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 268 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 240 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 206 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 178 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 156;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -11] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 113 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 0], ap++;
[ap + -4] = [[ap + -21] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -22] + 2];
jmp rel 92;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -19] + 0], ap++;
[ap + -3] = [[ap + -20] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -21] + 2];
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 74476;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 103235;
[ap + 0] = [ap + -1] + 103234, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 243460 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 243460, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 39;
[ap + -3] = [ap + 0] + 243460, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -14645;
jmp rel 15 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 300, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 74422;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 74510;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 74509;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 3980, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3040, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4650, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4710, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6320, ap++;
call rel 74487;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 74351;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5210 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206246, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 239;
[fp + -6] = [ap + 0] + 5210, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 197 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 169 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 135 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 107 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 85;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 74201;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102960;
[ap + 0] = [ap + -1] + 102959, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 238640 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 238640, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 0];
jmp rel 38;
[ap + -3] = [ap + 0] + 238640, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -14], ap++;
call rel -14351;
jmp rel 15 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 300, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 74148;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 74254;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 730, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2340, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2400, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4010, ap++;
call rel 74232;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 74096;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 11500 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768199956, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 107;
[fp + -6] = [ap + 0] + 11500, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 74206;
[ap + 0] = [ap + -69], ap++;
jmp rel 84 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 74051;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102810;
[ap + 0] = [ap + -1] + 102809, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 42380 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 42380, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -22] + 0];
jmp rel 41;
[ap + -3] = [ap + 0] + 42380, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -13954;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73995;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 74110;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -8] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73973;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5210 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206246, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 236;
[fp + -6] = [ap + 0] + 5210, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 214;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 173 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -16] + 0], ap++;
[ap + 3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -21] + 2];
jmp rel 145 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 111 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 83 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73823;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102582;
[ap + 0] = [ap + -1] + 102581, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 126520 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 126520, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 35;
[ap + -3] = [ap + 0] + 126520, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -13928;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73773;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 73859;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73858;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 4810, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73721;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73683;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102442;
[ap + 0] = [ap + -1] + 102441, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 73610 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 73610, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 73610, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -13287;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73636;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73625;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73587;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102346;
[ap + 0] = [ap + -1] + 102345, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 73610 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 73610, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 73610, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -13124;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73540;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73529;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 122;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73491;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102250;
[ap + 0] = [ap + -1] + 102249, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 11800 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 74;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 73402;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73391;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73353;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102112;
[ap + 0] = [ap + -1] + 102111, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 69868;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73250;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73239;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73201;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 101960;
[ap + 0] = [ap + -1] + 101959, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 69716;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73098;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73087;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73049;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 101808;
[ap + 0] = [ap + -1] + 101807, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 434428485796416085034498104175908286789185203756459893121763025398211911987, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 69564;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72946;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72935;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 72897;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 101656;
[ap + 0] = [ap + -1] + 101655, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 69412;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72794;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72783;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 72745;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 101504;
[ap + 0] = [ap + -1] + 101503, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 69260;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72642;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72631;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 72593;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 101352;
[ap + 0] = [ap + -1] + 101351, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 523410893316558122378830306191683135863976721326799590270659346354002858736, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 69108;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72490;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72479;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 95;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 72441;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 101200;
[ap + 0] = [ap + -1] + 101199, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 10600 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 10600, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 47;
[ap + -3] = [ap + 0] + 10600, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 760565771580090624121121792023365464265448761272770967981882436800089234901, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 17 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 300, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 72379;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72368;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 72330;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 101089;
[ap + 0] = [ap + -1] + 101088, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 394323579402937197825070278441497235490914917810450857249771331122744639564, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 69571;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72227;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72216;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 72027;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 100785;
[ap + 0] = [ap + -1] + 100784, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 15, ap++;
[ap + 0] = [ap + -1] + 700760, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -13811;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71970;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 72055;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 72044;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71907;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 71717;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 100475;
[ap + 0] = [ap + -1] + 100474, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 628380, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -12589;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71660;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 71745;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 71734;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71597;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3880 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207576, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 158;
[fp + -6] = [ap + 0] + 3880, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 94;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 71509;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 100267;
[ap + 0] = [ap + -1] + 100266, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 9, ap++;
[ap + 0] = [ap + -1] + 413600, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 35;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -24], ap++;
call rel -11625;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71454;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 71559;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71422;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5990 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205466, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 5990, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 160;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 71285;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 100043;
[ap + 0] = [ap + -1] + 100042, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 106480, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 101;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -35] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[ap + -22] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 1], ap++;
[ap + -4] = [[ap + -21] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -23] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -20] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -22] + 2], ap++;
[ap + -7] = [[ap + -23] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -23] + 4, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 68553;
[ap + 0] = [fp + -8] + 6, ap++;
jmp rel 34 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 25 if [ap + -11] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 71732;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1] + 1900, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -14] + 2090, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71164;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 71260;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 3480, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4790, ap++;
call rel 71249;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71112;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 71024;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 99782;
[ap + 0] = [ap + -1] + 99781, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28290, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -11479;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70968;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 71073;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70936;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 70848;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 99606;
[ap + 0] = [ap + -1] + 99605, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28290, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -11460;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70792;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 70897;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70760;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 192;
[fp + -6] = [ap + 0] + 4780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 149 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 128;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 70651;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 99409;
[ap + 0] = [ap + -1] + 99408, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 37830, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + -6] = [ap + 0] + [ap + -17], ap++;
call rel -11465;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70595;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70700;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 2270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3580, ap++;
call rel 70688;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70551;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 70361;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 99119;
[ap + 0] = [ap + -1] + 99118, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 89870, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -11536;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70304;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 70389;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 70378;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70241;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 70153;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 98911;
[ap + 0] = [ap + -1] + 98910, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28290, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -11219;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70097;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 70202;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70065;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 69977;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 98736;
[ap + 0] = [ap + -1] + 98735, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -11197;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69929;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 70035;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69899;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 69861;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 98620;
[ap + 0] = [ap + -1] + 98619, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 66376;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69758;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69747;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 156;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 113 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 92;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 69660;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 98418;
[ap + 0] = [ap + -1] + 98417, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 37620, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 35;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -11287;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 69607;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 69712;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 69575;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 156;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 113 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 92;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 69487;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 98245;
[ap + 0] = [ap + -1] + 98244, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 37620, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 35;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -11240;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 69434;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 69539;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 69402;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 230;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 187 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 166;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 69314;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 98072;
[ap + 0] = [ap + -1] + 98071, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13410, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 109;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -20] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 45 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 69187;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 69292;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 69155;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 69014;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 97773;
[ap + 0] = [ap + -1] + 97772, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -11400;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68965;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 69060;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68924;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 68886;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 97645;
[ap + 0] = [ap + -1] + 97644, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 65495;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 65475;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68707;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68696;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 68658;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 97417;
[ap + 0] = [ap + -1] + 97416, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 65267;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 65247;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68479;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68468;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 68328;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 97087;
[ap + 0] = [ap + -1] + 97086, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -11581;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68279;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 68374;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68238;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 68200;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 96959;
[ap + 0] = [ap + -1] + 96958, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 64809;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 64789;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68021;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68010;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 67972;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 96731;
[ap + 0] = [ap + -1] + 96730, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 64649;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67869;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67858;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 67820;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 96579;
[ap + 0] = [ap + -1] + 96578, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1186423139533537089827846530073695414305470307342419724096222587041583312528, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 65061;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67717;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67706;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 95;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 67668;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 96427;
[ap + 0] = [ap + -1] + 96426, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 10600 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 10600, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 47;
[ap + -3] = [ap + 0] + 10600, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 863347913503261957104720878708744394926083541396783723686988354578931871543, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 17 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 300, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 67606;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67595;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 164;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 67557;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 96316;
[ap + 0] = [ap + -1] + 96315, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 71730 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 71730, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 116;
[ap + -3] = [ap + 0] + 71730, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -29813;
jmp rel 90 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[ap + -2] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 62 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -13] + 7];
[ap + -2] = [[ap + -13] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13] + 7) %}
[ap + 0] = [[ap + -13] + 10], ap++;
jmp rel 42 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 9], ap++;
[ap + 0] = [[ap + -15] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -22] + 12];
[ap + -5] = [[ap + -22] + 13];
[ap + -4] = [[ap + -22] + 14];
[ap + -3] = [[ap + -22] + 15];
[ap + -2] = [[ap + -22] + 16];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22] + 12) %}
[ap + 0] = [[ap + -22] + 18], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 17], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -3] + 400, ap++;
[ap + 0] = [ap + -27] + 19, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[ap + -23] + 17], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -25] + 21, ap++;
[ap + 0] = [[ap + -26] + 19], ap++;
[ap + 0] = [[ap + -27] + 20], ap++;
jmp rel 31;
ap += 9;
[ap + 0] = [[ap + -23] + 9], ap++;
[ap + 0] = [ap + -1] + 11310, ap++;
[ap + 0] = [ap + -25] + 13, ap++;
[ap + 0] = [[ap + -26] + 11], ap++;
[ap + 0] = [[ap + -27] + 12], ap++;
jmp rel 20;
ap += 13;
[ap + 0] = [[ap + -23] + 5], ap++;
[ap + 0] = [ap + -1] + 21970, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [[ap + -27] + 8], ap++;
jmp rel 9;
ap += 20;
[ap + 0] = [ap + -25] + 33300, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67426;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67415;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 67377;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 96136;
[ap + 0] = [ap + -1] + 96135, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35750 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35750, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 35750, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -11886;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67330;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67319;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 122;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 67281;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 96040;
[ap + 0] = [ap + -1] + 96039, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 11800 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 74;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 67192;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67181;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
[fp + -5] = [[fp + -6] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 6], ap++;
jmp rel 96 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 667762922074743212655112191605651022555914490794209966519997349159573672584, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 7];
[ap + -4] = [[fp + -6] + 8];
[ap + -3] = [[fp + -6] + 9];
[ap + -2] = [[fp + -6] + 10];
[fp + -4] = [[fp + -6] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 7) %}
[ap + 0] = [[fp + -6] + 13], ap++;
jmp rel 68 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 163567562514348492070331390455692180584235264620730029616953355796637619313, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 14];
[ap + -4] = [[fp + -6] + 15];
[ap + -3] = [[fp + -6] + 16];
[ap + -2] = [[fp + -6] + 17];
[fp + -3] = [[fp + -6] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 14) %}
[ap + 0] = [[fp + -6] + 20], ap++;
jmp rel 40 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 21];
[ap + -5] = [[fp + -6] + 22];
[ap + -4] = [[fp + -6] + 23];
[ap + -3] = [[fp + -6] + 24];
[ap + -2] = [[fp + -6] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 21) %}
[ap + 0] = [[fp + -6] + 27], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -6] + 28, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -6] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -6] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 28], ap++;
[ap + 0] = [[fp + -6] + 29], ap++;
ret;
ap += 7;
[ap + 0] = [[fp + -6] + 19], ap++;
[ap + 0] = [ap + -1] + 11130, ap++;
[ap + 0] = [fp + -6] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 21], ap++;
[ap + 0] = [[fp + -6] + 22], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [ap + -1] + 22270, ap++;
[ap + 0] = [fp + -6] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 14], ap++;
[ap + 0] = [[fp + -6] + 15], ap++;
ret;
ap += 19;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -1] + 33410, ap++;
[ap + 0] = [fp + -6] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
ret;
ap += 3;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -13] = [[fp + -10] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 3], ap++;
jmp rel 966 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -10] + 5];
[ap + -9] = [[fp + -10] + 6];
[ap + -8] = [[fp + -10] + 7];
[ap + -7] = [[fp + -10] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 5) %}
[ap + 0] = [[fp + -10] + 10], ap++;
jmp rel 924 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [fp + -10] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -14] + 0], ap++;
[ap + -4] = [[fp + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -14] + 2];
jmp rel 883;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -14] + 0], ap++;
[ap + -3] = [[fp + -14] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -14] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 848 if [ap + -3] != 0;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -3] = [[fp + -11] + 1];
[ap + 0] = [[fp + -11] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[fp + 1] = [fp + -11] + 3;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -23] + 0];
[ap + -4] = [[ap + -23] + 1];
[ap + -3] = [[ap + -23] + 2];
[ap + -5] = [[ap + -23] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -23]) %}
[ap + 0] = [[ap + -23] + 5], ap++;
jmp rel 774 if [ap + -1] != 0;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [[ap + -25] + 6], ap++;
[fp + 2] = [ap + -26] + 7;
[ap + 0] = [ap + -2], ap++;
jmp rel 743 if [ap + -2] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 28;
[ap + -1] = [[ap + -10] + 0];
call rel 95679;
[ap + 0] = [ap + -1] + 95678, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 225550, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 67454;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -19] + [ap + -8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = 16777216, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -5], memory[ap + -1]) %}
[ap + 4] = [[ap + -12] + 1], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -15] + 2], ap++;
[ap + -1] = [[ap + -16] + 3], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -5] = [ap + -3] + [ap + -1];
[ap + 0] = 16777215, ap++;
[fp + -5] = [[fp + -12] + 0];
[ap + -1] = [[fp + -12] + 1];
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -12], ap++;
[fp + 0] = [fp + -12] + 5;
[ap + -5] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 4];
jmp rel 652;
[ap + -1] = [[ap + -22] + 4];
[ap + 0] = [ap + -22] + 5, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
call rel 67416;
jmp rel 625 if [ap + -3] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 85;
[ap + -1] = [[ap + -9] + 0];
call rel 95604;
[ap + 0] = [ap + -1] + 95603, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 1680, ap++;
[ap + 0] = [ap + -9] + [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 667762922074743212655112191605651022555914490794209966519997349159573672584, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + 2] + 0];
[ap + -5] = [[fp + 2] + 1];
[ap + -4] = [[fp + 2] + 2];
[ap + -3] = [[fp + 2] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 2]) %}
[ap + 0] = [[fp + 2] + 5], ap++;
jmp rel 38 if [ap + -1] != 0;
[ap + 0] = [[fp + 2] + 4], ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[fp + -8] = [ap + 0] + [ap + -1], ap++;
[ap + 0] = [fp + 2] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 120;
call rel 95566;
[ap + 0] = [ap + -1] + 95565, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 206660, ap++;
call rel 67417;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -15] + [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[fp + 2] + 4], ap++;
call rel 95543;
[ap + 0] = [ap + -1] + 95542, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 207860, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + 0] = [[fp + 2] + 7], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[fp + -3] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 497;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + 1] + 0];
[ap + -2] = [[fp + 1] + 1];
[ap + 0] = [[fp + 1] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 2], ap++;
[ap + -4] = [[ap + -21] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -23] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -22] + 3], ap++;
[ap + -7] = [[ap + -23] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1] + 3, ap++;
[ap + 0] = [ap + -26] + 5, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + 2] + 0];
[ap + -5] = [[fp + 2] + 1];
[ap + -4] = [[fp + 2] + 2];
[ap + -6] = [[fp + 2] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 2]) %}
[ap + 0] = [[fp + 2] + 5], ap++;
jmp rel 424 if [ap + -1] != 0;
[ap + 0] = [[fp + 2] + 4], ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + -1] = [ap + 0] + [fp + -8], ap++;
[ap + 0] = [fp + 2] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 394 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -3] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -16] = [[ap + -14] + 1];
[ap + -4] = [[ap + -14] + 2];
[ap + -5] = [[ap + -14] + 3];
[fp + -9] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 318 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 1025310123145470443248164887320592303314351953140339051646286095766923394624, ap++;
[ap + -1] = [[ap + -6] + 0];
[fp + -9] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 67218;
[ap + 0] = [ap + -97] + 3, ap++;
jmp rel 239 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 223 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[ap + -3] = [[ap + -11] + 2];
[ap + -2] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 182 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 143 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -19] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + -6] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -24] + 2];
jmp rel 12;
[ap + -1] = [[ap + -23] + 2];
ap += 8;
[ap + 0] = [ap + -31] + 3, ap++;
[ap + 0] = [ap + -12] + 11220, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 24;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = [ap + -27] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -5] = [[ap + -13] + 1];
[ap + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
[fp + -3] = [[ap + -13] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 6], ap++;
jmp rel 81 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 67468;
jmp rel 56 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 68022;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -2] = [[ap + -25] + 1];
[ap + -6] = [[ap + -25] + 2];
[ap + -5] = [[ap + -25] + 3];
[ap + -4] = [[ap + -25] + 4];
[ap + -3] = [[ap + -25] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25]) %}
[ap + 0] = [[ap + -25] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
ret;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -33] + 8], ap++;
[ap + 0] = [[ap + -34] + 9], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 13700, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[ap + -14] + 5], ap++;
call rel 95182;
[ap + 0] = [ap + -1] + 95181, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 85050, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -27] + 7], ap++;
[ap + 0] = [[ap + -28] + 8], ap++;
ret;
call rel 95163;
[ap + 0] = [ap + -1] + 95162, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 95050, ap++;
call rel 63712;
[ap + 0] = [ap + -37] + 3, ap++;
[ap + 0] = [ap + -21] + [ap + -8], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 16;
[ap + 0] = [[ap + -28] + 4], ap++;
call rel 95142;
[ap + 0] = [ap + -1] + 95141, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 97100, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -37] + 8, ap++;
[ap + 0] = [[ap + -38] + 6], ap++;
[ap + 0] = [[ap + -39] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 95118;
[ap + 0] = [ap + -1] + 95117, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 108560, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 15;
ap += 1;
call rel 95103;
[ap + 0] = [ap + -1] + 95102, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 108750, ap++;
[ap + 0] = [ap + -14] + [ap + -1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[ap + -15] + 5], ap++;
call rel 95081;
[ap + 0] = [ap + -1] + 95080, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 194050, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -27] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
[ap + 0] = [[ap + -30] + 8], ap++;
ret;
call rel 95060;
[ap + 0] = [ap + -1] + 95059, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 206560, ap++;
call rel 66911;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -15] + [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[fp + 2] + 4], ap++;
call rel 95037;
[ap + 0] = [ap + -1] + 95036, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 207760, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + 2] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + 0] = [[fp + 2] + 7], ap++;
ret;
call rel 95016;
[ap + 0] = [ap + -1] + 95015, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 219670, ap++;
call rel 67825;
[ap + 0] = [ap + -28] + 2, ap++;
[ap + 0] = [ap + -18] + [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 94993;
[ap + 0] = [ap + -1] + 94992, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 221410, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12] + [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 19;
call rel 94977;
[ap + 0] = [ap + -1] + 94976, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 222980, ap++;
call rel 67786;
[ap + 0] = [ap + -36] + 5, ap++;
[ap + 0] = [ap + -18] + [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 94950;
[ap + 0] = [ap + -1] + 94949, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 226120, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 67766;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -17] + [ap + -8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[ap + -24] + 4], ap++;
call rel 94925;
[ap + 0] = [ap + -1] + 94924, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 227210, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -38] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 6], ap++;
[ap + 0] = [[ap + -41] + 7], ap++;
ret;
call rel 94902;
[ap + 0] = [ap + -1] + 94901, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 238710, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 67727;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17] + [ap + -8], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
call rel 94881;
[ap + 0] = [ap + -1] + 94880, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 238810, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 62700;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = [ap + -23] + [ap + -8], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[fp + -10] + 9], ap++;
call rel 94858;
[ap + 0] = [ap + -1] + 94857, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 241020, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -10] + 13, ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [[fp + -10] + 12], ap++;
jmp rel 21;
[ap + 0] = [[fp + -10] + 2], ap++;
call rel 94837;
[ap + 0] = [ap + -1] + 94836, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 252820, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -10] + 6, ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 145 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 33 if [ap + -3] != 0;
ap += 111;
call rel 94751;
[ap + 0] = [ap + -1] + 94750, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 86510, ap++;
call rel 66530;
[ap + 0] = [ap + -130], ap++;
[ap + 0] = [ap + -125] + [ap + -8], ap++;
[ap + 0] = [ap + -133], ap++;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = 1025310123145470443248164887320592303314351953140339051646286095766923394624, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 67527;
[ap + 0] = [ap + -129] + 3, ap++;
jmp rel 38 if [ap + -10] != 0;
[ap + 0] = [ap + -12], ap++;
jmp rel 16 if [ap + -10] != 0;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 120;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 94614;
[ap + 0] = [ap + -1] + 94613, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 87520, ap++;
[ap + 0] = [ap + -130], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -133], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
ret;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 63018;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 113 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 23 if [ap + -3] != 0;
ap += 120;
call rel 94379;
[ap + 0] = [ap + -1] + 94378, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 87520, ap++;
[ap + 0] = [ap + -133], ap++;
[ap + 0] = [ap + -128] + [ap + -2], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1025310123145470443248164887320592303314351953140339051646286095766923394624, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 67165;
[ap + 0] = [ap + -129] + 3, ap++;
jmp rel 23 if [ap + -10] != 0;
[ap + 0] = [ap + -12], ap++;
jmp rel 15 if [ap + -10] != 0;
ap += 3;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -13] + 190, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 123;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 94274;
[ap + 0] = [ap + -1] + 94273, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 87890, ap++;
[ap + 0] = [ap + -133], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 66993;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 61975;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 61881;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 6020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 241;
[fp + -6] = [ap + 0] + 6020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 199 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 178;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 151;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -19] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -21] + 1], ap++;
[ap + -5] = [[ap + -22] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 86 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -17] + 1];
[ap + 0] = [ap + -17] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 65128;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 93887;
[ap + 0] = [ap + -1] + 93886, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 45400 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 45400, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 35;
[ap + -3] = [ap + 0] + 45400, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -2067;
[ap + 0] = [ap + -46] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 65078;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 65166;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 65165;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 3510, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 3510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4820, ap++;
call rel 65154;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 65018;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 12000 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768199456, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 124;
[fp + -6] = [ap + 0] + 12000, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 67262;
[ap + 0] = [ap + -69], ap++;
jmp rel 99 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
call rel 64973;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 93730;
[ap + 0] = [ap + -1] + 93729, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 266550, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -7] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -8] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -27] + 0];
jmp rel 46;
[ap + -8] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
call rel -2117;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -10] + 200, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 64904;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 65017;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 64878;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 3610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 170;
[fp + -6] = [ap + 0] + 3610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 127 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 103 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 64788;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 93546;
[ap + 0] = [ap + -1] + 93545, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 105330, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 46;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -1290;
jmp rel 24 if [ap + -8] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 67413;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + 2100, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 64722;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 900, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2410, ap++;
call rel 64827;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 64690;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 204;
[fp + -6] = [ap + 0] + 3510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 161 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 137 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 64601;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 93359;
[ap + 0] = [ap + -1] + 93358, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12210, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 82;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -17] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 18 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3] + 300, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 64501;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2310, ap++;
call rel 64606;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 64469;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 64430;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 93189;
[ap + 0] = [ap + -1] + 93188, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 61671;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 64327;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 64316;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 161;
[fp + -6] = [ap + 0] + 3610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 94 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 64228;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 92986;
[ap + 0] = [ap + -1] + 92985, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 103330, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -1478;
jmp rel 15 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 200, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 64171;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 900, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2410, ap++;
call rel 64276;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 64139;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 64051;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 92810;
[ap + 0] = [ap + -1] + 92809, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -1469;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 64003;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 64109;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 63973;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 63935;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 92694;
[ap + 0] = [ap + -1] + 92693, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 60450;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 63832;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 63821;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -10] = [[fp + -9] + 1];
[ap + -3] = [[fp + -9] + 2];
[ap + -2] = [[fp + -9] + 3];
[fp + -8] = [[fp + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 6], ap++;
jmp rel 199 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -7], ap++;
call rel 66463;
jmp rel 167 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 156 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel [fp + -7];
jmp rel 19;
jmp rel 10;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 3652501241, ap++;
[ap + 0] = 10628944869218562084050143519444549580389464591454674019345556079, ap++;
jmp rel 15;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 118034699, ap++;
[ap + 0] = 969166842145694355898879064562217049827305169495536240246191507779, ap++;
jmp rel 8;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 4206867930, ap++;
[ap + 0] = 8154142684220187899712437956956085183, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 779633036333210596272271987671964396375339327212352681668431549906787458932, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -6] = [[ap + -13] + 1];
[ap + -3] = [[ap + -13] + 2];
[ap + -2] = [[ap + -13] + 3];
[ap + -5] = [[ap + -13] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 6], ap++;
jmp rel 102 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 667762922074743212655112191605651022555914490794209966519997349159573672584, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -4] = [[ap + -19] + 8];
[ap + -3] = [[ap + -19] + 9];
[ap + -2] = [[ap + -19] + 10];
[ap + -10] = [[ap + -19] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 13], ap++;
jmp rel 73 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 14];
[ap + -5] = [[ap + -26] + 15];
[ap + -4] = [[ap + -26] + 16];
[ap + -3] = [[ap + -26] + 17];
[ap + -2] = [[ap + -26] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26] + 14) %}
[ap + 0] = [[ap + -26] + 20], ap++;
jmp rel 42 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 21];
[ap + -5] = [[ap + -33] + 22];
[ap + -4] = [[ap + -33] + 23];
[ap + -3] = [[ap + -33] + 24];
[ap + -2] = [[ap + -33] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 21) %}
[ap + 0] = [[ap + -33] + 27], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 26], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -37] + 28, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -34] + 26], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -37] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -39] + 28], ap++;
[ap + 0] = [[ap + -40] + 29], ap++;
ret;
ap += 7;
[ap + 0] = [[ap + -34] + 19], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2] + 11130, ap++;
[ap + 0] = [ap + -37] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -39] + 21], ap++;
[ap + 0] = [[ap + -40] + 22], ap++;
ret;
ap += 14;
[ap + 0] = [[ap + -34] + 12], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2] + 22360, ap++;
[ap + 0] = [ap + -37] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -39] + 14], ap++;
[ap + 0] = [[ap + -40] + 15], ap++;
ret;
ap += 20;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2] + 33500, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -39] + 7], ap++;
[ap + 0] = [[ap + -40] + 8], ap++;
ret;
ap += 26;
[ap + 0] = [ap + -27] + 44840, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
jmp rel 8;
ap += 27;
[ap + 0] = [ap + -33] + 45130, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 106;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -2] + 106350, ap++;
[ap + 0] = [fp + -9] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 7], ap++;
[ap + 0] = [[fp + -9] + 8], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 357 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 324 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 292;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 266 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
call rel 66600;
jmp rel 241 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 230 if [ap + -7] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -5] = [[ap + -14] + 1];
[ap + -4] = [[ap + -14] + 2];
[ap + -3] = [[ap + -14] + 3];
[ap + -2] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 200 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel [ap + -11];
jmp rel 19;
jmp rel 10;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 3652501241, ap++;
[ap + 0] = 10628944869218562084050143519444549580389464591454674019345556079, ap++;
jmp rel 15;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 118034699, ap++;
[ap + 0] = 969166842145694355898879064562217049827305169495536240246191507779, ap++;
jmp rel 8;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 4206867930, ap++;
[ap + 0] = 8154142684220187899712437956956085183, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 779633036333210596272271987671964396375339327212352681668431549906787458932, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -6] = [[ap + -8] + 1];
[ap + -3] = [[ap + -8] + 2];
[ap + -2] = [[ap + -8] + 3];
[ap + -5] = [[ap + -8] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 6], ap++;
jmp rel 143 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 667762922074743212655112191605651022555914490794209966519997349159573672584, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 7];
[ap + -4] = [[ap + -14] + 8];
[ap + -3] = [[ap + -14] + 9];
[ap + -2] = [[ap + -14] + 10];
[ap + -10] = [[ap + -14] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14] + 7) %}
[ap + 0] = [[ap + -14] + 13], ap++;
jmp rel 114 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 14];
[ap + -5] = [[ap + -21] + 15];
[ap + -4] = [[ap + -21] + 16];
[ap + -3] = [[ap + -21] + 17];
[ap + -2] = [[ap + -21] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 14) %}
[ap + 0] = [[ap + -21] + 20], ap++;
jmp rel 83 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1765908283277496344688841180082140943953894109846608098189093375020781927514, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -27] + 21];
[ap + -4] = [[ap + -27] + 22];
[ap + -3] = [[ap + -27] + 23];
[ap + -2] = [[ap + -27] + 24];
[ap + -23] = [[ap + -27] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -27] + 21) %}
[ap + 0] = [[ap + -27] + 27], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[ap + -28] + 26], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 122537050860645, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 66795;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -53] + 28];
[ap + -2] = [[ap + -53] + 29];
[ap + -6] = [[ap + -53] + 30];
[ap + -5] = [[ap + -53] + 31];
[ap + -4] = [[ap + -53] + 32];
[ap + -3] = [[ap + -53] + 33];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -53] + 28) %}
[ap + 0] = [[ap + -53] + 35], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -54] + 34], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -57] + 36, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -54] + 34], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -57] + 38, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 36], ap++;
[ap + 0] = [[ap + -60] + 37], ap++;
ret;
ap += 26;
[ap + 0] = [[ap + -54] + 26], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 13740, ap++;
[ap + 0] = [ap + -57] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 28], ap++;
[ap + 0] = [[ap + -60] + 29], ap++;
ret;
ap += 32;
[ap + 0] = [[ap + -54] + 19], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 24880, ap++;
[ap + 0] = [ap + -57] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 21], ap++;
[ap + 0] = [[ap + -60] + 22], ap++;
ret;
ap += 39;
[ap + 0] = [[ap + -54] + 12], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 36110, ap++;
[ap + 0] = [ap + -57] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 14], ap++;
[ap + 0] = [[ap + -60] + 15], ap++;
ret;
ap += 45;
[ap + 0] = [[ap + -54] + 5], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 47250, ap++;
[ap + 0] = [ap + -57] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 7], ap++;
[ap + 0] = [[ap + -60] + 8], ap++;
ret;
ap += 55;
[ap + 0] = [[ap + -70] + 5], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 59050, ap++;
[ap + 0] = [ap + -73] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
[ap + 0] = [[ap + -76] + 8], ap++;
ret;
ap += 59;
[ap + 0] = [ap + -60] + 69910, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
jmp rel 8;
ap += 60;
[ap + 0] = [ap + -69] + 70200, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 148;
call rel 66762;
[ap + 0] = [ap + -156], ap++;
[ap + 0] = [ap + -156] + 132070, ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 150;
call rel 59839;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -164] + 132150, ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 165;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 134210, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 177;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 145890, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 114 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 15 if [ap + -1] != 0;
ap += 16;
call rel 66682;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27] + 12350, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[ap + -3] = [[ap + -10] + 2];
[ap + -2] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 60423;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -30] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -32] + 6], ap++;
[ap + 0] = [[ap + -33] + 7], ap++;
ret;
ap += 29;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13920, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 66 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 12 if [ap + -1] != 0;
call rel 66546;
[ap + 0] = [ap + -10] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1765908283277496344688841180082140943953894109846608098189093375020781927514, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[ap + -3] = [[ap + -10] + 2];
[ap + -2] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
ret;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 11870, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 21 if [ap + -1] != 0;
call rel 66457;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -10] + 360, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1] + 1470, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -14] = [[fp + -12] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12]) %}
[ap + 0] = [[fp + -12] + 3], ap++;
jmp rel 378 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 2], ap++;
[ap + 0] = [[fp + -12] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -12] + 5];
[ap + -9] = [[fp + -12] + 6];
[ap + -8] = [[fp + -12] + 7];
[ap + -7] = [[fp + -12] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 5) %}
[ap + 0] = [[fp + -12] + 10], ap++;
jmp rel 338 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 9], ap++;
[ap + 0] = [[fp + -12] + 11], ap++;
[ap + 0] = [fp + -12] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -15] + 0], ap++;
[ap + -4] = [[fp + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -15] + 2];
jmp rel 299;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -15] + 0], ap++;
[ap + -3] = [[fp + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -15] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -15] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 266 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 231 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 23 if [ap + -1] != 0;
ap += 41;
call rel 91546;
[ap + 0] = [ap + -1] + 91545, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26840, ap++;
call rel 66289;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -58] + [ap + -8], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 25;
[ap + -1] = [[ap + -19] + 0];
ap += 37;
call rel 91513;
[ap + 0] = [ap + -1] + 91512, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26310, ap++;
call rel 66265;
[ap + 0] = [ap + -68] + 1, ap++;
[ap + 0] = [ap + -53] + [ap + -8], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 1];
jmp rel 25;
[ap + -1] = [[ap + -24] + 1];
ap += 32;
call rel 91479;
[ap + 0] = [ap + -1] + 91478, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25590, ap++;
call rel 66240;
[ap + 0] = [ap + -68] + 2, ap++;
[ap + 0] = [ap + -48] + [ap + -8], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 745491264781582771719330910000109646431557734445668861291943495712878857246, ap++;
[ap + -1] = [[fp + -13] + 0];
[fp + -5] = [[fp + -13] + 1];
[ap + 0] = [[fp + -13] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -31] + 2], ap++;
[ap + -4] = [[ap + -32] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -34] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -31] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -33] + 3], ap++;
[ap + -7] = [[ap + -34] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [ap + -38] + 5, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -31] + 0];
[ap + -6] = [[ap + -31] + 1];
[ap + -5] = [[ap + -31] + 2];
[ap + -7] = [[ap + -31] + 3];
[ap + -4] = [[ap + -31] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -31]) %}
[ap + 0] = [[ap + -31] + 6], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[ap + -32] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 66042;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -57] + 7];
[ap + -2] = [[ap + -57] + 8];
[ap + -6] = [[ap + -57] + 9];
[ap + -5] = [[ap + -57] + 10];
[ap + -4] = [[ap + -57] + 11];
[ap + -3] = [[ap + -57] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -57] + 7) %}
[ap + 0] = [[ap + -57] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -58] + 13], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -62] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -58] + 13], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -62] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -64] + 15], ap++;
[ap + 0] = [[ap + -65] + 16], ap++;
ret;
ap += 26;
[ap + 0] = [[ap + -58] + 5], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13740, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -62] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -64] + 7], ap++;
[ap + 0] = [[ap + -65] + 8], ap++;
ret;
ap += 54;
[ap + 0] = [[ap + -69] + 4], ap++;
call rel 91337;
[ap + 0] = [ap + -1] + 91336, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28410, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -79] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -81] + 6], ap++;
[ap + 0] = [[ap + -82] + 7], ap++;
ret;
ap += 49;
call rel 91317;
[ap + 0] = [ap + -1] + 91316, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38260, ap++;
call rel 66051;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63] + [ap + -8], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 51;
call rel 91298;
[ap + 0] = [ap + -1] + 91297, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38340, ap++;
call rel 59121;
[ap + 0] = [fp + -15] + 3, ap++;
[ap + 0] = [ap + -71] + [ap + -8], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 66;
[ap + 0] = [[fp + -12] + 9], ap++;
call rel 91277;
[ap + 0] = [ap + -1] + 91276, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40400, ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -12] + 13, ap++;
[ap + 0] = [[fp + -12] + 11], ap++;
[ap + 0] = [[fp + -12] + 12], ap++;
jmp rel 19;
ap += 78;
[ap + 0] = [[fp + -12] + 2], ap++;
call rel 91258;
[ap + 0] = [ap + -1] + 91257, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 52080, ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -12] + 6, ap++;
[ap + 0] = [[fp + -12] + 4], ap++;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 64 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 21 if [ap + -1] != 0;
call rel 65952;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -10] + 540, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1] + 1470, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -12] = [[fp + -11] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11]) %}
[ap + 0] = [[fp + -11] + 3], ap++;
jmp rel 438 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 2], ap++;
[ap + 0] = [[fp + -11] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -11] + 5];
[ap + -9] = [[fp + -11] + 6];
[ap + -8] = [[fp + -11] + 7];
[ap + -7] = [[fp + -11] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11] + 5) %}
[ap + 0] = [[fp + -11] + 10], ap++;
jmp rel 405 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 9], ap++;
[ap + 0] = [[fp + -11] + 11], ap++;
[ap + 0] = [fp + -11] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -13] + 0], ap++;
[ap + -4] = [[fp + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -13] + 2];
jmp rel 373;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -13] + 0], ap++;
[ap + -3] = [[fp + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -13] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 347 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 320 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 15 if [ap + -1] != 0;
ap += 66;
call rel 65791;
[ap + 0] = [ap + -87], ap++;
[ap + 0] = [ap + -77] + 50360, ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -10], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 17;
[ap + -1] = [[ap + -19] + 0];
ap += 62;
call rel 65793;
[ap + 0] = [ap + -87] + 1, ap++;
[ap + 0] = [ap + -72] + 49830, ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 1];
jmp rel 17;
[ap + -1] = [[ap + -24] + 1];
ap += 57;
call rel 65776;
[ap + 0] = [ap + -87] + 2, ap++;
[ap + 0] = [ap + -67] + 49110, ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -30] + 2];
jmp rel 17;
[ap + -1] = [[ap + -29] + 2];
ap += 52;
call rel 65759;
[ap + 0] = [ap + -87] + 3, ap++;
[ap + 0] = [ap + -62] + 48390, ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = [ap + -33] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -5] = [[ap + -26] + 1];
[ap + -4] = [[ap + -26] + 2];
[ap + -3] = [[ap + -26] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 5], ap++;
jmp rel 174 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [ap + -29] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 140 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + -6] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 2];
jmp rel 12;
[ap + -1] = [[ap + -12] + 2];
ap += 14;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [ap + -18] + 22360, ap++;
[ap + 0] = [ap + -23], ap++;
jmp rel 40;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -5] = [[ap + -13] + 1];
[ap + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
[fp + -3] = [[ap + -13] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 6], ap++;
jmp rel 85 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1765908283277496344688841180082140943953894109846608098189093375020781927514, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -4] = [[ap + -19] + 8];
[ap + -3] = [[ap + -19] + 9];
[ap + -2] = [[ap + -19] + 10];
[fp + -4] = [[ap + -19] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 13], ap++;
jmp rel 56 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 12], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 14, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 65487;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -25] = [[ap + -24] + 1];
[ap + -5] = [[ap + -24] + 2];
[ap + -4] = [[ap + -24] + 3];
[ap + -3] = [[ap + -24] + 4];
[ap + -2] = [[ap + -24] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 6], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -28] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -25] + 6], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -28] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -30] + 8], ap++;
[ap + 0] = [[ap + -31] + 9], ap++;
ret;
ap += 28;
[ap + 0] = [[ap + -48] + 12], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -2] + 13920, ap++;
[ap + 0] = [ap + -51] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -53] + 14], ap++;
[ap + 0] = [[ap + -54] + 15], ap++;
ret;
ap += 34;
[ap + 0] = [[ap + -48] + 5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -2] + 25060, ap++;
[ap + 0] = [ap + -51] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -53] + 7], ap++;
[ap + 0] = [[ap + -54] + 8], ap++;
ret;
ap += 29;
call rel 59331;
[ap + 0] = [ap + -49] + 3, ap++;
[ap + 0] = [ap + -44] + 35110, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 45;
[ap + 0] = [[ap + -72] + 4], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 37260, ap++;
[ap + 0] = [ap + -75] + 8, ap++;
[ap + 0] = [[ap + -76] + 6], ap++;
[ap + 0] = [[ap + -77] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 79;
[ap + 0] = [[ap + -94] + 4], ap++;
[ap + 0] = [ap + -87], ap++;
[ap + 0] = [ap + -2] + 51930, ap++;
[ap + 0] = [ap + -97] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -99] + 6], ap++;
[ap + 0] = [[ap + -100] + 7], ap++;
ret;
ap += 74;
call rel 65472;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -82] + 61780, ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 76;
call rel 58549;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [ap + -90] + 61860, ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 91;
[ap + 0] = [[fp + -11] + 9], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -2] + 63920, ap++;
[ap + 0] = [fp + -11] + 13, ap++;
[ap + 0] = [[fp + -11] + 11], ap++;
[ap + 0] = [[fp + -11] + 12], ap++;
jmp rel 12;
ap += 103;
[ap + 0] = [[fp + -11] + 2], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -2] + 75600, ap++;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = [[fp + -11] + 4], ap++;
[ap + 0] = [[fp + -11] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 164 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 131 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 99;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 73 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 12 if [ap + -1] != 0;
call rel 65332;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -11] + 540, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 13;
[ap + 0] = [[ap + -28] + 4], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -2] + 1470, ap++;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -33] + 6], ap++;
[ap + 0] = [[ap + -34] + 7], ap++;
ret;
ap += 8;
call rel 65285;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16] + 11320, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 10;
call rel 58362;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -24] + 11400, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 25;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 13460, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 37;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 25140, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 11 if [ap + -1] != 0;
call rel 65207;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -10] + 540, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1] + 1470, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 11 if [ap + -1] != 0;
call rel 65140;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 5;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -10] + 450, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1] + 1470, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 269 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 229 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 190;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 157 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 122 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 23 if [ap + -1] != 0;
ap += 6;
call rel 90258;
[ap + 0] = [ap + -1] + 90257, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11650, ap++;
call rel 65001;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -23] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = 836479067992782184641724601653471291068150613101661572383860787367006316385, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -22] + 0], ap++;
[ap + -4] = [[ap + -23] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -25] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -22] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -24] + 1], ap++;
[ap + -7] = [[ap + -25] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + -12] = [ap + 0] * 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -22] + 0];
[ap + -6] = [[ap + -22] + 1];
[ap + -5] = [[ap + -22] + 2];
[ap + -7] = [[ap + -22] + 3];
[ap + -4] = [[ap + -22] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22]) %}
[ap + 0] = [[ap + -22] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -23] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -27] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
[ap + 0] = [[ap + -30] + 8], ap++;
ret;
ap += 19;
[ap + 0] = [[ap + -34] + 4], ap++;
call rel 90158;
[ap + 0] = [ap + -1] + 90157, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13220, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -44] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [[ap + -47] + 7], ap++;
ret;
ap += 14;
call rel 90138;
[ap + 0] = [ap + -1] + 90137, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 23070, ap++;
call rel 64872;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28] + [ap + -8], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 16;
call rel 90119;
[ap + 0] = [ap + -1] + 90118, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 23150, ap++;
call rel 57942;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -36] + [ap + -8], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 31;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 90098;
[ap + 0] = [ap + -1] + 90097, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25210, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 19;
ap += 43;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 90079;
[ap + 0] = [ap + -1] + 90078, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 36890, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 136 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 23 if [ap + -1] != 0;
ap += 10;
call rel 90020;
[ap + 0] = [ap + -1] + 90019, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12110, ap++;
call rel 64763;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -27] + [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 745491264781582771719330910000109646431557734445668861291943495712878857246, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 30 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 640, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -33] + 6], ap++;
[ap + 0] = [[ap + -34] + 7], ap++;
ret;
ap += 23;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 89906;
[ap + 0] = [ap + -1] + 89905, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13680, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 119 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 15 if [ap + -1] != 0;
ap += 21;
call rel 64603;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -32] + 12900, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[ap + -3] = [[ap + -10] + 2];
[ap + -2] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 16;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -20] + 1710, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 58343;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 16;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 2050, ap++;
[ap + 0] = [ap + -30] + 8, ap++;
[ap + 0] = [[ap + -31] + 6], ap++;
[ap + 0] = [[ap + -32] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 34;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 14470, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 64387;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 57464;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 57370;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -8] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 180 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -9] = [[fp + -7] + 6];
[ap + -8] = [[fp + -7] + 7];
[ap + -7] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 147 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 115;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 89 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
call rel 63768;
jmp rel 64 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 53 if [ap + -7] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 63348;
jmp rel 23 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 15 if [ap + -4] != 0;
ap += 3;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -7] + 190, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 77;
[ap + 0] = [ap + -78] + 61040, ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -81], ap++;
jmp rel 8;
ap += 78;
[ap + 0] = [ap + -87] + 61330, ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 166;
call rel 64107;
[ap + 0] = [ap + -174], ap++;
[ap + 0] = [ap + -174] + 123200, ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 168;
call rel 57184;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -182] + 123280, ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 183;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -2] + 125340, ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
jmp rel 12;
ap += 195;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -2] + 137020, ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
call rel 63626;
jmp rel 22 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 14 if [ap + -7] != 0;
ap += 3;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -10] + 190, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 28 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 640, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 9120 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202336, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 359;
[fp + -6] = [ap + 0] + 9120, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 317 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 296;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 248 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 10 if [ap + -2] != 0;
ap += 4;
[ap + 0] = [ap + -5] + 360, ap++;
[ap + 0] = 5, ap++;
jmp rel 23;
[ap + -2] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 10 if [ap + -2] != 0;
ap += 2;
[ap + 0] = [ap + -3] + 80, ap++;
[ap + 0] = 3, ap++;
jmp rel 10;
[ap + -4] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 215 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 196;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 155 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -32] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -34] + 1], ap++;
[ap + -5] = [[ap + -35] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 131 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -29] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -30] + 1];
[ap + 0] = [ap + -30] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 106;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -14] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 85;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 60243;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 89002;
[ap + 0] = [ap + -1] + 89001, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 119610 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 119610, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 38;
[ap + -3] = [ap + 0] + 119610, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3597;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60190;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60260;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -10] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60258;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -35] + 3, ap++;
[ap + 0] = [ap + -9] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -6] + 3310, ap++;
call rel 60247;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60246;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -10] + 4710, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1] + 5010, ap++;
jmp rel 6;
ap += 5;
[ap + 0] = [ap + -10] + 5760, ap++;
call rel 60236;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 6610, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7920, ap++;
call rel 60226;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60090;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 60052;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 88811;
[ap + 0] = [ap + -1] + 88810, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 159260 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 159260, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 159260, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -3558;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60005;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59994;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 177;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 59956;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 88715;
[ap + 0] = [ap + -1] + 88714, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 24610 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 24610, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 129;
[ap + -3] = [ap + 0] + 24610, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 94 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 12 if [ap + -3] != 0;
call rel 63425;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8] + 12610, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 85;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -20] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -22] + 1], ap++;
[ap + -5] = [[ap + -23] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -17] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -18] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -19] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 57166;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 20;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [ap + -10] + 8, ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [[ap + -12] + 7], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 13810, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59812;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59801;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 140;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 59763;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 88522;
[ap + 0] = [ap + -1] + 88521, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 22300 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 22300, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 92;
[ap + -3] = [ap + 0] + 22300, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 56 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 11 if [ap + -3] != 0;
call rel 63232;
[ap + 0] = [ap + -7] + 10400, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 49;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1765908283277496344688841180082140943953894109846608098189093375020781927514, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 18 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -4] + 200, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -9] + 8, ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [[ap + -11] + 7], ap++;
jmp rel 11;
ap += 9;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 11410, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59656;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59645;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 2070 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209386, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 162;
[fp + -6] = [ap + 0] + 2070, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 140;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 59595;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 88354;
[ap + 0] = [ap + -1] + 88353, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 19220 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 19220, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 0];
jmp rel 93;
[ap + -3] = [ap + 0] + 19220, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[fp + 0] = [fp + -5] + 7;
[ap + 0] = [ap + -2], ap++;
jmp rel 11 if [ap + -2] != 0;
call rel 63064;
[ap + 0] = [ap + -7] + 7330, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 50;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 63090;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 8;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 8340, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59487;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59602;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59465;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 20870 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768190586, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 267;
[fp + -6] = [ap + 0] + 20870, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 63062;
jmp rel 245 if [ap + -11] != 0;
[ap + 0] = [ap + -12], ap++;
jmp rel 230 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 192 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -27] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -29] + 1], ap++;
[ap + -5] = [[ap + -30] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 168 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -24] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -25] + 1];
[ap + 0] = [ap + -25] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 122 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 98 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 59317;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 88075;
[ap + 0] = [ap + -1] + 88074, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 66160, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 43;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -28], ap++;
call rel -3602;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 59256;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2310, ap++;
call rel 59343;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -9] + 2640, ap++;
jmp rel 5;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -6] + 4150, ap++;
call rel 59332;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 59330;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -9] + 5350, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 6250, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 59182;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 199;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 157 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 133 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 59093;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 87852;
[ap + 0] = [ap + -1] + 87851, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 12800 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 12800, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 82;
[ap + -3] = [ap + 0] + 12800, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 11 if [ap + -3] != 0;
call rel 62562;
[ap + 0] = [ap + -7] + 900, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 39;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 63074;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 9;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 1910, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58996;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 59102;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58966;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 12970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768198486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 175;
[fp + -6] = [ap + 0] + 12970, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 63003;
[ap + 0] = [ap + -66], ap++;
jmp rel 152 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -25] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -27] + 1], ap++;
[ap + -5] = [[ap + -28] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 91 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -22] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -23] + 1];
[ap + 0] = [ap + -23] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 58871;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 87630;
[ap + 0] = [ap + -1] + 87629, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 89030 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 89030, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 40;
[ap + -3] = [ap + 0] + 89030, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -24], ap++;
call rel -3538;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58816;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 58913;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58912;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -8] + 3310, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58775;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 151;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 109 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 63193;
jmp rel 87 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 79 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 58697;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 87456;
[ap + 0] = [ap + -1] + 87455, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 37410 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 37410, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 36;
[ap + -3] = [ap + 0] + 37410, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -3245;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58646;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 58744;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58608;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1970, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 114;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 58561;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 87320;
[ap + 0] = [ap + -1] + 87319, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 11900 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 11900, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 0];
jmp rel 68;
[ap + -3] = [ap + 0] + 11900, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 32 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 10 if [ap + -3] != 0;
call rel 62030;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 26;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4] + 900, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 9;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 1010, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58478;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58593;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58456;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 1970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 157;
[fp + -6] = [ap + 0] + 1970, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 135;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 58407;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 87166;
[ap + 0] = [ap + -1] + 87165, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13880 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13880, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 0];
jmp rel 89;
[ap + -3] = [ap + 0] + 13880, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[fp + 0] = [fp + -5] + 7;
[ap + 0] = [ap + -2], ap++;
jmp rel 11 if [ap + -2] != 0;
call rel 61876;
[ap + 0] = [ap + -7] + 1990, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 46;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [ap + 0] * 3, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 62941;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 8;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 3000, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58303;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58418;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58281;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 6530 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204926, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 180;
[fp + -6] = [ap + 0] + 6530, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 157;
[fp + 0] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 62889;
jmp rel 92 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 84 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 58191;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 86949;
[ap + 0] = [ap + -1] + 86948, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 50020, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 37;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
call rel -3434;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 58136;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1370, ap++;
jmp rel 15;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -6] + 4740, ap++;
call rel 58223;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 58221;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 6130, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 58083;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 2270 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209186, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 123;
[fp + -6] = [ap + 0] + 2270, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 58034;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 86792;
[ap + 0] = [ap + -1] + 86791, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26910, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 49;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -3289;
jmp rel 27 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 700, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 57967;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 58081;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1870, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 57943;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 57904;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 86663;
[ap + 0] = [ap + -1] + 86662, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 26310 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 26310, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 26310, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -3247;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57857;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57846;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 57759;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 86518;
[ap + 0] = [ap + -1] + 86517, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3250;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57711;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 57817;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57681;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 57643;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 86402;
[ap + 0] = [ap + -1] + 86401, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 54158;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57540;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57529;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5110 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206346, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 216;
[fp + -6] = [ap + 0] + 5110, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 194;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 153 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -19] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -21] + 1], ap++;
[ap + -5] = [[ap + -22] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 129 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -17] + 1];
[ap + 0] = [ap + -17] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 104;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -14] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 83;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 57411;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 86170;
[ap + 0] = [ap + -1] + 86169, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 150970 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 150970, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 36;
[ap + -3] = [ap + 0] + 150970, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -3371;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57360;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57448;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -10] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57446;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -9] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 3310, ap++;
call rel 57435;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57434;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 4710, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57297;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 131;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 57259;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 86018;
[ap + 0] = [ap + -1] + 86017, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 64050 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 64050, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 83;
[ap + -3] = [ap + 0] + 64050, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
call rel 60313;
jmp rel 54 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 45 if [ap + -7] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
jmp rel [ap + -4];
jmp rel 23;
jmp rel 12;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 10;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1] + 600, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -10] + 790, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57161;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57150;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 122;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 57112;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 85871;
[ap + 0] = [ap + -1] + 85870, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 11800 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 74;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 57023;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57012;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
[fp + -3] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 10 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
call rel 61755;
ret;
ap += 261;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 217370, ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
jmp rel 6 if [fp + -3] != 0;
[ap + 0] = 5, ap++;
jmp rel 4;
[ap + 0] = 5, ap++;
[ap + 0] = 5, ap++;
jmp rel [ap + -2];
jmp rel 30;
jmp rel 15;
jmp rel [ap + -1];
jmp rel 10;
jmp rel 6;
ap += 1;
jmp rel 89;
jmp rel 24;
jmp rel 22;
jmp rel [ap + -1];
jmp rel 10;
jmp rel 4;
jmp rel 15;
ap += 1;
jmp rel 74;
jmp rel 9;
jmp rel [ap + -1];
jmp rel 67;
jmp rel 4;
jmp rel 2;
[ap + 0] = 3, ap++;
jmp rel [ap + -3];
jmp rel 26;
jmp rel 13;
jmp rel [ap + -1];
jmp rel 8;
jmp rel 4;
jmp rel 37;
jmp rel 22;
jmp rel 20;
jmp rel [ap + -1];
jmp rel 8;
jmp rel 4;
jmp rel 13;
jmp rel 24;
jmp rel 9;
jmp rel [ap + -1];
jmp rel 19;
jmp rel 4;
jmp rel 2;
[ap + 0] = 0, ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
call rel 61672;
jmp rel 17 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5] + 12345, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 300, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -3] * 100000000, ap++;
%{ memory[ap + 0] = memory[ap + -1] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 15;
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -4] + 0];
ap += 6;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
ret;
call rel 61723;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 100000000, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -4], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 0], ap++;
[ap + 5] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -4] = [ap + -3] + [ap + -1];
%{ memory[ap + 0] = memory[ap + -2] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -5] + 4];
jmp rel 15;
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -5] + 4];
ap += 6;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
ret;
call rel 53339;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 12247868912570024929994369972085044880615269779114182434815966989419180676, ap++;
call rel 61668;
jmp rel 58 if [ap + -20] != 0;
[ap + 0] = [ap + -22], ap++;
jmp rel 47 if [ap + -20] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel [fp + -3];
jmp rel 23;
jmp rel 12;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
jmp rel 19;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 10;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 5;
[ap + 0] = [ap + -6] + 550, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 8;
ap += 6;
[ap + 0] = [ap + -28] + 840, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 10;
[ap + -1] = [[fp + -4] + 0];
ap += 5;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 2100000000000000, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 10;
[ap + -1] = [[fp + -4] + 1];
ap += 1;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -4] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 61838;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 53056;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 52962;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 181;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 139 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 118;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 56269;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 85028;
[ap + 0] = [ap + -1] + 85027, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 231780 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 231780, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 65;
[ap + -3] = [ap + 0] + 231780, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
[ap + -22] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 29 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
call rel 61000;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 500, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 220880, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56189;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 56295;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56159;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 2070 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209386, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 112;
[fp + -6] = [ap + 0] + 2070, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 90;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 56111;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 84870;
[ap + 0] = [ap + -1] + 84869, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 5100 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 5100, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 0];
jmp rel 43;
[ap + -3] = [ap + 0] + 5100, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + 0] = [ap + -9], ap++;
call rel -876;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 7 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
call rel 61434;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56053;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56168;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56031;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 163;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 121 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 60449;
jmp rel 99 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 91 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 55953;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 84712;
[ap + 0] = [ap + -1] + 84711, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 7780 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 7780, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 48;
[ap + -3] = [ap + 0] + 7780, ap++;
[ap + -1] = [[ap + -18] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
call rel 61362;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 55890;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 55988;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 55852;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 163;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 121 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 60270;
jmp rel 99 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 91 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 55774;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 84533;
[ap + 0] = [ap + -1] + 84532, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 2370 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 2370, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 48;
[ap + -3] = [ap + 0] + 2370, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + -17] = [ap + 0] + [ap + -18], ap++;
call rel 60599;
jmp rel 22 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -3] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 600, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 55711;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 55809;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 55673;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 164;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 122 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 98 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 55585;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 84344;
[ap + 0] = [ap + -1] + 84343, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 470 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 470, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 47;
[ap + -3] = [ap + 0] + 470, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -14] * 100000000, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 23;
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -14] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -17] + 2, ap++;
[ap + 0] = [ap + -7] + 300, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 60489;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 55523;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 55629;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 55493;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 240;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 198 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 170 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 136 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 108 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 55353;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 84112;
[ap + 0] = [ap + -1] + 84111, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 1850 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 1850, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 60;
[ap + -3] = [ap + 0] + 1850, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = 100000000, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -25], memory[ap + -1]) %}
[ap + 5] = [[ap + -11] + 1], ap++;
[ap + 5] = [[ap + -12] + 2], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -15] + 3], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -18] + 4];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -32] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -9], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -21] + 5];
jmp rel 19;
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -21] + 5];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -22] + 6, ap++;
[ap + 0] = [ap + -5] + 600, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 51908;
[ap + 0] = [ap + -27] + 6, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 55278;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 55373;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 55237;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3370 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208086, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 211;
[fp + -6] = [ap + 0] + 3370, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 168 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 10 if [ap + -2] != 0;
ap += 4;
[ap + 0] = [ap + -5] + 360, ap++;
[ap + 0] = 5, ap++;
jmp rel 23;
[ap + -2] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 10 if [ap + -2] != 0;
ap += 2;
[ap + 0] = [ap + -3] + 80, ap++;
[ap + 0] = 3, ap++;
jmp rel 10;
[ap + -4] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 135 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 55144;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83903;
[ap + 0] = [ap + -1] + 83902, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 234960 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 234960, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -24] + 0];
jmp rel 90;
[ap + -3] = [ap + 0] + 234960, ap++;
[ap + -1] = [[ap + -23] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 12247868912570024929994369972085044880615269779114182434815966989419180676, ap++;
call rel 60080;
jmp rel 61 if [ap + -20] != 0;
[ap + 0] = [ap + -22], ap++;
jmp rel 52 if [ap + -20] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel [ap + -382];
jmp rel 23;
jmp rel 12;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
jmp rel 19;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 10;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -7] = [[ap + -1] + 0];
[ap + -6] = [[ap + -1] + 1];
[ap + -5] = [[ap + -1] + 2];
[ap + -4] = [[ap + -1] + 3];
[ap + -3] = [[ap + -1] + 4];
[ap + -2] = [[ap + -1] + 5];
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 6, ap++;
ret;
[ap + 0] = [ap + -1] + 1400, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -23] + 1590, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 55039;
[ap + 0] = [ap + -30] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1] + 1370, ap++;
jmp rel 6;
ap += 5;
[ap + 0] = [ap + -10] + 2120, ap++;
call rel 55146;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 55010;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 190;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 148 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 124 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 54922;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83681;
[ap + 0] = [ap + -1] + 83680, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 1540 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 1540, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 73;
[ap + -3] = [ap + 0] + 1540, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 11;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -4] + 870, ap++;
[ap + 0] = 0, ap++;
jmp rel 27;
[ap + 0] = 2100000000000000, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [ap + -21], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 2];
jmp rel 11;
[ap + -1] = [[ap + -19] + 2];
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -4] + 100, ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
call rel 54834;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 54940;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54804;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5380 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206076, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 206;
[fp + -6] = [ap + 0] + 5380, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 164 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 143;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 95 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 8 if [ap + -2] != 0;
ap += 4;
[ap + 0] = [ap + -5] + 360, ap++;
jmp rel 19;
[ap + -2] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 8 if [ap + -2] != 0;
ap += 2;
[ap + 0] = [ap + -3] + 80, ap++;
jmp rel 8;
[ap + -4] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 66 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 54668;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83427;
[ap + 0] = [ap + -1] + 83426, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 0];
jmp rel 23;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -22] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -30] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -5] + 500, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
call rel 54630;
[ap + 0] = [ap + -29] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1] + 1270, ap++;
jmp rel 6;
ap += 5;
[ap + 0] = [ap + -10] + 2020, ap++;
call rel 54728;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 2870, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4180, ap++;
call rel 54718;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54582;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 54495;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83254;
[ap + 0] = [ap + -1] + 83253, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -2106;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54447;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 54553;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54417;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 54379;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83138;
[ap + 0] = [ap + -1] + 83137, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 50894;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54276;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54265;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
[fp + -3] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 59712;
jmp rel 53 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 59822;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 126892144473398, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 59881;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -30], ap++;
ret;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 13400, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 16070, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 5040, ap++;
jmp rel 28;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 59626;
jmp rel 113 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 59736;
jmp rel 94 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 0] = [ap + -1];
[fp + 1] = [ap + -1];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 59586;
jmp rel 53 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 59696;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7957310996628966338794911577398, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 59755;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -30], ap++;
ret;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 13400, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 16070, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 19220, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 21890, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 5040, ap++;
jmp rel 28;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 59480;
jmp rel 167 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 59590;
jmp rel 148 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 5040, ap++;
jmp rel 28;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 59446;
jmp rel 113 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 59556;
jmp rel 94 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 0] = [ap + -1];
[fp + 1] = [ap + -1];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 59406;
jmp rel 53 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 59516;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 29380545875162422, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 59575;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -30], ap++;
ret;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 13400, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 16070, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 19220, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 21890, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 24760, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 27430, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 5240, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 30;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 59280;
jmp rel 32 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 59390;
jmp rel 14 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 200, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2670, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 5240, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 30;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 59216;
jmp rel 32 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 59326;
jmp rel 14 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 200, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2670, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3870, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + -2] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 42;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 59389;
jmp rel 26 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3] + 800, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
ret;
call rel 59437;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1100, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -2] + 2270, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -3] + 800, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
ret;
call rel 59404;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 59396;
jmp rel 23 if [ap + -4] != 0;
[ap + -3] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 600, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
jmp rel 7 if [fp + -4] != 0;
ap += 2;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + 30787877913650548, ap++;
jmp rel 7 if [ap + -1] != 0;
ap += 1;
[ap + 0] = 1, ap++;
ret;
[fp + -3] = [ap + 0] + 32762643847472500, ap++;
jmp rel 5 if [ap + -1] != 0;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 59492;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 49982;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 49888;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 161;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 98;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 53195;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 81954;
[ap + 0] = [ap + -1] + 81953, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 10500 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 10500, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 45;
[ap + -3] = [ap + 0] + 10500, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
[ap + -22] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
call rel 53135;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 53241;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53105;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 151;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 109 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 57523;
jmp rel 87 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 79 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 53027;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 81786;
[ap + 0] = [ap + -1] + 81785, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 19940 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 19940, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 36;
[ap + -3] = [ap + 0] + 19940, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -1219;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52976;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 53074;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52938;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 151;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 109 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 57356;
jmp rel 87 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 79 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 52860;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 81619;
[ap + 0] = [ap + -1] + 81618, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25880 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25880, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 36;
[ap + -3] = [ap + 0] + 25880, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -1300;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52809;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 52907;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52771;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 151;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 109 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 57189;
jmp rel 87 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 79 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 52693;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 81452;
[ap + 0] = [ap + -1] + 81451, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 31420 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 31420, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 36;
[ap + -3] = [ap + 0] + 31420, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -1321;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52642;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 52740;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52604;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5920 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205536, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 193;
[fp + -6] = [ap + 0] + 5920, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 151 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 57020;
jmp rel 129 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 121 if [ap + -4] != 0;
[fp + 0] = [ap + -3];
[fp + 1] = [ap + -2];
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 52522;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 81281;
[ap + 0] = [ap + -1] + 81280, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 5140 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 5140, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 76;
[ap + -3] = [ap + 0] + 5140, ap++;
[ap + -1] = [[ap + -18] + 0];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 57991;
jmp rel 35 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 58101;
jmp rel 17 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2670, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52431;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1350, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2550, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4720, ap++;
call rel 52529;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52393;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5920 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205536, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 193;
[fp + -6] = [ap + 0] + 5920, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 151 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 56809;
jmp rel 129 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 121 if [ap + -4] != 0;
[fp + 0] = [ap + -3];
[fp + 1] = [ap + -2];
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 52311;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 81070;
[ap + 0] = [ap + -1] + 81069, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 5140 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 5140, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 76;
[ap + -3] = [ap + 0] + 5140, ap++;
[ap + -1] = [[ap + -18] + 0];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 57780;
jmp rel 35 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 57890;
jmp rel 17 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2670, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52220;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1350, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2550, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4720, ap++;
call rel 52318;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52182;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 58225;
jmp rel 86 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 78 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 52104;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80863;
[ap + 0] = [ap + -1] + 80862, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 4570 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4570, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 35;
[ap + -3] = [ap + 0] + 4570, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
call rel -1581;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 200, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52054;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 52152;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52016;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 8760 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202696, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 289;
[fp + -6] = [ap + 0] + 8760, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 267;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[fp + 1] = [[fp + -4] + 0];
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 246;
[fp + 0] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 205 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 58037;
jmp rel 183 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 175 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 138 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 114 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -19] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 51866;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80625;
[ap + 0] = [ap + -1] + 80624, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 3210 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 3210, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 63;
[ap + -3] = [ap + 0] + 3210, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -29], ap++;
call rel 57667;
jmp rel 38 if [ap + -4] != 0;
[ap + -3] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 1200, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51788;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 51867;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 3010, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 4210, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6] + 6380, ap++;
call rel 51849;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51848;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -9] + 7770, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51846;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 8360, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51709;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 2670 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208786, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 158;
[fp + -6] = [ap + 0] + 2670, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 136;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 115;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 51651;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80410;
[ap + 0] = [ap + -1] + 80409, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 900 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 900, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 68;
[ap + -3] = [ap + 0] + 900, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 10 if [ap + -16] != 0;
ap += 4;
[ap + 0] = [ap + -5] + 460, ap++;
[ap + 0] = 0, ap++;
jmp rel 29;
[ap + -11] = [ap + 0] + 30787877913650548, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 10 if [ap + -2] != 0;
ap += 2;
[ap + 0] = [ap + -3] + 180, ap++;
[ap + 0] = 1, ap++;
jmp rel 16;
[ap + -13] = [ap + 0] + 32762643847472500, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
call rel 51568;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51674;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -10] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51672;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51535;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 94 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 70 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 51447;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80206;
[ap + 0] = [ap + -1] + 80205, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 19;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -10] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -15] = [[ap + -1] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3] + 700, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 51413;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 51519;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51383;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 89;
[fp + -6] = [ap + 0] + 1970, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 67;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 51336;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80095;
[ap + 0] = [ap + -1] + 80094, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 0];
jmp rel 21;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -14] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -4] + 600, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 51300;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51415;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51278;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 51191;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79950;
[ap + 0] = [ap + -1] + 79949, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -2336;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51143;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 51249;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51113;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 51075;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79834;
[ap + 0] = [ap + -1] + 79833, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 47590;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50972;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50961;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
[fp + -4] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 38 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[fp + -3] = [[fp + -5] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -1] + 11040, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -10] = [[fp + -9] + 1];
[ap + -3] = [[fp + -9] + 2];
[ap + -2] = [[fp + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 5], ap++;
jmp rel 247 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 6], ap++;
[fp + 0] = [fp + -9] + 7;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 0], ap++;
[ap + -4] = [[fp + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -11] + 2];
jmp rel 217;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -11] + 0], ap++;
[ap + -3] = [[fp + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -11] + 2];
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 57030;
jmp rel 187 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
jmp rel 9 if [fp + -3] != 0;
ap += 6;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -9] + 710, ap++;
jmp rel 37;
[ap + 0] = 1000000, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 20;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8 if [fp + -7] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
jmp rel 16;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
jmp rel 10;
ap += 1;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
jmp rel 7 if [ap + -10] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
jmp rel 5;
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 57108;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + 0] + 0];
[ap + -26] = [[fp + 0] + 1];
[ap + -5] = [[fp + 0] + 2];
[ap + -4] = [[fp + 0] + 3];
[ap + -3] = [[fp + 0] + 4];
[ap + -2] = [[fp + 0] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 0]) %}
[ap + 0] = [[fp + 0] + 7], ap++;
jmp rel 80 if [ap + -1] != 0;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [fp + 0] + 8, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 60 if [ap + -29] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 7 if [ap + -41] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 419219720643212038379758834364529219528643538790, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1790776030044565804009322301133241069732886176270684001806990409753956, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 57061;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -29] + 0];
[ap + -26] = [[ap + -29] + 1];
[ap + -5] = [[ap + -29] + 2];
[ap + -4] = [[ap + -29] + 3];
[ap + -3] = [[ap + -29] + 4];
[ap + -2] = [[ap + -29] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29]) %}
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -32] + 8, ap++;
jmp rel 18;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = [ap + -2] + 300, ap++;
[ap + 0] = [ap + -33] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -35] + 8], ap++;
[ap + 0] = [[ap + -36] + 9], ap++;
ret;
ap += 29;
[ap + 0] = [ap + -30] + 14310, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -65], ap++;
ret;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -2] + 15200, ap++;
[ap + 0] = [fp + 0] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 0] + 8], ap++;
[ap + 0] = [[fp + 0] + 9], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 31570, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 47231;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -14] + 32840, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -2] + 35040, ap++;
[ap + 0] = [fp + -9] + 8, ap++;
[ap + 0] = [[fp + -9] + 6], ap++;
[ap + 0] = [[fp + -9] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 57005;
jmp rel 23 if [ap + -4] != 0;
[ap + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 600, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -11] * 31, ap++;
[ap + 0] = [fp + -10] * 31, ap++;
[ap + 0] = [ap + -2] + [ap + -1], ap++;
[ap + 0] = [fp + -9] * 31, ap++;
[ap + 0] = [ap + -2] + [ap + -1], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -3] + [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 57122;
jmp rel 36 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 57211;
jmp rel 17 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5] + 12345, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 300, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2870, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
jmp rel 7 if [fp + -8] != 0;
ap += 9;
[ap + 0] = [fp + -9], ap++;
jmp rel 65;
[ap + 0] = 3, ap++;
[ap + -1] = [ap + 1] + [fp + -8], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 51;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
jmp rel 6 if [fp + -7] != 0;
ap += 5;
jmp rel 6;
jmp rel 8 if [fp + -6] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -4] = [ap + 0] + [fp + -3], ap++;
jmp rel 25 if [ap + -1] != 0;
[ap + 0] = 4294967295, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 10;
[ap + -1] = [[ap + -5] + 0];
ap += 1;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 4;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
ret;
ap += 5;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 57103;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 46917;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 46823;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 56873;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 46687;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 46593;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 5690 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205766, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 260;
[fp + -6] = [ap + 0] + 5690, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 218 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 197;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 150 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 129;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 49851;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78610;
[ap + 0] = [ap + -1] + 78609, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 22100 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 22100, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 76;
[ap + -3] = [ap + 0] + 22100, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
[ap + -36] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[ap + -28] = [[fp + -5] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -3] + 400, ap++;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
jmp rel 11;
ap += 6;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -1] + 11140, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 49760;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 49857;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 3180, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4490, ap++;
call rel 49847;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 49711;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 13190 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768198266, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 199;
[fp + -6] = [ap + 0] + 13190, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 56460;
jmp rel 178 if [ap + -9] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 164 if [ap + -7] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 127 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -25] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -27] + 1], ap++;
[ap + -5] = [[ap + -28] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 103 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -22] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -23] + 1];
[ap + 0] = [ap + -23] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 49613;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78372;
[ap + 0] = [ap + -1] + 78371, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 48250 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 48250, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 52;
[ap + -3] = [ap + 0] + 48250, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -1305;
jmp rel 26 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 700, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 49546;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 49643;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 49642;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -8] + 3310, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 4210, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 49496;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 8760 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202696, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 289;
[fp + -6] = [ap + 0] + 8760, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 267;
[fp + 1] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 226 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 55527;
jmp rel 204 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 196 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 179;
[fp + 0] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 138 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -26] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -28] + 1], ap++;
[ap + -5] = [[ap + -29] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 114 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -23] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -24] + 1];
[ap + 0] = [ap + -24] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 49346;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78105;
[ap + 0] = [ap + -1] + 78104, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 3070 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 3070, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 63;
[ap + -3] = [ap + 0] + 3070, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
call rel 55718;
jmp rel 38 if [ap + -4] != 0;
[ap + -3] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 1200, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 49268;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 49347;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 49346;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 3500, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 3600, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 4800, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -6] + 6970, ap++;
call rel 49327;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 49326;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 8360, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 49189;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 7;
%{ memory[ap + 0] = 19100 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768192356, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 249;
[fp + -6] = [ap + 0] + 19100, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 56180;
[ap + 0] = [ap + -56], ap++;
jmp rel 226 if [ap + -7] != 0;
[fp + 2] = [ap + -6];
[fp + 3] = [ap + -5];
[fp + 4] = [ap + -4];
[fp + 5] = [ap + -3];
[fp + 6] = [ap + -2];
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 184 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 55218;
jmp rel 162 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 154 if [ap + -4] != 0;
[fp + 0] = [ap + -3];
[fp + 1] = [ap + -2];
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 55176;
jmp rel 93 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 85 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 49055;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77814;
[ap + 0] = [ap + -1] + 77813, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 7140 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 7140, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 42;
[ap + -3] = [ap + 0] + 7140, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -1548;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 200, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48998;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 49078;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 5620, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 6820, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6] + 8990, ap++;
call rel 49060;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 49059;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -8] + 10640, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48922;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 10530 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768200926, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 203;
[fp + -6] = [ap + 0] + 10530, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 55915;
[ap + 0] = [ap + -56], ap++;
jmp rel 180 if [ap + -7] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 163;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -14] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 48867;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77626;
[ap + 0] = [ap + -1] + 77625, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 2540 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 2540, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 0];
jmp rel 116;
[ap + -3] = [ap + 0] + 2540, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7 if [ap + -22] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2140, ap++;
jmp rel 78;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -24], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 63;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8 if [ap + -27] != 0;
ap += 1;
[ap + 0] = [ap + -2] + 960, ap++;
jmp rel 7;
[ap + 0] = [ap + -1], ap++;
jmp rel 10 if [ap + -27] != 0;
[ap + 0] = [ap + -1] + 970, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
jmp rel 46;
[ap + -25] = [ap + 0] + [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 29 if [ap + -2] != 0;
[ap + 0] = 4294967295, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -30], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 11;
[ap + -1] = [[ap + -9] + 0];
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -4] + 200, ap++;
[ap + 0] = 1, ap++;
jmp rel 22;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 15;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -2] + 770, ap++;
[ap + 0] = 0, ap++;
jmp rel 8;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5] + 1470, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
call rel 48736;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48842;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -9] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48840;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -8] + 2070, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48703;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 48616;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77375;
[ap + 0] = [ap + -1] + 77374, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -1846;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48568;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 48674;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48538;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 48500;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77259;
[ap + 0] = [ap + -1] + 77258, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 45015;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48397;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48386;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 48299;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77058;
[ap + 0] = [ap + -1] + 77057, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -1933;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48251;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 48357;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48221;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 48183;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 76942;
[ap + 0] = [ap + -1] + 76941, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 44698;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48080;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 48069;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
[ap + -3] = [[fp + -7] + 2];
[ap + -2] = [[fp + -7] + 3];
[fp + -6] = [[fp + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 6], ap++;
jmp rel 335 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 293;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[fp + -3] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 23 if [ap + -3] != 0;
ap += 60;
call rel 76769;
[ap + 0] = [ap + -1] + 76768, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 60220, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -68] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
[fp + -5] = [[ap + -24] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 6], ap++;
jmp rel 189 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -30] + 7];
[ap + -4] = [[ap + -30] + 8];
[ap + -3] = [[ap + -30] + 9];
[ap + -2] = [[ap + -30] + 10];
[fp + -4] = [[ap + -30] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -30] + 7) %}
[ap + 0] = [[ap + -30] + 13], ap++;
jmp rel 162 if [ap + -1] != 0;
[ap + 0] = [[ap + -31] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 14];
[ap + -4] = [[ap + -36] + 15];
[ap + -3] = [[ap + -36] + 16];
[ap + -2] = [[ap + -36] + 17];
[fp + -5] = [[ap + -36] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36] + 14) %}
[ap + 0] = [[ap + -36] + 20], ap++;
jmp rel 128 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 19], ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -43] + 21];
[ap + -4] = [[ap + -43] + 22];
[ap + -3] = [[ap + -43] + 23];
[ap + -2] = [[ap + -43] + 24];
[fp + -4] = [[ap + -43] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -43] + 21) %}
[ap + 0] = [[ap + -43] + 27], ap++;
jmp rel 99 if [ap + -1] != 0;
[ap + 0] = [[ap + -44] + 26], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -46] + 28, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -30] + 0], ap++;
[ap + -4] = [[ap + -31] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -32] + 2];
jmp rel 64;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -29] + 0], ap++;
[ap + -3] = [[ap + -30] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -31] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 55192;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -50] + 3, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -28] + 0];
[ap + -3] = [[ap + -28] + 1];
[ap + -7] = [[ap + -28] + 2];
[ap + -6] = [[ap + -28] + 3];
[ap + -5] = [[ap + -28] + 4];
[ap + -4] = [[ap + -28] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28]) %}
[ap + 0] = [[ap + -28] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -33] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -35] + 8], ap++;
[ap + 0] = [[ap + -36] + 9], ap++;
ret;
ap += 16;
call rel 44423;
[ap + 0] = [ap + -54] + 3, ap++;
[ap + 0] = [ap + -30] + 12540, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 27;
[ap + 0] = [[ap + -71] + 26], ap++;
[ap + 0] = [ap + -1] + 14040, ap++;
[ap + 0] = [ap + -73] + 30, ap++;
[ap + 0] = [[ap + -74] + 28], ap++;
[ap + 0] = [[ap + -75] + 29], ap++;
jmp rel 11;
ap += 34;
[ap + 0] = [[ap + -71] + 19], ap++;
[ap + 0] = [ap + -1] + 25370, ap++;
[ap + 0] = [ap + -73] + 23, ap++;
[ap + 0] = [[ap + -74] + 21], ap++;
[ap + 0] = [[ap + -75] + 22], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 40;
[ap + 0] = [[ap + -71] + 12], ap++;
[ap + 0] = [ap + -1] + 36410, ap++;
[ap + 0] = [ap + -73] + 16, ap++;
[ap + 0] = [[ap + -74] + 14], ap++;
[ap + 0] = [[ap + -75] + 15], ap++;
jmp rel 11;
ap += 46;
[ap + 0] = [[ap + -71] + 5], ap++;
[ap + 0] = [ap + -1] + 47650, ap++;
[ap + 0] = [ap + -73] + 9, ap++;
[ap + 0] = [[ap + -74] + 7], ap++;
[ap + 0] = [[ap + -75] + 8], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 56;
call rel 76492;
[ap + 0] = [ap + -1] + 76491, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 59760, ap++;
call rel 44342;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -76] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 71;
[ap + 0] = [[fp + -7] + 5], ap++;
call rel 76469;
[ap + 0] = [ap + -1] + 76468, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 61720, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 7], ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
ret;
[ap + 0] = 110930206544728495286294282378369001838, ap++;
ret;
[ap + 0] = 1933726787, ap++;
ret;
[ap + 0] = 8, ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -5] + 0], ap++;
[ap + 3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -5] + 2];
jmp rel 85 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 17 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
call rel 44318;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -28] + 8, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
jmp rel 31;
ap += 12;
call rel 44294;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -26] + 11750, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13910, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel 44125;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel 44101;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 337994139936370667767799129369552596157394447336989834104582481799883947719, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 54755;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 37 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 54930;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 75;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 76033;
[ap + 0] = [ap + -1] + 76032, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 41280, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 181 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 106 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -5] = [[ap + -7] + 1];
[ap + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
[ap + -2] = [[ap + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 6], ap++;
jmp rel 69 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 55128;
jmp rel 43 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[ap + -2] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
ap += 7;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 11130, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 220;
[ap + 0] = [[ap + -228] + 5], ap++;
call rel 75891;
[ap + 0] = [ap + -1] + 75890, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 133460, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -237] + 9, ap++;
[ap + 0] = [[ap + -238] + 7], ap++;
[ap + 0] = [[ap + -239] + 8], ap++;
jmp rel 40;
ap += 221;
call rel 75872;
[ap + 0] = [ap + -1] + 75871, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 144050, ap++;
call rel 56261;
[ap + 0] = [ap + -235] + [ap + -7], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 230;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 75851;
[ap + 0] = [ap + -1] + 75850, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 145160, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 246;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 75824;
[ap + 0] = [ap + -1] + 75823, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 157100, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 480 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = 337994139936370667767799129369552596157394447336989834104582481799883947719, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[ap + -2] + 2], ap++;
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[ap + -2] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -10] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -7] = [[fp + -10] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -5] = [[fp + -7] + 6];
[ap + -4] = [[fp + -7] + 7];
[ap + -6] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 396 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 344 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 304 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 257 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 219;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -22] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 177;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 13;
[ap + -1] = [[ap + -4] + 0];
ap += 1;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -33] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 91;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 67 if [ap + -12] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 54429;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 54724;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 217;
call rel 75521;
[ap + 0] = [ap + -1] + 75520, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 122690, ap++;
[ap + 0] = [ap + -231], ap++;
[ap + 0] = [ap + -231] + [ap + -2], ap++;
[ap + 0] = [ap + -231], ap++;
[ap + 0] = [ap + -231], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -231], ap++;
[ap + 0] = [ap + -231], ap++;
ret;
ap += 290;
call rel 75500;
[ap + 0] = [ap + -1] + 75499, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 163690, ap++;
[ap + 0] = [ap + -301], ap++;
[ap + 0] = [ap + -301] + [ap + -2], ap++;
jmp rel 17;
ap += 293;
call rel 75484;
[ap + 0] = [ap + -1] + 75483, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 164060, ap++;
[ap + 0] = [ap + -312] + 2, ap++;
[ap + 0] = [ap + -305] + [ap + -2], ap++;
call rel 43956;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -356], ap++;
[ap + 0] = [ap + -340], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 309;
call rel 75458;
[ap + 0] = [ap + -1] + 75457, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 166120, ap++;
[ap + 0] = [ap + -323] + 1, ap++;
[ap + 0] = [ap + -321] + [ap + -2], ap++;
jmp rel 17;
ap += 315;
call rel 75441;
[ap + 0] = [ap + -1] + 75440, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 167130, ap++;
[ap + 0] = [ap + -334] + 2, ap++;
[ap + 0] = [ap + -327] + [ap + -2], ap++;
call rel 55836;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -356], ap++;
[ap + 0] = [ap + -340], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 306;
call rel 75415;
[ap + 0] = [ap + -1] + 75414, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 165850, ap++;
call rel 43380;
[ap + 0] = [ap + -332] + 3, ap++;
[ap + 0] = [ap + -327] + [ap + -8], ap++;
[ap + 0] = [ap + -329], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 326;
[ap + 0] = [[ap + -335] + 4], ap++;
call rel 75392;
[ap + 0] = [ap + -1] + 75391, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 168560, ap++;
[ap + 0] = [ap + -337], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -345] + 8, ap++;
[ap + 0] = [[ap + -346] + 6], ap++;
[ap + 0] = [[ap + -347] + 7], ap++;
jmp rel 48;
ap += 317;
call rel 75372;
[ap + 0] = [ap + -1] + 75371, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 177610, ap++;
call rel 43337;
[ap + 0] = [ap + -343] + 3, ap++;
[ap + 0] = [ap + -338] + [ap + -8], ap++;
[ap + 0] = [ap + -340], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 337;
[ap + 0] = [[fp + -7] + 9], ap++;
call rel 75344;
[ap + 0] = [ap + -1] + 75343, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 180320, ap++;
[ap + 0] = [ap + -348], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -356], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 361;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 75316;
[ap + 0] = [ap + -1] + 75315, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 193890, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 1271 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 583936847901168531744846041173805170834282611706669097317999134304583535803, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 1229 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 1188;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 1153 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 1112;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -5] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 201;
call rel 75202;
[ap + 0] = [ap + -1] + 75201, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161680, ap++;
call rel 55609;
[ap + 0] = [ap + -216], ap++;
[ap + 0] = [ap + -216] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 67;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 189;
call rel 75150;
[ap + 0] = [ap + -1] + 75149, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160060, ap++;
[ap + 0] = [ap + -202] + 1, ap++;
[ap + 0] = [ap + -200] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 193;
call rel 75128;
[ap + 0] = [ap + -1] + 75127, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160690, ap++;
[ap + 0] = [ap + -202], ap++;
[ap + 0] = [ap + -202] + [ap + -2], ap++;
call rel 55542;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -4] = [[ap + -36] + 1];
[ap + -3] = [[ap + -36] + 2];
[ap + -2] = [[ap + -36] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 5], ap++;
jmp rel 953 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 4], ap++;
[ap + 0] = [[ap + -38] + 6], ap++;
[ap + 0] = [ap + -39] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 926 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -5] = [[ap + -7] + 1];
[ap + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
[ap + -2] = [[ap + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 6], ap++;
jmp rel 889 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 5], ap++;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -23] + 0], ap++;
[ap + -4] = [[ap + -24] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -26] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -23] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -25] + 1], ap++;
[ap + -7] = [[ap + -26] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -23] + 7];
[ap + -5] = [[ap + -23] + 8];
[ap + -4] = [[ap + -23] + 9];
[ap + -6] = [[ap + -23] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -23] + 7) %}
[ap + 0] = [[ap + -23] + 12], ap++;
jmp rel 812 if [ap + -1] != 0;
[ap + 0] = [[ap + -24] + 11], ap++;
[ap + 0] = [[ap + -25] + 13], ap++;
[ap + 0] = [ap + -26] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 762 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 724 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 679 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -23] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 595;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 573 if [ap + -12] != 0;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[ap + -40] + 0];
[fp + -5] = [[ap + -40] + 1];
[ap + 0] = [[ap + -40] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -5] = [[ap + -36] + 1];
[ap + -4] = [[ap + -36] + 2];
[ap + -6] = [[ap + -36] + 3];
[ap + -16] = [[ap + -36] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 6], ap++;
jmp rel 504 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -42] + 7];
[ap + -4] = [[ap + -42] + 8];
[ap + -3] = [[ap + -42] + 9];
[ap + -2] = [[ap + -42] + 10];
[ap + -21] = [[ap + -42] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42] + 7) %}
[ap + 0] = [[ap + -42] + 13], ap++;
jmp rel 477 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -48] + 14];
[ap + -4] = [[ap + -48] + 15];
[ap + -3] = [[ap + -48] + 16];
[ap + -2] = [[ap + -48] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -48] + 14) %}
[ap + 0] = [[ap + -48] + 19], ap++;
jmp rel 443 if [ap + -1] != 0;
[ap + 0] = [[ap + -49] + 18], ap++;
[ap + 0] = [[ap + -50] + 20], ap++;
[ap + 0] = [ap + -51] + 21, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -20] + 0], ap++;
[ap + 3] = [[ap + -21] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -25] + 2];
jmp rel 400 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -20] + 0];
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 367 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 329 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -24] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 252;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 237 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 204 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 175 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 53189;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -55] + 14];
[ap + -2] = [[ap + -55] + 15];
[ap + -6] = [[ap + -55] + 16];
[ap + -5] = [[ap + -55] + 17];
[ap + -4] = [[ap + -55] + 18];
[ap + -3] = [[ap + -55] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -55] + 14) %}
[ap + 0] = [[ap + -55] + 21], ap++;
jmp rel 131 if [ap + -1] != 0;
[ap + 0] = [[ap + -56] + 20], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -58] + 22, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -46] + 0], ap++;
[ap + -4] = [[ap + -47] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -48] + 2];
jmp rel 96;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -45] + 0], ap++;
[ap + -3] = [[ap + -46] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -47] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 53133;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -66] + 3, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -28] + 0];
[ap + -3] = [[ap + -28] + 1];
[ap + -7] = [[ap + -28] + 2];
[ap + -6] = [[ap + -28] + 3];
[ap + -5] = [[ap + -28] + 4];
[ap + -4] = [[ap + -28] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28]) %}
[ap + 0] = [[ap + -28] + 7], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -35] + 8];
[ap + -5] = [[ap + -35] + 9];
[ap + -4] = [[ap + -35] + 10];
[ap + -3] = [[ap + -35] + 11];
[ap + -2] = [[ap + -35] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -35] + 8) %}
[ap + 0] = [[ap + -35] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -36] + 13], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -40] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -36] + 13], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -40] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 15], ap++;
[ap + 0] = [[ap + -43] + 16], ap++;
ret;
ap += 7;
[ap + 0] = [[ap + -36] + 6], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2] + 11130, ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -40] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 8], ap++;
[ap + 0] = [[ap + -43] + 9], ap++;
ret;
ap += 23;
call rel 42332;
[ap + 0] = [ap + -77] + 3, ap++;
[ap + 0] = [ap + -37] + 23770, ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 38;
[ap + 0] = [[ap + -94] + 20], ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -2] + 25730, ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -98] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -100] + 22], ap++;
[ap + 0] = [[ap + -101] + 23], ap++;
ret;
ap += 56;
[ap + 0] = [[ap + -90] + 12], ap++;
[ap + 0] = [ap + -1] + 38650, ap++;
[ap + 0] = [ap + -92] + 16, ap++;
[ap + 0] = [[ap + -93] + 14], ap++;
[ap + 0] = [[ap + -94] + 15], ap++;
jmp rel 11;
ap += 63;
[ap + 0] = [[ap + -90] + 5], ap++;
[ap + 0] = [ap + -1] + 49980, ap++;
[ap + 0] = [ap + -92] + 9, ap++;
[ap + 0] = [[ap + -93] + 7], ap++;
[ap + 0] = [[ap + -94] + 8], ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 65;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -69] + 60560, ap++;
jmp rel 8;
ap += 68;
[ap + 0] = [ap + -80] + 2, ap++;
[ap + 0] = [ap + -73] + 60930, ap++;
call rel 42371;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 71;
call rel 42367;
[ap + 0] = [ap + -90] + 3, ap++;
[ap + 0] = [ap + -85] + 61280, ap++;
[ap + 0] = [ap + -87], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 91;
[ap + 0] = [[ap + -101] + 4], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -2] + 63990, ap++;
[ap + 0] = [ap + -104] + 8, ap++;
[ap + 0] = [[ap + -105] + 6], ap++;
[ap + 0] = [[ap + -106] + 7], ap++;
jmp rel 30;
ap += 83;
call rel 42342;
[ap + 0] = [ap + -114] + 3, ap++;
[ap + 0] = [ap + -97] + 73130, ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 103;
[ap + 0] = [[ap + -152] + 18], ap++;
[ap + 0] = [ap + -119], ap++;
[ap + 0] = [ap + -2] + 75840, ap++;
[ap + 0] = [ap + -155] + 22, ap++;
[ap + 0] = [[ap + -156] + 20], ap++;
[ap + 0] = [[ap + -157] + 21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 110;
[ap + 0] = [[ap + -153] + 12], ap++;
[ap + 0] = [ap + -1] + 86870, ap++;
[ap + 0] = [ap + -155] + 16, ap++;
[ap + 0] = [[ap + -156] + 14], ap++;
[ap + 0] = [[ap + -157] + 15], ap++;
jmp rel 11;
ap += 116;
[ap + 0] = [[ap + -153] + 5], ap++;
[ap + 0] = [ap + -1] + 98110, ap++;
[ap + 0] = [ap + -155] + 9, ap++;
[ap + 0] = [[ap + -156] + 7], ap++;
[ap + 0] = [[ap + -157] + 8], ap++;
[ap + 0] = [ap + -124], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 122;
call rel 74301;
[ap + 0] = [ap + -1] + 74300, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 109760, ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -132] + [ap + -2], ap++;
jmp rel 15;
ap += 125;
call rel 74287;
[ap + 0] = [ap + -1] + 74286, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 110130, ap++;
[ap + 0] = [ap + -143] + 2, ap++;
[ap + 0] = [ap + -136] + [ap + -2], ap++;
call rel 42242;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -177], ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 128;
call rel 74263;
[ap + 0] = [ap + -1] + 74262, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 110480, ap++;
call rel 42230;
[ap + 0] = [ap + -153] + 3, ap++;
[ap + 0] = [ap + -148] + [ap + -8], ap++;
[ap + 0] = [ap + -150], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 148;
[ap + 0] = [[ap + -157] + 4], ap++;
call rel 74242;
[ap + 0] = [ap + -1] + 74241, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 113190, ap++;
[ap + 0] = [ap + -158], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -166] + 8, ap++;
[ap + 0] = [[ap + -167] + 6], ap++;
[ap + 0] = [[ap + -168] + 7], ap++;
jmp rel 44;
ap += 139;
call rel 74224;
[ap + 0] = [ap + -1] + 74223, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 122240, ap++;
call rel 42191;
[ap + 0] = [ap + -164] + 3, ap++;
[ap + 0] = [ap + -159] + [ap + -8], ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 159;
[ap + 0] = [[ap + -183] + 11], ap++;
call rel 74198;
[ap + 0] = [ap + -1] + 74197, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 124950, ap++;
[ap + 0] = [ap + -169], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -192] + 15, ap++;
[ap + 0] = [[ap + -193] + 13], ap++;
[ap + 0] = [[ap + -194] + 14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -177], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 175;
[ap + 0] = [[ap + -183] + 5], ap++;
call rel 74172;
[ap + 0] = [ap + -1] + 74171, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 137500, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -192] + 9, ap++;
[ap + 0] = [[ap + -193] + 7], ap++;
[ap + 0] = [[ap + -194] + 8], ap++;
jmp rel 40;
ap += 176;
call rel 74153;
[ap + 0] = [ap + -1] + 74152, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 148090, ap++;
call rel 54542;
[ap + 0] = [ap + -190] + [ap + -7], ap++;
[ap + 0] = [ap + -192], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 185;
[ap + 0] = [[ap + -222] + 4], ap++;
call rel 74132;
[ap + 0] = [ap + -1] + 74131, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 149200, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -231] + 8, ap++;
[ap + 0] = [[ap + -232] + 6], ap++;
[ap + 0] = [[ap + -233] + 7], ap++;
[ap + 0] = [ap + -203], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 203;
call rel 74106;
[ap + 0] = [ap + -1] + 74105, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161860, ap++;
call rel 41954;
[ap + 0] = [ap + -226] + 3, ap++;
[ap + 0] = [ap + -224] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 206;
call rel 74082;
[ap + 0] = [ap + -1] + 74081, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 162540, ap++;
call rel 54507;
[ap + 0] = [ap + -221], ap++;
[ap + 0] = [ap + -221] + [ap + -8], ap++;
[ap + 0] = [ap + -231], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 208;
call rel 74061;
[ap + 0] = [ap + -1] + 74060, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 162620, ap++;
call rel 41882;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -229] + [ap + -8], ap++;
[ap + 0] = [ap + -231], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 223;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 74038;
[ap + 0] = [ap + -1] + 74037, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 164680, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 21;
ap += 235;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 74017;
[ap + 0] = [ap + -1] + 74016, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 176360, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 1347 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 752527710561232487180767849553012286753270539769503636205265964428066285613, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 1305 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 1264;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 1229 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 1188;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -5] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 211;
call rel 73898;
[ap + 0] = [ap + -1] + 73897, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 163120, ap++;
call rel 54305;
[ap + 0] = [ap + -226], ap++;
[ap + 0] = [ap + -226] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -247], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 67;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 199;
call rel 73846;
[ap + 0] = [ap + -1] + 73845, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161500, ap++;
[ap + 0] = [ap + -212] + 1, ap++;
[ap + 0] = [ap + -210] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 203;
call rel 73824;
[ap + 0] = [ap + -1] + 73823, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 162130, ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212] + [ap + -2], ap++;
call rel 54238;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -247], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -4] = [[ap + -36] + 1];
[ap + -3] = [[ap + -36] + 2];
[ap + -2] = [[ap + -36] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 5], ap++;
jmp rel 1029 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 4], ap++;
[ap + 0] = [[ap + -38] + 6], ap++;
[ap + 0] = [ap + -39] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 1002 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -5] = [[ap + -7] + 1];
[ap + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
[ap + -2] = [[ap + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 6], ap++;
jmp rel 965 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 5], ap++;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -23] + 0], ap++;
[ap + -4] = [[ap + -24] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -26] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -23] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -25] + 1], ap++;
[ap + -7] = [[ap + -26] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -23] + 7];
[ap + -5] = [[ap + -23] + 8];
[ap + -4] = [[ap + -23] + 9];
[ap + -6] = [[ap + -23] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -23] + 7) %}
[ap + 0] = [[ap + -23] + 12], ap++;
jmp rel 888 if [ap + -1] != 0;
[ap + 0] = [[ap + -24] + 11], ap++;
[ap + 0] = [[ap + -25] + 13], ap++;
[ap + 0] = [ap + -26] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 838 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 800 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 755 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 719;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -22] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 679;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 13;
[ap + -1] = [[ap + -4] + 0];
ap += 1;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -33] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 595;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 573 if [ap + -12] != 0;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[ap + -50] + 0];
[fp + -5] = [[ap + -50] + 1];
[ap + 0] = [[ap + -50] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -46] + 0];
[ap + -5] = [[ap + -46] + 1];
[ap + -4] = [[ap + -46] + 2];
[ap + -6] = [[ap + -46] + 3];
[ap + -16] = [[ap + -46] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -46]) %}
[ap + 0] = [[ap + -46] + 6], ap++;
jmp rel 504 if [ap + -1] != 0;
[ap + 0] = [[ap + -47] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -52] + 7];
[ap + -4] = [[ap + -52] + 8];
[ap + -3] = [[ap + -52] + 9];
[ap + -2] = [[ap + -52] + 10];
[ap + -21] = [[ap + -52] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -52] + 7) %}
[ap + 0] = [[ap + -52] + 13], ap++;
jmp rel 477 if [ap + -1] != 0;
[ap + 0] = [[ap + -53] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -58] + 14];
[ap + -4] = [[ap + -58] + 15];
[ap + -3] = [[ap + -58] + 16];
[ap + -2] = [[ap + -58] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -58] + 14) %}
[ap + 0] = [[ap + -58] + 19], ap++;
jmp rel 443 if [ap + -1] != 0;
[ap + 0] = [[ap + -59] + 18], ap++;
[ap + 0] = [[ap + -60] + 20], ap++;
[ap + 0] = [ap + -61] + 21, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -20] + 0], ap++;
[ap + 3] = [[ap + -21] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -25] + 2];
jmp rel 400 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -20] + 0];
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 367 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 329 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -24] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 252;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 237 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 204 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 175 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 51848;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -55] + 14];
[ap + -2] = [[ap + -55] + 15];
[ap + -6] = [[ap + -55] + 16];
[ap + -5] = [[ap + -55] + 17];
[ap + -4] = [[ap + -55] + 18];
[ap + -3] = [[ap + -55] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -55] + 14) %}
[ap + 0] = [[ap + -55] + 21], ap++;
jmp rel 131 if [ap + -1] != 0;
[ap + 0] = [[ap + -56] + 20], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -58] + 22, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -46] + 0], ap++;
[ap + -4] = [[ap + -47] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -48] + 2];
jmp rel 96;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -45] + 0], ap++;
[ap + -3] = [[ap + -46] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -47] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 51792;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -66] + 3, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -28] + 0];
[ap + -3] = [[ap + -28] + 1];
[ap + -7] = [[ap + -28] + 2];
[ap + -6] = [[ap + -28] + 3];
[ap + -5] = [[ap + -28] + 4];
[ap + -4] = [[ap + -28] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28]) %}
[ap + 0] = [[ap + -28] + 7], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -35] + 8];
[ap + -5] = [[ap + -35] + 9];
[ap + -4] = [[ap + -35] + 10];
[ap + -3] = [[ap + -35] + 11];
[ap + -2] = [[ap + -35] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -35] + 8) %}
[ap + 0] = [[ap + -35] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -36] + 13], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -40] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -36] + 13], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -40] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 15], ap++;
[ap + 0] = [[ap + -43] + 16], ap++;
ret;
ap += 7;
[ap + 0] = [[ap + -36] + 6], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2] + 11130, ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -40] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 8], ap++;
[ap + 0] = [[ap + -43] + 9], ap++;
ret;
ap += 23;
call rel 40991;
[ap + 0] = [ap + -77] + 3, ap++;
[ap + 0] = [ap + -37] + 23770, ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 38;
[ap + 0] = [[ap + -94] + 20], ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -2] + 25730, ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -98] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -100] + 22], ap++;
[ap + 0] = [[ap + -101] + 23], ap++;
ret;
ap += 56;
[ap + 0] = [[ap + -90] + 12], ap++;
[ap + 0] = [ap + -1] + 38650, ap++;
[ap + 0] = [ap + -92] + 16, ap++;
[ap + 0] = [[ap + -93] + 14], ap++;
[ap + 0] = [[ap + -94] + 15], ap++;
jmp rel 11;
ap += 63;
[ap + 0] = [[ap + -90] + 5], ap++;
[ap + 0] = [ap + -1] + 49980, ap++;
[ap + 0] = [ap + -92] + 9, ap++;
[ap + 0] = [[ap + -93] + 7], ap++;
[ap + 0] = [[ap + -94] + 8], ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 65;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -69] + 60560, ap++;
jmp rel 8;
ap += 68;
[ap + 0] = [ap + -80] + 2, ap++;
[ap + 0] = [ap + -73] + 60930, ap++;
call rel 41549;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 71;
call rel 41026;
[ap + 0] = [ap + -90] + 3, ap++;
[ap + 0] = [ap + -85] + 61280, ap++;
[ap + 0] = [ap + -87], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 91;
[ap + 0] = [[ap + -101] + 4], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -2] + 63990, ap++;
[ap + 0] = [ap + -104] + 8, ap++;
[ap + 0] = [[ap + -105] + 6], ap++;
[ap + 0] = [[ap + -106] + 7], ap++;
jmp rel 30;
ap += 83;
call rel 41001;
[ap + 0] = [ap + -114] + 3, ap++;
[ap + 0] = [ap + -97] + 73130, ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 103;
[ap + 0] = [[ap + -162] + 18], ap++;
[ap + 0] = [ap + -119], ap++;
[ap + 0] = [ap + -2] + 75840, ap++;
[ap + 0] = [ap + -165] + 22, ap++;
[ap + 0] = [[ap + -166] + 20], ap++;
[ap + 0] = [[ap + -167] + 21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 110;
[ap + 0] = [[ap + -163] + 12], ap++;
[ap + 0] = [ap + -1] + 86870, ap++;
[ap + 0] = [ap + -165] + 16, ap++;
[ap + 0] = [[ap + -166] + 14], ap++;
[ap + 0] = [[ap + -167] + 15], ap++;
jmp rel 11;
ap += 116;
[ap + 0] = [[ap + -163] + 5], ap++;
[ap + 0] = [ap + -1] + 98110, ap++;
[ap + 0] = [ap + -165] + 9, ap++;
[ap + 0] = [[ap + -166] + 7], ap++;
[ap + 0] = [[ap + -167] + 8], ap++;
[ap + 0] = [ap + -124], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 122;
call rel 72960;
[ap + 0] = [ap + -1] + 72959, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 109760, ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -132] + [ap + -2], ap++;
jmp rel 15;
ap += 125;
call rel 72946;
[ap + 0] = [ap + -1] + 72945, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 110130, ap++;
[ap + 0] = [ap + -143] + 2, ap++;
[ap + 0] = [ap + -136] + [ap + -2], ap++;
call rel 41420;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -187], ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 141;
call rel 72922;
[ap + 0] = [ap + -1] + 72921, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 112190, ap++;
[ap + 0] = [ap + -154] + 1, ap++;
[ap + 0] = [ap + -152] + [ap + -2], ap++;
jmp rel 15;
ap += 147;
call rel 72907;
[ap + 0] = [ap + -1] + 72906, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 113200, ap++;
[ap + 0] = [ap + -165] + 2, ap++;
[ap + 0] = [ap + -158] + [ap + -2], ap++;
call rel 53340;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -187], ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 138;
call rel 72883;
[ap + 0] = [ap + -1] + 72882, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 111920, ap++;
call rel 40850;
[ap + 0] = [ap + -163] + 3, ap++;
[ap + 0] = [ap + -158] + [ap + -8], ap++;
[ap + 0] = [ap + -160], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 158;
[ap + 0] = [[ap + -167] + 4], ap++;
call rel 72862;
[ap + 0] = [ap + -1] + 72861, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 114630, ap++;
[ap + 0] = [ap + -168], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -176] + 8, ap++;
[ap + 0] = [[ap + -177] + 6], ap++;
[ap + 0] = [[ap + -178] + 7], ap++;
jmp rel 44;
ap += 149;
call rel 72844;
[ap + 0] = [ap + -1] + 72843, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 123680, ap++;
call rel 40811;
[ap + 0] = [ap + -174] + 3, ap++;
[ap + 0] = [ap + -169] + [ap + -8], ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 169;
[ap + 0] = [[ap + -193] + 11], ap++;
call rel 72818;
[ap + 0] = [ap + -1] + 72817, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 126390, ap++;
[ap + 0] = [ap + -179], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -202] + 15, ap++;
[ap + 0] = [[ap + -203] + 13], ap++;
[ap + 0] = [[ap + -204] + 14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -187], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 185;
[ap + 0] = [[ap + -193] + 5], ap++;
call rel 72792;
[ap + 0] = [ap + -1] + 72791, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 138940, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -202] + 9, ap++;
[ap + 0] = [[ap + -203] + 7], ap++;
[ap + 0] = [[ap + -204] + 8], ap++;
jmp rel 40;
ap += 186;
call rel 72773;
[ap + 0] = [ap + -1] + 72772, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 149530, ap++;
call rel 53162;
[ap + 0] = [ap + -200] + [ap + -7], ap++;
[ap + 0] = [ap + -202], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 195;
[ap + 0] = [[ap + -232] + 4], ap++;
call rel 72752;
[ap + 0] = [ap + -1] + 72751, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 150640, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -241] + 8, ap++;
[ap + 0] = [[ap + -242] + 6], ap++;
[ap + 0] = [[ap + -243] + 7], ap++;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 213;
call rel 72726;
[ap + 0] = [ap + -1] + 72725, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 163300, ap++;
call rel 40574;
[ap + 0] = [ap + -236] + 3, ap++;
[ap + 0] = [ap + -234] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -247], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 216;
call rel 72702;
[ap + 0] = [ap + -1] + 72701, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 163980, ap++;
call rel 53145;
[ap + 0] = [ap + -231], ap++;
[ap + 0] = [ap + -231] + [ap + -8], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 218;
call rel 72681;
[ap + 0] = [ap + -1] + 72680, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 164060, ap++;
call rel 40502;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -239] + [ap + -8], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 233;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 72658;
[ap + 0] = [ap + -1] + 72657, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 166120, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 21;
ap += 245;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 72637;
[ap + 0] = [ap + -1] + 72636, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 177800, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 248 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 215 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 183;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 157 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 583936847901168531744846041173805170834282611706669097317999134304583535803, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 125 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 93;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 583936847901168531744846041173805170834282611706669097317999134304583535803, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
[fp + -3] = [[ap + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 6], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 51061;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -34] + 7];
[ap + -2] = [[ap + -34] + 8];
[ap + -6] = [[ap + -34] + 9];
[ap + -5] = [[ap + -34] + 10];
[ap + -4] = [[ap + -34] + 11];
[ap + -3] = [[ap + -34] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -34] + 7) %}
[ap + 0] = [[ap + -34] + 14], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -35] + 13], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -38] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -35] + 13], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -38] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 15], ap++;
[ap + 0] = [[ap + -41] + 16], ap++;
ret;
ap += 22;
[ap + 0] = [[ap + -35] + 5], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2] + 13280, ap++;
[ap + 0] = [ap + -38] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 7], ap++;
[ap + 0] = [[ap + -41] + 8], ap++;
ret;
ap += 17;
call rel 40256;
[ap + 0] = [ap + -40] + 3, ap++;
[ap + 0] = [ap + -31] + 23130, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 32;
[ap + 0] = [[ap + -47] + 4], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 25190, ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = [[ap + -51] + 6], ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 32;
call rel 52856;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40] + 35490, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 34;
call rel 40213;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -48] + 35570, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 49;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 37630, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 61;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 49310, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 248 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 215 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 183;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 157 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 752527710561232487180767849553012286753270539769503636205265964428066285613, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 125 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 93;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 752527710561232487180767849553012286753270539769503636205265964428066285613, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
[fp + -3] = [[ap + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 6], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 50790;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -34] + 7];
[ap + -2] = [[ap + -34] + 8];
[ap + -6] = [[ap + -34] + 9];
[ap + -5] = [[ap + -34] + 10];
[ap + -4] = [[ap + -34] + 11];
[ap + -3] = [[ap + -34] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -34] + 7) %}
[ap + 0] = [[ap + -34] + 14], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -35] + 13], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -38] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -35] + 13], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -38] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 15], ap++;
[ap + 0] = [[ap + -41] + 16], ap++;
ret;
ap += 22;
[ap + 0] = [[ap + -35] + 5], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2] + 13280, ap++;
[ap + 0] = [ap + -38] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 7], ap++;
[ap + 0] = [[ap + -41] + 8], ap++;
ret;
ap += 17;
call rel 39985;
[ap + 0] = [ap + -40] + 3, ap++;
[ap + 0] = [ap + -31] + 23130, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 32;
[ap + 0] = [[ap + -47] + 4], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 25190, ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = [[ap + -51] + 6], ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 32;
call rel 52585;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40] + 35490, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 34;
call rel 39942;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -48] + 35570, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 49;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 37630, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 61;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 49310, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 583936847901168531744846041173805170834282611706669097317999134304583535803, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 39848;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 752527710561232487180767849553012286753270539769503636205265964428066285613, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 39771;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 52278;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 39635;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 39541;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 9230 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202226, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 363;
[fp + -6] = [ap + 0] + 9230, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 320 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 299;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 251 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 223 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 189 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 161 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 42695;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71453;
[ap + 0] = [ap + -1] + 71452, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 75230, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -26], ap++;
call rel -5394;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 42639;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 42726;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2640, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4250, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4310, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5920, ap++;
call rel 42704;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 6720, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 8030, ap++;
call rel 42693;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 42556;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 69;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 42517;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 71276;
[ap + 0] = [ap + -1] + 71275, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 21;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -10] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 110930206544728495286294282378369001838, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -4] + 600, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 42481;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 42470;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 69;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 42432;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 71191;
[ap + 0] = [ap + -1] + 71190, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 21;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -10] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1933726787, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -4] + 600, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 42396;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 42385;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 69;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 42347;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 71106;
[ap + 0] = [ap + -1] + 71105, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 21;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -10] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -4] + 600, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 42311;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 42300;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 42262;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 71021;
[ap + 0] = [ap + -1] + 71020, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 38871;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 38851;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 42083;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 42072;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 41985;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70743;
[ap + 0] = [ap + -1] + 70742, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28290, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -5566;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 41929;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 42034;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 41897;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5990 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205466, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 233;
[fp + -6] = [ap + 0] + 5990, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 190 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 169;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 121 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 100;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 41760;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70518;
[ap + 0] = [ap + -1] + 70517, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 28690, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 41;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 337994139936370667767799129369552596157394447336989834104582481799883947719, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -26], ap++;
call rel 49162;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 41699;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 41795;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 3480, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4790, ap++;
call rel 41784;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 41647;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 336;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 293 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 272;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 224 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 196 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 162 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 134 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 41457;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70215;
[ap + 0] = [ap + -1] + 70214, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 53430, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 80;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -3] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 41 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -29], ap++;
call rel 49043;
jmp rel 18 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 400, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 20;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 70144;
[ap + 0] = [ap + -1] + 70143, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 42230, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -10] + [ap + -3], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 41357;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 41442;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 41431;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 41294;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 307;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 264 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 243;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 195 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 167 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 133 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 105 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 41104;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 69862;
[ap + 0] = [ap + -1] + 69861, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 172460, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 51;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -6180;
jmp rel 27 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 700, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 41033;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 41118;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 41107;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 40970;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 9130 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202326, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 377;
[fp + -6] = [ap + 0] + 9130, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 334 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 313;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 265 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 244;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 196 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 168 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 134 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 106 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 40731;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 69489;
[ap + 0] = [ap + -1] + 69488, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 210500, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 52;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -6345;
jmp rel 27 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 700, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 40659;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 40735;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 40724;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 6620, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7930, ap++;
call rel 40713;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 40576;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 40386;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 69144;
[ap + 0] = [ap + -1] + 69143, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 191510, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -6181;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 40329;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 40414;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 40403;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 40266;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 40076;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 68834;
[ap + 0] = [ap + -1] + 68833, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 193050, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -5187;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 40019;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 40104;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 40093;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 39956;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 39868;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68627;
[ap + 0] = [ap + -1] + 68626, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 61620 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 61620, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 61620, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -4008;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39820;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 39926;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39790;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 39703;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68462;
[ap + 0] = [ap + -1] + 68461, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 61620 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 61620, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 61620, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3902;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39655;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 39761;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39625;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 39587;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68346;
[ap + 0] = [ap + -1] + 68345, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 583936847901168531744846041173805170834282611706669097317999134304583535803, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 36102;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39484;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39473;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 39435;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 68194;
[ap + 0] = [ap + -1] + 68193, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 752527710561232487180767849553012286753270539769503636205265964428066285613, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 35950;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39332;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39321;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 39234;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67993;
[ap + 0] = [ap + -1] + 67992, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3946;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39186;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 39292;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39156;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 39118;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67877;
[ap + 0] = [ap + -1] + 67876, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 35633;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39015;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39004;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -13] = [[fp + -12] + 1];
[ap + -3] = [[fp + -12] + 2];
[ap + -2] = [[fp + -12] + 3];
[fp + -11] = [[fp + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12]) %}
[ap + 0] = [[fp + -12] + 6], ap++;
jmp rel 244 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 7];
[ap + -4] = [[fp + -12] + 8];
[ap + -3] = [[fp + -12] + 9];
[ap + -2] = [[fp + -12] + 10];
[fp + -10] = [[fp + -12] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 7) %}
[ap + 0] = [[fp + -12] + 13], ap++;
jmp rel 216 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1526171809504728374681023080986779835603913378952539665964907005446042711382, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 14];
[ap + -4] = [[fp + -12] + 15];
[ap + -3] = [[fp + -12] + 16];
[ap + -2] = [[fp + -12] + 17];
[fp + -9] = [[fp + -12] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 14) %}
[ap + 0] = [[fp + -12] + 20], ap++;
jmp rel 188 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 21];
[ap + -4] = [[fp + -12] + 22];
[ap + -3] = [[fp + -12] + 23];
[ap + -2] = [[fp + -12] + 24];
[fp + -8] = [[fp + -12] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 21) %}
[ap + 0] = [[fp + -12] + 27], ap++;
jmp rel 160 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 28];
[ap + -4] = [[fp + -12] + 29];
[ap + -3] = [[fp + -12] + 30];
[ap + -2] = [[fp + -12] + 31];
[fp + -7] = [[fp + -12] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 28) %}
[ap + 0] = [[fp + -12] + 34], ap++;
jmp rel 128 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 33], ap++;
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 35];
[ap + -4] = [[fp + -12] + 36];
[ap + -3] = [[fp + -12] + 37];
[ap + -2] = [[fp + -12] + 38];
[fp + -6] = [[fp + -12] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 35) %}
[ap + 0] = [[fp + -12] + 41], ap++;
jmp rel 99 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 42];
[ap + -4] = [[fp + -12] + 43];
[ap + -3] = [[fp + -12] + 44];
[ap + -2] = [[fp + -12] + 45];
[fp + -5] = [[fp + -12] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 42) %}
[ap + 0] = [[fp + -12] + 48], ap++;
jmp rel 67 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 47], ap++;
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 49];
[ap + -4] = [[fp + -12] + 50];
[ap + -3] = [[fp + -12] + 51];
[ap + -2] = [[fp + -12] + 52];
[fp + -4] = [[fp + -12] + 53];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 49) %}
[ap + 0] = [[fp + -12] + 55], ap++;
jmp rel 38 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 54], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 550745618288514420865049528178905533793015440408502280175295526239113481224, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 56];
[ap + -4] = [[fp + -12] + 57];
[ap + -3] = [[fp + -12] + 58];
[ap + -2] = [[fp + -12] + 59];
[fp + -3] = [[fp + -12] + 60];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 56) %}
[ap + 0] = [[fp + -12] + 62], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 61], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 63, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -12] + 61], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 65, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 63], ap++;
[ap + 0] = [[fp + -12] + 64], ap++;
ret;
ap += 2;
[ap + 0] = [[fp + -12] + 54], ap++;
[ap + 0] = [ap + -1] + 10580, ap++;
[ap + 0] = [fp + -12] + 58, ap++;
[ap + 0] = [[fp + -12] + 56], ap++;
[ap + 0] = [[fp + -12] + 57], ap++;
jmp rel 11;
ap += 9;
[ap + 0] = [[fp + -12] + 47], ap++;
[ap + 0] = [ap + -1] + 21910, ap++;
[ap + 0] = [fp + -12] + 51, ap++;
[ap + 0] = [[fp + -12] + 49], ap++;
[ap + 0] = [[fp + -12] + 50], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -12] + 40], ap++;
[ap + 0] = [ap + -1] + 32950, ap++;
[ap + 0] = [fp + -12] + 44, ap++;
[ap + 0] = [[fp + -12] + 42], ap++;
[ap + 0] = [[fp + -12] + 43], ap++;
jmp rel 11;
ap += 22;
[ap + 0] = [[fp + -12] + 33], ap++;
[ap + 0] = [ap + -1] + 44280, ap++;
[ap + 0] = [fp + -12] + 37, ap++;
[ap + 0] = [[fp + -12] + 35], ap++;
[ap + 0] = [[fp + -12] + 36], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 32;
[ap + 0] = [[fp + -12] + 26], ap++;
[ap + 0] = [ap + -1] + 55780, ap++;
[ap + 0] = [fp + -12] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 28], ap++;
[ap + 0] = [[fp + -12] + 29], ap++;
ret;
ap += 38;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = [ap + -1] + 66920, ap++;
[ap + 0] = [fp + -12] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 21], ap++;
[ap + 0] = [[fp + -12] + 22], ap++;
ret;
ap += 44;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [ap + -1] + 78060, ap++;
[ap + 0] = [fp + -12] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 14], ap++;
[ap + 0] = [[fp + -12] + 15], ap++;
ret;
ap += 50;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -1] + 89200, ap++;
[ap + 0] = [fp + -12] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 7], ap++;
[ap + 0] = [[fp + -12] + 8], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 1073 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 259523929711825362140243228515225597705787863985601064547190058713747408810, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -9] = [[fp + -7] + 6];
[ap + -8] = [[fp + -7] + 7];
[ap + -7] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 1024 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -10] + 0], ap++;
[ap + 3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -10] + 2];
jmp rel 972 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -10] + 0];
[ap + 0] = 259523929711825362140243228515225597705787863985601064547190058713747408810, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 930 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 883 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [ap + -19] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 13;
[ap + -1] = [[ap + -13] + 1];
ap += 5;
[ap + 0] = [ap + -18] + 2, ap++;
[ap + 0] = [ap + -10] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 1] = [ap + -12] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 2];
jmp rel 819;
[ap + -1] = [[ap + -18] + 2];
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 795 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 259523929711825362140243228515225597705787863985601064547190058713747408810, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -4] = [[ap + -21] + 1];
[ap + -3] = [[ap + -21] + 2];
[ap + -2] = [[ap + -21] + 3];
[ap + -6] = [[ap + -21] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 6], ap++;
jmp rel 753 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = 259523929711825362140243228515225597705787863985601064547190058713747408810, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -28] + 7];
[ap + -4] = [[ap + -28] + 8];
[ap + -3] = [[ap + -28] + 9];
[ap + -2] = [[ap + -28] + 10];
[ap + -12] = [[ap + -28] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28] + 7) %}
[ap + 0] = [[ap + -28] + 13], ap++;
jmp rel 715 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -34] + 14];
[ap + -4] = [[ap + -34] + 15];
[ap + -3] = [[ap + -34] + 16];
[ap + -2] = [[ap + -34] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -34] + 14) %}
[ap + 0] = [[ap + -34] + 19], ap++;
jmp rel 672 if [ap + -1] != 0;
[ap + 0] = [[ap + -35] + 18], ap++;
[ap + 0] = [[ap + -36] + 20], ap++;
[ap + 0] = [ap + -37] + 21, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -27] + 0], ap++;
[ap + 3] = [[ap + -28] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -32] + 2];
jmp rel 620 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -27] + 0];
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 578 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 531 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 493;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[fp + -5] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -4], ap++;
[fp + -6] = [ap + 1] + [ap + -25], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 449;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 5], ap++;
jmp rel 404 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -21] + 6], ap++;
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 352 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -11] + 0];
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 310 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 263 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 225;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [fp + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -23] = [ap + 1] + [fp + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 183;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -2] = [[ap + -15] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 3], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 2], ap++;
[ap + 0] = [[ap + -17] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -88] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[ap + -88] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -17] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -7] = [[ap + -17] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -31] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [[ap + -24] + 1], ap++;
call rel 47458;
[ap + 0] = [fp + -8] + 6, ap++;
jmp rel 68 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 57 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = [ap + -249], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 48109;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -45] + 0];
[ap + -2] = [[ap + -45] + 1];
[ap + -6] = [[ap + -45] + 2];
[ap + -5] = [[ap + -45] + 3];
[ap + -4] = [[ap + -45] + 4];
[ap + -3] = [[ap + -45] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -45]) %}
[ap + 0] = [[ap + -45] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [ap + -213], ap++;
ret;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 8], ap++;
[ap + 0] = [[ap + -53] + 9], ap++;
ret;
ap += 37;
[ap + 0] = [ap + -38] + 14830, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
jmp rel 8;
ap += 38;
[ap + 0] = [ap + -45] + 15120, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 158;
[ap + 0] = [[ap + -174] + 2], ap++;
call rel 66897;
[ap + 0] = [ap + -1] + 66896, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 123650, ap++;
[ap + 0] = [ap + -170], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -185] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -187] + 4], ap++;
[ap + 0] = [[ap + -188] + 5], ap++;
ret;
ap += 154;
call rel 66875;
[ap + 0] = [ap + -1] + 66874, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 133290, ap++;
[ap + 0] = [ap + -168] + 1, ap++;
[ap + 0] = [ap + -166] + [ap + -2], ap++;
jmp rel 17;
ap += 160;
call rel 66858;
[ap + 0] = [ap + -1] + 66857, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 134300, ap++;
[ap + 0] = [ap + -179] + 2, ap++;
[ap + 0] = [ap + -172] + [ap + -2], ap++;
call rel 48068;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -185], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 151;
call rel 66832;
[ap + 0] = [ap + -1] + 66831, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 133020, ap++;
call rel 34797;
[ap + 0] = [ap + -177] + 3, ap++;
[ap + 0] = [ap + -172] + [ap + -8], ap++;
[ap + 0] = [ap + -174], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 171;
[ap + 0] = [[ap + -181] + 4], ap++;
call rel 66809;
[ap + 0] = [ap + -1] + 66808, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 135730, ap++;
[ap + 0] = [ap + -182], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -191] + 8, ap++;
[ap + 0] = [[ap + -192] + 6], ap++;
[ap + 0] = [[ap + -193] + 7], ap++;
jmp rel 48;
ap += 163;
call rel 66789;
[ap + 0] = [ap + -1] + 66788, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 144870, ap++;
call rel 34754;
[ap + 0] = [ap + -192] + 3, ap++;
[ap + 0] = [ap + -184] + [ap + -8], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 183;
[ap + 0] = [[ap + -203] + 4], ap++;
call rel 66761;
[ap + 0] = [ap + -1] + 66760, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 147580, ap++;
[ap + 0] = [ap + -197], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -213] + 8, ap++;
[ap + 0] = [[ap + -214] + 6], ap++;
[ap + 0] = [[ap + -215] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 186;
call rel 66734;
[ap + 0] = [ap + -1] + 66733, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 158050, ap++;
[ap + 0] = [ap + -202] + 1, ap++;
[ap + 0] = [ap + -198] + [ap + -2], ap++;
jmp rel 17;
ap += 194;
call rel 66717;
[ap + 0] = [ap + -1] + 66716, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 159240, ap++;
[ap + 0] = [ap + -213] + 2, ap++;
[ap + 0] = [ap + -206] + [ap + -2], ap++;
call rel 47936;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -219], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 185;
call rel 66691;
[ap + 0] = [ap + -1] + 66690, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 157960, ap++;
call rel 34656;
[ap + 0] = [ap + -211] + 3, ap++;
[ap + 0] = [ap + -206] + [ap + -8], ap++;
[ap + 0] = [ap + -208], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 205;
[ap + 0] = [[ap + -215] + 4], ap++;
call rel 66668;
[ap + 0] = [ap + -1] + 66667, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160670, ap++;
[ap + 0] = [ap + -216], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -225] + 8, ap++;
[ap + 0] = [[ap + -226] + 6], ap++;
[ap + 0] = [[ap + -227] + 7], ap++;
jmp rel 48;
ap += 197;
call rel 66648;
[ap + 0] = [ap + -1] + 66647, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 169810, ap++;
call rel 34613;
[ap + 0] = [ap + -242] + 3, ap++;
[ap + 0] = [ap + -218] + [ap + -8], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 217;
[ap + 0] = [[ap + -252] + 18], ap++;
call rel 66620;
[ap + 0] = [ap + -1] + 66619, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 172520, ap++;
[ap + 0] = [ap + -247], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -262] + 22, ap++;
[ap + 0] = [[ap + -263] + 20], ap++;
[ap + 0] = [[ap + -264] + 21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 224;
[ap + 0] = [[ap + -253] + 12], ap++;
call rel 66592;
[ap + 0] = [ap + -1] + 66591, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 183550, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -262] + 16, ap++;
[ap + 0] = [[ap + -263] + 14], ap++;
[ap + 0] = [[ap + -264] + 15], ap++;
jmp rel 20;
ap += 231;
[ap + 0] = [[ap + -253] + 5], ap++;
call rel 66572;
[ap + 0] = [ap + -1] + 66571, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 194880, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -262] + 9, ap++;
[ap + 0] = [[ap + -263] + 7], ap++;
[ap + 0] = [[ap + -264] + 8], ap++;
[ap + 0] = [ap + -252], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 233;
call rel 66546;
[ap + 0] = [ap + -1] + 66545, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205460, ap++;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -244] + [ap + -2], ap++;
jmp rel 17;
ap += 236;
call rel 66530;
[ap + 0] = [ap + -1] + 66529, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205830, ap++;
[ap + 0] = [ap + -262] + 3, ap++;
[ap + 0] = [ap + -248] + [ap + -2], ap++;
call rel 34483;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -268], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 234;
call rel 66504;
[ap + 0] = [ap + -1] + 66503, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205450, ap++;
call rel 34469;
[ap + 0] = [ap + -260] + 3, ap++;
[ap + 0] = [ap + -255] + [ap + -8], ap++;
[ap + 0] = [ap + -257], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 254;
[ap + 0] = [[ap + -264] + 4], ap++;
call rel 66481;
[ap + 0] = [ap + -1] + 66480, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 208160, ap++;
[ap + 0] = [ap + -265], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -274] + 8, ap++;
[ap + 0] = [[ap + -275] + 6], ap++;
[ap + 0] = [[ap + -276] + 7], ap++;
jmp rel 48;
ap += 246;
call rel 66461;
[ap + 0] = [ap + -1] + 66460, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 217300, ap++;
call rel 34426;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -267] + [ap + -8], ap++;
[ap + 0] = [ap + -269], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 266;
[ap + 0] = [[fp + -7] + 9], ap++;
call rel 66433;
[ap + 0] = [ap + -1] + 66432, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 220010, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 283;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 66405;
[ap + 0] = [ap + -1] + 66404, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 232040, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
ret;
ap += 7;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -13] + 0];
[fp + -11] = [[fp + -13] + 1];
[ap + 0] = [[fp + -13] + 2], ap++;
[ap + -1] = [[fp + -13] + 3];
[fp + -10] = [[fp + -13] + 4];
[ap + 0] = [[fp + -13] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -15] + 0], ap++;
[ap + -4] = [[fp + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -15] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -15] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -15] + 1], ap++;
[ap + -7] = [[fp + -15] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -15] + 3, ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 47580;
[fp + 1] = [fp + -13] + 6;
jmp rel 379 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 361 if [ap + -11] != 0;
[ap + 0] = [ap + -1], ap++;
[fp + 6] = [ap + -11];
[fp + 2] = [ap + -10];
[fp + 3] = [ap + -9];
[fp + 4] = [ap + -8];
[fp + 5] = [ap + -7];
[fp + 0] = [ap + -3];
jmp rel 8 if [ap + -5] != 0;
ap += 2;
[ap + 0] = [ap + -3] + 80, ap++;
jmp rel 7;
[ap + -5] = [ap + 0] + [fp + -9], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 321 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 7, ap++;
call rel 48524;
jmp rel 23 if [ap + -1] != 0;
call rel 66303;
[ap + 0] = [ap + -1] + 66302, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 154910, ap++;
call rel 48593;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -20] + [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1526171809504728374681023080986779835603913378952539665964907005446042711382, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 5], ap++;
jmp rel 252 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [ap + -29] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -37] + 0], ap++;
[ap + -4] = [[ap + -38] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -39] + 2];
jmp rel 213;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -36] + 0], ap++;
[ap + -3] = [[ap + -37] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -38] + 2];
[ap + 0] = [ap + -38] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -8], ap++;
call rel 48539;
jmp rel 171 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 23 if [ap + -2] != 0;
call rel 66223;
[ap + 0] = [ap + -1] + 66222, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 124430, ap++;
call rel 48624;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15] + [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + 1] + 0];
[fp + -11] = [[fp + 1] + 1];
[ap + 0] = [[fp + 1] + 2], ap++;
[ap + -1] = [[fp + 1] + 3];
[fp + -10] = [[fp + 1] + 4];
[ap + 0] = [[fp + 1] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -17] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -7] = [[ap + -17] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [fp + 0], ap++;
call rel 46619;
[ap + 0] = [fp + 1] + 6, ap++;
jmp rel 72 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 63 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 47266;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -45] + 0];
[ap + -2] = [[ap + -45] + 1];
[ap + -6] = [[ap + -45] + 2];
[ap + -5] = [[ap + -45] + 3];
[ap + -4] = [[ap + -45] + 4];
[ap + -3] = [[ap + -45] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -45]) %}
[ap + 0] = [[ap + -45] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 8], ap++;
[ap + 0] = [[ap + -53] + 9], ap++;
ret;
[ap + 0] = [ap + -1] + 15300, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -8] + 15490, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 66057;
[ap + 0] = [ap + -1] + 66056, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 125330, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + [ap + -2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
call rel 66038;
[ap + 0] = [ap + -1] + 66037, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 141800, ap++;
call rel 33859;
[ap + 0] = [ap + -52] + 3, ap++;
[ap + 0] = [ap + -21] + [ap + -8], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
[ap + 0] = [[ap + -27] + 4], ap++;
call rel 66017;
[ap + 0] = [ap + -1] + 66016, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 144010, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -37] + 8, ap++;
[ap + 0] = [[ap + -38] + 6], ap++;
[ap + 0] = [[ap + -39] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 65992;
[ap + 0] = [ap + -1] + 65991, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 156010, ap++;
call rel 48402;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -15] + [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 65971;
[ap + 0] = [ap + -1] + 65970, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 157350, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 17;
ap += 1;
call rel 65954;
[ap + 0] = [ap + -1] + 65953, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 157540, ap++;
[ap + 0] = [ap + -21] + [ap + -1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 47129;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 682 if [ap + -12] != 0;
[ap + 0] = [ap + -14], ap++;
jmp rel 662 if [ap + -12] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 5, ap++;
call rel 48093;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 330;
call rel 65869;
[ap + 0] = [ap + -1] + 65868, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 180940, ap++;
call rel 48288;
[ap + 0] = [ap + -365], ap++;
[ap + 0] = [ap + -345] + [ap + -8], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -366], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
jmp rel 25 if [ap + -12] != 0;
ap += 329;
call rel 65843;
[ap + 0] = [ap + -1] + 65842, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 180750, ap++;
call rel 48244;
[ap + 0] = [ap + -365], ap++;
[ap + 0] = [ap + -344] + [ap + -8], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -366], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 550745618288514420865049528178905533793015440408502280175295526239113481224, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -4] = [[ap + -25] + 1];
[ap + -3] = [[ap + -25] + 2];
[ap + -2] = [[ap + -25] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25]) %}
[ap + 0] = [[ap + -25] + 5], ap++;
jmp rel 563 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 4], ap++;
[ap + 0] = [[ap + -27] + 6], ap++;
[ap + 0] = [ap + -28] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -36] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -38] + 1], ap++;
[ap + -5] = [[ap + -39] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 520 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -33] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -34] + 1];
[ap + 0] = [ap + -34] + 2, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
call rel 48212;
[ap + 0] = [ap + -90], ap++;
jmp rel 479 if [ap + -2] != 0;
[ap + 0] = 10000, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -37], ap++;
[ap + -152] = [ap + 1] + [ap + -34], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -45] + 15];
jmp rel 13;
[ap + -1] = [[ap + -44] + 15];
ap += 1;
[ap + 0] = [ap + -45] + 16, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -45] + 16, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -160] = [ap + 1] + [ap + -42], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 312;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 288 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -151] + 0];
[ap + -4] = [[ap + -151] + 1];
[ap + -3] = [[ap + -151] + 2];
[ap + -2] = [[ap + -151] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -151]) %}
[ap + 0] = [[ap + -151] + 5], ap++;
jmp rel 246 if [ap + -1] != 0;
[ap + 0] = [[ap + -152] + 4], ap++;
[ap + 0] = [[ap + -153] + 6], ap++;
[ap + 0] = [ap + -154] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -19] + 2];
jmp rel 205;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -18] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -183] = [[ap + -1] + 0];
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + -2] = [[ap + -3] + 1];
[ap + -1] = [[ap + -3] + 2];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1329909728320632088402217562277154056711815095720684343816173432540100887380, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 3, ap++;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -6] = [[ap + -16] + 1];
[ap + -17] = [[ap + -16] + 2];
[ap + -5] = [[ap + -16] + 3];
[ap + -4] = [[ap + -16] + 4];
[ap + -3] = [[ap + -16] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 7], ap++;
jmp rel 148 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[ap + -189] + 0];
[fp + -4] = [[ap + -189] + 1];
[ap + 0] = [[ap + -189] + 2], ap++;
[ap + -1] = [[ap + -190] + 3];
[fp + -3] = [[ap + -190] + 4];
[ap + 0] = [[ap + -190] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -30] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -212], ap++;
call rel 45968;
[ap + 0] = [ap + -309] + 6, ap++;
jmp rel 71 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 60 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -319], ap++;
[ap + 0] = [ap + -322], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -210], ap++;
[ap + 0] = [ap + -210], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 46618;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -45] + 0];
[ap + -2] = [[ap + -45] + 1];
[ap + -6] = [[ap + -45] + 2];
[ap + -5] = [[ap + -45] + 3];
[ap + -4] = [[ap + -45] + 4];
[ap + -3] = [[ap + -45] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -45]) %}
[ap + 0] = [[ap + -45] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 8], ap++;
[ap + 0] = [[ap + -53] + 9], ap++;
ret;
ap += 37;
[ap + 0] = [ap + -38] + 14830, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
jmp rel 8;
ap += 38;
[ap + 0] = [ap + -45] + 15120, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 156;
[ap + 0] = [[ap + -173] + 6], ap++;
call rel 65404;
[ap + 0] = [ap + -1] + 65403, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 123470, ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -184] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -186] + 8], ap++;
[ap + 0] = [[ap + -187] + 9], ap++;
ret;
ap += 155;
call rel 65382;
[ap + 0] = [ap + -1] + 65381, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 134080, ap++;
call rel 33203;
[ap + 0] = [ap + -187] + 3, ap++;
[ap + 0] = [ap + -176] + [ap + -8], ap++;
[ap + 0] = [ap + -178], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 170;
[ap + 0] = [[ap + -322] + 4], ap++;
call rel 65359;
[ap + 0] = [ap + -1] + 65358, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 136140, ap++;
[ap + 0] = [ap + -187], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -332] + 8, ap++;
[ap + 0] = [[ap + -333] + 6], ap++;
[ap + 0] = [[ap + -334] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 173;
call rel 65332;
[ap + 0] = [ap + -1] + 65331, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 146710, ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -184] + [ap + -2], ap++;
jmp rel 17;
ap += 176;
call rel 65316;
[ap + 0] = [ap + -1] + 65315, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 147080, ap++;
[ap + 0] = [ap + -195] + 2, ap++;
[ap + 0] = [ap + -188] + [ap + -2], ap++;
call rel 33788;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -338], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 230;
call rel 65290;
[ap + 0] = [ap + -1] + 65289, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 155310, ap++;
call rel 47932;
[ap + 0] = [ap + -248], ap++;
[ap + 0] = [ap + -245] + [ap + -8], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -338], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 308;
call rel 65267;
[ap + 0] = [ap + -1] + 65266, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 167750, ap++;
call rel 47918;
[ap + 0] = [ap + -360] + 3, ap++;
[ap + 0] = [ap + -330] + [ap + -8], ap++;
[ap + 0] = [ap + -332], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 324;
[ap + 0] = [[ap + -350] + 4], ap++;
call rel 65244;
[ap + 0] = [ap + -1] + 65243, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 169900, ap++;
[ap + 0] = [ap + -360], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -360] + 8, ap++;
[ap + 0] = [[ap + -361] + 6], ap++;
[ap + 0] = [[ap + -362] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 339;
call rel 65217;
[ap + 0] = [ap + -1] + 65216, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 182250, ap++;
[ap + 0] = [ap + -347] + [ap + -1], ap++;
[ap + 0] = [ap + -351], ap++;
[ap + 0] = [ap + -351], ap++;
jmp rel 17;
ap += 340;
call rel 65200;
[ap + 0] = [ap + -1] + 65199, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 182540, ap++;
[ap + 0] = [ap + -361] + [ap + -1], ap++;
[ap + 0] = [ap + -351], ap++;
[ap + 0] = [ap + -351], ap++;
[ap + 0] = [ap + -365], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -366], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 393 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 351 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 310;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 275 if [ap + -3] != 0;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 46314;
[ap + 0] = [fp + -7] + 6, ap++;
jmp rel 201 if [ap + -12] != 0;
[ap + 0] = [ap + -14], ap++;
jmp rel 181 if [ap + -12] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 7, ap++;
call rel 47278;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 150;
call rel 65054;
[ap + 0] = [ap + -1] + 65053, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 122830, ap++;
call rel 47344;
[ap + 0] = [ap + -185], ap++;
[ap + 0] = [ap + -165] + [ap + -8], ap++;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[ap + -9] + 0];
[fp + -5] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + -1] = [[ap + -10] + 3];
[fp + -4] = [[ap + -10] + 4];
[ap + 0] = [[ap + -10] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -29] + 0], ap++;
[ap + -4] = [[ap + -30] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -32] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -29] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -31] + 1], ap++;
[ap + -7] = [[ap + -32] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -32] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -32], ap++;
call rel 45450;
[ap + 0] = [ap + -129] + 6, ap++;
jmp rel 75 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 64 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -143], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 46096;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -45] + 0];
[ap + -2] = [[ap + -45] + 1];
[ap + -6] = [[ap + -45] + 2];
[ap + -5] = [[ap + -45] + 3];
[ap + -4] = [[ap + -45] + 4];
[ap + -3] = [[ap + -45] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -45]) %}
[ap + 0] = [[ap + -45] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 8], ap++;
[ap + 0] = [[ap + -53] + 9], ap++;
ret;
ap += 37;
[ap + 0] = [ap + -38] + 14830, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
jmp rel 8;
ap += 38;
[ap + 0] = [ap + -45] + 15120, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 159;
call rel 64883;
[ap + 0] = [ap + -1] + 64882, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 124140, ap++;
[ap + 0] = [ap + -167] + [ap + -1], ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = [ap + -171], ap++;
jmp rel 17;
ap += 160;
call rel 64866;
[ap + 0] = [ap + -1] + 64865, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 124430, ap++;
[ap + 0] = [ap + -181] + [ap + -1], ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = [ap + -185], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 344;
call rel 64842;
[ap + 0] = [ap + -1] + 64841, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 240230, ap++;
call rel 47502;
[ap + 0] = [ap + -359], ap++;
[ap + 0] = [ap + -359] + [ap + -8], ap++;
[ap + 0] = [ap + -369], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 346;
call rel 64821;
[ap + 0] = [ap + -1] + 64820, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 240310, ap++;
call rel 32642;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -367] + [ap + -8], ap++;
[ap + 0] = [ap + -369], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 361;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 64798;
[ap + 0] = [ap + -1] + 64797, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 242370, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 21;
ap += 373;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 64777;
[ap + 0] = [ap + -1] + 64776, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 254050, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 45949;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 44 if [ap + -12] != 0;
[ap + 0] = [ap + -14], ap++;
jmp rel 18 if [ap + -12] != 0;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 45831;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 23 if [ap + -12] != 0;
[ap + 0] = [ap + -14], ap++;
jmp rel 15 if [ap + -12] != 0;
ap += 3;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -15] + 190, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 47082;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 32231;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 46893;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 32042;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 550745618288514420865049528178905533793015440408502280175295526239113481224, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 46740;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 31889;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 46587;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 31736;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 31642;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 18430 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768193026, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 698;
[fp + -6] = [ap + 0] + 18430, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 656 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 635;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 588 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 567;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 520 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 499;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 452 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 431;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 384 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 356 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 322 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 294 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -13] + 0], ap++;
[ap + 3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -18] + 2];
jmp rel 222 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 188 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 160 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -16] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -18] + 1], ap++;
[ap + -5] = [[ap + -19] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 92 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 34544;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 63303;
[ap + 0] = [ap + -1] + 63302, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 102100 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 102100, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 41;
[ap + -3] = [ap + 0] + 102100, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -121], ap++;
[ap + 0] = [ap + -108], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -24], ap++;
call rel -4480;
[ap + 0] = [ap + -83] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 34488;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 34540;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2170, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3780, ap++;
jmp rel 11;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -8] + 3840, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 5450, ap++;
call rel 34519;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 5510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7120, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 7180, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 8790, ap++;
call rel 34498;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 9590, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 10900, ap++;
call rel 34488;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 11700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 13010, ap++;
call rel 34478;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 13810, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 15120, ap++;
call rel 34468;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 15920, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 17230, ap++;
call rel 34458;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 34322;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 7820 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203636, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 321;
[fp + -6] = [ap + 0] + 7820, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 278 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 250 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 216 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 188 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 165;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -11] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 121 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 0], ap++;
[ap + -4] = [[ap + -21] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -22] + 2];
jmp rel 100;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -19] + 0], ap++;
[ap + -3] = [[ap + -20] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -21] + 2];
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 34121;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 62879;
[ap + 0] = [ap + -1] + 62878, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 247470, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 41;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -27], ap++;
call rel -4637;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 34060;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 34147;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 34145;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 4280, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3340, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4950, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 5010, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6620, ap++;
call rel 34122;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33985;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = 17390 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768194066, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 356;
[fp + -6] = [ap + 0] + 17390, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 313 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 285 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 251 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 223 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 200;
[fp + 3] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[fp + 1] = [ap + -20];
[fp + 2] = [ap + -9];
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 156 if [ap + -2] != 0;
[fp + 0] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -17] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -19] + 1], ap++;
[ap + -5] = [[ap + -20] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 132 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[ap + -14] + 0];
[ap + 0] = [fp + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -15] + 1];
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 45232;
jmp rel 107 if [ap + -9] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 92 if [ap + -7] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 33770;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 62528;
[ap + 0] = [ap + -1] + 62527, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 278950, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 0];
jmp rel 43;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
call rel -3892;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33707;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -32] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33794;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -9] + 1770, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12] + 2670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -9] + 10780, ap++;
jmp rel 5;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -6] + 12280, ap++;
call rel 33772;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33770;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 13850, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 12910, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 14520, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 14580, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 16190, ap++;
call rel 33747;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33610;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 223;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 180 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 152 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 90 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 33469;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 62227;
[ap + 0] = [ap + -1] + 62226, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 306480, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 36;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3733;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33413;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 33507;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33370;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 203 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 175 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 141 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 113 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 90;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 33219;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 61977;
[ap + 0] = [ap + -1] + 61976, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 270580, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -3230;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33162;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33267;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 33244;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33107;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 236;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 193 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 165 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 131 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 103 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 32966;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 61724;
[ap + 0] = [ap + -1] + 61723, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 123540, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 49;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3056;
jmp rel 26 if [ap + -10] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 44601;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15] + 3300, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 32897;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 32991;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 32854;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 267;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 224 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 196 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 162 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 134 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 32713;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 61471;
[ap + 0] = [ap + -1] + 61470, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 120940, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 80;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3191;
jmp rel 57 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel [ap + -3];
jmp rel 34;
jmp rel 23;
jmp rel 12;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 28;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 19;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 10;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1000, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 32613;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 32707;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 32570;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 32429;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 61188;
[ap + 0] = [ap + -1] + 61187, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3384;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 32380;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 32475;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 32339;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 32199;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60958;
[ap + 0] = [ap + -1] + 60957, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3425;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 32150;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 32245;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 32109;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 32021;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60780;
[ap + 0] = [ap + -1] + 60779, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3413;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 31973;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 32079;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 31943;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 31856;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60615;
[ap + 0] = [ap + -1] + 60614, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3425;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 31808;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 31914;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 31778;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 31740;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60499;
[ap + 0] = [ap + -1] + 60498, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 28255;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 31637;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 31626;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -10] = [[fp + -9] + 1];
[ap + -3] = [[fp + -9] + 2];
[ap + -2] = [[fp + -9] + 3];
[fp + -8] = [[fp + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 6], ap++;
jmp rel 155 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 7];
[ap + -4] = [[fp + -9] + 8];
[ap + -3] = [[fp + -9] + 9];
[ap + -2] = [[fp + -9] + 10];
[fp + -7] = [[fp + -9] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 7) %}
[ap + 0] = [[fp + -9] + 13], ap++;
jmp rel 127 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 14];
[ap + -4] = [[fp + -9] + 15];
[ap + -3] = [[fp + -9] + 16];
[ap + -2] = [[fp + -9] + 17];
[fp + -6] = [[fp + -9] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 14) %}
[ap + 0] = [[fp + -9] + 20], ap++;
jmp rel 95 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 19], ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 21];
[ap + -4] = [[fp + -9] + 22];
[ap + -3] = [[fp + -9] + 23];
[ap + -2] = [[fp + -9] + 24];
[fp + -5] = [[fp + -9] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 21) %}
[ap + 0] = [[fp + -9] + 27], ap++;
jmp rel 66 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 403807365716931852510979360495474669369490483994409651540023026512438364891, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 28];
[ap + -4] = [[fp + -9] + 29];
[ap + -3] = [[fp + -9] + 30];
[ap + -2] = [[fp + -9] + 31];
[fp + -4] = [[fp + -9] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 28) %}
[ap + 0] = [[fp + -9] + 34], ap++;
jmp rel 38 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 33], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1554135586687059158691464313662966902437295769797289876725410156637463848378, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 35];
[ap + -4] = [[fp + -9] + 36];
[ap + -3] = [[fp + -9] + 37];
[ap + -2] = [[fp + -9] + 38];
[fp + -3] = [[fp + -9] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 35) %}
[ap + 0] = [[fp + -9] + 41], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -9] + 42, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -9] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -9] + 44, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 42], ap++;
[ap + 0] = [[fp + -9] + 43], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -9] + 33], ap++;
[ap + 0] = [ap + -1] + 11040, ap++;
[ap + 0] = [fp + -9] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 35], ap++;
[ap + 0] = [[fp + -9] + 36], ap++;
ret;
ap += 8;
[ap + 0] = [[fp + -9] + 26], ap++;
[ap + 0] = [ap + -1] + 21720, ap++;
[ap + 0] = [fp + -9] + 30, ap++;
[ap + 0] = [[fp + -9] + 28], ap++;
[ap + 0] = [[fp + -9] + 29], ap++;
jmp rel 11;
ap += 15;
[ap + 0] = [[fp + -9] + 19], ap++;
[ap + 0] = [ap + -1] + 33050, ap++;
[ap + 0] = [fp + -9] + 23, ap++;
[ap + 0] = [[fp + -9] + 21], ap++;
[ap + 0] = [[fp + -9] + 22], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 25;
[ap + 0] = [[fp + -9] + 12], ap++;
[ap + 0] = [ap + -1] + 44550, ap++;
[ap + 0] = [fp + -9] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 14], ap++;
[ap + 0] = [[fp + -9] + 15], ap++;
ret;
ap += 31;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [ap + -1] + 55690, ap++;
[ap + 0] = [fp + -9] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 7], ap++;
[ap + 0] = [[fp + -9] + 8], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 777 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -2] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 43119;
[ap + 0] = [fp + -7] + 3, ap++;
jmp rel 702 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 682 if [ap + -13] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 656 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -4] = [[ap + -20] + 1];
[ap + -3] = [[ap + -20] + 2];
[ap + -2] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 614 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -28] + 0], ap++;
[ap + 3] = [[ap + -29] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -33] + 2];
jmp rel 562 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -28] + 0];
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -32] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 520 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 473 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 435;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[fp + -4] = [ap + 1] + [ap + -23], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 393;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + -4] = [[ap + -17] + 1];
[ap + -3] = [[ap + -17] + 2];
[ap + -2] = [[ap + -17] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17]) %}
[ap + 0] = [[ap + -17] + 5], ap++;
jmp rel 348 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 4], ap++;
[ap + 0] = [[ap + -19] + 6], ap++;
[ap + 0] = [ap + -20] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -16] + 2];
jmp rel 307;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -15] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -3] = [[ap + -10] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 3], ap++;
jmp rel 266 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 2], ap++;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -19] + 5];
[ap + -5] = [[ap + -19] + 6];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 5) %}
[ap + 0] = [[ap + -19] + 8], ap++;
jmp rel 229 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 7], ap++;
[ap + 0] = [[ap + -21] + 9], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[ap + -66] + 0];
[ap + -248] = [[ap + -66] + 1];
[ap + 0] = [[ap + -66] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -21] + 0], ap++;
[ap + -4] = [[ap + -22] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -24] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -21] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -23] + 1], ap++;
[ap + -7] = [[ap + -24] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -34] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -261], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [[ap + -21] + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 44049;
[ap + 0] = [ap + -197] + 3, ap++;
jmp rel 142 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 124 if [ap + -5] != 0;
[ap + 0] = 892831332077295033575207595541551688973278767908702850266232499306953315355, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -5] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -18] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -7] = [[ap + -18] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -5] = [[ap + -21] + 1];
[ap + -4] = [[ap + -21] + 2];
[ap + -6] = [[ap + -21] + 3];
[ap + -395] = [[ap + -21] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 6], ap++;
jmp rel 59 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -402], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 44511;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -45] + 7];
[ap + -2] = [[ap + -45] + 8];
[ap + -6] = [[ap + -45] + 9];
[ap + -5] = [[ap + -45] + 10];
[ap + -4] = [[ap + -45] + 11];
[ap + -3] = [[ap + -45] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -45] + 7) %}
[ap + 0] = [[ap + -45] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -46] + 13], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -50] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -46] + 13], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -50] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 15], ap++;
[ap + 0] = [[ap + -53] + 16], ap++;
ret;
ap += 24;
[ap + 0] = [[ap + -46] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 13660, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -50] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
[ap + 0] = [[ap + -53] + 8], ap++;
ret;
ap += 31;
call rel 59751;
[ap + 0] = [ap + -1] + 59750, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25500, ap++;
[ap + 0] = [ap + -38] + [ap + -1], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
jmp rel 15;
ap += 32;
call rel 59736;
[ap + 0] = [ap + -1] + 59735, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25790, ap++;
[ap + 0] = [ap + -45] + [ap + -1], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 169;
[ap + 0] = [[ap + -189] + 7], ap++;
call rel 59713;
[ap + 0] = [ap + -1] + 59712, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 146120, ap++;
[ap + 0] = [ap + -189], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -200] + 11, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -202] + 9], ap++;
[ap + 0] = [[ap + -203] + 10], ap++;
ret;
ap += 178;
[ap + 0] = [[ap + -189] + 2], ap++;
call rel 59690;
[ap + 0] = [ap + -1] + 59689, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 157230, ap++;
[ap + 0] = [ap + -189], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -200] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -202] + 4], ap++;
[ap + 0] = [[ap + -203] + 5], ap++;
ret;
ap += 171;
call rel 59668;
[ap + 0] = [ap + -1] + 59667, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 166600, ap++;
call rel 27489;
[ap + 0] = [ap + -200] + 3, ap++;
[ap + 0] = [ap + -192] + [ap + -8], ap++;
[ap + 0] = [ap + -194], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 186;
[ap + 0] = [[ap + -204] + 4], ap++;
call rel 59645;
[ap + 0] = [ap + -1] + 59644, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 168660, ap++;
[ap + 0] = [ap + -200], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -214] + 8, ap++;
[ap + 0] = [[ap + -215] + 6], ap++;
[ap + 0] = [[ap + -216] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 189;
call rel 59618;
[ap + 0] = [ap + -1] + 59617, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 179130, ap++;
[ap + 0] = [ap + -203] + 1, ap++;
[ap + 0] = [ap + -201] + [ap + -2], ap++;
jmp rel 17;
ap += 195;
call rel 59601;
[ap + 0] = [ap + -1] + 59600, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 180140, ap++;
[ap + 0] = [ap + -214] + 2, ap++;
[ap + 0] = [ap + -207] + [ap + -2], ap++;
call rel 44387;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 186;
call rel 59575;
[ap + 0] = [ap + -1] + 59574, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 178860, ap++;
call rel 27540;
[ap + 0] = [ap + -212] + 3, ap++;
[ap + 0] = [ap + -207] + [ap + -8], ap++;
[ap + 0] = [ap + -209], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 206;
[ap + 0] = [[ap + -216] + 4], ap++;
call rel 59552;
[ap + 0] = [ap + -1] + 59551, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 181570, ap++;
[ap + 0] = [ap + -217], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -226] + 8, ap++;
[ap + 0] = [[ap + -227] + 6], ap++;
[ap + 0] = [[ap + -228] + 7], ap++;
jmp rel 48;
ap += 198;
call rel 59532;
[ap + 0] = [ap + -1] + 59531, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 190710, ap++;
call rel 27497;
[ap + 0] = [ap + -244] + 3, ap++;
[ap + 0] = [ap + -219] + [ap + -8], ap++;
[ap + 0] = [ap + -221], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 218;
[ap + 0] = [[ap + -239] + 4], ap++;
call rel 59504;
[ap + 0] = [ap + -1] + 59503, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 193420, ap++;
[ap + 0] = [ap + -249], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -249] + 8, ap++;
[ap + 0] = [[ap + -250] + 6], ap++;
[ap + 0] = [[ap + -251] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 223;
call rel 59477;
[ap + 0] = [ap + -1] + 59476, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 204270, ap++;
call rel 44275;
[ap + 0] = [ap + -254], ap++;
[ap + 0] = [ap + -238] + [ap + -8], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -255], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 227;
call rel 59454;
[ap + 0] = [ap + -1] + 59453, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 204730, ap++;
[ap + 0] = [ap + -235] + [ap + -1], ap++;
[ap + 0] = [ap + -239], ap++;
[ap + 0] = [ap + -239], ap++;
jmp rel 17;
ap += 228;
call rel 59437;
[ap + 0] = [ap + -1] + 59436, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205020, ap++;
[ap + 0] = [ap + -250] + [ap + -1], ap++;
[ap + 0] = [ap + -239], ap++;
[ap + 0] = [ap + -239], ap++;
[ap + 0] = [ap + -254], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -255], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 415;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 59412;
[ap + 0] = [ap + -1] + 59411, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 331430, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 670 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 628 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 587;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 552 if [ap + -3] != 0;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 42264;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 481 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 461 if [ap + -13] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 435 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -2] = [[ap + -18] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 3], ap++;
jmp rel 404 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 2], ap++;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[ap + -10] + 0];
[fp + -3] = [[ap + -10] + 1];
[ap + 0] = [[ap + -10] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -30] + 0], ap++;
[ap + -4] = [[ap + -31] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -33] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -30] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -32] + 1], ap++;
[ap + -7] = [[ap + -33] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -33] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -33] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [[ap + -21] + 1], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
call rel 43379;
[ap + 0] = [ap + -141] + 3, ap++;
jmp rel 320 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 302 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[ap + -3] = [[ap + -11] + 2];
[ap + -2] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 262 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 221 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -19] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = 873477173449744760621369809601123387760648482369539306629498776106913580960, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -6] = [[ap + -14] + 1];
[ap + 0] = [[ap + -14] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -26] + 2], ap++;
[ap + -4] = [[ap + -27] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -29] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -26] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -28] + 3], ap++;
[ap + -7] = [[ap + -29] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = [ap + -32] + 5, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -5] = [[ap + -18] + 1];
[ap + -4] = [[ap + -18] + 2];
[ap + -6] = [[ap + -18] + 3];
[fp + -3] = [[ap + -18] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 6], ap++;
jmp rel 150 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -21] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -24] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -25] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 121;
[ap + 1] = [ap + -25] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -5] = [[ap + -10] + 1];
[ap + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
[ap + -6] = [[ap + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 6], ap++;
jmp rel 86 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -14] + 7];
[ap + -2] = [[ap + -14] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14] + 7) %}
[ap + 0] = [[ap + -14] + 10], ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 9], ap++;
[ap + 0] = [[ap + -16] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -9] + 1], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 43752;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -40] + 12];
[ap + -2] = [[ap + -40] + 13];
[ap + -6] = [[ap + -40] + 14];
[ap + -5] = [[ap + -40] + 15];
[ap + -4] = [[ap + -40] + 16];
[ap + -3] = [[ap + -40] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -40] + 12) %}
[ap + 0] = [[ap + -40] + 19], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -41] + 18], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -45] + 20, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -41] + 18], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -45] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -47] + 20], ap++;
[ap + 0] = [[ap + -48] + 21], ap++;
ret;
ap += 26;
[ap + 0] = [[ap + -41] + 9], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 13840, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -45] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -47] + 11], ap++;
[ap + 0] = [[ap + -48] + 12], ap++;
ret;
ap += 30;
[ap + 0] = [[ap + -41] + 5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 24500, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -45] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -47] + 7], ap++;
[ap + 0] = [[ap + -48] + 8], ap++;
ret;
ap += 31;
call rel 27526;
[ap + 0] = [ap + -47] + 1, ap++;
[ap + 0] = [ap + -42] + 34990, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 43;
[ap + 0] = [[ap + -62] + 5], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -2] + 36440, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -66] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -68] + 7], ap++;
[ap + 0] = [[ap + -69] + 8], ap++;
ret;
ap += 37;
call rel 58949;
[ap + 0] = [ap + -1] + 58948, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 46840, ap++;
call rel 27498;
[ap + 0] = [ap + -74] + 3, ap++;
[ap + 0] = [ap + -58] + [ap + -8], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 53;
[ap + 0] = [[ap + -65] + 4], ap++;
call rel 58928;
[ap + 0] = [ap + -1] + 58927, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 48990, ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -74] + 8, ap++;
[ap + 0] = [[ap + -75] + 6], ap++;
[ap + 0] = [[ap + -76] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 61;
call rel 58903;
[ap + 0] = [ap + -1] + 58902, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 60110, ap++;
[ap + 0] = [ap + -68] + [ap + -1], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -72], ap++;
jmp rel 15;
ap += 62;
call rel 58888;
[ap + 0] = [ap + -1] + 58887, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 60400, ap++;
[ap + 0] = [ap + -75] + [ap + -1], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 199;
[ap + 0] = [[ap + -218] + 2], ap++;
call rel 58865;
[ap + 0] = [ap + -1] + 58864, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 180730, ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [ap + -229] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -231] + 4], ap++;
[ap + 0] = [[ap + -232] + 5], ap++;
ret;
ap += 197;
call rel 58843;
[ap + 0] = [ap + -1] + 58842, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 190750, ap++;
call rel 43641;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -212] + [ap + -8], ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [ap + -229], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 201;
call rel 58820;
[ap + 0] = [ap + -1] + 58819, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 191210, ap++;
[ap + 0] = [ap + -209] + [ap + -1], ap++;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [ap + -213], ap++;
jmp rel 17;
ap += 202;
call rel 58803;
[ap + 0] = [ap + -1] + 58802, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 191500, ap++;
[ap + 0] = [ap + -224] + [ap + -1], ap++;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [ap + -229], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 376;
call rel 58779;
[ap + 0] = [ap + -1] + 58778, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 316540, ap++;
call rel 43586;
[ap + 0] = [ap + -391], ap++;
[ap + 0] = [ap + -391] + [ap + -8], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 378;
call rel 58758;
[ap + 0] = [ap + -1] + 58757, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 316620, ap++;
call rel 26579;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -399] + [ap + -8], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 393;
[ap + 0] = [[fp + -4] + 9], ap++;
call rel 58735;
[ap + 0] = [ap + -1] + 58734, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 318680, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 21;
ap += 405;
[ap + 0] = [[fp + -4] + 2], ap++;
call rel 58714;
[ap + 0] = [ap + -1] + 58713, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 330360, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 398 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 356 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 315;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 280 if [ap + -3] != 0;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 41561;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 211 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 193 if [ap + -13] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 23 if [ap + -9] != 0;
ap += 152;
call rel 58573;
[ap + 0] = [ap + -1] + 58572, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 143480, ap++;
call rel 43391;
[ap + 0] = [ap + -182], ap++;
[ap + 0] = [ap + -166] + [ap + -8], ap++;
[ap + 0] = [ap + -169], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[ap + -4] + 0];
[fp + -3] = [[ap + -4] + 1];
[ap + 0] = [[ap + -4] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -24] + 0], ap++;
[ap + -4] = [[ap + -25] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -27] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -24] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -26] + 1], ap++;
[ap + -7] = [[ap + -27] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -27] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
call rel 42667;
[ap + 0] = [ap + -135] + 3, ap++;
jmp rel 96 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 85 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -2] = [[ap + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 3], ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -9] + 1], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 43168;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -35] + 5];
[ap + -2] = [[ap + -35] + 6];
[ap + -6] = [[ap + -35] + 7];
[ap + -5] = [[ap + -35] + 8];
[ap + -4] = [[ap + -35] + 9];
[ap + -3] = [[ap + -35] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -35] + 5) %}
[ap + 0] = [[ap + -35] + 12], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -36] + 11], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -40] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -36] + 11], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -40] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 13], ap++;
[ap + 0] = [[ap + -43] + 14], ap++;
ret;
ap += 26;
[ap + 0] = [[ap + -36] + 2], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -2] + 13840, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -40] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 4], ap++;
[ap + 0] = [[ap + -43] + 5], ap++;
ret;
ap += 27;
[ap + 0] = [ap + -28] + 24130, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
jmp rel 8;
ap += 28;
[ap + 0] = [ap + -35] + 24420, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 156;
call rel 58385;
[ap + 0] = [ap + -1] + 58384, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 143940, ap++;
[ap + 0] = [ap + -163] + [ap + -1], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -167], ap++;
jmp rel 15;
ap += 157;
call rel 58370;
[ap + 0] = [ap + -1] + 58369, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 144230, ap++;
[ap + 0] = [ap + -178] + [ap + -1], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -182], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -169], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 330;
call rel 58348;
[ap + 0] = [ap + -1] + 58347, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 269180, ap++;
call rel 43155;
[ap + 0] = [ap + -345], ap++;
[ap + 0] = [ap + -345] + [ap + -8], ap++;
[ap + 0] = [ap + -355], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 332;
call rel 58327;
[ap + 0] = [ap + -1] + 58326, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 269260, ap++;
call rel 26148;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -353] + [ap + -8], ap++;
[ap + 0] = [ap + -355], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 347;
[ap + 0] = [[fp + -4] + 9], ap++;
call rel 58304;
[ap + 0] = [ap + -1] + 58303, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 271320, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 21;
ap += 359;
[ap + 0] = [[fp + -4] + 2], ap++;
call rel 58283;
[ap + 0] = [ap + -1] + 58282, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 283000, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 919 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -2] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 41180;
[ap + 0] = [fp + -7] + 3, ap++;
jmp rel 844 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 824 if [ap + -13] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 25 if [ap + -9] != 0;
ap += 483;
call rel 58192;
[ap + 0] = [ap + -1] + 58191, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 363130, ap++;
call rel 43017;
[ap + 0] = [ap + -514], ap++;
[ap + 0] = [ap + -498] + [ap + -8], ap++;
[ap + 0] = [ap + -501], ap++;
[ap + 0] = [ap + -515], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 380399219957990785808227865262557561983086966506409870698903802235701193624, ap++;
[ap + -1] = [[ap + -4] + 0];
[fp + -5] = [[ap + -4] + 1];
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + -1] = [[ap + -5] + 3];
[fp + -4] = [[ap + -5] + 4];
[ap + 0] = [[ap + -5] + 5], ap++;
[ap + -1] = [[ap + -6] + 6];
[ap + -188] = [[ap + -6] + 7];
[ap + 0] = [[ap + -6] + 8], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -26] + 0], ap++;
[ap + -4] = [[ap + -27] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -29] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -26] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -28] + 1], ap++;
[ap + -7] = [[ap + -29] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 42968;
[ap + 0] = [ap + -98] + 9, ap++;
jmp rel 721 if [ap + -8] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 701 if [ap + -8] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 675 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -2] = [[ap + -13] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 3], ap++;
jmp rel 644 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 2], ap++;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 380399219957990785808227865262557561983086966506409870698903802235701193624, ap++;
[ap + -1] = [[ap + -10] + 0];
[fp + -5] = [[ap + -10] + 1];
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + -1] = [[ap + -11] + 3];
[fp + -4] = [[ap + -11] + 4];
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + -1] = [[ap + -12] + 6];
[ap + -292] = [[ap + -12] + 7];
[ap + 0] = [[ap + -12] + 8], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -27] + 0], ap++;
[ap + -4] = [[ap + -28] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -30] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -27] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -29] + 1], ap++;
[ap + -7] = [[ap + -30] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -30] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -307], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -21] + 1], ap++;
call rel 43308;
[ap + 0] = [ap + -70] + 9, ap++;
jmp rel 558 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 538 if [ap + -5] != 0;
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -5] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[fp + -4] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 6, ap++;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -22] + 0];
[ap + -5] = [[ap + -22] + 1];
[ap + -4] = [[ap + -22] + 2];
[ap + -6] = [[ap + -22] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22]) %}
[ap + 0] = [[ap + -22] + 5], ap++;
jmp rel 457 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 4], ap++;
[ap + 0] = [[ap + -24] + 6], ap++;
[ap + 0] = [ap + -25] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 414 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -7] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -8] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 373;
[ap + 1] = [ap + -8] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[ap + -16] + 0];
[fp + -5] = [[ap + -16] + 1];
[ap + 0] = [[ap + -16] + 2], ap++;
[ap + -1] = [[ap + -17] + 3];
[fp + -4] = [[ap + -17] + 4];
[ap + 0] = [[ap + -17] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -21] + 3], ap++;
[ap + -4] = [[ap + -22] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -24] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -21] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -23] + 4], ap++;
[ap + -7] = [[ap + -24] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -27] + 6, ap++;
[ap + 0] = [ap + -27] + 6, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
[ap + -16] = [[ap + -24] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 6], ap++;
jmp rel 292 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [ap + -221] + [ap + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 13;
[ap + -1] = [[ap + -10] + 0];
ap += 5;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -10] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -230], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 1] = [ap + -225] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 1];
jmp rel 228;
[ap + -1] = [[ap + -15] + 1];
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 204 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -2] = [[ap + -16] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 3], ap++;
jmp rel 173 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 2], ap++;
[ap + 0] = [[ap + -18] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[ap + -27] + 0];
[ap + -418] = [[ap + -27] + 1];
[ap + 0] = [[ap + -27] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -31] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [[ap + -21] + 1], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -259], ap++;
call rel 41946;
[ap + 0] = [ap + -158] + 3, ap++;
jmp rel 88 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 68 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -558], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 42460;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -29] + 0];
[ap + -2] = [[ap + -29] + 1];
[ap + -6] = [[ap + -29] + 2];
[ap + -5] = [[ap + -29] + 3];
[ap + -4] = [[ap + -29] + 4];
[ap + -3] = [[ap + -29] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29]) %}
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -34] + 8, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 43178;
ret;
ap += 99;
[ap + 0] = [[ap + -129] + 6], ap++;
call rel 57726;
[ap + 0] = [ap + -1] + 57725, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 54480, ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -140] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -142] + 8], ap++;
[ap + 0] = [[ap + -143] + 9], ap++;
ret;
ap += 120;
call rel 57704;
[ap + 0] = [ap + -1] + 57703, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 67870, ap++;
[ap + 0] = [ap + -128] + [ap + -1], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -132], ap++;
jmp rel 17;
ap += 121;
call rel 57687;
[ap + 0] = [ap + -1] + 57686, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 68160, ap++;
[ap + 0] = [ap + -135] + [ap + -1], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 259;
[ap + 0] = [[ap + -276] + 2], ap++;
call rel 57662;
[ap + 0] = [ap + -1] + 57661, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 188580, ap++;
[ap + 0] = [ap + -274], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -287] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -289] + 4], ap++;
[ap + 0] = [[ap + -290] + 5], ap++;
ret;
ap += 255;
call rel 57640;
[ap + 0] = [ap + -1] + 57639, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 198320, ap++;
[ap + 0] = [ap + -266], ap++;
[ap + 0] = [ap + -266] + [ap + -2], ap++;
jmp rel 17;
ap += 258;
call rel 57624;
[ap + 0] = [ap + -1] + 57623, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 198690, ap++;
[ap + 0] = [ap + -281] + 2, ap++;
[ap + 0] = [ap + -270] + [ap + -2], ap++;
call rel 25577;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -287], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 278;
[ap + 0] = [[ap + -303] + 5], ap++;
call rel 57597;
[ap + 0] = [ap + -1] + 57596, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 201130, ap++;
[ap + 0] = [ap + -289], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -314] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -316] + 7], ap++;
[ap + 0] = [[ap + -317] + 8], ap++;
ret;
ap += 289;
call rel 57575;
[ap + 0] = [ap + -1] + 57574, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 213430, ap++;
call rel 26113;
[ap + 0] = [ap + -316] + 3, ap++;
[ap + 0] = [ap + -307] + [ap + -8], ap++;
[ap + 0] = [ap + -319], ap++;
[ap + 0] = [ap + -314], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 284;
call rel 57551;
[ap + 0] = [ap + -1] + 57550, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 212980, ap++;
call rel 26098;
[ap + 0] = [ap + -311] + 3, ap++;
[ap + 0] = [ap + -306] + [ap + -8], ap++;
[ap + 0] = [ap + -308], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 300;
[ap + 0] = [[ap + -323] + 4], ap++;
call rel 57528;
[ap + 0] = [ap + -1] + 57527, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 215130, ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -333] + 8, ap++;
[ap + 0] = [[ap + -334] + 6], ap++;
[ap + 0] = [[ap + -335] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -319], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 319;
call rel 57501;
[ap + 0] = [ap + -1] + 57500, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 228150, ap++;
[ap + 0] = [ap + -327] + [ap + -1], ap++;
[ap + 0] = [ap + -331], ap++;
[ap + 0] = [ap + -331], ap++;
jmp rel 17;
ap += 320;
call rel 57484;
[ap + 0] = [ap + -1] + 57483, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 228440, ap++;
[ap + 0] = [ap + -334] + [ap + -1], ap++;
[ap + 0] = [ap + -331], ap++;
[ap + 0] = [ap + -331], ap++;
[ap + 0] = [ap + -338], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -333], ap++;
[ap + 0] = [ap + -339], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 387;
[ap + 0] = [[ap + -401] + 2], ap++;
call rel 57459;
[ap + 0] = [ap + -1] + 57458, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 288850, ap++;
[ap + 0] = [ap + -411], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -403], ap++;
[ap + 0] = [ap + -412] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -414] + 4], ap++;
[ap + 0] = [[ap + -415] + 5], ap++;
ret;
ap += 385;
call rel 57437;
[ap + 0] = [ap + -1] + 57436, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 298870, ap++;
call rel 43087;
[ap + 0] = [ap + -411], ap++;
[ap + 0] = [ap + -400] + [ap + -8], ap++;
[ap + 0] = [ap + -403], ap++;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 389;
call rel 57414;
[ap + 0] = [ap + -1] + 57413, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 299330, ap++;
[ap + 0] = [ap + -397] + [ap + -1], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -401], ap++;
jmp rel 17;
ap += 390;
call rel 57397;
[ap + 0] = [ap + -1] + 57396, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 299620, ap++;
[ap + 0] = [ap + -407] + [ap + -1], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -411], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -403], ap++;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 487;
call rel 57373;
[ap + 0] = [ap + -1] + 57372, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 363590, ap++;
[ap + 0] = [ap + -495] + [ap + -1], ap++;
[ap + 0] = [ap + -499], ap++;
[ap + 0] = [ap + -499], ap++;
jmp rel 17;
ap += 488;
call rel 57356;
[ap + 0] = [ap + -1] + 57355, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 363880, ap++;
[ap + 0] = [ap + -510] + [ap + -1], ap++;
[ap + 0] = [ap + -499], ap++;
[ap + 0] = [ap + -499], ap++;
[ap + 0] = [ap + -514], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -501], ap++;
[ap + 0] = [ap + -515], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 675;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 57331;
[ap + 0] = [ap + -1] + 57330, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 490290, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -11] = [[fp + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 3], ap++;
jmp rel 1008 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -9] + 5];
[ap + -9] = [[fp + -9] + 6];
[ap + -8] = [[fp + -9] + 7];
[ap + -7] = [[fp + -9] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 5) %}
[ap + 0] = [[fp + -9] + 10], ap++;
jmp rel 966 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 9], ap++;
[ap + 0] = [[fp + -9] + 11], ap++;
[ap + 0] = [fp + -9] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -12] + 0], ap++;
[ap + -4] = [[fp + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -12] + 2];
jmp rel 925;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -12] + 0], ap++;
[ap + -3] = [[fp + -12] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -12] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 890 if [ap + -3] != 0;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -8] = [[fp + -10] + 1];
[ap + 0] = [[fp + -10] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 40183;
[ap + 0] = [fp + -10] + 3, ap++;
jmp rel 821 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 803 if [ap + -13] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 23 if [ap + -9] != 0;
ap += 356;
call rel 57195;
[ap + 0] = [ap + -1] + 57194, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 194430, ap++;
call rel 42013;
[ap + 0] = [ap + -386], ap++;
[ap + 0] = [ap + -370] + [ap + -8], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -387], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1554135586687059158691464313662966902437295769797289876725410156637463848378, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -4] = [[ap + -20] + 1];
[ap + -3] = [[ap + -20] + 2];
[ap + -2] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 739 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -31] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -33] + 1], ap++;
[ap + -5] = [[ap + -34] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 698 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -28] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -29] + 1];
[ap + 0] = [ap + -29] + 2, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
call rel 39566;
[ap + 0] = [ap + -90], ap++;
jmp rel 659 if [ap + -2] != 0;
[ap + 0] = 10000, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -37], ap++;
[ap + -34] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -45] + 15];
jmp rel 43;
[ap + -1] = [[ap + -44] + 15];
[ap + 0] = [ap + -44] + 16, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -38] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 4;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 530, ap++;
jmp rel 18;
[ap + 0] = [ap + -2], ap++;
[ap + -41] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 1;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5] + 90, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 15;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 6;
[ap + 0] = [ap + -51] + 16, ap++;
[ap + 0] = [ap + -11] + 910, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + -159] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 1;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -167] = [ap + 1] + [ap + -9], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 437;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 415 if [ap + -12] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -173] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -174] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 382;
[ap + 1] = [ap + -174] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -9] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -170] + 0];
[ap + -5] = [[ap + -170] + 1];
[ap + -4] = [[ap + -170] + 2];
[ap + -3] = [[ap + -170] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -170]) %}
[ap + 0] = [[ap + -170] + 5], ap++;
jmp rel 336 if [ap + -1] != 0;
[ap + 0] = [[ap + -171] + 4], ap++;
[ap + 0] = [[ap + -172] + 6], ap++;
[ap + 0] = [ap + -173] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 286 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 246 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 201 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + -32] = [ap + 1] + [ap + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 42;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [ap + -13] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -36] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 4;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 530, ap++;
jmp rel 18;
[ap + 0] = [ap + -2], ap++;
[ap + -39] = [ap + 1] + [ap + -25], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 12;
[ap + -1] = [[ap + -6] + 0];
ap += 1;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5] + 90, ap++;
[ap + 0] = [ap + -218], ap++;
jmp rel 15;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 6;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -13] + 910, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[ap + -214] + 0];
[fp + -8] = [[ap + -214] + 1];
[ap + 0] = [[ap + -214] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -62], ap++;
call rel 40867;
[ap + 0] = [ap + -345] + 3, ap++;
jmp rel 67 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 56 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -203], ap++;
[ap + 0] = [ap + -203], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 41383;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -29] + 0];
[ap + -2] = [[ap + -29] + 1];
[ap + -6] = [[ap + -29] + 2];
[ap + -5] = [[ap + -29] + 3];
[ap + -4] = [[ap + -29] + 4];
[ap + -3] = [[ap + -29] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29]) %}
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -34] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -34] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -36] + 8], ap++;
[ap + 0] = [[ap + -37] + 9], ap++;
ret;
ap += 21;
[ap + 0] = [ap + -22] + 13290, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
jmp rel 8;
ap += 22;
[ap + 0] = [ap + -29] + 13580, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 146;
call rel 56614;
[ap + 0] = [ap + -1] + 56613, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 132640, ap++;
call rel 24581;
[ap + 0] = [ap + -171] + 3, ap++;
[ap + 0] = [ap + -166] + [ap + -8], ap++;
[ap + 0] = [ap + -168], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 166;
[ap + 0] = [[ap + -176] + 4], ap++;
call rel 56593;
[ap + 0] = [ap + -1] + 56592, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 135350, ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -185] + 8, ap++;
[ap + 0] = [[ap + -186] + 6], ap++;
[ap + 0] = [[ap + -187] + 7], ap++;
jmp rel 44;
ap += 158;
call rel 56575;
[ap + 0] = [ap + -1] + 56574, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 144490, ap++;
call rel 24542;
[ap + 0] = [ap + -183] + 3, ap++;
[ap + 0] = [ap + -178] + [ap + -8], ap++;
[ap + 0] = [ap + -180], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 178;
[ap + 0] = [[ap + -349] + 4], ap++;
call rel 56549;
[ap + 0] = [ap + -1] + 56548, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 147200, ap++;
[ap + 0] = [ap + -188], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -358] + 8, ap++;
[ap + 0] = [[ap + -359] + 6], ap++;
[ap + 0] = [[ap + -360] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 184;
call rel 56524;
[ap + 0] = [ap + -1] + 56523, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 158040, ap++;
call rel 25064;
[ap + 0] = [ap + -205] + 1, ap++;
[ap + 0] = [ap + -201] + [ap + -8], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -364], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 187;
call rel 56502;
[ap + 0] = [ap + -1] + 56501, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 158480, ap++;
[ap + 0] = [ap + -197], ap++;
[ap + 0] = [ap + -197] + [ap + -2], ap++;
jmp rel 15;
ap += 190;
call rel 56488;
[ap + 0] = [ap + -1] + 56487, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 158850, ap++;
[ap + 0] = [ap + -208] + 2, ap++;
[ap + 0] = [ap + -201] + [ap + -2], ap++;
call rel 24962;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -364], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 257;
call rel 56464;
[ap + 0] = [ap + -1] + 56463, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 168990, ap++;
call rel 39108;
[ap + 0] = [ap + -274], ap++;
[ap + 0] = [ap + -271] + [ap + -8], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -364], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 335;
call rel 56443;
[ap + 0] = [ap + -1] + 56442, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 181430, ap++;
call rel 39096;
[ap + 0] = [ap + -381] + 3, ap++;
[ap + 0] = [ap + -356] + [ap + -8], ap++;
[ap + 0] = [ap + -358], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 351;
[ap + 0] = [[ap + -372] + 4], ap++;
call rel 56422;
[ap + 0] = [ap + -1] + 56421, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 183580, ap++;
[ap + 0] = [ap + -381], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -381] + 8, ap++;
[ap + 0] = [[ap + -382] + 6], ap++;
[ap + 0] = [[ap + -383] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 360;
call rel 56397;
[ap + 0] = [ap + -1] + 56396, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 194890, ap++;
[ap + 0] = [ap + -367] + [ap + -1], ap++;
[ap + 0] = [ap + -371], ap++;
[ap + 0] = [ap + -371], ap++;
jmp rel 15;
ap += 361;
call rel 56382;
[ap + 0] = [ap + -1] + 56381, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 195180, ap++;
[ap + 0] = [ap + -382] + [ap + -1], ap++;
[ap + 0] = [ap + -371], ap++;
[ap + 0] = [ap + -371], ap++;
[ap + 0] = [ap + -386], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -387], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 534;
call rel 56360;
[ap + 0] = [ap + -1] + 56359, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 320130, ap++;
call rel 41167;
[ap + 0] = [ap + -549], ap++;
[ap + 0] = [ap + -549] + [ap + -8], ap++;
[ap + 0] = [ap + -559], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 536;
call rel 56339;
[ap + 0] = [ap + -1] + 56338, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 320210, ap++;
call rel 24160;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [ap + -557] + [ap + -8], ap++;
[ap + 0] = [ap + -559], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 551;
[ap + 0] = [[fp + -9] + 9], ap++;
call rel 56316;
[ap + 0] = [ap + -1] + 56315, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 322270, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9] + 13, ap++;
[ap + 0] = [[fp + -9] + 11], ap++;
[ap + 0] = [[fp + -9] + 12], ap++;
jmp rel 21;
ap += 563;
[ap + 0] = [[fp + -9] + 2], ap++;
call rel 56295;
[ap + 0] = [ap + -1] + 56294, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 333950, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 39203;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 47 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 19 if [ap + -13] != 0;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = 892831332077295033575207595541551688973278767908702850266232499306953315355, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
ap += 7;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 23891;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 24538;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 198 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -5] = [[fp + -7] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 157 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [ap + -3], ap++;
[fp + -3] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 2];
jmp rel 25;
[ap + -1] = [[fp + -7] + 2];
ap += 20;
call rel 55905;
[ap + 0] = [ap + -1] + 55904, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13520, ap++;
call rel 41566;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -36] + [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 873477173449744760621369809601123387760648482369539306629498776106913580960, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 3], ap++;
[ap + -4] = [[fp + -7] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 4], ap++;
[ap + -7] = [[fp + -7] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -22] + 0];
[ap + -5] = [[ap + -22] + 1];
[ap + -4] = [[ap + -22] + 2];
[ap + -6] = [[ap + -22] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22]) %}
[ap + 0] = [[ap + -22] + 5], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 4], ap++;
[ap + 0] = [[ap + -24] + 6], ap++;
[ap + 0] = [ap + -25] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
ap += 7;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 23625;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 15;
[ap + 0] = [[ap + -38] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -42] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -44] + 6], ap++;
[ap + 0] = [[ap + -45] + 7], ap++;
ret;
ap += 13;
call rel 55766;
[ap + 0] = [ap + -1] + 55765, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12790, ap++;
call rel 24315;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -34] + [ap + -8], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 29;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 55745;
[ap + 0] = [ap + -1] + 55744, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 14940, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -5] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 11;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -22], ap++;
ret;
call rel 24186;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 380399219957990785808227865262557561983086966506409870698903802235701193624, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 41272;
jmp rel 26 if [ap + -6] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
ret;
ap += 4;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 460, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -5] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 63 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 41248;
jmp rel 37 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + -55] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 12;
[ap + -1] = [[ap + -9] + 0];
ap += 1;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
jmp rel 8;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 7;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + 810, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 40;
call rel 23975;
[ap + 0] = [ap + -60] + 3, ap++;
[ap + 0] = [ap + -55] + 25560, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 56;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -2] + 27710, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 40069;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 23071;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 154 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 121 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 89;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 65 if [ap + -3] != 0;
[ap + 0] = 10000, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 42;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 403807365716931852510979360495474669369490483994409651540023026512438364891, ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -5] = [[ap + -19] + 1];
[ap + -4] = [[ap + -19] + 2];
[ap + -3] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 41053;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39892;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10570, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 22894;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10550, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12610, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 24290, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 154 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 121 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 89;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 65 if [ap + -3] != 0;
[ap + 0] = 10000, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 42;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1554135586687059158691464313662966902437295769797289876725410156637463848378, ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -5] = [[ap + -19] + 1];
[ap + -4] = [[ap + -19] + 2];
[ap + -3] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 40885;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 39715;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10570, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 22717;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10550, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12610, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 24290, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 39562;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 22564;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 22470;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 12710 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768198746, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 494;
[fp + -6] = [ap + 0] + 12710, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 452 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 431;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 384 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 363;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 316 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 288 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 254 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 226 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 182 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -16] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -18] + 1], ap++;
[ap + -5] = [[ap + -19] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 158 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 113 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 89 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 25524;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54283;
[ap + 0] = [ap + -1] + 54282, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 68100 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 68100, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 38;
[ap + -3] = [ap + 0] + 68100, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -6119;
[ap + 0] = [ap + -61] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25471;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 25541;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -9] + 2440, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 3950, ap++;
call rel 25531;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4010, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5620, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 5680, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7290, ap++;
call rel 25510;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 8090, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 9400, ap++;
call rel 25500;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 10200, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 11510, ap++;
call rel 25490;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 25354;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 223;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -16] + 0], ap++;
[ap + 3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -21] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 25204;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 53962;
[ap + 0] = [ap + -1] + 53961, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 347880, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -6264;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25147;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 25232;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25230;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 5110, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25092;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3880 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207576, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 158;
[fp + -6] = [ap + 0] + 3880, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 94;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 25004;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 53762;
[ap + 0] = [ap + -1] + 53761, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 347010, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 35;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -24], ap++;
call rel -5657;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24949;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 25054;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24917;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3880 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207576, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 158;
[fp + -6] = [ap + 0] + 3880, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 94;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 24829;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 53587;
[ap + 0] = [ap + -1] + 53586, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 299190, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 35;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -24], ap++;
call rel -5129;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24774;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 24879;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24742;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 203 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 175 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 141 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 113 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 90;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 24591;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 53349;
[ap + 0] = [ap + -1] + 53348, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 509340, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -4938;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24534;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24639;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 24616;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24479;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 10960 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768200496, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 453;
[fp + -6] = [ap + 0] + 10960, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 410 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 389;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 341 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 313 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 279 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 251 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 206 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -13] + 0], ap++;
[ap + 3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -18] + 2];
jmp rel 178 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 144 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 116 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 93;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 24175;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 52933;
[ap + 0] = [ap + -1] + 52932, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 352680, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 40;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -75], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -4410;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24115;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24202;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 24179;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5980, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 6040, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7650, ap++;
call rel 24157;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 8450, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 9760, ap++;
call rel 24146;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24009;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 221;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 178 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 157;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 23921;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 52679;
[ap + 0] = [ap + -1] + 52678, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 130280, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 100;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -20] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 35593;
[ap + 0] = [fp + -8] + 3, ap++;
jmp rel 36 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 27 if [ap + -13] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
call rel 38580;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1] + 2800, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -16] + 2990, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23803;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 23908;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23771;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 2270 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209186, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 199;
[fp + -6] = [ap + 0] + 2270, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 176;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 23722;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 52480;
[ap + 0] = [ap + -1] + 52479, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 14620, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 125;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = 892831332077295033575207595541551688973278767908702850266232499306953315355, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -12] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -23] + 1], ap++;
[ap + -4] = [[ap + -24] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -26] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -23] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -25] + 2], ap++;
[ap + -7] = [[ap + -26] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -29] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9] + 1300, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 20200;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 15;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 1960, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23579;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23693;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1870, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23555;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 23516;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52275;
[ap + 0] = [ap + -1] + 52274, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 20757;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 23413;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 23402;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 92 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 23314;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 52072;
[ap + 0] = [ap + -1] + 52071, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28230, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 37;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3910;
jmp rel 15 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 200, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23259;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2310, ap++;
call rel 23364;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 23227;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 315;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 272 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 244 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 210 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 182 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 23086;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 51844;
[ap + 0] = [ap + -1] + 51843, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 15020, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 128;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -28] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[ap + -18] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 1], ap++;
[ap + -4] = [[ap + -21] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -23] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -20] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -22] + 2], ap++;
[ap + -7] = [[ap + -23] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -26] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 23 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -6] + 1770, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 20285;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 16;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 2050, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 22938;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 23032;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 22895;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7220 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204236, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 325;
[fp + -6] = [ap + 0] + 7220, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 282 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 254 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 220 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 192 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 147 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 126;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 22703;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 51461;
[ap + 0] = [ap + -1] + 51460, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 67440, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 67;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 380399219957990785808227865262557561983086966506409870698903802235701193624, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -27], ap++;
call rel 37108;
jmp rel 41 if [ap + -6] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 22616;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 22712;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2740, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4350, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4410, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6020, ap++;
call rel 22690;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 22553;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 237;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 194 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 166 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 132 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 104 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 22412;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 51170;
[ap + 0] = [ap + -1] + 51169, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 43280, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 50;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -4412;
jmp rel 27 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 700, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 22342;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 22436;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 22299;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 22158;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50917;
[ap + 0] = [ap + -1] + 50916, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -4495;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 22109;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 22204;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 22068;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 21980;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50739;
[ap + 0] = [ap + -1] + 50738, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 36280 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 36280, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 36280, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -4483;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 21932;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 22038;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 21902;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 21814;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50573;
[ap + 0] = [ap + -1] + 50572, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 36280 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 36280, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 36280, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -4472;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 21766;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 21872;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 21736;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 21649;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50408;
[ap + 0] = [ap + -1] + 50407, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -4460;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 21601;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 21707;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 21571;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 21533;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50292;
[ap + 0] = [ap + -1] + 50291, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 18048;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 21430;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 21419;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -13] = [[fp + -12] + 1];
[ap + -3] = [[fp + -12] + 2];
[ap + -2] = [[fp + -12] + 3];
[fp + -11] = [[fp + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12]) %}
[ap + 0] = [[fp + -12] + 6], ap++;
jmp rel 274 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 7];
[ap + -4] = [[fp + -12] + 8];
[ap + -3] = [[fp + -12] + 9];
[ap + -2] = [[fp + -12] + 10];
[fp + -10] = [[fp + -12] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 7) %}
[ap + 0] = [[fp + -12] + 13], ap++;
jmp rel 246 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 14];
[ap + -4] = [[fp + -12] + 15];
[ap + -3] = [[fp + -12] + 16];
[ap + -2] = [[fp + -12] + 17];
[fp + -9] = [[fp + -12] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 14) %}
[ap + 0] = [[fp + -12] + 20], ap++;
jmp rel 218 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1342288578147268091783907997261518164414589296086458792118970316167112971824, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 21];
[ap + -4] = [[fp + -12] + 22];
[ap + -3] = [[fp + -12] + 23];
[ap + -2] = [[fp + -12] + 24];
[fp + -8] = [[fp + -12] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 21) %}
[ap + 0] = [[fp + -12] + 27], ap++;
jmp rel 190 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 370781410766583664642632835469823025020813098254530403602707061266181576577, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 28];
[ap + -4] = [[fp + -12] + 29];
[ap + -3] = [[fp + -12] + 30];
[ap + -2] = [[fp + -12] + 31];
[fp + -7] = [[fp + -12] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 28) %}
[ap + 0] = [[fp + -12] + 34], ap++;
jmp rel 162 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 33], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 35];
[ap + -4] = [[fp + -12] + 36];
[ap + -3] = [[fp + -12] + 37];
[ap + -2] = [[fp + -12] + 38];
[fp + -6] = [[fp + -12] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 35) %}
[ap + 0] = [[fp + -12] + 41], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 40], ap++;
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 42];
[ap + -4] = [[fp + -12] + 43];
[ap + -3] = [[fp + -12] + 44];
[ap + -2] = [[fp + -12] + 45];
[fp + -5] = [[fp + -12] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 42) %}
[ap + 0] = [[fp + -12] + 48], ap++;
jmp rel 101 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 47], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 49];
[ap + -4] = [[fp + -12] + 50];
[ap + -3] = [[fp + -12] + 51];
[ap + -2] = [[fp + -12] + 52];
[fp + -4] = [[fp + -12] + 53];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 49) %}
[ap + 0] = [[fp + -12] + 55], ap++;
jmp rel 69 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 54], ap++;
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 56];
[ap + -4] = [[fp + -12] + 57];
[ap + -3] = [[fp + -12] + 58];
[ap + -2] = [[fp + -12] + 59];
[fp + -3] = [[fp + -12] + 60];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 56) %}
[ap + 0] = [[fp + -12] + 62], ap++;
jmp rel 40 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 61], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 652990154330776325813328174927284492907298542132604841720088255812724192736, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 63];
[ap + -5] = [[fp + -12] + 64];
[ap + -4] = [[fp + -12] + 65];
[ap + -3] = [[fp + -12] + 66];
[ap + -2] = [[fp + -12] + 67];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 63) %}
[ap + 0] = [[fp + -12] + 69], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 68], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 70, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -12] + 68], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 72, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 70], ap++;
[ap + 0] = [[fp + -12] + 71], ap++;
ret;
ap += 3;
[ap + 0] = [[fp + -12] + 61], ap++;
[ap + 0] = [ap + -1] + 10670, ap++;
[ap + 0] = [fp + -12] + 65, ap++;
[ap + 0] = [[fp + -12] + 63], ap++;
[ap + 0] = [[fp + -12] + 64], ap++;
jmp rel 11;
ap += 10;
[ap + 0] = [[fp + -12] + 54], ap++;
[ap + 0] = [ap + -1] + 22000, ap++;
[ap + 0] = [fp + -12] + 58, ap++;
[ap + 0] = [[fp + -12] + 56], ap++;
[ap + 0] = [[fp + -12] + 57], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -12] + 47], ap++;
[ap + 0] = [ap + -1] + 33040, ap++;
[ap + 0] = [fp + -12] + 51, ap++;
[ap + 0] = [[fp + -12] + 49], ap++;
[ap + 0] = [[fp + -12] + 50], ap++;
jmp rel 11;
ap += 23;
[ap + 0] = [[fp + -12] + 40], ap++;
[ap + 0] = [ap + -1] + 44370, ap++;
[ap + 0] = [fp + -12] + 44, ap++;
[ap + 0] = [[fp + -12] + 42], ap++;
[ap + 0] = [[fp + -12] + 43], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 33;
[ap + 0] = [[fp + -12] + 33], ap++;
[ap + 0] = [ap + -1] + 55870, ap++;
[ap + 0] = [fp + -12] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 35], ap++;
[ap + 0] = [[fp + -12] + 36], ap++;
ret;
ap += 39;
[ap + 0] = [[fp + -12] + 26], ap++;
[ap + 0] = [ap + -1] + 67010, ap++;
[ap + 0] = [fp + -12] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 28], ap++;
[ap + 0] = [[fp + -12] + 29], ap++;
ret;
ap += 45;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = [ap + -1] + 78150, ap++;
[ap + 0] = [fp + -12] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 21], ap++;
[ap + 0] = [[fp + -12] + 22], ap++;
ret;
ap += 51;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [ap + -1] + 89290, ap++;
[ap + 0] = [fp + -12] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 14], ap++;
[ap + 0] = [[fp + -12] + 15], ap++;
ret;
ap += 57;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -1] + 100430, ap++;
[ap + 0] = [fp + -12] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 7], ap++;
[ap + 0] = [[fp + -12] + 8], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 1603 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 572589864753097185921218816822617766796583417866143734766737304392929006600, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 1554 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -9] + 0], ap++;
[ap + 3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -9] + 2];
jmp rel 1502 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -9] + 0];
[ap + 0] = 572589864753097185921218816822617766796583417866143734766737304392929006600, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 1460 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1413 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [ap + -19] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 13;
[ap + -1] = [[ap + -13] + 1];
ap += 5;
[ap + 0] = [ap + -18] + 2, ap++;
[ap + 0] = [ap + -10] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 1] = [ap + -12] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 2];
jmp rel 1349;
[ap + -1] = [[ap + -18] + 2];
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 1325 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 572589864753097185921218816822617766796583417866143734766737304392929006600, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -4] = [[ap + -21] + 1];
[ap + -3] = [[ap + -21] + 2];
[ap + -2] = [[ap + -21] + 3];
[ap + -6] = [[ap + -21] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 6], ap++;
jmp rel 1283 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = 572589864753097185921218816822617766796583417866143734766737304392929006600, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -28] + 7];
[ap + -4] = [[ap + -28] + 8];
[ap + -3] = [[ap + -28] + 9];
[ap + -2] = [[ap + -28] + 10];
[ap + -12] = [[ap + -28] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28] + 7) %}
[ap + 0] = [[ap + -28] + 13], ap++;
jmp rel 1245 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -34] + 14];
[ap + -4] = [[ap + -34] + 15];
[ap + -3] = [[ap + -34] + 16];
[ap + -2] = [[ap + -34] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -34] + 14) %}
[ap + 0] = [[ap + -34] + 19], ap++;
jmp rel 1202 if [ap + -1] != 0;
[ap + 0] = [[ap + -35] + 18], ap++;
[ap + 0] = [[ap + -36] + 20], ap++;
[ap + 0] = [ap + -37] + 21, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -27] + 0], ap++;
[ap + 3] = [[ap + -28] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -32] + 2];
jmp rel 1150 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -27] + 0];
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 1108 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1061 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[fp + -4] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 1023;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[fp + -4] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -4], ap++;
[fp + -5] = [ap + 1] + [ap + -25], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 979;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 5], ap++;
jmp rel 934 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -21] + 6], ap++;
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 882 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -11] + 0];
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 840 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 793 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 755;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -23] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 713;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 370781410766583664642632835469823025020813098254530403602707061266181576577, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + -4] = [[ap + -17] + 1];
[ap + -3] = [[ap + -17] + 2];
[ap + -2] = [[ap + -17] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17]) %}
[ap + 0] = [[ap + -17] + 5], ap++;
jmp rel 668 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 4], ap++;
[ap + 0] = [[ap + -19] + 6], ap++;
[ap + 0] = [ap + -20] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 625 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -11] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
call rel 31830;
[ap + 0] = [ap + -90], ap++;
jmp rel 584 if [ap + -2] != 0;
[ap + 0] = 10000, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -37], ap++;
[ap + 1] = [fp + -4] + [ap + -34], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -45] + 15];
jmp rel 13;
[ap + -1] = [[ap + -44] + 15];
ap += 1;
[ap + 0] = [ap + -45] + 16, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -45] + 16, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [fp + -5] + [ap + -42], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 417;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 393 if [ap + -12] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 1] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 67;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -7] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -10], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 202;
call rel 49207;
[ap + 0] = [ap + -1] + 49206, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 170560, ap++;
[ap + 0] = [ap + -215] + 1, ap++;
[ap + 0] = [ap + -213] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 206;
call rel 49185;
[ap + 0] = [ap + -1] + 49184, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 171190, ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [ap + -215] + [ap + -2], ap++;
call rel 35182;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -377], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -161] + 0];
[ap + -2] = [[ap + -161] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -161]) %}
[ap + 0] = [[ap + -161] + 3], ap++;
jmp rel 281 if [ap + -1] != 0;
[ap + 0] = [[ap + -162] + 2], ap++;
[ap + 0] = [[ap + -163] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1342288578147268091783907997261518164414589296086458792118970316167112971824, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -172] + 5];
[ap + -7] = [[ap + -172] + 6];
[ap + -6] = [[ap + -172] + 7];
[ap + -5] = [[ap + -172] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -172] + 5) %}
[ap + 0] = [[ap + -172] + 10], ap++;
jmp rel 233 if [ap + -1] != 0;
[ap + 0] = [[ap + -173] + 9], ap++;
[ap + 0] = [[ap + -174] + 11], ap++;
[ap + 0] = [ap + -175] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -23] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -25] + 1], ap++;
[ap + -5] = [[ap + -26] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 190 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -20] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -21] + 1];
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -6]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -25] + 2];
jmp rel 151;
[ap + 1] = [ap + -12] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[ap + -25] + 2];
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -272] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[ap + -272] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -32] + 3], ap++;
[ap + -4] = [[ap + -33] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -35] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -32] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -34] + 4], ap++;
[ap + -7] = [[ap + -35] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -35] + 6, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -320], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -108], ap++;
[ap + 0] = [ap + -108], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 35049;
[ap + 0] = [fp + -7] + 6, ap++;
jmp rel 68 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 57 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -381], ap++;
[ap + 0] = [ap + -381], ap++;
[ap + 0] = [ap + -459], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -247], ap++;
[ap + 0] = [ap + -247], ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 36020;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -47] + 0];
[ap + -2] = [[ap + -47] + 1];
[ap + -6] = [[ap + -47] + 2];
[ap + -5] = [[ap + -47] + 3];
[ap + -4] = [[ap + -47] + 4];
[ap + -3] = [[ap + -47] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -47]) %}
[ap + 0] = [[ap + -47] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -48] + 6], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -52] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -425], ap++;
[ap + 0] = [ap + -425], ap++;
ret;
[ap + 0] = [[ap + -48] + 6], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -52] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -54] + 8], ap++;
[ap + 0] = [[ap + -55] + 9], ap++;
ret;
ap += 39;
[ap + 0] = [ap + -40] + 15110, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44], ap++;
jmp rel 8;
ap += 40;
[ap + 0] = [ap + -47] + 15400, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 178;
call rel 48942;
[ap + 0] = [ap + -1] + 48941, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 146890, ap++;
call rel 16916;
[ap + 0] = [ap + -216] + 3, ap++;
[ap + 0] = [ap + -196] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -202], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 172;
call rel 48918;
[ap + 0] = [ap + -1] + 48917, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 146350, ap++;
call rel 16901;
[ap + 0] = [ap + -211] + 3, ap++;
[ap + 0] = [ap + -194] + [ap + -8], ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 188;
[ap + 0] = [[ap + -361] + 9], ap++;
call rel 48895;
[ap + 0] = [ap + -1] + 48894, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 148500, ap++;
[ap + 0] = [ap + -211], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -371] + 13, ap++;
[ap + 0] = [[ap + -372] + 11], ap++;
[ap + 0] = [[ap + -373] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 204;
[ap + 0] = [[ap + -366] + 2], ap++;
call rel 48867;
[ap + 0] = [ap + -1] + 48866, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160440, ap++;
[ap + 0] = [ap + -216], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -377] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -379] + 4], ap++;
[ap + 0] = [[ap + -380] + 5], ap++;
ret;
ap += 212;
call rel 48845;
[ap + 0] = [ap + -1] + 48844, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 171900, ap++;
[ap + 0] = [ap + -223], ap++;
[ap + 0] = [ap + -223] + [ap + -2], ap++;
jmp rel 17;
ap += 215;
call rel 48829;
[ap + 0] = [ap + -1] + 48828, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 172270, ap++;
[ap + 0] = [ap + -234] + 2, ap++;
[ap + 0] = [ap + -227] + [ap + -2], ap++;
call rel 16782;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -377], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 269;
call rel 48803;
[ap + 0] = [ap + -1] + 48802, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 180500, ap++;
call rel 31445;
[ap + 0] = [ap + -287], ap++;
[ap + 0] = [ap + -284] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -377], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 347;
call rel 48780;
[ap + 0] = [ap + -1] + 48779, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 192940, ap++;
call rel 31431;
[ap + 0] = [ap + -377] + 3, ap++;
[ap + 0] = [ap + -369] + [ap + -8], ap++;
[ap + 0] = [ap + -371], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 363;
[ap + 0] = [[ap + -381] + 4], ap++;
call rel 48757;
[ap + 0] = [ap + -1] + 48756, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 195090, ap++;
[ap + 0] = [ap + -377], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -391] + 8, ap++;
[ap + 0] = [[ap + -392] + 6], ap++;
[ap + 0] = [[ap + -393] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 366;
call rel 48730;
[ap + 0] = [ap + -1] + 48729, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205560, ap++;
[ap + 0] = [ap + -380] + 1, ap++;
[ap + 0] = [ap + -378] + [ap + -2], ap++;
jmp rel 17;
ap += 372;
call rel 48713;
[ap + 0] = [ap + -1] + 48712, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 206570, ap++;
[ap + 0] = [ap + -391] + 2, ap++;
[ap + 0] = [ap + -384] + [ap + -2], ap++;
call rel 35829;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -397], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 363;
call rel 48687;
[ap + 0] = [ap + -1] + 48686, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205290, ap++;
call rel 16652;
[ap + 0] = [ap + -389] + 3, ap++;
[ap + 0] = [ap + -384] + [ap + -8], ap++;
[ap + 0] = [ap + -386], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 383;
[ap + 0] = [[ap + -393] + 4], ap++;
call rel 48664;
[ap + 0] = [ap + -1] + 48663, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 208000, ap++;
[ap + 0] = [ap + -394], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -403] + 8, ap++;
[ap + 0] = [[ap + -404] + 6], ap++;
[ap + 0] = [[ap + -405] + 7], ap++;
jmp rel 48;
ap += 375;
call rel 48644;
[ap + 0] = [ap + -1] + 48643, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 217140, ap++;
call rel 16609;
[ap + 0] = [ap + -404] + 3, ap++;
[ap + 0] = [ap + -396] + [ap + -8], ap++;
[ap + 0] = [ap + -398], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 395;
[ap + 0] = [[ap + -415] + 4], ap++;
call rel 48616;
[ap + 0] = [ap + -1] + 48615, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 219850, ap++;
[ap + 0] = [ap + -409], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -425] + 8, ap++;
[ap + 0] = [[ap + -426] + 6], ap++;
[ap + 0] = [[ap + -427] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 398;
call rel 48589;
[ap + 0] = [ap + -1] + 48588, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 230320, ap++;
[ap + 0] = [ap + -414] + 1, ap++;
[ap + 0] = [ap + -410] + [ap + -2], ap++;
jmp rel 17;
ap += 406;
call rel 48572;
[ap + 0] = [ap + -1] + 48571, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 231510, ap++;
[ap + 0] = [ap + -425] + 2, ap++;
[ap + 0] = [ap + -418] + [ap + -2], ap++;
call rel 35688;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -431], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 397;
call rel 48546;
[ap + 0] = [ap + -1] + 48545, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 230230, ap++;
call rel 16511;
[ap + 0] = [ap + -423] + 3, ap++;
[ap + 0] = [ap + -418] + [ap + -8], ap++;
[ap + 0] = [ap + -420], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 417;
[ap + 0] = [[ap + -427] + 4], ap++;
call rel 48523;
[ap + 0] = [ap + -1] + 48522, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 232940, ap++;
[ap + 0] = [ap + -428], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -437] + 8, ap++;
[ap + 0] = [[ap + -438] + 6], ap++;
[ap + 0] = [[ap + -439] + 7], ap++;
jmp rel 48;
ap += 409;
call rel 48503;
[ap + 0] = [ap + -1] + 48502, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 242080, ap++;
call rel 16468;
[ap + 0] = [ap + -454] + 3, ap++;
[ap + 0] = [ap + -430] + [ap + -8], ap++;
[ap + 0] = [ap + -432], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 429;
[ap + 0] = [[ap + -464] + 18], ap++;
call rel 48475;
[ap + 0] = [ap + -1] + 48474, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 244790, ap++;
[ap + 0] = [ap + -459], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -474] + 22, ap++;
[ap + 0] = [[ap + -475] + 20], ap++;
[ap + 0] = [[ap + -476] + 21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 436;
[ap + 0] = [[ap + -465] + 12], ap++;
call rel 48447;
[ap + 0] = [ap + -1] + 48446, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 255820, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -474] + 16, ap++;
[ap + 0] = [[ap + -475] + 14], ap++;
[ap + 0] = [[ap + -476] + 15], ap++;
jmp rel 20;
ap += 443;
[ap + 0] = [[ap + -465] + 5], ap++;
call rel 48427;
[ap + 0] = [ap + -1] + 48426, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 267150, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -474] + 9, ap++;
[ap + 0] = [[ap + -475] + 7], ap++;
[ap + 0] = [[ap + -476] + 8], ap++;
[ap + 0] = [ap + -464], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 445;
call rel 48401;
[ap + 0] = [ap + -1] + 48400, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 277730, ap++;
[ap + 0] = [ap + -456], ap++;
[ap + 0] = [ap + -456] + [ap + -2], ap++;
jmp rel 17;
ap += 448;
call rel 48385;
[ap + 0] = [ap + -1] + 48384, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 278100, ap++;
[ap + 0] = [ap + -474] + 3, ap++;
[ap + 0] = [ap + -460] + [ap + -2], ap++;
call rel 16338;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -480], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 446;
call rel 48359;
[ap + 0] = [ap + -1] + 48358, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 277720, ap++;
call rel 16324;
[ap + 0] = [ap + -472] + 3, ap++;
[ap + 0] = [ap + -467] + [ap + -8], ap++;
[ap + 0] = [ap + -469], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 466;
[ap + 0] = [[ap + -476] + 4], ap++;
call rel 48336;
[ap + 0] = [ap + -1] + 48335, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 280430, ap++;
[ap + 0] = [ap + -477], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -486] + 8, ap++;
[ap + 0] = [[ap + -487] + 6], ap++;
[ap + 0] = [[ap + -488] + 7], ap++;
jmp rel 48;
ap += 458;
call rel 48316;
[ap + 0] = [ap + -1] + 48315, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 289570, ap++;
call rel 16281;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -479] + [ap + -8], ap++;
[ap + 0] = [ap + -481], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 478;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 48288;
[ap + 0] = [ap + -1] + 48287, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 292280, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 495;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 48260;
[ap + 0] = [ap + -1] + 48259, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 304310, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 618 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 35324;
[ap + 0] = [[ap + -214] + 0], ap++;
[ap + 0] = [[ap + -215] + 1], ap++;
[ap + 0] = [[ap + -216] + 2], ap++;
[ap + 0] = [[ap + -217] + 3], ap++;
[ap + 0] = [[ap + -218] + 4], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
jmp rel 536 if [ap + -19] != 0;
[ap + 0] = [ap + -21], ap++;
jmp rel 516 if [ap + -19] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 13, ap++;
call rel 36612;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 717;
call rel 48162;
[ap + 0] = [ap + -1] + 48161, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 525860, ap++;
call rel 36846;
[ap + 0] = [ap + -759], ap++;
[ap + 0] = [ap + -732] + [ap + -8], ap++;
[ap + 0] = [ap + -740], ap++;
[ap + 0] = [ap + -760], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 652990154330776325813328174927284492907298542132604841720088255812724192736, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -31] + 0];
[ap + -4] = [[ap + -31] + 1];
[ap + -3] = [[ap + -31] + 2];
[ap + -2] = [[ap + -31] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -31]) %}
[ap + 0] = [[ap + -31] + 5], ap++;
jmp rel 448 if [ap + -1] != 0;
[ap + 0] = [[ap + -32] + 4], ap++;
[ap + 0] = [[ap + -33] + 6], ap++;
[ap + 0] = [ap + -34] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 404 if [ap + -1] != 0;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 13, ap++;
call rel 36546;
[ap + 0] = [ap + -9], ap++;
jmp rel 20 if [ap + -2] != 0;
ap += 142;
call rel 48096;
[ap + 0] = [ap + -1] + 48095, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 131950, ap++;
[ap + 0] = [ap + -197], ap++;
[ap + 0] = [ap + -151] + [ap + -2], ap++;
[ap + 0] = [ap + -178], ap++;
[ap + 0] = [ap + -164], ap++;
jmp rel 71;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[ap + -28] + 0];
[fp + -5] = [[ap + -28] + 1];
[ap + 0] = [[ap + -28] + 2], ap++;
[ap + -1] = [[ap + -29] + 3];
[fp + -4] = [[ap + -29] + 4];
[ap + 0] = [[ap + -29] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -55] + 0], ap++;
[ap + -4] = [[ap + -56] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -58] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -55] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -57] + 1], ap++;
[ap + -7] = [[ap + -58] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -58] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
call rel 34042;
[ap + 0] = [ap + -174] + 6, ap++;
jmp rel 292 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 272 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -6] = [[ap + -4] + 1];
[ap + -3] = [[ap + -4] + 2];
[ap + -2] = [[ap + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -4]) %}
[ap + 0] = [[ap + -4] + 5], ap++;
jmp rel 227 if [ap + -1] != 0;
[ap + 0] = [[ap + -5] + 4], ap++;
[ap + 0] = [[ap + -6] + 6], ap++;
[ap + 0] = [ap + -7] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -18] + 2];
jmp rel 186;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -17] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -5] = [[ap + -1] + 0];
[fp + -4] = [[ap + -1] + 1];
[fp + -3] = [[ap + -1] + 2];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1570862312720967193333784822276682676294734273097133954619165910069425349750, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 3, ap++;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -6] = [[ap + -14] + 1];
[ap + -15] = [[ap + -14] + 2];
[ap + -5] = [[ap + -14] + 3];
[ap + -4] = [[ap + -14] + 4];
[ap + -3] = [[ap + -14] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 7], ap++;
jmp rel 131 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 6], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 34939;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -56] + 10];
[ap + -2] = [[ap + -56] + 11];
[ap + -6] = [[ap + -56] + 12];
[ap + -5] = [[ap + -56] + 13];
[ap + -4] = [[ap + -56] + 14];
[ap + -3] = [[ap + -56] + 15];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -56] + 10) %}
[ap + 0] = [[ap + -56] + 17], ap++;
jmp rel 69 if [ap + -1] != 0;
[ap + 0] = [[ap + -57] + 16], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -59] + 18, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 36604;
jmp rel 37 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 456;
call rel 47892;
[ap + 0] = [ap + -1] + 47891, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 326680, ap++;
[ap + 0] = [ap + -540], ap++;
[ap + 0] = [ap + -465] + [ap + -2], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -471], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 36646;
ret;
ap += 457;
call rel 47860;
[ap + 0] = [ap + -1] + 47859, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 326870, ap++;
[ap + 0] = [ap + -540], ap++;
[ap + 0] = [ap + -470] + [ap + -2], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -471], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -471], ap++;
[ap + 0] = [ap + -471], ap++;
ret;
ap += 487;
[ap + 0] = [[ap + -544] + 16], ap++;
call rel 47838;
[ap + 0] = [ap + -1] + 47837, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 340880, ap++;
[ap + 0] = [ap + -540], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -555] + 20, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -557] + 18], ap++;
[ap + 0] = [[ap + -558] + 19], ap++;
ret;
ap += 529;
[ap + 0] = [[ap + -544] + 6], ap++;
call rel 47815;
[ap + 0] = [ap + -1] + 47814, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 356460, ap++;
[ap + 0] = [ap + -540], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -555] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -557] + 8], ap++;
[ap + 0] = [[ap + -558] + 9], ap++;
ret;
ap += 526;
call rel 47793;
[ap + 0] = [ap + -1] + 47792, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 366890, ap++;
call rel 15614;
[ap + 0] = [ap + -557] + 3, ap++;
[ap + 0] = [ap + -547] + [ap + -8], ap++;
[ap + 0] = [ap + -549], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 541;
[ap + 0] = [[ap + -546] + 4], ap++;
call rel 47770;
[ap + 0] = [ap + -1] + 47769, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 368950, ap++;
[ap + 0] = [ap + -557], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -556] + 8, ap++;
[ap + 0] = [[ap + -557] + 6], ap++;
[ap + 0] = [[ap + -558] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 552;
call rel 47743;
[ap + 0] = [ap + -1] + 47742, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 380340, ap++;
[ap + 0] = [ap + -560] + [ap + -1], ap++;
[ap + 0] = [ap + -564], ap++;
[ap + 0] = [ap + -564], ap++;
jmp rel 17;
ap += 553;
call rel 47726;
[ap + 0] = [ap + -1] + 47725, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 380630, ap++;
[ap + 0] = [ap + -567] + [ap + -1], ap++;
[ap + 0] = [ap + -564], ap++;
[ap + 0] = [ap + -564], ap++;
[ap + 0] = [ap + -571], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -566], ap++;
[ap + 0] = [ap + -572], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 704;
call rel 47702;
[ap + 0] = [ap + -1] + 47701, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 513890, ap++;
call rel 36985;
[ap + 0] = [ap + -759], ap++;
[ap + 0] = [ap + -722] + [ap + -8], ap++;
[ap + 0] = [ap + -740], ap++;
[ap + 0] = [ap + -726], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 717;
[ap + 0] = [[ap + -749] + 4], ap++;
call rel 47678;
[ap + 0] = [ap + -1] + 47677, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 515460, ap++;
[ap + 0] = [ap + -759], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -740], ap++;
[ap + 0] = [ap + -760] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -762] + 6], ap++;
[ap + 0] = [[ap + -763] + 7], ap++;
ret;
ap += 726;
call rel 47656;
[ap + 0] = [ap + -1] + 47655, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 527170, ap++;
[ap + 0] = [ap + -734] + [ap + -1], ap++;
[ap + 0] = [ap + -743], ap++;
[ap + 0] = [ap + -743], ap++;
jmp rel 17;
ap += 727;
call rel 47639;
[ap + 0] = [ap + -1] + 47638, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 527460, ap++;
[ap + 0] = [ap + -755] + [ap + -1], ap++;
[ap + 0] = [ap + -743], ap++;
[ap + 0] = [ap + -743], ap++;
[ap + 0] = [ap + -759], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -740], ap++;
[ap + 0] = [ap + -760], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 950;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 47614;
[ap + 0] = [ap + -1] + 47613, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 668610, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 34688;
[ap + 0] = [fp + -7] + 6, ap++;
jmp rel 366 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 346 if [ap + -14] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 9, ap++;
call rel 35981;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 207;
call rel 47531;
[ap + 0] = [ap + -1] + 47530, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 171020, ap++;
call rel 36215;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -222] + [ap + -8], ap++;
[ap + 0] = [ap + -230], ap++;
[ap + 0] = [ap + -245], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 1] = [ap + -18] + [ap + -15], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -28] + 0];
jmp rel 13;
[ap + -1] = [[ap + -27] + 0];
ap += 1;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -26] + [ap + -23], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 11;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
jmp rel 17;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 234;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 212 if [ap + -10] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -41] + 0];
[ap + -2] = [[ap + -41] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -41]) %}
[ap + 0] = [[ap + -41] + 3], ap++;
jmp rel 181 if [ap + -1] != 0;
[ap + 0] = [[ap + -42] + 2], ap++;
[ap + 0] = [[ap + -43] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[ap + -32] + 0];
[fp + -5] = [[ap + -32] + 1];
[ap + 0] = [[ap + -32] + 2], ap++;
[ap + -1] = [[ap + -33] + 3];
[fp + -4] = [[ap + -33] + 4];
[ap + 0] = [[ap + -33] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -18] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -7] = [[ap + -18] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -57] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [[ap + -25] + 1], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 33399;
[ap + 0] = [ap + -178] + 6, ap++;
jmp rel 100 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 89 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -2] = [[ap + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 3], ap++;
jmp rel 67 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -12] + 1], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 34354;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -53] + 5];
[ap + -2] = [[ap + -53] + 6];
[ap + -6] = [[ap + -53] + 7];
[ap + -5] = [[ap + -53] + 8];
[ap + -4] = [[ap + -53] + 9];
[ap + -3] = [[ap + -53] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -53] + 5) %}
[ap + 0] = [[ap + -53] + 12], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -54] + 11], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -58] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -54] + 11], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -58] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -60] + 13], ap++;
[ap + 0] = [[ap + -61] + 14], ap++;
ret;
ap += 44;
[ap + 0] = [[ap + -54] + 2], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2] + 15660, ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -58] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -60] + 4], ap++;
[ap + 0] = [[ap + -61] + 5], ap++;
ret;
ap += 45;
[ap + 0] = [ap + -46] + 25950, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -50], ap++;
jmp rel 8;
ap += 46;
[ap + 0] = [ap + -53] + 26240, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 192;
[ap + 0] = [[ap + -234] + 2], ap++;
call rel 47259;
[ap + 0] = [ap + -1] + 47258, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 158650, ap++;
[ap + 0] = [ap + -205], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -230], ap++;
[ap + 0] = [ap + -245] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -247] + 4], ap++;
[ap + 0] = [[ap + -248] + 5], ap++;
ret;
ap += 188;
call rel 47237;
[ap + 0] = [ap + -1] + 47236, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 168390, ap++;
[ap + 0] = [ap + -197], ap++;
[ap + 0] = [ap + -197] + [ap + -2], ap++;
jmp rel 17;
ap += 189;
call rel 47221;
[ap + 0] = [ap + -1] + 47220, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 168580, ap++;
[ap + 0] = [ap + -208] + 2, ap++;
[ap + 0] = [ap + -201] + [ap + -2], ap++;
call rel 15174;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -230], ap++;
[ap + 0] = [ap + -245], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 216;
call rel 47195;
[ap + 0] = [ap + -1] + 47194, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 172330, ap++;
[ap + 0] = [ap + -224] + [ap + -1], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -228], ap++;
jmp rel 17;
ap += 217;
call rel 47178;
[ap + 0] = [ap + -1] + 47177, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 172620, ap++;
[ap + 0] = [ap + -240] + [ap + -1], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -230], ap++;
[ap + 0] = [ap + -245], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 34250;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 291 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 271 if [ap + -14] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 7, ap++;
call rel 35543;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 197;
call rel 47093;
[ap + 0] = [ap + -1] + 47092, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 149520, ap++;
call rel 35777;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = [ap + -212] + [ap + -8], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -235], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[ap + -9] + 0];
[fp + -4] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + -1] = [[ap + -10] + 3];
[fp + -3] = [[ap + -10] + 4];
[ap + 0] = [[ap + -10] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -31] + 0], ap++;
[ap + -4] = [[ap + -32] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -34] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -31] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -33] + 1], ap++;
[ap + -7] = [[ap + -34] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -34] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
call rel 33034;
[ap + 0] = [ap + -155] + 6, ap++;
jmp rel 163 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 152 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 1] = [ap + -167] + [ap + -164], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 13;
[ap + -1] = [[ap + -12] + 0];
ap += 1;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -175] + [ap + -172], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 78;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 63 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 33936;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -66] + 0];
[ap + -2] = [[ap + -66] + 1];
[ap + -6] = [[ap + -66] + 2];
[ap + -5] = [[ap + -66] + 3];
[ap + -4] = [[ap + -66] + 4];
[ap + -3] = [[ap + -66] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -66]) %}
[ap + 0] = [[ap + -66] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -67] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -71] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -67] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -71] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -73] + 8], ap++;
[ap + 0] = [[ap + -74] + 9], ap++;
ret;
ap += 34;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -38] + 14560, ap++;
jmp rel 8;
ap += 37;
[ap + 0] = [ap + -49] + 2, ap++;
[ap + 0] = [ap + -42] + 14930, ap++;
call rel 14834;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 58;
[ap + 0] = [ap + -59] + 17640, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
jmp rel 8;
ap += 59;
[ap + 0] = [ap + -66] + 17930, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 206;
call rel 46832;
[ap + 0] = [ap + -1] + 46831, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 150830, ap++;
[ap + 0] = [ap + -214] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
jmp rel 17;
ap += 207;
call rel 46815;
[ap + 0] = [ap + -1] + 46814, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 151120, ap++;
[ap + 0] = [ap + -230] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -235], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 33887;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 254 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 243 if [ap + -14] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -2] = [[ap + -18] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 3], ap++;
jmp rel 221 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 2], ap++;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + -19] = [ap + 0] + [ap + -1], ap++;
[ap + 0] = [ap + -23] + 5, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 198 if [ap + -3] != 0;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 11, ap++;
call rel 35163;
[ap + 0] = [ap + -6], ap++;
jmp rel 16 if [ap + -2] != 0;
ap += 61;
call rel 35407;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -69] + 48460, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -2] = [[ap + -10] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 3], ap++;
jmp rel 154 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 2], ap++;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -15] + 5, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -3] = [ap + 1] + [ap + -31], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -45] + 0];
jmp rel 124;
[ap + -1] = [[ap + -44] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 652990154330776325813328174927284492907298542132604841720088255812724192736, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -48] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -6] = [[ap + -10] + 1];
[ap + -5] = [[ap + -10] + 2];
[ap + -4] = [[ap + -10] + 3];
[ap + -3] = [[ap + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 6], ap++;
jmp rel 90 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -14] + 7];
[ap + -2] = [[ap + -14] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14] + 7) %}
[ap + 0] = [[ap + -14] + 10], ap++;
jmp rel 67 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 9], ap++;
[ap + 0] = [[ap + -16] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [[ap + -12] + 1], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 33639;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -58] + 12];
[ap + -2] = [[ap + -58] + 13];
[ap + -6] = [[ap + -58] + 14];
[ap + -5] = [[ap + -58] + 15];
[ap + -4] = [[ap + -58] + 16];
[ap + -3] = [[ap + -58] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -58] + 12) %}
[ap + 0] = [[ap + -58] + 19], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -59] + 18], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -63] + 20, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -59] + 18], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -63] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -65] + 20], ap++;
[ap + 0] = [[ap + -66] + 21], ap++;
ret;
ap += 44;
[ap + 0] = [[ap + -59] + 9], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 15660, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -63] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -65] + 11], ap++;
[ap + 0] = [[ap + -66] + 12], ap++;
ret;
ap += 48;
[ap + 0] = [[ap + -59] + 5], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 26320, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -63] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -65] + 7], ap++;
[ap + 0] = [[ap + -66] + 8], ap++;
ret;
ap += 49;
call rel 35856;
[ap + 0] = [ap + -100] + 1, ap++;
[ap + 0] = [ap + -60] + 36810, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 63;
[ap + 0] = [[ap + -74] + 2], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -2] + 38440, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -78] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -80] + 4], ap++;
[ap + 0] = [[ap + -81] + 5], ap++;
ret;
ap += 67;
call rel 35836;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -75] + 49500, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 78;
[ap + 0] = [[ap + -97] + 2], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -2] + 50690, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -101] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -103] + 4], ap++;
[ap + 0] = [[ap + -104] + 5], ap++;
ret;
ap += 79;
[ap + 0] = [ap + -80] + 60980, ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -84], ap++;
jmp rel 8;
ap += 80;
[ap + 0] = [ap + -96] + 61270, ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 33570;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 50 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 20 if [ap + -14] != 0;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 33442;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 23 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 15 if [ap + -14] != 0;
ap += 3;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -17] + 190, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1342288578147268091783907997261518164414589296086458792118970316167112971824, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 35482;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 13981;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 370781410766583664642632835469823025020813098254530403602707061266181576577, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 35329;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 13828;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 35140;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 13639;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 34951;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 13450;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 652990154330776325813328174927284492907298542132604841720088255812724192736, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 34798;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 13297;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 34645;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 13144;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 13050;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 17960 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768193496, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 697;
[fp + -6] = [ap + 0] + 17960, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 655 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 634;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 587 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 566;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 519 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 498;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 451 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 427 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 382 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 358 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 313 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 285 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 251 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 223 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 179 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -13] + 0], ap++;
[ap + 3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -18] + 2];
jmp rel 151 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 117 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 89 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 15953;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 44712;
[ap + 0] = [ap + -1] + 44711, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 113400 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 113400, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 41;
[ap + -3] = [ap + 0] + 113400, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -117], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -5486;
[ap + 0] = [ap + -90] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 15897;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 15938;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3470, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5080, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 5140, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6750, ap++;
call rel 15917;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 7080, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 8590, ap++;
call rel 15907;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 8920, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 10430, ap++;
call rel 15897;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 11230, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 12540, ap++;
call rel 15887;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 13340, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 14650, ap++;
call rel 15877;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 15450, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 16760, ap++;
call rel 15867;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15731;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 249;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 206 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 178 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 144 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 116 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 93;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 15581;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 44339;
[ap + 0] = [ap + -1] + 44338, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 321760, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 40;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -5561;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 15521;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 15626;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 15603;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 15466;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 203 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 175 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 141 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 113 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 90;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 15315;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 44073;
[ap + 0] = [ap + -1] + 44072, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 690410, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -4196;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 15258;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 15363;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 15340;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 15203;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 203 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 175 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 141 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 113 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 90;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 15052;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 43810;
[ap + 0] = [ap + -1] + 43809, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 319270, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -3813;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 14995;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 15100;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 15077;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 14940;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 223;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 180 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 152 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 90 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 14799;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 43557;
[ap + 0] = [ap + -1] + 43556, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 297570, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 36;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3627;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 14743;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 14837;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 14700;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 223;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 180 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 152 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 90 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 14559;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 43317;
[ap + 0] = [ap + -1] + 43316, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205750, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 36;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3504;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 14503;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 14597;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 14460;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 238;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 195 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 167 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 133 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 105 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 14319;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 43077;
[ap + 0] = [ap + -1] + 43076, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 147980, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 51;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3427;
jmp rel 28 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 32359;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17] + 3700, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 14248;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 14342;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 14205;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 300;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 257 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 229 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 195 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 167 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 14064;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 42822;
[ap + 0] = [ap + -1] + 42821, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 144780, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 113;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3554;
jmp rel 90 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel [ap + -3];
jmp rel 67;
jmp rel 56;
jmp rel 45;
jmp rel 34;
jmp rel 23;
jmp rel 12;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 55;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 46;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 37;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 28;
[ap + 0] = 4, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 19;
[ap + 0] = 5, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 10;
[ap + 0] = 6, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1000, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 13931;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 14025;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 13888;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 13799;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 42558;
[ap + 0] = [ap + -1] + 42557, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3727;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 13751;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 13857;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 13721;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 13633;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 42392;
[ap + 0] = [ap + -1] + 42391, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3740;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 13585;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 13691;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 13555;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 13415;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 42174;
[ap + 0] = [ap + -1] + 42173, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3806;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 13366;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 13461;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 13325;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 13185;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41944;
[ap + 0] = [ap + -1] + 41943, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3847;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 13136;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 13231;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 13095;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 2470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 115;
[fp + -6] = [ap + 0] + 2470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 93;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 13036;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41795;
[ap + 0] = [ap + -1] + 41794, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35860 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35860, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 35;
[ap + -3] = [ap + 0] + 35860, ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + -4] = [ap + 0] + [ap + -13], ap++;
call rel -3808;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 12986;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 13101;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2070, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 12964;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 12877;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41636;
[ap + 0] = [ap + -1] + 41635, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3812;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 12829;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 12935;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 12799;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 12761;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41520;
[ap + 0] = [ap + -1] + 41519, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 9276;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 12658;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 12647;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -11] = [[fp + -10] + 1];
[ap + -3] = [[fp + -10] + 2];
[ap + -2] = [[fp + -10] + 3];
[fp + -9] = [[fp + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 6], ap++;
jmp rel 208 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 7];
[ap + -4] = [[fp + -10] + 8];
[ap + -3] = [[fp + -10] + 9];
[ap + -2] = [[fp + -10] + 10];
[fp + -8] = [[fp + -10] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 7) %}
[ap + 0] = [[fp + -10] + 13], ap++;
jmp rel 180 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 14];
[ap + -4] = [[fp + -10] + 15];
[ap + -3] = [[fp + -10] + 16];
[ap + -2] = [[fp + -10] + 17];
[fp + -7] = [[fp + -10] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 14) %}
[ap + 0] = [[fp + -10] + 20], ap++;
jmp rel 152 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 23464229998776571929713078215531096477380508348102882741883228885676337849, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 21];
[ap + -4] = [[fp + -10] + 22];
[ap + -3] = [[fp + -10] + 23];
[ap + -2] = [[fp + -10] + 24];
[fp + -6] = [[fp + -10] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 21) %}
[ap + 0] = [[fp + -10] + 27], ap++;
jmp rel 124 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1550153947432118614972336932050404137597350876889446769137856290847321999817, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 28];
[ap + -4] = [[fp + -10] + 29];
[ap + -3] = [[fp + -10] + 30];
[ap + -2] = [[fp + -10] + 31];
[fp + -5] = [[fp + -10] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 28) %}
[ap + 0] = [[fp + -10] + 34], ap++;
jmp rel 96 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 33], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 507418635482677637483397576806434119548236899667705150952610177267809022874, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 35];
[ap + -4] = [[fp + -10] + 36];
[ap + -3] = [[fp + -10] + 37];
[ap + -2] = [[fp + -10] + 38];
[fp + -4] = [[fp + -10] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 35) %}
[ap + 0] = [[fp + -10] + 41], ap++;
jmp rel 68 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 225944429010177989116390628639330560010267272214511598873246645831273610465, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 42];
[ap + -4] = [[fp + -10] + 43];
[ap + -3] = [[fp + -10] + 44];
[ap + -2] = [[fp + -10] + 45];
[fp + -3] = [[fp + -10] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 42) %}
[ap + 0] = [[fp + -10] + 48], ap++;
jmp rel 40 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 47], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 49];
[ap + -5] = [[fp + -10] + 50];
[ap + -4] = [[fp + -10] + 51];
[ap + -3] = [[fp + -10] + 52];
[ap + -2] = [[fp + -10] + 53];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 49) %}
[ap + 0] = [[fp + -10] + 55], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 54], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -10] + 56, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -10] + 54], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -10] + 58, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 56], ap++;
[ap + 0] = [[fp + -10] + 57], ap++;
ret;
ap += 7;
[ap + 0] = [[fp + -10] + 47], ap++;
[ap + 0] = [ap + -1] + 11130, ap++;
[ap + 0] = [fp + -10] + 51, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 49], ap++;
[ap + 0] = [[fp + -10] + 50], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -10] + 40], ap++;
[ap + 0] = [ap + -1] + 22270, ap++;
[ap + 0] = [fp + -10] + 44, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 42], ap++;
[ap + 0] = [[fp + -10] + 43], ap++;
ret;
ap += 19;
[ap + 0] = [[fp + -10] + 33], ap++;
[ap + 0] = [ap + -1] + 33410, ap++;
[ap + 0] = [fp + -10] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 35], ap++;
[ap + 0] = [[fp + -10] + 36], ap++;
ret;
ap += 25;
[ap + 0] = [[fp + -10] + 26], ap++;
[ap + 0] = [ap + -1] + 44550, ap++;
[ap + 0] = [fp + -10] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 28], ap++;
[ap + 0] = [[fp + -10] + 29], ap++;
ret;
ap += 31;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = [ap + -1] + 55690, ap++;
[ap + 0] = [fp + -10] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 21], ap++;
[ap + 0] = [[fp + -10] + 22], ap++;
ret;
ap += 37;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [ap + -1] + 66830, ap++;
[ap + 0] = [fp + -10] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 14], ap++;
[ap + 0] = [[fp + -10] + 15], ap++;
ret;
ap += 43;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -1] + 77970, ap++;
[ap + 0] = [fp + -10] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 7], ap++;
[ap + 0] = [[fp + -10] + 8], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -10] = [[fp + -8] + 1];
[ap + -3] = [[fp + -8] + 2];
[ap + -2] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 970 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 926 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -2] = [[ap + -8] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 3], ap++;
jmp rel 895 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 206363308816097409428170780341577425038733339660856129085969422683500834636, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 5];
[ap + -9] = [[ap + -20] + 6];
[ap + -8] = [[ap + -20] + 7];
[ap + -7] = [[ap + -20] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20] + 5) %}
[ap + 0] = [[ap + -20] + 10], ap++;
jmp rel 846 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 9], ap++;
[ap + 0] = [[ap + -22] + 11], ap++;
[ap + 0] = [ap + -23] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -11] + 0], ap++;
[ap + 3] = [[fp + -11] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -11] + 2];
jmp rel 794 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -11] + 0];
[ap + 0] = 206363308816097409428170780341577425038733339660856129085969422683500834636, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 752 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 705 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [ap + -19] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 13;
[ap + -1] = [[ap + -13] + 1];
ap += 5;
[ap + 0] = [ap + -18] + 2, ap++;
[ap + 0] = [ap + -10] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 1] = [ap + -12] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 2];
jmp rel 641;
[ap + -1] = [[ap + -18] + 2];
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 617 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 206363308816097409428170780341577425038733339660856129085969422683500834636, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -4] = [[ap + -21] + 1];
[ap + -3] = [[ap + -21] + 2];
[ap + -2] = [[ap + -21] + 3];
[ap + -6] = [[ap + -21] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 6], ap++;
jmp rel 575 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = 206363308816097409428170780341577425038733339660856129085969422683500834636, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -28] + 7];
[ap + -4] = [[ap + -28] + 8];
[ap + -3] = [[ap + -28] + 9];
[ap + -2] = [[ap + -28] + 10];
[ap + -12] = [[ap + -28] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28] + 7) %}
[ap + 0] = [[ap + -28] + 13], ap++;
jmp rel 537 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 12], ap++;
[ap + 0] = [ap + -30] + 14, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 25 if [fp + -3] != 0;
ap += 583;
call rel 40944;
[ap + 0] = [ap + -1] + 40943, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 343780, ap++;
call rel 30347;
[ap + 0] = [ap + -615], ap++;
[ap + 0] = [ap + -598] + [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -601], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 466 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -32] + 0], ap++;
[ap + -4] = [[ap + -33] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -34] + 2];
jmp rel 425;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -31] + 0], ap++;
[ap + -3] = [[ap + -32] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -33] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -7] = [[ap + -1] + 0];
[fp + -6] = [[ap + -1] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1529611236075625274563534897156030821272487408536186087410180751257675023606, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = [ap + -38] + 3, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -6] = [[ap + -14] + 1];
[ap + -15] = [[ap + -14] + 2];
[ap + -5] = [[ap + -14] + 3];
[ap + -4] = [[ap + -14] + 4];
[ap + -3] = [[ap + -14] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 7], ap++;
jmp rel 366 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
[ap + 0] = [[ap + -18] + 9], ap++;
call rel 30277;
[ap + 0] = [ap + -128] + 10, ap++;
[ap + 0] = [ap + -114], ap++;
jmp rel 334 if [ap + -14] != 0;
[ap + -13] = [ap + 0] + [ap + -188], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 307 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 25;
ap += 442;
call rel 40835;
[ap + 0] = [ap + -1] + 40834, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 303430, ap++;
call rel 31051;
[ap + 0] = [ap + -476], ap++;
[ap + 0] = [ap + -458] + [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -464], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -2] = [[ap + -8] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 3], ap++;
jmp rel 246 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + -165] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + -1] = [[fp + -9] + 3];
[ap + -165] = [[fp + -9] + 4];
[ap + 0] = [[fp + -9] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -34] + 0], ap++;
[ap + -4] = [[ap + -35] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -37] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -34] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -36] + 1], ap++;
[ap + -7] = [[ap + -37] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -37] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -24] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [[ap + -24] + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 30980;
[ap + 0] = [fp + -9] + 6, ap++;
jmp rel 155 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 135 if [ap + -5] != 0;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + -324] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[ap + -324] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 31977;
[ap + 0] = [ap + -239] + 6, ap++;
jmp rel 70 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 59 if [ap + -14] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -564], ap++;
[ap + 0] = [ap + -564], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -603], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -430], ap++;
[ap + 0] = [ap + -430], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -16], ap++;
call rel 33223;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -65] + 0];
[ap + -2] = [[ap + -65] + 1];
[ap + -6] = [[ap + -65] + 2];
[ap + -5] = [[ap + -65] + 3];
[ap + -4] = [[ap + -65] + 4];
[ap + -3] = [[ap + -65] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -65]) %}
[ap + 0] = [[ap + -65] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -66] + 6], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -70] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -54], ap++;
ret;
[ap + 0] = [[ap + -66] + 6], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -70] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -72] + 8], ap++;
[ap + 0] = [[ap + -73] + 9], ap++;
ret;
ap += 48;
[ap + 0] = [ap + -49] + 16220, ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -53], ap++;
jmp rel 8;
ap += 49;
[ap + 0] = [ap + -65] + 16510, ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 280;
call rel 40601;
[ap + 0] = [ap + -1] + 40600, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 158610, ap++;
[ap + 0] = [ap + -288] + [ap + -1], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -292], ap++;
jmp rel 17;
ap += 281;
call rel 40584;
[ap + 0] = [ap + -1] + 40583, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 158900, ap++;
[ap + 0] = [ap + -295] + [ap + -1], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -299], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -294], ap++;
[ap + 0] = [ap + -300], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 444;
[ap + 0] = [[ap + -453] + 2], ap++;
call rel 40559;
[ap + 0] = [ap + -1] + 40558, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 293310, ap++;
[ap + 0] = [ap + -476], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -464] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -466] + 4], ap++;
[ap + 0] = [[ap + -467] + 5], ap++;
ret;
ap += 444;
call rel 40537;
[ap + 0] = [ap + -1] + 40536, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 303710, ap++;
call rel 29838;
[ap + 0] = [ap + -476], ap++;
[ap + 0] = [ap + -459] + [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -464], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 441;
call rel 40514;
[ap + 0] = [ap + -1] + 40513, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 303440, ap++;
call rel 33194;
[ap + 0] = [ap + -471], ap++;
[ap + 0] = [ap + -456] + [ap + -8], ap++;
[ap + 0] = [ap + -458], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 561;
[ap + 0] = [[ap + -576] + 6], ap++;
call rel 40492;
[ap + 0] = [ap + -1] + 40491, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 320090, ap++;
[ap + 0] = [ap + -572], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -586] + 10, ap++;
[ap + 0] = [[ap + -587] + 8], ap++;
[ap + 0] = [[ap + -588] + 9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 563;
call rel 40465;
[ap + 0] = [ap + -1] + 40464, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 330870, ap++;
call rel 8286;
[ap + 0] = [ap + -610] + 3, ap++;
[ap + 0] = [ap + -584] + [ap + -8], ap++;
[ap + 0] = [ap + -586], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 578;
[ap + 0] = [[ap + -585] + 4], ap++;
call rel 40442;
[ap + 0] = [ap + -1] + 40441, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 332930, ap++;
[ap + 0] = [ap + -610], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -595] + 8, ap++;
[ap + 0] = [[ap + -596] + 6], ap++;
[ap + 0] = [[ap + -597] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 587;
[ap + 0] = [[ap + -616] + 12], ap++;
call rel 40414;
[ap + 0] = [ap + -1] + 40413, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 344240, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -625] + 16, ap++;
[ap + 0] = [[ap + -626] + 14], ap++;
[ap + 0] = [[ap + -627] + 15], ap++;
jmp rel 20;
ap += 594;
[ap + 0] = [[ap + -616] + 5], ap++;
call rel 40394;
[ap + 0] = [ap + -1] + 40393, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 355570, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -625] + 9, ap++;
[ap + 0] = [[ap + -626] + 7], ap++;
[ap + 0] = [[ap + -627] + 8], ap++;
[ap + 0] = [ap + -615], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 596;
call rel 40368;
[ap + 0] = [ap + -1] + 40367, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 366150, ap++;
[ap + 0] = [ap + -607], ap++;
[ap + 0] = [ap + -607] + [ap + -2], ap++;
jmp rel 17;
ap += 599;
call rel 40352;
[ap + 0] = [ap + -1] + 40351, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 366520, ap++;
[ap + 0] = [ap + -625] + 3, ap++;
[ap + 0] = [ap + -611] + [ap + -2], ap++;
call rel 8305;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -631], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 597;
call rel 40326;
[ap + 0] = [ap + -1] + 40325, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 366140, ap++;
call rel 8291;
[ap + 0] = [ap + -623] + 3, ap++;
[ap + 0] = [ap + -618] + [ap + -8], ap++;
[ap + 0] = [ap + -620], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 617;
[ap + 0] = [[ap + -627] + 4], ap++;
call rel 40303;
[ap + 0] = [ap + -1] + 40302, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 368850, ap++;
[ap + 0] = [ap + -628], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -637] + 8, ap++;
[ap + 0] = [[ap + -638] + 6], ap++;
[ap + 0] = [[ap + -639] + 7], ap++;
jmp rel 48;
ap += 609;
call rel 40283;
[ap + 0] = [ap + -1] + 40282, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 377990, ap++;
call rel 8248;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -630] + [ap + -8], ap++;
[ap + 0] = [ap + -632], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 629;
[ap + 0] = [[ap + -650] + 9], ap++;
call rel 40255;
[ap + 0] = [ap + -1] + 40254, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 380700, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -660] + 13, ap++;
[ap + 0] = [[ap + -661] + 11], ap++;
[ap + 0] = [[ap + -662] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 646;
[ap + 0] = [[ap + -655] + 2], ap++;
call rel 40227;
[ap + 0] = [ap + -1] + 40226, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 392730, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -666] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -668] + 4], ap++;
[ap + 0] = [[ap + -669] + 5], ap++;
ret;
ap += 644;
call rel 40205;
[ap + 0] = [ap + -1] + 40204, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 402750, ap++;
call rel 32894;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -662] + [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -666], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 657;
[ap + 0] = [[fp + -8] + 4], ap++;
call rel 40181;
[ap + 0] = [ap + -1] + 40180, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 404320, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 618 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 23464229998776571929713078215531096477380508348102882741883228885676337849, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 576 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 2];
jmp rel 535;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 500 if [ap + -3] != 0;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 31341;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 426 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 406 if [ap + -14] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 7, ap++;
call rel 32752;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 227;
call rel 40037;
[ap + 0] = [ap + -1] + 40036, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 183950, ap++;
call rel 32818;
[ap + 0] = [ap + -264], ap++;
[ap + 0] = [ap + -242] + [ap + -8], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -265], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -2] = [[ap + -24] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 3], ap++;
jmp rel 344 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 2], ap++;
[ap + 0] = [[ap + -26] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1550153947432118614972336932050404137597350876889446769137856290847321999817, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -35] + 5];
[ap + -7] = [[ap + -35] + 6];
[ap + -6] = [[ap + -35] + 7];
[ap + -5] = [[ap + -35] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -35] + 5) %}
[ap + 0] = [[ap + -35] + 10], ap++;
jmp rel 296 if [ap + -1] != 0;
[ap + 0] = [[ap + -36] + 9], ap++;
[ap + 0] = [[ap + -37] + 11], ap++;
[ap + 0] = [ap + -38] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -46] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -48] + 1], ap++;
[ap + -5] = [[ap + -49] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 253 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -43] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -44] + 1];
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -32] + memory[ap + -6]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -33] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -48] + 2];
jmp rel 214;
[ap + 1] = [ap + -33] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[ap + -48] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -52] + 3];
jmp rel 177;
[ap + -1] = [[ap + -51] + 3];
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -36] + 0];
[fp + -4] = [[ap + -36] + 1];
[ap + 0] = [[ap + -36] + 2], ap++;
[ap + -1] = [[ap + -37] + 3];
[fp + -3] = [[ap + -37] + 4];
[ap + 0] = [[ap + -37] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -58] + 4], ap++;
[ap + -4] = [[ap + -59] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -61] + 6];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -58] + 4], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -60] + 5], ap++;
[ap + -7] = [[ap + -61] + 6];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -61] + 7, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
call rel 30117;
[ap + 0] = [ap + -192] + 6, ap++;
jmp rel 99 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 88 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -2] = [[ap + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 3], ap++;
jmp rel 66 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [[ap + -11] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -11] + 2], ap++;
[ap + 0] = [ap + -192], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 32400;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -59] + 5];
[ap + -2] = [[ap + -59] + 6];
[ap + -6] = [[ap + -59] + 7];
[ap + -5] = [[ap + -59] + 8];
[ap + -4] = [[ap + -59] + 9];
[ap + -3] = [[ap + -59] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -59] + 5) %}
[ap + 0] = [[ap + -59] + 12], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -60] + 11], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -64] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -60] + 11], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -64] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -66] + 13], ap++;
[ap + 0] = [[ap + -67] + 14], ap++;
ret;
ap += 50;
[ap + 0] = [[ap + -60] + 2], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -2] + 16500, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -64] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -66] + 4], ap++;
[ap + 0] = [[ap + -67] + 5], ap++;
ret;
ap += 51;
[ap + 0] = [ap + -52] + 26790, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -56], ap++;
jmp rel 8;
ap += 52;
[ap + 0] = [ap + -59] + 27080, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 199;
call rel 39762;
[ap + 0] = [ap + -1] + 39761, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 159850, ap++;
call rel 32552;
[ap + 0] = [ap + -264] + 4, ap++;
[ap + 0] = [ap + -217] + [ap + -8], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -227], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 203;
call rel 39738;
[ap + 0] = [ap + -1] + 39737, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160380, ap++;
call rel 7712;
[ap + 0] = [ap + -264] + 3, ap++;
[ap + 0] = [ap + -221] + [ap + -8], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -227], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 197;
call rel 39714;
[ap + 0] = [ap + -1] + 39713, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 159840, ap++;
call rel 7697;
[ap + 0] = [ap + -259] + 3, ap++;
[ap + 0] = [ap + -219] + [ap + -8], ap++;
[ap + 0] = [ap + -221], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 213;
[ap + 0] = [[ap + -249] + 9], ap++;
call rel 39691;
[ap + 0] = [ap + -1] + 39690, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161990, ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -259] + 13, ap++;
[ap + 0] = [[ap + -260] + 11], ap++;
[ap + 0] = [[ap + -261] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 229;
[ap + 0] = [[ap + -254] + 2], ap++;
call rel 39663;
[ap + 0] = [ap + -1] + 39662, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 173930, ap++;
[ap + 0] = [ap + -264], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -265] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -267] + 4], ap++;
[ap + 0] = [[ap + -268] + 5], ap++;
ret;
ap += 236;
call rel 39641;
[ap + 0] = [ap + -1] + 39640, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 185260, ap++;
[ap + 0] = [ap + -244] + [ap + -1], ap++;
[ap + 0] = [ap + -248], ap++;
[ap + 0] = [ap + -248], ap++;
jmp rel 17;
ap += 237;
call rel 39624;
[ap + 0] = [ap + -1] + 39623, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 185550, ap++;
[ap + 0] = [ap + -260] + [ap + -1], ap++;
[ap + 0] = [ap + -248], ap++;
[ap + 0] = [ap + -248], ap++;
[ap + 0] = [ap + -264], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -265], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 467;
call rel 39600;
[ap + 0] = [ap + -1] + 39599, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 327460, ap++;
call rel 32399;
[ap + 0] = [ap + -482], ap++;
[ap + 0] = [ap + -482] + [ap + -8], ap++;
[ap + 0] = [ap + -492], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 469;
call rel 39579;
[ap + 0] = [ap + -1] + 39578, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 327540, ap++;
call rel 7400;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -490] + [ap + -8], ap++;
[ap + 0] = [ap + -492], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 484;
[ap + 0] = [[fp + -5] + 9], ap++;
call rel 39556;
[ap + 0] = [ap + -1] + 39555, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 329600, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 21;
ap += 496;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 39535;
[ap + 0] = [ap + -1] + 39534, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 341280, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 30751;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 493 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 473 if [ap + -14] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 5, ap++;
call rel 32162;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 237;
call rel 39447;
[ap + 0] = [ap + -1] + 39446, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 185460, ap++;
call rel 32255;
[ap + 0] = [ap + -274], ap++;
[ap + 0] = [ap + -252] + [ap + -8], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -275], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -2] = [[ap + -24] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 3], ap++;
jmp rel 411 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 2], ap++;
[ap + 0] = [[ap + -26] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1550153947432118614972336932050404137597350876889446769137856290847321999817, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -35] + 5];
[ap + -7] = [[ap + -35] + 6];
[ap + -6] = [[ap + -35] + 7];
[ap + -5] = [[ap + -35] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -35] + 5) %}
[ap + 0] = [[ap + -35] + 10], ap++;
jmp rel 363 if [ap + -1] != 0;
[ap + 0] = [[ap + -36] + 9], ap++;
[ap + 0] = [[ap + -37] + 11], ap++;
[ap + 0] = [ap + -38] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -46] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -48] + 1], ap++;
[ap + -5] = [[ap + -49] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 320 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -43] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -44] + 1];
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -32] + memory[ap + -6]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -33] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -48] + 2];
jmp rel 281;
[ap + 1] = [ap + -33] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[ap + -48] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -52] + 3];
jmp rel 244;
[ap + -1] = [[ap + -51] + 3];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = [ap + -54] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -5] = [[ap + -16] + 1];
[ap + -4] = [[ap + -16] + 2];
[ap + -3] = [[ap + -16] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 5], ap++;
jmp rel 199 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 4], ap++;
[ap + 0] = [[ap + -18] + 6], ap++;
[ap + 0] = [ap + -19] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 158;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -51] + 0];
[fp + -4] = [[ap + -51] + 1];
[ap + 0] = [[ap + -51] + 2], ap++;
[ap + -1] = [[ap + -52] + 3];
[fp + -3] = [[ap + -52] + 4];
[ap + 0] = [[ap + -52] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -19] + 3], ap++;
[ap + -4] = [[ap + -20] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -22] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -19] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -21] + 4], ap++;
[ap + -7] = [[ap + -22] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -22] + 6, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -76], ap++;
call rel 29484;
[ap + 0] = [ap + -207] + 6, ap++;
jmp rel 73 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 62 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -226], ap++;
[ap + 0] = [ap + -226], ap++;
[ap + 0] = [ap + -202], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 31779;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -54] + 0];
[ap + -2] = [[ap + -54] + 1];
[ap + -6] = [[ap + -54] + 2];
[ap + -5] = [[ap + -54] + 3];
[ap + -4] = [[ap + -54] + 4];
[ap + -3] = [[ap + -54] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -54]) %}
[ap + 0] = [[ap + -54] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -55] + 6], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -55] + 6], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -61] + 8], ap++;
[ap + 0] = [[ap + -62] + 9], ap++;
ret;
ap += 46;
[ap + 0] = [ap + -47] + 16040, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 8;
ap += 47;
[ap + 0] = [ap + -54] + 16330, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 189;
call rel 39155;
[ap + 0] = [ap + -1] + 39154, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 148550, ap++;
call rel 6976;
[ap + 0] = [ap + -215] + 3, ap++;
[ap + 0] = [ap + -210] + [ap + -8], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 204;
[ap + 0] = [[ap + -221] + 4], ap++;
call rel 39132;
[ap + 0] = [ap + -1] + 39131, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 150610, ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -231] + 8, ap++;
[ap + 0] = [[ap + -232] + 6], ap++;
[ap + 0] = [[ap + -233] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 209;
call rel 39105;
[ap + 0] = [ap + -1] + 39104, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161360, ap++;
call rel 31895;
[ap + 0] = [ap + -274] + 4, ap++;
[ap + 0] = [ap + -227] + [ap + -8], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 213;
call rel 39081;
[ap + 0] = [ap + -1] + 39080, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161890, ap++;
call rel 7055;
[ap + 0] = [ap + -274] + 3, ap++;
[ap + 0] = [ap + -231] + [ap + -8], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 207;
call rel 39057;
[ap + 0] = [ap + -1] + 39056, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161350, ap++;
call rel 7040;
[ap + 0] = [ap + -269] + 3, ap++;
[ap + 0] = [ap + -229] + [ap + -8], ap++;
[ap + 0] = [ap + -231], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 223;
[ap + 0] = [[ap + -259] + 9], ap++;
call rel 39034;
[ap + 0] = [ap + -1] + 39033, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 163500, ap++;
[ap + 0] = [ap + -269], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -269] + 13, ap++;
[ap + 0] = [[ap + -270] + 11], ap++;
[ap + 0] = [[ap + -271] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 239;
[ap + 0] = [[ap + -264] + 2], ap++;
call rel 39006;
[ap + 0] = [ap + -1] + 39005, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 175440, ap++;
[ap + 0] = [ap + -274], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -275] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -277] + 4], ap++;
[ap + 0] = [[ap + -278] + 5], ap++;
ret;
ap += 246;
call rel 38984;
[ap + 0] = [ap + -1] + 38983, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 186770, ap++;
[ap + 0] = [ap + -254] + [ap + -1], ap++;
[ap + 0] = [ap + -258], ap++;
[ap + 0] = [ap + -258], ap++;
jmp rel 17;
ap += 247;
call rel 38967;
[ap + 0] = [ap + -1] + 38966, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 187060, ap++;
[ap + 0] = [ap + -270] + [ap + -1], ap++;
[ap + 0] = [ap + -258], ap++;
[ap + 0] = [ap + -258], ap++;
[ap + 0] = [ap + -274], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -275], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 344 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[fp + -5] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -10] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -7] = [[fp + -10] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 30176;
[ap + 0] = [[ap + -238] + 0], ap++;
[ap + 0] = [[ap + -239] + 1], ap++;
[ap + 0] = [[ap + -240] + 2], ap++;
[ap + 0] = [[ap + -241] + 3], ap++;
[ap + 0] = [[ap + -242] + 4], ap++;
[ap + 0] = [fp + -8] + 6, ap++;
jmp rel 262 if [ap + -19] != 0;
[ap + 0] = [ap + -21], ap++;
jmp rel 242 if [ap + -19] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 7, ap++;
call rel 31582;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 153;
call rel 38867;
[ap + 0] = [ap + -1] + 38866, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 123130, ap++;
call rel 31675;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = [ap + -168] + [ap + -8], ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
jmp rel 25 if [fp + -3] != 0;
ap += 152;
call rel 38841;
[ap + 0] = [ap + -1] + 38840, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 122940, ap++;
call rel 28244;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = [ap + -167] + [ap + -8], ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -30] + 0];
[ap + -2] = [[ap + -30] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -30]) %}
[ap + 0] = [[ap + -30] + 3], ap++;
jmp rel 154 if [ap + -1] != 0;
[ap + 0] = [[ap + -31] + 2], ap++;
[ap + 0] = [[ap + -32] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 1012635714697471519253023535212382154581791834426931108059169889742058836701, ap++;
[ap + -1] = [[ap + -16] + 0];
[fp + -6] = [[ap + -16] + 1];
[ap + 0] = [[ap + -16] + 2], ap++;
[ap + -1] = [[ap + -17] + 3];
[fp + -5] = [[ap + -17] + 4];
[ap + 0] = [[ap + -17] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -43] + 0], ap++;
[ap + -4] = [[ap + -44] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -46] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -43] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -45] + 1], ap++;
[ap + -7] = [[ap + -46] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -46] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -46] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [[ap + -22] + 1], ap++;
[ap + 0] = 0, ap++;
call rel 31581;
[ap + 0] = [ap + -123] + 6, ap++;
jmp rel 75 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 64 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -138], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 31282;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -54] + 0];
[ap + -2] = [[ap + -54] + 1];
[ap + -6] = [[ap + -54] + 2];
[ap + -5] = [[ap + -54] + 3];
[ap + -4] = [[ap + -54] + 4];
[ap + -3] = [[ap + -54] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -54]) %}
[ap + 0] = [[ap + -54] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -55] + 6], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -55] + 6], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -61] + 8], ap++;
[ap + 0] = [[ap + -62] + 9], ap++;
ret;
ap += 46;
[ap + 0] = [ap + -47] + 16040, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 8;
ap += 47;
[ap + 0] = [ap + -54] + 16330, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 154;
[ap + 0] = [[ap + -185] + 2], ap++;
call rel 38657;
[ap + 0] = [ap + -1] + 38656, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 112920, ap++;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -196] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -198] + 4], ap++;
[ap + 0] = [[ap + -199] + 5], ap++;
ret;
ap += 162;
call rel 38635;
[ap + 0] = [ap + -1] + 38634, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 124440, ap++;
[ap + 0] = [ap + -170] + [ap + -1], ap++;
[ap + 0] = [ap + -179], ap++;
[ap + 0] = [ap + -179], ap++;
jmp rel 17;
ap += 163;
call rel 38618;
[ap + 0] = [ap + -1] + 38617, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 124730, ap++;
[ap + 0] = [ap + -191] + [ap + -1], ap++;
[ap + 0] = [ap + -179], ap++;
[ap + 0] = [ap + -179], ap++;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 410;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 38593;
[ap + 0] = [ap + -1] + 38592, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 268370, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 1242 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 23464229998776571929713078215531096477380508348102882741883228885676337849, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -9] = [[fp + -7] + 6];
[ap + -8] = [[fp + -7] + 7];
[ap + -7] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 1200 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 1159;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 1124 if [ap + -3] != 0;
[ap + 0] = 1012635714697471519253023535212382154581791834426931108059169889742058836701, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[fp + -5] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 31847;
[ap + 0] = [fp + -8] + 6, ap++;
jmp rel 1050 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 1030 if [ap + -11] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 5, ap++;
jmp rel [ap + -7];
jmp rel 83;
jmp rel 42;
[ap + 0] = [ap + -2] + 200, ap++;
jmp rel [ap + -2];
jmp rel 22;
jmp rel 5;
[ap + 0] = [ap + -1], ap++;
jmp rel 118;
ap += 824;
call rel 38439;
[ap + 0] = [ap + -1] + 38438, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568260, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
jmp rel 91;
ap += 824;
call rel 38424;
[ap + 0] = [ap + -1] + 38423, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568260, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
jmp rel 76;
[ap + 0] = [ap + -2], ap++;
jmp rel [ap + -2];
jmp rel 22;
jmp rel 17;
ap += 824;
call rel 38403;
[ap + 0] = [ap + -1] + 38402, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568460, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
jmp rel 55;
[ap + 0] = [ap + -1], ap++;
jmp rel 64;
ap += 824;
call rel 38385;
[ap + 0] = [ap + -1] + 38384, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568360, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
jmp rel 37;
[ap + 0] = [ap + -2] + 100, ap++;
jmp rel [ap + -2];
jmp rel 43;
jmp rel 17;
ap += 824;
call rel 38363;
[ap + 0] = [ap + -1] + 38362, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568360, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
jmp rel 15;
ap += 824;
call rel 38348;
[ap + 0] = [ap + -1] + 38347, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568360, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
call rel 32515;
[ap + 0] = [ap + -856], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -857], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -2] = [[ap + -18] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 3], ap++;
jmp rel 866 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 2], ap++;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 507418635482677637483397576806434119548236899667705150952610177267809022874, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -29] + 5];
[ap + -7] = [[ap + -29] + 6];
[ap + -6] = [[ap + -29] + 7];
[ap + -5] = [[ap + -29] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29] + 5) %}
[ap + 0] = [[ap + -29] + 10], ap++;
jmp rel 818 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 9], ap++;
[ap + 0] = [[ap + -31] + 11], ap++;
[ap + 0] = [ap + -32] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -40] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -42] + 1], ap++;
[ap + -5] = [[ap + -43] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 775 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -37] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -38] + 1];
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -28] + memory[ap + -6]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -29] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -42] + 2];
jmp rel 736;
[ap + 1] = [ap + -29] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[ap + -42] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -46] + 3];
jmp rel 699;
[ap + -1] = [[ap + -45] + 3];
[ap + 0] = 1012635714697471519253023535212382154581791834426931108059169889742058836701, ap++;
[ap + -1] = [[ap + -33] + 0];
[fp + -6] = [[ap + -33] + 1];
[ap + 0] = [[ap + -33] + 2], ap++;
[ap + -1] = [[ap + -34] + 3];
[fp + -5] = [[ap + -34] + 4];
[ap + 0] = [[ap + -34] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -52] + 4], ap++;
[ap + -4] = [[ap + -53] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -55] + 6];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -52] + 4], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -54] + 5], ap++;
[ap + -7] = [[ap + -55] + 6];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -55] + 7, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -39], ap++;
call rel 31022;
[ap + 0] = [ap + -140] + 6, ap++;
jmp rel 615 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 595 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 202 if [fp + -3] != 0;
ap += 238;
call rel 38181;
[ap + 0] = [ap + -1] + 38180, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 143230, ap++;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -249] + 0];
[fp + -6] = [[ap + -249] + 1];
[ap + 0] = [[ap + -249] + 2], ap++;
[ap + -1] = [[ap + -250] + 3];
[fp + -5] = [[ap + -250] + 4];
[ap + 0] = [[ap + -250] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -262] + 0], ap++;
[ap + -4] = [[ap + -263] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -265] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -262] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -264] + 1], ap++;
[ap + -7] = [[ap + -265] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -265] + 3, ap++;
[ap + 0] = [ap + -257] + [ap + -12], ap++;
[ap + 0] = [ap + -265], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 29412;
[ap + 0] = [ap + -485] + 6, ap++;
jmp rel 116 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 96 if [ap + -14] != 0;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -6] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[fp + -5] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -25] + 0], ap++;
[ap + -4] = [[ap + -26] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -28] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -25] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -27] + 1], ap++;
[ap + -7] = [[ap + -28] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
call rel 28297;
[ap + 0] = [ap + -159] + 6, ap++;
jmp rel 19 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 8 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 267;
ap += 54;
[ap + 0] = [ap + -55] + 27160, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59], ap++;
jmp rel 8;
ap += 55;
[ap + 0] = [ap + -62] + 27450, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 206;
call rel 38022;
[ap + 0] = [ap + -1] + 38021, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160680, ap++;
[ap + 0] = [ap + -214] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
jmp rel 17;
ap += 207;
call rel 38005;
[ap + 0] = [ap + -1] + 38004, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160970, ap++;
[ap + 0] = [ap + -230] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -235], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -4] + 0];
[fp + -6] = [[ap + -4] + 1];
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + -1] = [[ap + -5] + 3];
[fp + -5] = [[ap + -5] + 4];
[ap + 0] = [[ap + -5] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 29224;
[ap + 0] = [ap + -240] + 6, ap++;
jmp rel 318 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 298 if [ap + -14] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 7, ap++;
call rel 30635;
[ap + 0] = [ap + -6], ap++;
jmp rel 20 if [ap + -2] != 0;
ap += 391;
call rel 37920;
[ap + 0] = [ap + -1] + 37919, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 276340, ap++;
[ap + 0] = [ap + -422], ap++;
[ap + 0] = [ap + -400] + [ap + -2], ap++;
[ap + 0] = [ap + -408], ap++;
[ap + 0] = [ap + -423], ap++;
jmp rel 124;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -9] + 0];
[fp + -6] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + -1] = [[ap + -10] + 3];
[fp + -5] = [[ap + -10] + 4];
[ap + 0] = [[ap + -10] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -31] + 0], ap++;
[ap + -4] = [[ap + -32] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -34] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -31] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -33] + 1], ap++;
[ap + -7] = [[ap + -34] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -34] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 29145;
[ap + 0] = [ap + -245] + 6, ap++;
jmp rel 198 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 178 if [ap + -14] != 0;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -6] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[fp + -5] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -25] + 0], ap++;
[ap + -4] = [[ap + -26] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -28] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -25] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -27] + 1], ap++;
[ap + -7] = [[ap + -28] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
call rel 28030;
[ap + 0] = [ap + -159] + 6, ap++;
jmp rel 101 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 90 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -4] = [[ap + -2] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -2]) %}
[ap + 0] = [[ap + -2] + 3], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -790], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 30311;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -52] + 5];
[ap + -2] = [[ap + -52] + 6];
[ap + -6] = [[ap + -52] + 7];
[ap + -5] = [[ap + -52] + 8];
[ap + -4] = [[ap + -52] + 9];
[ap + -3] = [[ap + -52] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -52] + 5) %}
[ap + 0] = [[ap + -52] + 12], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -53] + 11], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -53] + 11], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 13], ap++;
[ap + 0] = [[ap + -60] + 14], ap++;
ret;
ap += 50;
[ap + 0] = [[ap + -53] + 2], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2] + 16500, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 4], ap++;
[ap + 0] = [[ap + -60] + 5], ap++;
ret;
ap += 54;
[ap + 0] = [ap + -55] + 27060, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59], ap++;
jmp rel 8;
ap += 55;
[ap + 0] = [ap + -62] + 27350, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 206;
call rel 37673;
[ap + 0] = [ap + -1] + 37672, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160580, ap++;
[ap + 0] = [ap + -214] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
jmp rel 17;
ap += 207;
call rel 37656;
[ap + 0] = [ap + -1] + 37655, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160870, ap++;
[ap + 0] = [ap + -230] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -235], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 451;
call rel 37632;
[ap + 0] = [ap + -1] + 37631, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 304640, ap++;
[ap + 0] = [ap + -459] + [ap + -1], ap++;
[ap + 0] = [ap + -463], ap++;
[ap + 0] = [ap + -463], ap++;
jmp rel 17;
ap += 452;
call rel 37615;
[ap + 0] = [ap + -1] + 37614, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 304930, ap++;
[ap + 0] = [ap + -475] + [ap + -1], ap++;
[ap + 0] = [ap + -463], ap++;
[ap + 0] = [ap + -463], ap++;
[ap + 0] = [ap + -479], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -465], ap++;
[ap + 0] = [ap + -480], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 691;
call rel 37591;
[ap + 0] = [ap + -1] + 37590, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 447850, ap++;
[ap + 0] = [ap + -699] + [ap + -1], ap++;
[ap + 0] = [ap + -703], ap++;
[ap + 0] = [ap + -703], ap++;
jmp rel 17;
ap += 692;
call rel 37574;
[ap + 0] = [ap + -1] + 37573, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 448140, ap++;
[ap + 0] = [ap + -706] + [ap + -1], ap++;
[ap + 0] = [ap + -703], ap++;
[ap + 0] = [ap + -703], ap++;
[ap + 0] = [ap + -710], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -705], ap++;
[ap + 0] = [ap + -711], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 797;
call rel 37550;
[ap + 0] = [ap + -1] + 37549, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 544350, ap++;
call rel 30340;
[ap + 0] = [ap + -856] + 4, ap++;
[ap + 0] = [ap + -815] + [ap + -8], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -825], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 801;
call rel 37526;
[ap + 0] = [ap + -1] + 37525, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 544880, ap++;
call rel 5500;
[ap + 0] = [ap + -856] + 3, ap++;
[ap + 0] = [ap + -819] + [ap + -8], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -825], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 795;
call rel 37502;
[ap + 0] = [ap + -1] + 37501, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 544340, ap++;
call rel 5485;
[ap + 0] = [ap + -851] + 3, ap++;
[ap + 0] = [ap + -817] + [ap + -8], ap++;
[ap + 0] = [ap + -819], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 811;
[ap + 0] = [[ap + -841] + 9], ap++;
call rel 37479;
[ap + 0] = [ap + -1] + 37478, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 546490, ap++;
[ap + 0] = [ap + -851], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -851] + 13, ap++;
[ap + 0] = [[ap + -852] + 11], ap++;
[ap + 0] = [[ap + -853] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 827;
[ap + 0] = [[ap + -846] + 2], ap++;
call rel 37451;
[ap + 0] = [ap + -1] + 37450, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 558430, ap++;
[ap + 0] = [ap + -856], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -857] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -859] + 4], ap++;
[ap + 0] = [[ap + -860] + 5], ap++;
ret;
ap += 831;
call rel 37429;
[ap + 0] = [ap + -1] + 37428, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 569490, ap++;
[ap + 0] = [ap + -839] + [ap + -1], ap++;
[ap + 0] = [ap + -843], ap++;
[ap + 0] = [ap + -843], ap++;
jmp rel 17;
ap += 832;
call rel 37412;
[ap + 0] = [ap + -1] + 37411, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 569780, ap++;
[ap + 0] = [ap + -852] + [ap + -1], ap++;
[ap + 0] = [ap + -843], ap++;
[ap + 0] = [ap + -843], ap++;
[ap + 0] = [ap + -856], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -857], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 994;
call rel 37388;
[ap + 0] = [ap + -1] + 37387, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 672420, ap++;
call rel 30187;
[ap + 0] = [ap + -1009], ap++;
[ap + 0] = [ap + -1009] + [ap + -8], ap++;
[ap + 0] = [ap + -1019], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 996;
call rel 37367;
[ap + 0] = [ap + -1] + 37366, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 672500, ap++;
call rel 5188;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -1017] + [ap + -8], ap++;
[ap + 0] = [ap + -1019], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 1011;
[ap + 0] = [[fp + -7] + 9], ap++;
call rel 37344;
[ap + 0] = [ap + -1] + 37343, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 674560, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
jmp rel 21;
ap += 1023;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 37323;
[ap + 0] = [ap + -1] + 37322, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 686240, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 238 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 205 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 173;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 147 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -5] = [[ap + -15] + 1];
[ap + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
[ap + -2] = [[ap + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 6], ap++;
jmp rel 117 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -2] = [[ap + -19] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 10], ap++;
jmp rel 95 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [[ap + -21] + 11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -29] + 12];
[ap + -7] = [[ap + -29] + 13];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29] + 12) %}
[ap + 0] = [[ap + -29] + 15], ap++;
jmp rel 67 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 14], ap++;
[ap + 0] = [[ap + -31] + 16], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [[ap + -12] + 1], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 29728;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -80] + 17];
[ap + -2] = [[ap + -80] + 18];
[ap + -6] = [[ap + -80] + 19];
[ap + -5] = [[ap + -80] + 20];
[ap + -4] = [[ap + -80] + 21];
[ap + -3] = [[ap + -80] + 22];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -80] + 17) %}
[ap + 0] = [[ap + -80] + 24], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -81] + 23], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -84] + 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -81] + 23], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -84] + 27, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 25], ap++;
[ap + 0] = [[ap + -87] + 26], ap++;
ret;
ap += 51;
[ap + 0] = [[ap + -81] + 14], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 16590, ap++;
[ap + 0] = [ap + -84] + 18, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 16], ap++;
[ap + 0] = [[ap + -87] + 17], ap++;
ret;
ap += 61;
[ap + 0] = [[ap + -81] + 9], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 27790, ap++;
[ap + 0] = [ap + -84] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 11], ap++;
[ap + 0] = [[ap + -87] + 12], ap++;
ret;
ap += 65;
[ap + 0] = [[ap + -81] + 5], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 38450, ap++;
[ap + 0] = [ap + -84] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 7], ap++;
[ap + 0] = [[ap + -87] + 8], ap++;
ret;
ap += 61;
call rel 31277;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -69] + 48490, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 63;
call rel 4909;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -77] + 48570, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 78;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 50630, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 90;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 62310, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 238 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 205 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 173;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 147 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -5] = [[ap + -15] + 1];
[ap + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
[ap + -2] = [[ap + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 6], ap++;
jmp rel 117 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -2] = [[ap + -19] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 10], ap++;
jmp rel 95 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [[ap + -21] + 11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -29] + 12];
[ap + -7] = [[ap + -29] + 13];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29] + 12) %}
[ap + 0] = [[ap + -29] + 15], ap++;
jmp rel 67 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 14], ap++;
[ap + 0] = [[ap + -31] + 16], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [[ap + -12] + 1], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 29467;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -80] + 17];
[ap + -2] = [[ap + -80] + 18];
[ap + -6] = [[ap + -80] + 19];
[ap + -5] = [[ap + -80] + 20];
[ap + -4] = [[ap + -80] + 21];
[ap + -3] = [[ap + -80] + 22];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -80] + 17) %}
[ap + 0] = [[ap + -80] + 24], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -81] + 23], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -84] + 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -81] + 23], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -84] + 27, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 25], ap++;
[ap + 0] = [[ap + -87] + 26], ap++;
ret;
ap += 51;
[ap + 0] = [[ap + -81] + 14], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 16590, ap++;
[ap + 0] = [ap + -84] + 18, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 16], ap++;
[ap + 0] = [[ap + -87] + 17], ap++;
ret;
ap += 61;
[ap + 0] = [[ap + -81] + 9], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 27790, ap++;
[ap + 0] = [ap + -84] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 11], ap++;
[ap + 0] = [[ap + -87] + 12], ap++;
ret;
ap += 65;
[ap + 0] = [[ap + -81] + 5], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 38450, ap++;
[ap + 0] = [ap + -84] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 7], ap++;
[ap + 0] = [[ap + -87] + 8], ap++;
ret;
ap += 61;
call rel 31016;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -69] + 48490, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 63;
call rel 4648;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -77] + 48570, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 78;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 50630, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 90;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 62310, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 28017;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 50 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 20 if [ap + -14] != 0;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = 1012635714697471519253023535212382154581791834426931108059169889742058836701, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 29983;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 41 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 17 if [ap + -11] != 0;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 28 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 640, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1550153947432118614972336932050404137597350876889446769137856290847321999817, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 30571;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 4203;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 507418635482677637483397576806434119548236899667705150952610177267809022874, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 30418;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 4050;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 23464229998776571929713078215531096477380508348102882741883228885676337849, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 30265;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 3897;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 30112;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 3744;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 3650;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 15430 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768196026, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 566;
[fp + -6] = [ap + 0] + 15430, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 524 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 503;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 456 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 435;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 388 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 367;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 320 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 299;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 252 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 228 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 183 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 159 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 114 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 90 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 6660;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 35419;
[ap + 0] = [ap + -1] + 35418, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 90600 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 90600, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 39;
[ap + -3] = [ap + 0] + 90600, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -6005;
[ap + 0] = [ap + -74] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6606;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 6658;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 2440, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3950, ap++;
call rel 6648;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 4280, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5790, ap++;
call rel 6638;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 6590, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7900, ap++;
call rel 6628;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 8700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 10010, ap++;
call rel 6618;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 10810, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 12120, ap++;
call rel 6608;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 12920, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 14230, ap++;
call rel 6598;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 6462;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 8720 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202736, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 292;
[fp + -6] = [ap + 0] + 8720, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 249 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 221 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 187 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 159 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 29294;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -20], ap++;
jmp rel 135 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 117;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -11] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 95;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 6295;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35053;
[ap + 0] = [ap + -1] + 35052, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 423990, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 0];
jmp rel 42;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -6143;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6233;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -32] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6320;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -11] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6317;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -10] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6314;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4240, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5850, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 5910, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7520, ap++;
call rel 6291;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6154;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 223;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 180 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 152 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 90 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 6013;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 34771;
[ap + 0] = [ap + -1] + 34770, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 358940, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 36;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -5418;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5957;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 6051;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5914;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 223;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 180 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 152 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 90 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 5773;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 34531;
[ap + 0] = [ap + -1] + 34530, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 336640, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 36;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -5007;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5717;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 5811;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5674;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 6110 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205346, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 269;
[fp + -6] = [ap + 0] + 6110, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 226 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 198 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 164 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 136 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 113;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 91;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 5513;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 34271;
[ap + 0] = [ap + -1] + 34270, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 284870, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -24] + 0];
jmp rel 38;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -23] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -19], ap++;
call rel -4704;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5455;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5551;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5548;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1630, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3240, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3300, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4910, ap++;
call rel 5525;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5388;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 6710 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204746, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 284;
[fp + -6] = [ap + 0] + 6710, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 241 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 213 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 179 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 151 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 128;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 106;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 7 if [ap + -6] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 5214;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33972;
[ap + 0] = [ap + -1] + 33971, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 709470, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -28] + 0];
jmp rel 40;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -27] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + -8] = [ap + 0] + [ap + -20], ap++;
call rel -4633;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5154;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -35] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5250;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5247;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 3170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2230, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3840, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3900, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5510, ap++;
call rel 5224;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 5087;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 5048;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 33807;
[ap + 0] = [ap + -1] + 33806, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 74810 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 74810, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 74810, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -3513;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 5001;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 4990;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 4952;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 33711;
[ap + 0] = [ap + -1] + 33710, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 74810 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 74810, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 74810, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -3348;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 4905;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 4894;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 238;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 195 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 167 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 133 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 105 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 4754;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33512;
[ap + 0] = [ap + -1] + 33511, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 151310, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 51;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3292;
jmp rel 28 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 27740;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17] + 4300, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4683;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 4777;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4640;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 235;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 192 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 164 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 130 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 102 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 4499;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 33257;
[ap + 0] = [ap + -1] + 33256, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 109860, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 48;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3419;
jmp rel 25 if [ap + -9] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 27578;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 3100, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4431;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 4525;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 4388;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 122;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 4349;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 33108;
[ap + 0] = [ap + -1] + 33107, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 11800 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 74;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 4260;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 4249;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 4161;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 32920;
[ap + 0] = [ap + -1] + 32919, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3587;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 4113;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 4219;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 4083;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 3995;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 32754;
[ap + 0] = [ap + -1] + 32753, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3600;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 3947;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 4053;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 3917;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 3830;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 32589;
[ap + 0] = [ap + -1] + 32588, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3612;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 3782;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 3888;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 3752;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 3665;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 32424;
[ap + 0] = [ap + -1] + 32423, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3624;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 3617;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 3723;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 3587;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 3549;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 32308;
[ap + 0] = [ap + -1] + 32307, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 64;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 3446;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 3435;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 22610715435904354515383121033992889788782, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1629273753787506768452800773325105661516873381390996170084, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1791405437119615412195600990871197662127112784418493316458246663923044, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 24860744534111126227753980461782209377609661023612532, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1629273753787506768451445706888548985317034942615575948396, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 28356853423116116984908809580994559823444, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1629273753787506768451445706888548985317034942585310963557, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1797457979346250507469519283013591639424763671398156948307, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6821744638738647269205140993062218398647620, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 28689118660985771173488966331637788001604, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 27334677690423819155950385565997457190735654662660361113775207283, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7021320231821291044714540815144243927572297029365088596, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7021320231821291044714540815144243927572303583417685064, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 389667306031054589738505090297814264154276775236, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39879774624079483812136948410799859986295, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 476442828812030857794232422692155113556837216824, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155801121779312277930962096923588980599, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7269940625183577871052929410204041567614516, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 24860744534111126227855471040361060579246392903099748, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 28689118660985769950173747617152286082372, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
jmp rel [fp + -15];
jmp rel 366;
jmp rel 348;
jmp rel 327;
jmp rel 306;
jmp rel 290;
jmp rel 274;
jmp rel 256;
jmp rel 239;
jmp rel 219;
jmp rel 199;
jmp rel 183;
jmp rel 157;
jmp rel 131;
jmp rel 110;
jmp rel 93;
jmp rel 76;
jmp rel 58;
jmp rel 38;
jmp rel 20;
ap += 14;
[ap + 0] = 185631648373696323871340269898181234959081722756420907532523577380688256667, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
ap += 14;
[ap + 0] = 1544756353317322932673626875543168107257951708597883652855811865510188352072, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 332179921243453210910181790182371334627364009827963852850444881716283197812, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
ap += 14;
[ap + 0] = 256167118440094046821422616871389217062972566117066273954849299624054663972, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 110176422068912368951175687763211024469103148474926073160045984479243854746, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 14;
[ap + 0] = 1143647299005641943641733294995775301136213150954621985344004025495856196058, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
[ap + 0] = 606811659813332433876493709172014493172264375712319669538606486437773289584, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 26233;
ret;
ap += 11;
[ap + 0] = 190773906925287750196538318962624868873430287618843366205028428522570561231, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
jmp rel 6 if [fp + -7] != 0;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
ap += 11;
[ap + 0] = 738202505548583149816369230699028017101894900214234226707701330593341528402, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
jmp rel 6 if [fp + -7] != 0;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
ap += 14;
[ap + 0] = 509549417648223859179470485411643110789099628436608877343164389163677637013, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 1292979561833029574796327779110771202287188457640898120197905642986914234271, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -5] + 3];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 14;
[ap + 0] = 1478569932705727695504493912006258875844633255791368125622845521322936433475, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -5] + 3];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 14;
[ap + 0] = 1079222603748390298961485120868356417917366390363843845796079532295983441108, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 370242577458668682545045119996190494682028311340263200323079561980133513667, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 14;
[ap + 0] = 823354103138492443550337668272372529756545148011696078766241514015439886545, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 571837779136638583489149421761533963043622681780631393029629127699002090734, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 2;
[ap + 0] = 1045715880609419845361721046141127838983216130882220638251643168253061799614, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 26071;
ret;
ap += 2;
[ap + 0] = 177415692359335050281089268357525463489778336800510443642864830944212901112, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 26065;
ret;
ap += 14;
[ap + 0] = 1262397277580125158297115993097959359115007855544927245423395050773677172270, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 1797473026234742600537044323972234128126205723586967788645398692823621948890, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 417094080969601732726293725067099871685695861477543860596340, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 97440392307930487957305509231198161220, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6997677488748497703986118947247873651958503727051149676726415680868, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 92117944572295576258520850704714908996, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 28689118660985784471803185376607912543556, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1486822392393958861651043958476372, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6385853550292532458817216907475373977325140, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1634778508874888309457207528313984858381571412, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 117798134488020114677022806644012779399038948386088489395244628, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39879774624085075084607933104993585622903, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 107136844357624680248190157979490358555992834656340, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1634778508874888309451143767997594582458127176, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 24944740430830204917310739752351518774088, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1634778508874888309457188711196676171014033236, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6385853550292532458831604497822467826074969, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 112908681242816713646052454527835273432250324632900, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7269940625183576940180048306939577043858226, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1634778508874888309443937676559708042592341588, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 894 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 847;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 798 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 751;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 697 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 639 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 610;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 581 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 543 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 499;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 455 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 406 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 361;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 317 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 268 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 223;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 174 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 116 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -13] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 89;
[ap + 1] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[fp + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 60 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 25 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -119], ap++;
[ap + 0] = [ap + -106], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
ret;
call rel -1021;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 15;
[ap + 0] = [[ap + -28] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = [[ap + -32] + 6], ap++;
[ap + 0] = [[ap + -33] + 7], ap++;
jmp rel 58;
ap += 15;
call rel 25426;
[ap + 0] = [ap + -34] + 2, ap++;
[ap + 0] = [ap + -26] + 12360, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 15;
call rel -1058;
[ap + 0] = [ap + -34] + 3, ap++;
[ap + 0] = [ap + -29] + 12190, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 30;
[ap + 0] = [[ap + -44] + 4], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 14350, ap++;
[ap + 0] = [ap + -47] + 8, ap++;
[ap + 0] = [[ap + -48] + 6], ap++;
[ap + 0] = [[ap + -49] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 35;
call rel 25348;
[ap + 0] = [ap + -55] + 3, ap++;
[ap + 0] = [ap + -46] + 25100, ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 35;
call rel -1133;
[ap + 0] = [ap + -55] + 3, ap++;
[ap + 0] = [ap + -50] + 25200, ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 51;
[ap + 0] = [[ap + -65] + 4], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -2] + 27250, ap++;
[ap + 0] = [ap + -68] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -77] + 6], ap++;
[ap + 0] = [[ap + -78] + 7], ap++;
ret;
ap += 51;
call rel 25265;
[ap + 0] = [ap + -71] + 3, ap++;
[ap + 0] = [ap + -62] + 37550, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 51;
call rel -1216;
[ap + 0] = [ap + -71] + 3, ap++;
[ap + 0] = [ap + -66] + 37650, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 67;
[ap + 0] = [[ap + -81] + 4], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = [ap + -2] + 39700, ap++;
[ap + 0] = [ap + -84] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -93] + 6], ap++;
[ap + 0] = [[ap + -94] + 7], ap++;
ret;
ap += 67;
call rel 25182;
[ap + 0] = [ap + -87] + 2, ap++;
[ap + 0] = [ap + -78] + 50000, ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 63;
call rel -1317;
[ap + 0] = [ap + -82] + 3, ap++;
[ap + 0] = [ap + -77] + 49270, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 78;
[ap + 0] = [[ap + -92] + 4], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -2] + 51430, ap++;
[ap + 0] = [ap + -95] + 8, ap++;
[ap + 0] = [[ap + -96] + 6], ap++;
[ap + 0] = [[ap + -97] + 7], ap++;
jmp rel 58;
ap += 78;
call rel 25129;
[ap + 0] = [ap + -98] + 2, ap++;
[ap + 0] = [ap + -89] + 61730, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 79;
call rel -1355;
[ap + 0] = [ap + -98] + 3, ap++;
[ap + 0] = [ap + -93] + 61650, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 94;
[ap + 0] = [[ap + -106] + 4], ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [ap + -2] + 63810, ap++;
[ap + 0] = [ap + -109] + 8, ap++;
[ap + 0] = [[ap + -110] + 6], ap++;
[ap + 0] = [[ap + -111] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 98;
call rel -1564;
[ap + 0] = [ap + -117] + 3, ap++;
[ap + 0] = [ap + -112] + 74470, ap++;
[ap + 0] = [ap + -114], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 113;
[ap + 0] = [[ap + -125] + 4], ap++;
[ap + 0] = [ap + -117], ap++;
[ap + 0] = [ap + -2] + 76430, ap++;
[ap + 0] = [ap + -128] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -137] + 6], ap++;
[ap + 0] = [[ap + -138] + 7], ap++;
ret;
ap += 112;
call rel -1619;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -126] + 86640, ap++;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 127;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 88600, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel -972;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 1208 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 1188 if [ap + -11] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -9], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 60;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -13] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 465;
call rel 30413;
[ap + 0] = [ap + -1] + 30412, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 221130, ap++;
[ap + 0] = [ap + -478] + 1, ap++;
[ap + 0] = [ap + -476] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 26;
ap += 469;
call rel 30391;
[ap + 0] = [ap + -1] + 30390, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 221760, ap++;
[ap + 0] = [ap + -478], ap++;
[ap + 0] = [ap + -478] + [ap + -2], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = [ap + -498], ap++;
jmp rel 714;
ap += 6;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -27] + 0];
[ap + -2] = [[ap + -27] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -27]) %}
[ap + 0] = [[ap + -27] + 3], ap++;
jmp rel 1083 if [ap + -1] != 0;
[ap + 0] = [[ap + -28] + 2], ap++;
[ap + 0] = [[ap + -29] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -32] + 5, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + -4] = [ap + 1] + [ap + -27], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 11;
[ap + -1] = [[ap + -13] + 0];
ap += 1;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -33], ap++;
jmp rel 7;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -6] + 10, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + -1] = [ap + 1] + [ap + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 22;
[ap + -1] = [[ap + -5] + 0];
ap += 324;
call rel 30320;
[ap + 0] = [ap + -1] + 30319, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 110630, ap++;
[ap + 0] = [ap + -336] + 1, ap++;
[ap + 0] = [ap + -336] + [ap + -2], ap++;
[ap + 0] = [ap + -365], ap++;
[ap + 0] = [ap + -345], ap++;
jmp rel 574;
[ap + 0] = [ap + -5], ap++;
[ap + -11] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 1];
jmp rel 991;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1255235991522866093190400328027936434203587216166838216390545567461445183904, ap++;
[ap + -1] = [[ap + -37] + 0];
[fp + -3] = [[ap + -37] + 1];
[ap + 0] = [[ap + -37] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 2], ap++;
[ap + -4] = [[ap + -16] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -18] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -15] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -17] + 3], ap++;
[ap + -7] = [[ap + -18] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -47] + 3, ap++;
[ap + 0] = [ap + -21] + 5, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -29] + 0];
[ap + -5] = [[ap + -29] + 1];
[ap + -4] = [[ap + -29] + 2];
[ap + -6] = [[ap + -29] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29]) %}
[ap + 0] = [[ap + -29] + 5], ap++;
jmp rel 912 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [[ap + -31] + 6], ap++;
[ap + 0] = [ap + -32] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 860 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 820 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 773 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 12603;
[ap + 0] = [ap + -89], ap++;
jmp rel 736 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = 0, ap++;
call rel 12592;
[ap + 0] = [ap + -88], ap++;
jmp rel 702 if [ap + -2] != 0;
[ap + 0] = 1000000, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + -2] = [ap + 1] + [ap + -35], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -46] + 15];
jmp rel 60;
[ap + -1] = [[ap + -45] + 15];
[ap + 0] = [ap + -45] + 16, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -39] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -42], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 67;
call rel 30034;
[ap + 0] = [ap + -1] + 30033, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 50710, ap++;
[ap + 0] = [ap + -80] + 1, ap++;
[ap + 0] = [ap + -78] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 26;
ap += 71;
call rel 30012;
[ap + 0] = [ap + -1] + 30011, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 51340, ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = [ap + -80] + [ap + -2], ap++;
[ap + 0] = [ap + -318], ap++;
[ap + 0] = [ap + -302], ap++;
jmp rel 267;
ap += 6;
[ap + 0] = [ap + -52] + 16, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 289265142035346446792964224515421021597899183432205077896626966918004183212, ap++;
[ap + -1] = [[ap + -246] + 0];
[fp + -4] = [[ap + -246] + 1];
[ap + 0] = [[ap + -246] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -255] + 3, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -241] + 0];
[ap + -14] = [[ap + -241] + 1];
[ap + -4] = [[ap + -241] + 2];
[ap + -5] = [[ap + -241] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -241]) %}
[ap + 0] = [[ap + -241] + 5], ap++;
jmp rel 466 if [ap + -1] != 0;
[ap + 0] = [[ap + -242] + 4], ap++;
[ap + 0] = [[ap + -243] + 6], ap++;
[ap + 0] = [ap + -244] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 414 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 374 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 327 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [ap + -77], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -23] + [ap + -85], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 241;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 217 if [ap + -12] != 0;
[ap + 0] = 289265142035346446792964224515421021597899183432205077896626966918004183212, ap++;
[ap + -1] = [[ap + -40] + 0];
[fp + -4] = [[ap + -40] + 1];
[ap + 0] = [[ap + -40] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -5] = [[ap + -36] + 1];
[ap + -4] = [[ap + -36] + 2];
[ap + -6] = [[ap + -36] + 3];
[ap + -16] = [[ap + -36] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 6], ap++;
jmp rel 139 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -42] + 7];
[ap + -4] = [[ap + -42] + 8];
[ap + -3] = [[ap + -42] + 9];
[ap + -2] = [[ap + -42] + 10];
[ap + -21] = [[ap + -42] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42] + 7) %}
[ap + 0] = [[ap + -42] + 13], ap++;
jmp rel 103 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 12], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -47] + 14, ap++;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -4] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[fp + -3] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -364], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -390], ap++;
call rel 462;
[ap + 0] = [ap + -114] + 6, ap++;
jmp rel 24 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 16 if [ap + -5] != 0;
ap += 3;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -8] + 190, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 110;
[ap + 0] = [[ap + -153] + 12], ap++;
call rel 29633;
[ap + 0] = [ap + -1] + 29632, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 96660, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -162] + 16, ap++;
[ap + 0] = [[ap + -163] + 14], ap++;
[ap + 0] = [[ap + -164] + 15], ap++;
jmp rel 20;
ap += 116;
[ap + 0] = [[ap + -153] + 5], ap++;
call rel 29613;
[ap + 0] = [ap + -1] + 29612, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 107900, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -162] + 9, ap++;
[ap + 0] = [[ap + -163] + 7], ap++;
[ap + 0] = [[ap + -164] + 8], ap++;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 128;
call rel 29587;
[ap + 0] = [ap + -1] + 29586, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 120090, ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -139] + [ap + -2], ap++;
jmp rel 17;
ap += 131;
call rel 29571;
[ap + 0] = [ap + -1] + 29570, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 120460, ap++;
[ap + 0] = [ap + -150] + 2, ap++;
[ap + 0] = [ap + -143] + [ap + -2], ap++;
call rel -2476;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -168], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 134;
call rel 29545;
[ap + 0] = [ap + -1] + 29544, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 120810, ap++;
call rel -2490;
[ap + 0] = [ap + -160] + 3, ap++;
[ap + 0] = [ap + -155] + [ap + -8], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 154;
[ap + 0] = [[ap + -163] + 4], ap++;
call rel 29522;
[ap + 0] = [ap + -1] + 29521, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 123520, ap++;
[ap + 0] = [ap + -165], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -173] + 8, ap++;
[ap + 0] = [[ap + -174] + 6], ap++;
[ap + 0] = [[ap + -175] + 7], ap++;
jmp rel 48;
ap += 145;
call rel 29502;
[ap + 0] = [ap + -1] + 29501, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 132570, ap++;
call rel -2533;
[ap + 0] = [ap + -171] + 3, ap++;
[ap + 0] = [ap + -166] + [ap + -8], ap++;
[ap + 0] = [ap + -168], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 165;
[ap + 0] = [[ap + -407] + 4], ap++;
call rel 29474;
[ap + 0] = [ap + -1] + 29473, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 135280, ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -417] + 8, ap++;
[ap + 0] = [[ap + -418] + 6], ap++;
[ap + 0] = [[ap + -419] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 228;
call rel 29447;
[ap + 0] = [ap + -1] + 29446, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 155250, ap++;
call rel 12089;
[ap + 0] = [ap + -246], ap++;
[ap + 0] = [ap + -243] + [ap + -8], ap++;
[ap + 0] = [ap + -439], ap++;
[ap + 0] = [ap + -423], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 316;
call rel 29424;
[ap + 0] = [ap + -1] + 29423, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 168860, ap++;
call rel 12066;
[ap + 0] = [ap + -334], ap++;
[ap + 0] = [ap + -331] + [ap + -8], ap++;
[ap + 0] = [ap + -439], ap++;
[ap + 0] = [ap + -423], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 389;
call rel 29401;
[ap + 0] = [ap + -1] + 29400, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 180380, ap++;
call rel -2634;
[ap + 0] = [ap + -415] + 3, ap++;
[ap + 0] = [ap + -410] + [ap + -8], ap++;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 409;
[ap + 0] = [[ap + -418] + 4], ap++;
call rel 29378;
[ap + 0] = [ap + -1] + 29377, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 183090, ap++;
[ap + 0] = [ap + -420], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -428] + 8, ap++;
[ap + 0] = [[ap + -429] + 6], ap++;
[ap + 0] = [[ap + -430] + 7], ap++;
jmp rel 48;
ap += 400;
call rel 29358;
[ap + 0] = [ap + -1] + 29357, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 192140, ap++;
call rel -2677;
[ap + 0] = [ap + -426] + 3, ap++;
[ap + 0] = [ap + -421] + [ap + -8], ap++;
[ap + 0] = [ap + -423], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 420;
[ap + 0] = [[ap + -450] + 4], ap++;
call rel 29330;
[ap + 0] = [ap + -1] + 29329, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 194850, ap++;
[ap + 0] = [ap + -431], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -460] + 8, ap++;
[ap + 0] = [[ap + -461] + 6], ap++;
[ap + 0] = [[ap + -462] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -439], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 434;
call rel 29303;
[ap + 0] = [ap + -1] + 29302, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 207120, ap++;
call rel 23748;
[ap + 0] = [ap + -457] + 2, ap++;
[ap + 0] = [ap + -452] + [ap + -8], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = [ap + -466], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 459;
[ap + 0] = [[ap + -487] + 2], ap++;
call rel 29278;
[ap + 0] = [ap + -1] + 29277, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 210290, ap++;
[ap + 0] = [ap + -471], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = [ap + -498] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -500] + 4], ap++;
[ap + 0] = [[ap + -501] + 5], ap++;
ret;
ap += 472;
call rel 29256;
[ap + 0] = [ap + -1] + 29255, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 222300, ap++;
[ap + 0] = [ap + -480] + [ap + -1], ap++;
[ap + 0] = [ap + -484], ap++;
[ap + 0] = [ap + -484], ap++;
jmp rel 17;
ap += 473;
call rel 29239;
[ap + 0] = [ap + -1] + 29238, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 222590, ap++;
[ap + 0] = [ap + -493] + [ap + -1], ap++;
[ap + 0] = [ap + -484], ap++;
[ap + 0] = [ap + -484], ap++;
[ap + 0] = [ap + -497], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = [ap + -498], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 0];
[fp + -14] = [[fp + -13] + 1];
[fp + -12] = [[fp + -13] + 2];
[fp + -11] = [[fp + -13] + 3];
[fp + -10] = [[fp + -13] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13]) %}
[ap + 0] = [[fp + -13] + 6], ap++;
jmp rel 397 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 7];
[ap + -3] = [[fp + -13] + 8];
[fp + -12] = [[fp + -13] + 9];
[ap + -2] = [[fp + -13] + 10];
[fp + -9] = [[fp + -13] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 7) %}
[ap + 0] = [[fp + -13] + 13], ap++;
jmp rel 368 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 14];
[ap + -3] = [[fp + -13] + 15];
[fp + -12] = [[fp + -13] + 16];
[ap + -2] = [[fp + -13] + 17];
[fp + -8] = [[fp + -13] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 14) %}
[ap + 0] = [[fp + -13] + 20], ap++;
jmp rel 334 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 19], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -13] + 21, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -15] + 0];
jmp rel 302;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -15] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -7] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 272 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 240;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 207 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 177;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 144 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 114;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 76 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 19 if [ap + -1] != 0;
ap += 5;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 450, ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = [[ap + -14] + 7], ap++;
[ap + 0] = [[ap + -15] + 8], ap++;
jmp rel 28;
ap += 5;
call rel 23433;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16] + 10850, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11850, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [[ap + -27] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 17;
call rel 23397;
[ap + 0] = [ap + -33] + 1, ap++;
[ap + 0] = [ap + -28] + 22700, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 29;
[ap + 0] = [[ap + -39] + 5], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -2] + 24150, ap++;
[ap + 0] = [ap + -42] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -45] + 7], ap++;
[ap + 0] = [[ap + -46] + 8], ap++;
ret;
ap += 29;
call rel 23366;
[ap + 0] = [ap + -45] + 1, ap++;
[ap + 0] = [ap + -40] + 34550, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 41;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -2] + 36000, ap++;
[ap + 0] = [ap + -54] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -57] + 7], ap++;
[ap + 0] = [[ap + -58] + 8], ap++;
ret;
ap += 41;
call rel 23335;
[ap + 0] = [ap + -58] + 1, ap++;
[ap + 0] = [ap + -52] + 46400, ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 49;
[ap + 0] = [[ap + -59] + 5], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -2] + 47390, ap++;
[ap + 0] = [ap + -62] + 9, ap++;
[ap + 0] = [[ap + -63] + 7], ap++;
[ap + 0] = [[ap + -64] + 8], ap++;
jmp rel 28;
ap += 54;
call rel 23307;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = [ap + -65] + 58340, ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 62;
[ap + 0] = [[fp + -13] + 19], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -2] + 59430, ap++;
[ap + 0] = [fp + -13] + 23, ap++;
[ap + 0] = [[fp + -13] + 21], ap++;
[ap + 0] = [[fp + -13] + 22], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 72;
[ap + 0] = [[fp + -13] + 12], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -2] + 70930, ap++;
[ap + 0] = [fp + -13] + 16, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 14], ap++;
[ap + 0] = [[fp + -13] + 15], ap++;
ret;
ap += 77;
[ap + 0] = [[fp + -13] + 5], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -2] + 81980, ap++;
[ap + 0] = [fp + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 7], ap++;
[ap + 0] = [[fp + -13] + 8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1746372433662256061367306211266439538167861070, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 117798134488020114677022806644013095979210496916174808341106260, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 447071342657430793269083037582199378555019873349, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 124351606139963026378564014760732969027641213285770151247615703089022185780, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 124351606139963026378564014760732969027641213285770151247615703089022185779, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 124351606139963026378564014760732969027641213285770151247615703089022185778, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 124351606139963026378564014760732969027641213285770151247615703089022185777, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 124351606139963026378564014760732969027641213285770151247615703089022185776, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492921, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492920, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492919, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492918, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492917, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492916, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492915, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 376;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 345;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 314;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 267 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 244 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -5] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 193 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 170 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 96 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 45 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -14] + 3, ap++;
jmp rel 5;
ap += 8;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 9;
[ap + 0] = [ap + -23] + 3, ap++;
jmp rel 5;
ap += 17;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 18;
[ap + 0] = [ap + -32] + 3, ap++;
jmp rel 5;
ap += 26;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 27;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 5;
ap += 35;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 43;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 47;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 51;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -12] = [[fp + -3] + 0];
[fp + -11] = [[fp + -3] + 1];
[fp + -10] = [[fp + -3] + 2];
[fp + -9] = [[fp + -3] + 3];
[fp + -8] = [[fp + -3] + 4];
[fp + -7] = [[fp + -3] + 5];
[fp + -6] = [[fp + -3] + 6];
[fp + -5] = [[fp + -3] + 7];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 27086565855670123880368450303589862103600491821230196, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = 1840 <= memory[fp + -5] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + 340282366920938463463374607431768209616, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 50;
[fp + -5] = [ap + 0] + 1840, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 10 if [fp + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2340, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 12;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] * 256, ap++;
[ap + 0] = [ap + -4], ap++;
call rel -41;
ret;
call rel 979;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 870, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
call rel -612;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 116335914511053438230451110484119729132151894677147593865126763, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -13] = [[fp + -12] + 1];
[fp + -11] = [[fp + -12] + 2];
[fp + -10] = [[fp + -12] + 3];
[fp + -9] = [[fp + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12]) %}
[ap + 0] = [[fp + -12] + 6], ap++;
jmp rel 323 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 7];
[ap + -3] = [[fp + -12] + 8];
[fp + -11] = [[fp + -12] + 9];
[ap + -2] = [[fp + -12] + 10];
[fp + -8] = [[fp + -12] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 7) %}
[ap + 0] = [[fp + -12] + 13], ap++;
jmp rel 294 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -10] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 14];
[ap + -3] = [[fp + -12] + 15];
[fp + -11] = [[fp + -12] + 16];
[ap + -2] = [[fp + -12] + 17];
[fp + -7] = [[fp + -12] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 14) %}
[ap + 0] = [[fp + -12] + 20], ap++;
jmp rel 265 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -12] + 21, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -14] + 0];
jmp rel 233;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -14] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
[ap + 0] = [fp + -14] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -11] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 200 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 170;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -11] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 137 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 107;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -11] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -11] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel 22382;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
ret;
ap += 12;
call rel 22351;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22150, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 24;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 23600, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 7], ap++;
[ap + 0] = [[ap + -41] + 8], ap++;
ret;
ap += 24;
call rel 22320;
[ap + 0] = [ap + -40] + 1, ap++;
[ap + 0] = [ap + -35] + 34000, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -46] + 5], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 35450, ap++;
[ap + 0] = [ap + -49] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
[ap + 0] = [[ap + -53] + 8], ap++;
ret;
ap += 36;
call rel 22289;
[ap + 0] = [fp + -14] + 1, ap++;
[ap + 0] = [ap + -47] + 45850, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 49;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -2] + 47390, ap++;
[ap + 0] = [fp + -12] + 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 21], ap++;
[ap + 0] = [[fp + -12] + 22], ap++;
ret;
ap += 54;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -2] + 58440, ap++;
[ap + 0] = [fp + -12] + 16, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 14], ap++;
[ap + 0] = [[fp + -12] + 15], ap++;
ret;
ap += 59;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -2] + 69490, ap++;
[ap + 0] = [fp + -12] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 7], ap++;
[ap + 0] = [[fp + -12] + 8], ap++;
ret;
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 536 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[fp + 0] = [[fp + -4] + 6];
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -5] = [[fp + -7] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 497 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[fp + -7] + 0];
[ap + 0] = [fp + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [ap + -3], ap++;
[fp + 0] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 2];
jmp rel 18;
[ap + -1] = [[fp + -7] + 2];
call rel 27732;
[ap + 0] = [ap + -1] + 27731, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 57040, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -10] + [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 155;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 163567562514348492070331390455692180584235264620730029616953355796637619313, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -5] = [[ap + -13] + 1];
[ap + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 426 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 387 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 1] + [fp + 0], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 14;
[ap + -1] = [[ap + -13] + 2];
ap += 16;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = [ap + -21] + 12350, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 0, ap++;
jmp rel 60;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 163567562514348492070331390455692180584235264620730029616953355796637619313, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -5] = [[ap + -14] + 1];
[ap + -4] = [[ap + -14] + 2];
[ap + -3] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 318 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 279 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -3], ap++;
[fp + 0] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 2];
jmp rel 244;
[ap + -1] = [[ap + -12] + 2];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
call rel 22047;
jmp rel 207 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 21 if [ap + -4] != 0;
call rel 27576;
[ap + 0] = [ap + -1] + 27575, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 27050, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[fp + 0] = [ap + 1] + [ap + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 156;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -17] + 1];
jmp rel 124;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -17] + 1];
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[ap + -16] + 0];
[fp + -3] = [[ap + -16] + 1];
[ap + 0] = [[ap + -16] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -23] + 2], ap++;
[ap + -4] = [[ap + -24] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -26] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -23] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -25] + 3], ap++;
[ap + -7] = [[ap + -26] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [ap + -29] + 5, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -28] + 0];
[ap + -5] = [[ap + -28] + 1];
[ap + -4] = [[ap + -28] + 2];
[ap + -6] = [[ap + -28] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28]) %}
[ap + 0] = [[ap + -28] + 5], ap++;
jmp rel 58 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [[ap + -37] + 6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 253;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -51] + 7];
[ap + -2] = [[ap + -51] + 8];
[ap + -6] = [[ap + -51] + 9];
[ap + -5] = [[ap + -51] + 10];
[ap + -4] = [[ap + -51] + 11];
[ap + -3] = [[ap + -51] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -51] + 7) %}
[ap + 0] = [[ap + -51] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -52] + 13], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -56] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -52] + 13], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -56] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -58] + 15], ap++;
[ap + 0] = [[ap + -59] + 16], ap++;
ret;
[ap + 0] = [[ap + -29] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 13700, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -35] + 6], ap++;
[ap + 0] = [[ap + -36] + 7], ap++;
ret;
call rel 27414;
[ap + 0] = [ap + -1] + 27413, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25110, ap++;
call rel -4046;
[ap + 0] = [ap + -29] + 2, ap++;
[ap + 0] = [ap + -17] + [ap + -8], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27394;
[ap + 0] = [ap + -1] + 27393, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25680, ap++;
call rel 205;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -17] + [ap + -8], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27374;
[ap + 0] = [ap + -1] + 27373, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 27250, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
call rel 27357;
[ap + 0] = [ap + -1] + 27356, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 30720, ap++;
call rel 168;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -17] + [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27337;
[ap + 0] = [ap + -1] + 27336, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 30120, ap++;
call rel -4114;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [ap + -21] + [ap + -8], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 17;
[ap + 0] = [[ap + -15] + 4], ap++;
call rel 27318;
[ap + 0] = [ap + -1] + 27317, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 32430, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -24] + 8, ap++;
[ap + 0] = [[ap + -25] + 6], ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27295;
[ap + 0] = [ap + -1] + 27294, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 42930, ap++;
call rel -4156;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [ap + -21] + [ap + -8], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 17;
[ap + 0] = [[ap + -14] + 4], ap++;
call rel 27276;
[ap + 0] = [ap + -1] + 27275, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 45240, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -23] + 8, ap++;
[ap + 0] = [[ap + -24] + 6], ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27253;
[ap + 0] = [ap + -1] + 27252, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 55640, ap++;
call rel -4198;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -21] + [ap + -8], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 17;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 27234;
[ap + 0] = [ap + -1] + 27233, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 57940, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
jmp rel 17 if [fp + -12] != 0;
[ap + 0] = 1091630965046171586881802890498973834564654876687718157299625186377995250378, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -5] + 2];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
[ap + 0] = 258665617756453083421532627773985901625276693713295895594790335784429025765, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -5] + 2];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 105806897873711421407607220097391632185840668734579, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 24635088134955480091293739753535555070318, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 630 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[fp + -4] = [[fp + -5] + 9];
[ap + -3] = [[fp + -5] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 591 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 14];
[ap + -4] = [[fp + -5] + 15];
[fp + -4] = [[fp + -5] + 16];
[ap + -3] = [[fp + -5] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 14) %}
[ap + 0] = [[fp + -5] + 19], ap++;
jmp rel 552 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 18], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -5] + 21, ap++;
[ap + 0] = [[fp + -5] + 20], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 509;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -7] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 467 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 420 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 377;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 335 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 288 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 245;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 203 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 156 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 113;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 71 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 27 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 11;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -27], ap++;
ret;
call rel -4571;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -41] + 6], ap++;
[ap + 0] = [[ap + -42] + 7], ap++;
ret;
ap += 16;
call rel 21268;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -27] + 12250, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 16;
call rel -4647;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -31] + 12350, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 32;
[ap + 0] = [[ap + -46] + 4], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -2] + 14400, ap++;
[ap + 0] = [ap + -49] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -57] + 6], ap++;
[ap + 0] = [[ap + -58] + 7], ap++;
ret;
ap += 32;
call rel 21191;
[ap + 0] = [ap + -52] + 3, ap++;
[ap + 0] = [ap + -43] + 24700, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 32;
call rel -4724;
[ap + 0] = [ap + -52] + 3, ap++;
[ap + 0] = [ap + -47] + 24800, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 48;
[ap + 0] = [[ap + -62] + 4], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 26850, ap++;
[ap + 0] = [ap + -65] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -73] + 6], ap++;
[ap + 0] = [[ap + -74] + 7], ap++;
ret;
ap += 48;
call rel 21114;
[ap + 0] = [ap + -68] + 3, ap++;
[ap + 0] = [ap + -59] + 37150, ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 48;
call rel -4801;
[ap + 0] = [ap + -68] + 3, ap++;
[ap + 0] = [ap + -63] + 37250, ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 64;
[ap + 0] = [[ap + -75] + 4], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2] + 39300, ap++;
[ap + 0] = [ap + -78] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -86] + 6], ap++;
[ap + 0] = [[ap + -87] + 7], ap++;
ret;
ap += 64;
call rel 21037;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -75] + 49600, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 78;
[ap + 0] = [[fp + -5] + 18], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 51230, ap++;
[ap + 0] = [fp + -5] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 20], ap++;
[ap + 0] = [[fp + -5] + 21], ap++;
ret;
ap += 84;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 62270, ap++;
[ap + 0] = [fp + -5] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
ret;
ap += 90;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 73310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 376;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 345;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 314;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 267 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 244 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -5] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 193 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 170 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 96 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 45 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -14] + 3, ap++;
jmp rel 5;
ap += 8;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 9;
[ap + 0] = [ap + -23] + 3, ap++;
jmp rel 5;
ap += 17;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 18;
[ap + 0] = [ap + -32] + 3, ap++;
jmp rel 5;
ap += 26;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 27;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 5;
ap += 35;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 43;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 47;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 51;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -11] = [[fp + -3] + 0];
[fp + -10] = [[fp + -3] + 1];
[fp + -9] = [[fp + -3] + 2];
[fp + -8] = [[fp + -3] + 3];
[fp + -7] = [[fp + -3] + 4];
[fp + -6] = [[fp + -3] + 5];
[fp + -5] = [[fp + -3] + 6];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -11] = [[fp + -10] + 1];
[fp + -9] = [[fp + -10] + 2];
[fp + -8] = [[fp + -10] + 3];
[fp + -7] = [[fp + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 6], ap++;
jmp rel 378 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 7];
[ap + -3] = [[fp + -10] + 8];
[fp + -9] = [[fp + -10] + 9];
[ap + -2] = [[fp + -10] + 10];
[fp + -6] = [[fp + -10] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 7) %}
[ap + 0] = [[fp + -10] + 13], ap++;
jmp rel 349 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 14];
[ap + -3] = [[fp + -10] + 15];
[fp + -9] = [[fp + -10] + 16];
[ap + -2] = [[fp + -10] + 17];
[fp + -5] = [[fp + -10] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 14) %}
[ap + 0] = [[fp + -10] + 20], ap++;
jmp rel 320 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -10] + 21, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -12] + 0];
jmp rel 288;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -9] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 255 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 225;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel [fp + -3];
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -8] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -9] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 15;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
ap += 11;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -16] + 1090, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 125;
call rel 20386;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 132;
ap += 13;
[ap + 0] = [[ap + -25] + 5], ap++;
[ap + 0] = [ap + -1] + 1440, ap++;
[ap + 0] = [ap + -27] + 9, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
jmp rel 140;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -9] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 15;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
ap += 11;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -16] + 1090, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 63;
call rel 20324;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 70;
ap += 13;
[ap + 0] = [[ap + -25] + 5], ap++;
[ap + 0] = [ap + -1] + 1440, ap++;
[ap + 0] = [ap + -27] + 9, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
jmp rel 78;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -8] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -9] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 22;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
ap += 11;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -16] + 1090, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 20254;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 13;
[ap + 0] = [[ap + -25] + 5], ap++;
[ap + 0] = [ap + -1] + 1440, ap++;
[ap + 0] = [ap + -27] + 9, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 19;
call rel 20215;
[ap + 0] = [ap + -35] + 1, ap++;
[ap + 0] = [ap + -30] + 12680, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 31;
[ap + 0] = [[ap + -41] + 5], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -2] + 14130, ap++;
[ap + 0] = [ap + -44] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -47] + 7], ap++;
[ap + 0] = [[ap + -48] + 8], ap++;
ret;
ap += 31;
call rel 20184;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [ap + -42] + 24530, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 44;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 26070, ap++;
[ap + 0] = [fp + -10] + 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 21], ap++;
[ap + 0] = [[fp + -10] + 22], ap++;
ret;
ap += 49;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 37120, ap++;
[ap + 0] = [fp + -10] + 16, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 14], ap++;
[ap + 0] = [[fp + -10] + 15], ap++;
ret;
ap += 54;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 48170, ap++;
[ap + 0] = [fp + -10] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 7], ap++;
[ap + 0] = [[fp + -10] + 8], ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 301 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[fp + -4] = [[fp + -5] + 9];
[ap + -3] = [[fp + -5] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 266 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -5] = [[fp + -7] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 223 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -4] = [[ap + -8] + 1];
[fp + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 182 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -12] + 0];
jmp rel 143;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 105 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 68;
[ap + 1] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 20452;
jmp rel 34 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 15 if [ap + -4] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 90, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 32;
call rel 19944;
[ap + 0] = [ap + -49] + 1, ap++;
[ap + 0] = [ap + -43] + 13950, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 45;
[ap + 0] = [[ap + -56] + 4], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 15490, ap++;
[ap + 0] = [ap + -59] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -65] + 6], ap++;
[ap + 0] = [[ap + -66] + 7], ap++;
ret;
ap += 45;
call rel 19901;
[ap + 0] = [ap + -63] + 1, ap++;
[ap + 0] = [ap + -56] + 25790, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 59;
[ap + 0] = [[ap + -68] + 4], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -2] + 27420, ap++;
[ap + 0] = [ap + -71] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -77] + 6], ap++;
[ap + 0] = [[ap + -78] + 7], ap++;
ret;
ap += 54;
call rel 8073;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -69] + 37200, ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 70;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 39250, ap++;
[ap + 0] = [fp + -5] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
ret;
ap += 76;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 50290, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
jmp rel [fp + -10];
jmp rel 77;
jmp rel 60;
jmp rel 43;
[ap + 0] = 111698146311908863407302100342874275240829328563168086149856131455453417691, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
jmp rel [fp + -8];
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[fp + -7] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
ret;
ap += 5;
[ap + 0] = 597737395777531629504371423546799756666196605557268572372978689465546875361, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 5;
[ap + 0] = 131425480171470489600231791378472292480259385557796368323212843128885728653, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 5;
[ap + 0] = 1212934109753348009330449067077061170718298436515212340890559178244957703708, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 378672512937229864572034320078749610255816943982, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1788230383078796420818472737903545775115950619686282354238021065532772, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 418503298271971407217644423124313440639884150868, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 107136844357624680247797127742571420176744025378387, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 107136844357624680247716972319824244744498872667982, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 24944740430830204917383880443356793359696, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1486822392393958861658706078550100, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -11] = [[fp + -3] + 0];
[fp + -9] = [ap + 0] + [fp + -10], ap++;
[ap + -1] = [ap + 0] * 5, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel 20279;
jmp rel 35 if [ap + -3] != 0;
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [ap + 0] * 3, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 1008;
jmp rel 12 if [ap + -3] != 0;
[fp + -6] = [[ap + -1] + 0];
[fp + -5] = [[ap + -1] + 1];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 200, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3190, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 3;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 379 if [ap + -2] != 0;
[fp + 2] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[fp + 2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -6] + 1], ap++;
[ap + -5] = [[fp + -6] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 355 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 2] = [[fp + -6] + 0];
[ap + 0] = [fp + 2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 295 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 20230;
jmp rel 258 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 248 if [ap + -4] != 0;
[fp + 0] = [ap + -3];
[fp + 1] = [ap + -2];
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 194 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 927;
jmp rel 157 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 147 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 97 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 73 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -19] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 18 if [ap + -2] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -9] + 330, ap++;
jmp rel 7;
ap += 9;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -15] + 1650, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 2340, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 31;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 3040, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6] + 5710, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 6790, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 31;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 7490, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 10160, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -9] + 10890, ap++;
jmp rel 7;
ap += 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -14] + 12210, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -11] = [[fp + -3] + 0];
[fp + -10] = [[fp + -3] + 1];
[fp + -9] = [[fp + -3] + 2];
[fp + -8] = [[fp + -3] + 3];
[fp + -7] = [[fp + -3] + 4];
[fp + -6] = [[fp + -3] + 5];
[fp + -5] = [[fp + -3] + 6];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 371 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 348 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -5] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 313;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 282;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 235 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -19] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -21] + 1], ap++;
[ap + -5] = [[ap + -22] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 212 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -16] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -17] + 1];
[ap + 0] = [ap + -17] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 161 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 138 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 87 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 64 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -12] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 15 if [ap + -2] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [ap + -15] + 3, ap++;
jmp rel 5;
ap += 9;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 10;
[ap + 0] = [ap + -24] + 3, ap++;
jmp rel 5;
ap += 18;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 19;
[ap + 0] = [ap + -41] + 3, ap++;
jmp rel 5;
ap += 27;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 35;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 39;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 36;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 5;
ap += 44;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 3410 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208046, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 106;
[fp + -8] = [ap + 0] + 3410, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 3910, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 46 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -12] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + -4] = [[fp + -4] + 0];
[ap + 0] = [ap + -13] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -86;
ret;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -9] + 1400, ap++;
jmp rel 7;
ap += 9;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -15] + 2720, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -4585;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5040 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768206416, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 58;
[fp + -7] = [ap + 0] + 5040, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 39;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -3] = [[fp + -3] + 0];
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[fp + 0] = [fp + -6] + 3;
[fp + 1] = [fp + -5];
call rel 19399;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -46;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2090, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 5340, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -4666;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = 10480 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768200976, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 76;
[fp + -8] = [ap + 0] + 10480, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 10980, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 19378;
jmp rel 34 if [ap + -7] != 0;
[ap + 0] = [ap + -8], ap++;
jmp rel 17 if [ap + -5] != 0;
[ap + -4] = [[fp + -4] + 0];
[ap + -3] = [[fp + -4] + 1];
[ap + -2] = [[fp + -4] + 2];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -50;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 2370, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2570, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -4757;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 12247868912570024929994369972085044880615269779114182434815966989419180676, ap++;
[ap + 0] = 3652501241, ap++;
[ap + 0] = 10628944869218562084050143519444549580389464591454674019345556079, ap++;
[ap + 0] = 2100000000000000, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 25187, ap++;
[ap + 0] = 118034699, ap++;
[ap + 0] = 969166842145694355898879064562217049827305169495536240246191507779, ap++;
[ap + 0] = 2100000000000000, ap++;
[ap + 0] = 111, ap++;
[ap + 0] = 196, ap++;
[ap + 0] = 29794, ap++;
[ap + 0] = 4206867930, ap++;
[ap + 0] = 8154142684220187899712437956956085183, ap++;
[ap + 0] = 2100000000000000, ap++;
[ap + 0] = 111, ap++;
[ap + 0] = 196, ap++;
[ap + 0] = 1650684532, ap++;
call rel 19446;
jmp rel 23 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 15 if [ap + -4] != 0;
ap += 3;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -7] + 190, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 85;
[fp + -8] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -6] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 66;
[ap + 0] = [ap + -2], ap++;
[fp + -4] = [ap + 0] + [fp + -5], ap++;
%{ memory[ap + 0] = memory[fp + -6] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 47;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -5] + [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[fp + -6] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 19;
[ap + 1] = [fp + -6] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -15] + 1];
[ap + 0] = [fp + -7] * 31, ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3] + [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -57;
ret;
call rel -7606;
[ap + 0] = [ap + -21] + 2, ap++;
[ap + 0] = [ap + -12] + 1370, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
call rel 895;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 2340, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 3610, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
ret;
call rel -4945;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155801121783046687566683549401418067831, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 20040;
jmp rel 346 if [ap + -8] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 298 if [ap + -8] != 0;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 6, ap++;
call rel 20342;
jmp rel 242 if [ap + -8] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 194 if [ap + -8] != 0;
[ap + 0] = 6, ap++;
[ap + 0] = 6, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 133;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 20311;
jmp rel 73 if [ap + -8] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 28 if [ap + -8] != 0;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12] + 90, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
ret;
ap += 110;
call rel 18071;
[ap + 0] = [ap + -134] + 1, ap++;
[ap + 0] = [ap + -121] + 75210, ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
ret;
ap += 122;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -124] + 76660, ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -146], ap++;
ret;
ap += 123;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -134] + 76850, ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -146], ap++;
ret;
ap += 238;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -240] + 152710, ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -262], ap++;
[ap + 0] = [ap + -262], ap++;
ret;
ap += 239;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250] + 152900, ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -262], ap++;
[ap + 0] = [ap + -262], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1479189527628697013555596416924715405286402414, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
jmp rel [fp + -9];
jmp rel 40;
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 32;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 3, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 4, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel [fp + -8];
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -7] = [[ap + -1] + 0];
[fp + -6] = [[ap + -1] + 1];
[fp + -5] = [[ap + -1] + 2];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 3, ap++;
ret;
[fp + -12] = [[fp + -3] + 0];
[fp + -10] = [ap + 0] + [fp + -11], ap++;
[ap + -1] = [ap + 0] * 7, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel 20256;
jmp rel 36 if [ap + -3] != 0;
[fp + -8] = [ap + 0] + [fp + -9], ap++;
[ap + -1] = [ap + 0] * 3, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 20314;
jmp rel 13 if [ap + -3] != 0;
[fp + -7] = [[ap + -1] + 0];
[fp + -6] = [[ap + -1] + 1];
[fp + -5] = [[ap + -1] + 2];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 300, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3290, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = 9780 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768201676, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 107;
[fp + -7] = [ap + 0] + 9780, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -4] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 87;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
%{ memory[ap + 0] = memory[fp + -4] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 68;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -6] + [fp + -4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [fp + -3] * 3652501241, ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2] + 12345, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 20314;
[ap + 0] = [ap + -52], ap++;
jmp rel 38 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -4] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 16;
[ap + 1] = [fp + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -12], ap++;
call rel -71;
ret;
call rel -8275;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 1170, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -2] + 2640, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 218;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 8710, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 9980, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
call rel -5622;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = 2140 <= memory[fp + -5] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + 340282366920938463463374607431768209316, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 59;
[fp + -5] = [ap + 0] + 2140, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + 2, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 39;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 17;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] * 1103515245, ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -3] + 12345, ap++;
[ap + 0] = [ap + -5], ap++;
call rel -42;
ret;
call rel -8368;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1070, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 2440, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -5696;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1608844544860142481837018615352855255414252849117202134821270416523209316980, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -5] = [[ap + -3] + 1];
[fp + -4] = [[ap + -2] + 0];
[fp + -3] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -6] = [[fp + -7] + 1];
[ap + -5] = [[fp + -7] + 2];
[ap + -4] = [[fp + -7] + 3];
[ap + -3] = [[fp + -7] + 4];
[ap + -2] = [[fp + -7] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
[ap + 0] = [[fp + -7] + 9], ap++;
ret;
%{ memory[ap + 0] = 4460 <= memory[fp + -5] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + 340282366920938463463374607431768206996, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 52;
[fp + -5] = [ap + 0] + 4460, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -3] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 31;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 20221;
jmp rel 9 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
call rel -38;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 1770, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 4660, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -5811;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
ap += 4;
%{ memory[ap + 0] = 11690 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768199766, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 241;
[fp + -8] = [ap + 0] + 11690, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -7] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 220;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -7] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 199;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -10] + 1], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -13] + 2], ap++;
[ap + -1] = [[ap + -14] + 3], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -16] + 4, ap++;
jmp rel 67 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 2] = [ap + -1];
[fp + 3] = [ap + -1];
[fp + 3] = [ap + 0] + [fp + 2], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 9 if [ap + -2] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel -392;
jmp rel 26 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 3] = [ap + 0] + [fp + 2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel -282;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 66;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3690, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 6360, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 0] = [ap + -1];
[fp + 1] = [ap + -1];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -4] + 100, ap++;
jmp rel 9 if [ap + -2] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel -458;
jmp rel 72 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel -348;
jmp rel 53 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -4] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -7] + 1], ap++;
[ap + -1] = [[ap + -8] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -13] + 3];
jmp rel 17;
[ap + 1] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -13] + 3];
[ap + 0] = [ap + -13] + 4, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -189;
ret;
call rel -8713;
[ap + 0] = [ap + -19] + 4, ap++;
[ap + 0] = [ap + -19] + 1410, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3590, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 6260, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -235;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 10620, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 11890, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -6078;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 25234980565865011805353781783412366906373418087442798, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = 2670 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208786, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 73;
[fp + -8] = [ap + 0] + 2670, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 3170, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -7] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 15 if [ap + -2] != 0;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -61;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -6] + 2170, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -6177;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 6530 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768204926, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 148;
[fp + -8] = [ap + 0] + 6530, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -7] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 127;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -7] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 106;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -10] + 1], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -13] + 2], ap++;
[ap + -1] = [[ap + -14] + 3], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -16] + 4, ap++;
[ap + 0] = [[ap + -9] + 0], ap++;
jmp rel 20 if [ap + -4] != 0;
[ap + 0] = [fp + -5] * 31, ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 3652501241, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 14755, ap++;
jmp rel 19;
[ap + 0] = [ap + -1] * 31, ap++;
[ap + 0] = [ap + -1] + [fp + -5], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 3652501241, ap++;
[ap + 0] = [ap + -10] + 100, ap++;
[ap + 0] = [ap + -2] + 14755, ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -12] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -15] + 1], ap++;
[ap + -1] = [[ap + -16] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -21] + 3];
jmp rel 17;
[ap + 1] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -21] + 3];
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -115;
ret;
call rel -9002;
[ap + 0] = [ap + -27] + 4, ap++;
[ap + 0] = [ap + -19] + 1270, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -503;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 5460, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 6730, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -6346;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
jmp rel 29 if [fp + -11] != 0;
[ap + 0] = 988809392353264044728913149602568232240779489514424630921821057413447938795, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 6 if [fp + -7] != 0;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
ap += 5;
[ap + 0] = 952018701043150395890767918113897069886306297516309605547277037138257541672, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = 6530 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768204926, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 148;
[fp + -8] = [ap + 0] + 6530, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -7] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 127;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -7] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 106;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -10] + 1], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -13] + 2], ap++;
[ap + -1] = [[ap + -14] + 3], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -16] + 4, ap++;
[ap + 0] = [[ap + -9] + 0], ap++;
jmp rel 20 if [ap + -4] != 0;
[ap + 0] = [fp + -5] * 31, ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 3652501241, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 14755, ap++;
jmp rel 19;
[ap + 0] = [ap + -1] * 31, ap++;
[ap + 0] = [ap + -1] + [fp + -5], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 3652501241, ap++;
[ap + 0] = [ap + -10] + 100, ap++;
[ap + 0] = [ap + -2] + 14755, ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -12] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -15] + 1], ap++;
[ap + -1] = [[ap + -16] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -21] + 3];
jmp rel 17;
[ap + 1] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -21] + 3];
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -115;
ret;
call rel -9210;
[ap + 0] = [ap + -27] + 4, ap++;
[ap + 0] = [ap + -19] + 1270, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -711;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 5460, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 6730, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -6554;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 85;
[fp + -7] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -5] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 65;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -5] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 46;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[fp + -5] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 18;
[ap + 1] = [fp + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -15] + 1];
[ap + 0] = [fp + -6] * 31, ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3] + [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -57;
ret;
call rel -9317;
[ap + 0] = [ap + -21] + 2, ap++;
[ap + 0] = [ap + -12] + 1270, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
call rel -816;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 2240, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 3510, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
call rel -6656;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 85;
[fp + -7] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -5] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 65;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -5] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 46;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[fp + -5] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 18;
[ap + 1] = [fp + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -15] + 1];
[ap + 0] = [fp + -6] * 31, ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3] + [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -57;
ret;
call rel -9417;
[ap + 0] = [ap + -21] + 2, ap++;
[ap + 0] = [ap + -12] + 1270, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
call rel -916;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 2240, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 3510, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
call rel -6756;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1689804936085334570088724006005102, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 218;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[fp + 1] = [[fp + -4] + 0];
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 188;
[fp + 0] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 136 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel -730;
jmp rel 103 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 93 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 47 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -19] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -4] + 770, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 7;
ap += 9;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -15] + 1320, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 2010, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 27;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2710, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6] + 5380, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -3] + 6970, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 7560, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 291 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 268 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -5] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 221 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 198 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 151 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 128 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 81 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 58 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -12] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 13 if [ap + -2] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [ap + -15] + 3, ap++;
jmp rel 5;
ap += 9;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 10;
[ap + 0] = [ap + -24] + 3, ap++;
jmp rel 5;
ap += 18;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 19;
[ap + 0] = [ap + -33] + 3, ap++;
jmp rel 5;
ap += 27;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 28;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 5;
ap += 36;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -11];
jmp rel 76;
jmp rel 62;
jmp rel 47;
jmp rel 32;
jmp rel 16;
[ap + 0] = 271746229759260285552388728919865295615886751538523744128730118297934206697, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 544914742286571513055574265148471203182105283038408585630116262969508767999, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 1495344490136071460114920061035658809061971367051424659723723519153313545494, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 1024563328638579707993086273191065972481083806754239734289449612694885885764, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 1377123315299276875035905829299713115370384616991444407108739037956089497892, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 608669811081919783384962035579130584034007275000671735200529992509830593976, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[fp + -5] = [[fp + -7] + 0];
[fp + -4] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[fp + -3] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
[ap + -4] = [[fp + -6] + 2];
[ap + -5] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel -10834;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel -10858;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 269;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[fp + -6] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -9], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 42;
call rel 21098;
[ap + 0] = [ap + -1] + 21097, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 37600, ap++;
call rel 1505;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 191;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -5] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 32;
call rel 21044;
[ap + 0] = [ap + -1] + 21043, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 36190, ap++;
call rel 1451;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 337994139936370667767799129369552596157394447336989834104582481799883947719, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[fp + -5] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -5] = [[fp + -7] + 1];
[ap + -4] = [[fp + -7] + 2];
[ap + -6] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 6], ap++;
jmp rel 82 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -7] + 7];
[ap + -4] = [[fp + -7] + 8];
[ap + -3] = [[fp + -7] + 9];
[ap + -2] = [[fp + -7] + 10];
[fp + -3] = [[fp + -7] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 7) %}
[ap + 0] = [[fp + -7] + 13], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 9, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel -477;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -7] + 14];
[ap + -2] = [[fp + -7] + 15];
[ap + -6] = [[fp + -7] + 16];
[ap + -5] = [[fp + -7] + 17];
[ap + -4] = [[fp + -7] + 18];
[ap + -3] = [[fp + -7] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 14) %}
[ap + 0] = [[fp + -7] + 21], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 20], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [fp + -7] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -7] + 20], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [fp + -7] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 22], ap++;
[ap + 0] = [[fp + -7] + 23], ap++;
ret;
ap += 18;
[ap + 0] = [[fp + -7] + 12], ap++;
[ap + 0] = [ap + -1] + 12820, ap++;
[ap + 0] = [fp + -7] + 16, ap++;
[ap + 0] = [[fp + -7] + 14], ap++;
[ap + 0] = [[fp + -7] + 15], ap++;
jmp rel 11;
ap += 24;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -1] + 24060, ap++;
[ap + 0] = [fp + -7] + 9, ap++;
[ap + 0] = [[fp + -7] + 7], ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 34;
call rel 20869;
[ap + 0] = [ap + -1] + 20868, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 36370, ap++;
call rel -11283;
[ap + 0] = [ap + -57] + 3, ap++;
[ap + 0] = [ap + -55] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 44;
call rel 20845;
[ap + 0] = [ap + -1] + 20844, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 37780, ap++;
call rel -11307;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -9] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 1184;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[fp + -6] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -9], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 185;
call rel 20791;
[ap + 0] = [ap + -1] + 20790, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 119100, ap++;
call rel 1198;
[ap + 0] = [ap + -200], ap++;
[ap + 0] = [ap + -200] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 1106;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -5] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 175;
call rel 20737;
[ap + 0] = [ap + -1] + 20736, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 117690, ap++;
call rel 1144;
[ap + 0] = [ap + -190], ap++;
[ap + 0] = [ap + -190] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 67;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 163;
call rel 20685;
[ap + 0] = [ap + -1] + 20684, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 116070, ap++;
[ap + 0] = [ap + -176] + 1, ap++;
[ap + 0] = [ap + -174] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 167;
call rel 20663;
[ap + 0] = [ap + -1] + 20662, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 116700, ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -176] + [ap + -2], ap++;
call rel 1077;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -14] = [[fp + -7] + 1];
[ap + -4] = [[fp + -7] + 2];
[ap + -5] = [[fp + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 5], ap++;
jmp rel 910 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 858 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 818 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 771 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 733;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -22] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 691;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 13;
[ap + -1] = [[ap + -4] + 0];
ap += 1;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -33] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 605;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 581 if [ap + -12] != 0;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[ap + -50] + 0];
[fp + -6] = [[ap + -50] + 1];
[ap + 0] = [[ap + -50] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -46] + 0];
[ap + -5] = [[ap + -46] + 1];
[ap + -4] = [[ap + -46] + 2];
[ap + -6] = [[ap + -46] + 3];
[ap + -16] = [[ap + -46] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -46]) %}
[ap + 0] = [[ap + -46] + 6], ap++;
jmp rel 503 if [ap + -1] != 0;
[ap + 0] = [[ap + -47] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -52] + 7];
[ap + -4] = [[ap + -52] + 8];
[ap + -3] = [[ap + -52] + 9];
[ap + -2] = [[ap + -52] + 10];
[ap + -21] = [[ap + -52] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -52] + 7) %}
[ap + 0] = [[ap + -52] + 13], ap++;
jmp rel 467 if [ap + -1] != 0;
[ap + 0] = [[ap + -53] + 12], ap++;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[ap + -12] + 0];
[fp + -5] = [[ap + -12] + 1];
[ap + 0] = [[ap + -12] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -68] + 14];
[ap + -5] = [[ap + -68] + 15];
[ap + -4] = [[ap + -68] + 16];
[ap + -6] = [[ap + -68] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -68] + 14) %}
[ap + 0] = [[ap + -68] + 19], ap++;
jmp rel 390 if [ap + -1] != 0;
[ap + 0] = [[ap + -69] + 18], ap++;
[ap + 0] = [[ap + -70] + 20], ap++;
[ap + 0] = [ap + -71] + 21, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 340 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 302 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 257 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -23] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 173;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 151 if [ap + -12] != 0;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[ap + -40] + 0];
[fp + -5] = [[ap + -40] + 1];
[ap + 0] = [[ap + -40] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -5] = [[ap + -36] + 1];
[ap + -4] = [[ap + -36] + 2];
[ap + -6] = [[ap + -36] + 3];
[ap + -16] = [[ap + -36] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 6], ap++;
jmp rel 82 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -42] + 7];
[ap + -4] = [[ap + -42] + 8];
[ap + -3] = [[ap + -42] + 9];
[ap + -2] = [[ap + -42] + 10];
[ap + -21] = [[ap + -42] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42] + 7) %}
[ap + 0] = [[ap + -42] + 13], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel -1341;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -64] + 14];
[ap + -2] = [[ap + -64] + 15];
[ap + -6] = [[ap + -64] + 16];
[ap + -5] = [[ap + -64] + 17];
[ap + -4] = [[ap + -64] + 18];
[ap + -3] = [[ap + -64] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -64] + 14) %}
[ap + 0] = [[ap + -64] + 21], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -65] + 20], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -69] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -65] + 20], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -69] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 22], ap++;
[ap + 0] = [[ap + -72] + 23], ap++;
ret;
ap += 18;
[ap + 0] = [[ap + -61] + 12], ap++;
[ap + 0] = [ap + -1] + 12820, ap++;
[ap + 0] = [ap + -63] + 16, ap++;
[ap + 0] = [[ap + -64] + 14], ap++;
[ap + 0] = [[ap + -65] + 15], ap++;
jmp rel 11;
ap += 24;
[ap + 0] = [[ap + -61] + 5], ap++;
[ap + 0] = [ap + -1] + 24060, ap++;
[ap + 0] = [ap + -63] + 9, ap++;
[ap + 0] = [[ap + -64] + 7], ap++;
[ap + 0] = [[ap + -65] + 8], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 30;
call rel 20005;
[ap + 0] = [ap + -1] + 20004, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 35710, ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40] + [ap + -2], ap++;
jmp rel 15;
ap += 33;
call rel 19991;
[ap + 0] = [ap + -1] + 19990, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 36080, ap++;
[ap + 0] = [ap + -51] + 2, ap++;
[ap + 0] = [ap + -44] + [ap + -2], ap++;
call rel -12054;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -85], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 36;
call rel 19967;
[ap + 0] = [ap + -1] + 19966, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 36430, ap++;
call rel -12066;
[ap + 0] = [ap + -61] + 3, ap++;
[ap + 0] = [ap + -56] + [ap + -8], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 56;
[ap + 0] = [[ap + -65] + 4], ap++;
call rel 19946;
[ap + 0] = [ap + -1] + 19945, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 39140, ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -74] + 8, ap++;
[ap + 0] = [[ap + -75] + 6], ap++;
[ap + 0] = [[ap + -76] + 7], ap++;
jmp rel 44;
ap += 47;
call rel 19928;
[ap + 0] = [ap + -1] + 19927, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 48190, ap++;
call rel -12105;
[ap + 0] = [ap + -72] + 3, ap++;
[ap + 0] = [ap + -67] + [ap + -8], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 67;
[ap + 0] = [[ap + -136] + 18], ap++;
call rel 19902;
[ap + 0] = [ap + -1] + 19901, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 50900, ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -145] + 22, ap++;
[ap + 0] = [[ap + -146] + 20], ap++;
[ap + 0] = [[ap + -147] + 21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -85], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 83;
[ap + 0] = [[ap + -136] + 12], ap++;
call rel 19876;
[ap + 0] = [ap + -1] + 19875, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 63450, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -145] + 16, ap++;
[ap + 0] = [[ap + -146] + 14], ap++;
[ap + 0] = [[ap + -147] + 15], ap++;
jmp rel 20;
ap += 89;
[ap + 0] = [[ap + -136] + 5], ap++;
call rel 19856;
[ap + 0] = [ap + -1] + 19855, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 74690, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -145] + 9, ap++;
[ap + 0] = [[ap + -146] + 7], ap++;
[ap + 0] = [[ap + -147] + 8], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 101;
call rel 19830;
[ap + 0] = [ap + -1] + 19829, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 86880, ap++;
[ap + 0] = [ap + -112], ap++;
[ap + 0] = [ap + -112] + [ap + -2], ap++;
jmp rel 17;
ap += 104;
call rel 19814;
[ap + 0] = [ap + -1] + 19813, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 87250, ap++;
[ap + 0] = [ap + -123] + 2, ap++;
[ap + 0] = [ap + -116] + [ap + -2], ap++;
call rel -11714;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -151], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 120;
call rel 19788;
[ap + 0] = [ap + -1] + 19787, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 89310, ap++;
[ap + 0] = [ap + -134] + 1, ap++;
[ap + 0] = [ap + -132] + [ap + -2], ap++;
jmp rel 17;
ap += 126;
call rel 19771;
[ap + 0] = [ap + -1] + 19770, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 90320, ap++;
[ap + 0] = [ap + -145] + 2, ap++;
[ap + 0] = [ap + -138] + [ap + -2], ap++;
call rel 202;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -151], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 117;
call rel 19745;
[ap + 0] = [ap + -1] + 19744, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 89040, ap++;
call rel -12290;
[ap + 0] = [ap + -143] + 3, ap++;
[ap + 0] = [ap + -138] + [ap + -8], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 137;
[ap + 0] = [[ap + -146] + 4], ap++;
call rel 19722;
[ap + 0] = [ap + -1] + 19721, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 91750, ap++;
[ap + 0] = [ap + -148], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -156] + 8, ap++;
[ap + 0] = [[ap + -157] + 6], ap++;
[ap + 0] = [[ap + -158] + 7], ap++;
jmp rel 48;
ap += 128;
call rel 19702;
[ap + 0] = [ap + -1] + 19701, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 100800, ap++;
call rel -12333;
[ap + 0] = [ap + -154] + 3, ap++;
[ap + 0] = [ap + -149] + [ap + -8], ap++;
[ap + 0] = [ap + -151], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 148;
[ap + 0] = [[fp + -7] + 4], ap++;
call rel 19674;
[ap + 0] = [ap + -1] + 19673, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 103510, ap++;
[ap + 0] = [ap + -159], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [[fp + -7] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 177;
call rel 19647;
[ap + 0] = [ap + -1] + 19646, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 117870, ap++;
call rel -12505;
[ap + 0] = [ap + -200] + 3, ap++;
[ap + 0] = [ap + -198] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 187;
call rel 19623;
[ap + 0] = [ap + -1] + 19622, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 119280, ap++;
call rel -12529;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -9] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11039628381574106287832077254720460316281782279698735979, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 12138199771866670695640507122425990273591735515230663625743660901221, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 10040483522583698695742465227681721351500659, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 658013128136044933637489775836549388923915562612, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 153205620156611556915582253396128982386, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 185214229917399150018928636511627048852412956470463832410448741, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 153205620156611556915582241353107400050, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 598459453736763894201493125705066862, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -14] + 0];
[fp + -15] = [[fp + -14] + 1];
[fp + -13] = [[fp + -14] + 2];
[fp + -12] = [[fp + -14] + 3];
[fp + -11] = [[fp + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -14]) %}
[ap + 0] = [[fp + -14] + 6], ap++;
jmp rel 656 if [ap + -1] != 0;
[ap + 0] = [[fp + -14] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -14] + 7];
[ap + -3] = [[fp + -14] + 8];
[fp + -13] = [[fp + -14] + 9];
[ap + -2] = [[fp + -14] + 10];
[fp + -10] = [[fp + -14] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -14] + 7) %}
[ap + 0] = [[fp + -14] + 13], ap++;
jmp rel 623 if [ap + -1] != 0;
[ap + 0] = [[fp + -14] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -14] + 14];
[ap + -3] = [[fp + -14] + 15];
[fp + -13] = [[fp + -14] + 16];
[ap + -2] = [[fp + -14] + 17];
[fp + -9] = [[fp + -14] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -14] + 14) %}
[ap + 0] = [[fp + -14] + 20], ap++;
jmp rel 598 if [ap + -1] != 0;
[ap + 0] = [[fp + -14] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -14] + 21];
[ap + -3] = [[fp + -14] + 22];
[fp + -13] = [[fp + -14] + 23];
[ap + -2] = [[fp + -14] + 24];
[fp + -8] = [[fp + -14] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -14] + 21) %}
[ap + 0] = [[fp + -14] + 27], ap++;
jmp rel 569 if [ap + -1] != 0;
[ap + 0] = [[fp + -14] + 26], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -14] + 28, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -16] + 0];
jmp rel 537;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -16] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -12] + [ap + -2], ap++;
[ap + 0] = [fp + -16] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -13] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -7] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 504 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 474;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -12] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -13] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 441 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 411;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -12] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -13] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 378 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 348;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel [fp + -4];
jmp rel 193;
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -12] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -13] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 187;
ap += 2;
call rel 13756;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -13] + 10650, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 253;
ap += 15;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -1] + 12190, ap++;
[ap + 0] = [ap + -29] + 9, ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
[ap + 0] = [[ap + -31] + 8], ap++;
jmp rel 261;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -13] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 125;
ap += 2;
call rel 13694;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -13] + 10650, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 191;
ap += 15;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -1] + 12190, ap++;
[ap + 0] = [ap + -29] + 9, ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
[ap + 0] = [[ap + -31] + 8], ap++;
jmp rel 199;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -13] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 63;
ap += 2;
call rel 13632;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -13] + 10650, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 129;
ap += 15;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -1] + 12190, ap++;
[ap + 0] = [ap + -29] + 9, ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
[ap + 0] = [[ap + -31] + 8], ap++;
jmp rel 137;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -12] + [ap + -4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -13] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 113 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 78;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -19] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 46;
[ap + 1] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -12] + [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -13] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel 13519;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
call rel 13503;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -13] + 10650, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 15;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -1] + 12190, ap++;
[ap + 0] = [ap + -29] + 9, ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
[ap + 0] = [[ap + -31] + 8], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 21;
call rel 13463;
[ap + 0] = [ap + -37] + 1, ap++;
[ap + 0] = [ap + -32] + 23430, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 33;
[ap + 0] = [[ap + -43] + 5], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2] + 24880, ap++;
[ap + 0] = [ap + -46] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -49] + 7], ap++;
[ap + 0] = [[ap + -50] + 8], ap++;
ret;
ap += 33;
call rel 13432;
[ap + 0] = [ap + -49] + 1, ap++;
[ap + 0] = [ap + -44] + 35280, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 45;
[ap + 0] = [[ap + -55] + 5], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 36730, ap++;
[ap + 0] = [ap + -58] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -61] + 7], ap++;
[ap + 0] = [[ap + -62] + 8], ap++;
ret;
ap += 45;
call rel 13401;
[ap + 0] = [ap + -61] + 1, ap++;
[ap + 0] = [ap + -56] + 47130, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 57;
[ap + 0] = [[ap + -67] + 5], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -2] + 48580, ap++;
[ap + 0] = [ap + -70] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -73] + 7], ap++;
[ap + 0] = [[ap + -74] + 8], ap++;
ret;
ap += 57;
call rel 13370;
[ap + 0] = [fp + -16] + 1, ap++;
[ap + 0] = [ap + -68] + 58980, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 70;
[ap + 0] = [[fp + -14] + 26], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [ap + -2] + 60520, ap++;
[ap + 0] = [fp + -14] + 30, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -14] + 28], ap++;
[ap + 0] = [[fp + -14] + 29], ap++;
ret;
ap += 71;
[ap + 0] = [[fp + -14] + 19], ap++;
[ap + 0] = [ap + -1] + 71110, ap++;
[ap + 0] = [fp + -14] + 23, ap++;
[ap + 0] = [[fp + -14] + 21], ap++;
[ap + 0] = [[fp + -14] + 22], ap++;
jmp rel 11;
ap += 76;
[ap + 0] = [[fp + -14] + 12], ap++;
[ap + 0] = [ap + -1] + 82260, ap++;
[ap + 0] = [fp + -14] + 16, ap++;
[ap + 0] = [[fp + -14] + 14], ap++;
[ap + 0] = [[fp + -14] + 15], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 85;
[ap + 0] = [[fp + -14] + 5], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [ap + -2] + 93670, ap++;
[ap + 0] = [fp + -14] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -14] + 7], ap++;
[ap + 0] = [[fp + -14] + 8], ap++;
ret;
jmp rel [fp + -15];
jmp rel 58;
jmp rel 38;
jmp rel 21;
[ap + 0] = 480980096152129666760236097399191395560663640307128160512633360588208196700, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 16376;
ret;
ap += 14;
[ap + 0] = 79629530307499767974402486524634597691335667662363045715024161428584374869, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 1288147017790903004093628983427727504433832220618792097782809605079763782910, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
ap += 14;
[ap + 0] = 1641204406088898563287720492974135054511277880740023862506662708501359245154, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6551058959469984134320361281674212942343054011646963316, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7202965500183391065739474659279725755700646600738645446824977329780, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 940 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 891;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 835 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 775 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 746 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 708 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 662 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -12] + 0];
jmp rel 615;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 569 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 520;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
%{ memory[ap + 0] = (memory[ap + -17] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -18] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -17] + 3];
jmp rel 471;
[ap + 1] = [ap + -18] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -17] + 3];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -19] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -4] = [[ap + -16] + 1];
[fp + -4] = [[ap + -16] + 2];
[ap + -3] = [[ap + -16] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 5], ap++;
jmp rel 425 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 4], ap++;
[ap + 0] = [[ap + -18] + 6], ap++;
[ap + 0] = [ap + -19] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 374 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 327;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 281 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 236;
[ap + 1] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 16019;
jmp rel 194 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 164 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[ap + -43] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 123;
[ap + 1] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -4] = [[ap + -15] + 1];
[fp + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 5], ap++;
jmp rel 77 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 4], ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 11;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -162], ap++;
[ap + 0] = [ap + -149], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -83], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -29], ap++;
ret;
call rel -13635;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -32] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -35] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [[ap + -46] + 7], ap++;
ret;
ap += 16;
call rel 12760;
[ap + 0] = [ap + -35] + 1, ap++;
[ap + 0] = [ap + -27] + 12250, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 27;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -29] + 13610, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
ret;
ap += 28;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -35] + 13800, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
ret;
ap += 61;
call rel 12676;
[ap + 0] = [ap + -78] + 1, ap++;
[ap + 0] = [ap + -72] + 27940, ap++;
[ap + 0] = [ap + -75], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 74;
[ap + 0] = [[ap + -88] + 4], ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -2] + 29480, ap++;
[ap + 0] = [ap + -91] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -101] + 6], ap++;
[ap + 0] = [[ap + -102] + 7], ap++;
ret;
ap += 74;
call rel 12617;
[ap + 0] = [ap + -94] + 3, ap++;
[ap + 0] = [ap + -85] + 39780, ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 74;
call rel -13302;
[ap + 0] = [ap + -94] + 3, ap++;
[ap + 0] = [ap + -89] + 39880, ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 90;
[ap + 0] = [[ap + -107] + 4], ap++;
[ap + 0] = [ap + -94], ap++;
[ap + 0] = [ap + -2] + 41930, ap++;
[ap + 0] = [ap + -110] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -120] + 6], ap++;
[ap + 0] = [[ap + -121] + 7], ap++;
ret;
ap += 90;
call rel 12528;
[ap + 0] = [ap + -113] + 4, ap++;
[ap + 0] = [ap + -101] + 52230, ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 94;
call rel -14117;
[ap + 0] = [ap + -113] + 3, ap++;
[ap + 0] = [ap + -108] + 52760, ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 109;
[ap + 0] = [[ap + -120] + 4], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -2] + 54720, ap++;
[ap + 0] = [ap + -123] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -133] + 6], ap++;
[ap + 0] = [[ap + -134] + 7], ap++;
ret;
ap += 109;
call rel 12439;
[ap + 0] = [ap + -127] + 1, ap++;
[ap + 0] = [ap + -120] + 65020, ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 123;
[ap + 0] = [[ap + -131] + 4], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -2] + 66650, ap++;
[ap + 0] = [ap + -134] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -144] + 6], ap++;
[ap + 0] = [[ap + -145] + 7], ap++;
ret;
ap += 113;
call rel -14091;
[ap + 0] = [ap + -132] + 3, ap++;
[ap + 0] = [ap + -127] + 75510, ap++;
[ap + 0] = [ap + -129], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 128;
[ap + 0] = [[ap + -136] + 4], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -2] + 77670, ap++;
[ap + 0] = [ap + -139] + 8, ap++;
[ap + 0] = [[ap + -140] + 6], ap++;
[ap + 0] = [[ap + -141] + 7], ap++;
jmp rel 47;
ap += 123;
call rel -14116;
[ap + 0] = [ap + -142] + 3, ap++;
[ap + 0] = [ap + -137] + 87180, ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 138;
[ap + 0] = [[ap + -150] + 4], ap++;
[ap + 0] = [ap + -142], ap++;
[ap + 0] = [ap + -2] + 89340, ap++;
[ap + 0] = [ap + -153] + 8, ap++;
[ap + 0] = [[ap + -154] + 6], ap++;
[ap + 0] = [[ap + -155] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 142;
call rel -14329;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -156] + 100000, ap++;
[ap + 0] = [ap + -158], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 157;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 101960, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
jmp rel [fp + -4];
jmp rel 63;
jmp rel 42;
jmp rel 21;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 109908531191763169338062989482604822258595819875065434299655524, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -8] = [[ap + -1] + 0];
[fp + -7] = [[ap + -1] + 1];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [[ap + -2] + 2];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 3, ap++;
call rel 15491;
jmp rel 78 if [ap + -3] != 0;
[fp + -4] = [[ap + -1] + 0];
[fp + -3] = [[ap + -1] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 109138120487751959668969574629513358330860621822210092206051517822642870896, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -10] + 0];
[ap + -5] = [[fp + -10] + 1];
[fp + -9] = [[fp + -10] + 2];
[ap + -4] = [[fp + -10] + 3];
[ap + -3] = [[fp + -10] + 4];
[ap + -2] = [[fp + -10] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 7], ap++;
jmp rel 48 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 6], ap++;
[ap + 0] = [[fp + -10] + 8], ap++;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [fp + -10] + 10, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 27;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + 0] = [ap + -3] + 100, ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
ret;
call rel 10309;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -10] + 6], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2] + 1400, ap++;
[ap + 0] = [fp + -10] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 8], ap++;
[ap + 0] = [[fp + -10] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 13000, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 25590074060429625524688911256539894306027619241389926, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6551058959469984134320259154732780015876736366905881715, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5958153414640022796739197267245631605665380, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -6] * memory[fp + -4], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -6], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 0], ap++;
[ap + -2] = [[fp + -7] + 1], ap++;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -6] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -4], ap++;
[ap + 0] = [ap + -4] * [fp + -4], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 3], ap++;
[ap + -1] = [[fp + -7] + 4], ap++;
[ap + -3] = [[fp + -7] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 6], ap++;
[ap + -3] = [[fp + -7] + 7], ap++;
[ap + -16] = [[fp + -7] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -6] * memory[fp + -3], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -6], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 9], ap++;
[ap + -2] = [[fp + -7] + 10], ap++;
[ap + -2] = [[fp + -7] + 11];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -6] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -3], ap++;
[ap + 0] = [ap + -4] * [fp + -3], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 12], ap++;
[ap + -1] = [[fp + -7] + 13], ap++;
[ap + -3] = [[fp + -7] + 14];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 15], ap++;
[ap + -3] = [[fp + -7] + 16], ap++;
[ap + -16] = [[fp + -7] + 17];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -5] * memory[fp + -4], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -5], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 18], ap++;
[ap + -2] = [[fp + -7] + 19], ap++;
[ap + -2] = [[fp + -7] + 20];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -5] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -4], ap++;
[ap + 0] = [ap + -4] * [fp + -4], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 21], ap++;
[ap + -1] = [[fp + -7] + 22], ap++;
[ap + -3] = [[fp + -7] + 23];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 24], ap++;
[ap + -3] = [[fp + -7] + 25], ap++;
[ap + -16] = [[fp + -7] + 26];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
[ap + 1] = [ap + -51] + [ap + -33], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 27];
jmp rel 78;
[ap + -1] = [[fp + -7] + 27];
[ap + 0] = [fp + -7] + 28, ap++;
jmp rel 63 if [ap + -37] != 0;
jmp rel 6 if [ap + -20] != 0;
[ap + 0] = 1, ap++;
jmp rel 4;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 11;
[ap + -1] = [[ap + -7] + 0];
ap += 5;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 25;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 11;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = 1, ap++;
jmp rel 11;
ap += 8;
jmp rel 4;
ap += 11;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 9;
ap += 13;
[ap + 0] = [fp + -7] + 28, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -2] + [ap + -35], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 11;
[ap + -1] = [[ap + -5] + 0];
ap += 1;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 7;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39879774624083218221772669863277689073527, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7269940625183576326045731942707956293120310, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5958153414640022796739197267245609945753966, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 218;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[fp + 1] = [[fp + -4] + 0];
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 188;
[fp + 0] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 136 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel -5395;
jmp rel 103 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 93 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 47 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -19] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -4] + 770, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 7;
ap += 9;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -15] + 1320, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 2010, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 27;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2710, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6] + 5380, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -3] + 6970, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 7560, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -13] = [[fp + -3] + 0];
[fp + -12] = [[fp + -3] + 1];
[fp + -11] = [[fp + -3] + 2];
[fp + -10] = [[fp + -3] + 3];
[fp + -9] = [[fp + -3] + 4];
[fp + -8] = [[fp + -3] + 5];
[fp + -7] = [[fp + -3] + 6];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
jmp rel [fp + -6];
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -5] = [[ap + -1] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 1153 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 1102;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 1049 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 7];
[ap + -4] = [[ap + -17] + 8];
[fp + -4] = [[ap + -17] + 9];
[ap + -3] = [[ap + -17] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17] + 7) %}
[ap + 0] = [[ap + -17] + 12], ap++;
jmp rel 999 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 11], ap++;
[ap + 0] = [[ap + -19] + 13], ap++;
[ap + 0] = [ap + -20] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -14] + 0], ap++;
[ap + 3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -19] + 2];
jmp rel 937 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -14] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -20] + 1];
jmp rel 908;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -20] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -22] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 879 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 841 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 793;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 745 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -20], ap++;
jmp rel 7 if [ap + -5] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -15] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -16] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -15] + 0];
jmp rel 685;
[ap + 1] = [ap + -16] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -15] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[fp + -4] = [[ap + -14] + 2];
[ap + -3] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 637 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 584 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 535;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 487 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 434 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 385;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 332 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 270 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -13] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 243;
[ap + 1] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[fp + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 214 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 176 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -28] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -29] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 130;
[ap + 1] = [ap + -29] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[fp + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 82 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 32 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 10;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1070, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -137], ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -99], ap++;
[ap + -10] = [ap + 0] + [ap + -98], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -30], ap++;
ret;
call rel -14915;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -29] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -32] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [[ap + -44] + 7], ap++;
ret;
ap += 16;
call rel 10912;
[ap + 0] = [ap + -35] + 2, ap++;
[ap + 0] = [ap + -27] + 12250, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 11;
call rel -15591;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11430, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 26;
[ap + 0] = [[ap + -39] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13590, ap++;
[ap + 0] = [ap + -42] + 8, ap++;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 62;
ap += 26;
call rel 10855;
[ap + 0] = [ap + -45] + 2, ap++;
[ap + 0] = [ap + -37] + 23890, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 26;
call rel -15629;
[ap + 0] = [ap + -45] + 3, ap++;
[ap + 0] = [ap + -40] + 23720, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 41;
[ap + 0] = [[ap + -55] + 4], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -2] + 25880, ap++;
[ap + 0] = [ap + -58] + 8, ap++;
[ap + 0] = [[ap + -59] + 6], ap++;
[ap + 0] = [[ap + -60] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 46;
call rel 10769;
[ap + 0] = [ap + -66] + 3, ap++;
[ap + 0] = [ap + -57] + 36630, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 46;
call rel -15716;
[ap + 0] = [ap + -66] + 3, ap++;
[ap + 0] = [ap + -61] + 36730, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 62;
[ap + 0] = [[ap + -76] + 4], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2] + 38780, ap++;
[ap + 0] = [ap + -79] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -90] + 6], ap++;
[ap + 0] = [[ap + -91] + 7], ap++;
ret;
ap += 62;
call rel 10674;
[ap + 0] = [ap + -82] + 3, ap++;
[ap + 0] = [ap + -73] + 49080, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 62;
call rel -15811;
[ap + 0] = [ap + -82] + 3, ap++;
[ap + 0] = [ap + -77] + 49180, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 78;
[ap + 0] = [[ap + -93] + 4], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -2] + 51230, ap++;
[ap + 0] = [ap + -96] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -107] + 6], ap++;
[ap + 0] = [[ap + -108] + 7], ap++;
ret;
ap += 78;
call rel 10579;
[ap + 0] = [ap + -99] + 1, ap++;
[ap + 0] = [ap + -91] + 61530, ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 95;
[ap + 0] = [[ap + -109] + 4], ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -2] + 63630, ap++;
[ap + 0] = [ap + -112] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -123] + 6], ap++;
[ap + 0] = [[ap + -124] + 7], ap++;
ret;
ap += 95;
call rel 10516;
[ap + 0] = [ap + -115] + 2, ap++;
[ap + 0] = [ap + -106] + 73930, ap++;
[ap + 0] = [ap + -112], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 91;
call rel -15987;
[ap + 0] = [ap + -110] + 3, ap++;
[ap + 0] = [ap + -105] + 73200, ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 106;
[ap + 0] = [[ap + -120] + 4], ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = [ap + -2] + 75360, ap++;
[ap + 0] = [ap + -123] + 8, ap++;
[ap + 0] = [[ap + -124] + 6], ap++;
[ap + 0] = [[ap + -125] + 7], ap++;
jmp rel 62;
ap += 106;
call rel 10459;
[ap + 0] = [ap + -132] + 2, ap++;
[ap + 0] = [ap + -117] + 85660, ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 107;
call rel -16025;
[ap + 0] = [ap + -132] + 3, ap++;
[ap + 0] = [ap + -121] + 85580, ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 122;
[ap + 0] = [[ap + -140] + 11], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -2] + 87740, ap++;
[ap + 0] = [ap + -143] + 15, ap++;
[ap + 0] = [[ap + -144] + 13], ap++;
[ap + 0] = [[ap + -145] + 14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 133;
[ap + 0] = [[ap + -145] + 4], ap++;
[ap + 0] = [ap + -137], ap++;
[ap + 0] = [ap + -2] + 99230, ap++;
[ap + 0] = [ap + -148] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -159] + 6], ap++;
[ap + 0] = [[ap + -160] + 7], ap++;
ret;
ap += 132;
call rel -16273;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -146] + 109440, ap++;
[ap + 0] = [ap + -148], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 147;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 111400, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -15] + 0];
[fp + -16] = [[fp + -15] + 1];
[fp + -14] = [[fp + -15] + 2];
[fp + -13] = [[fp + -15] + 3];
[fp + -12] = [[fp + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -15]) %}
[ap + 0] = [[fp + -15] + 6], ap++;
jmp rel 518 if [ap + -1] != 0;
[ap + 0] = [[fp + -15] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -15] + 7];
[ap + -3] = [[fp + -15] + 8];
[fp + -14] = [[fp + -15] + 9];
[ap + -2] = [[fp + -15] + 10];
[fp + -11] = [[fp + -15] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -15] + 7) %}
[ap + 0] = [[fp + -15] + 13], ap++;
jmp rel 489 if [ap + -1] != 0;
[ap + 0] = [[fp + -15] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -13] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -15] + 14];
[ap + -3] = [[fp + -15] + 15];
[fp + -14] = [[fp + -15] + 16];
[ap + -2] = [[fp + -15] + 17];
[fp + -10] = [[fp + -15] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -15] + 14) %}
[ap + 0] = [[fp + -15] + 20], ap++;
jmp rel 455 if [ap + -1] != 0;
[ap + 0] = [[fp + -15] + 19], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -15] + 21, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -17] + 0];
jmp rel 423;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -17] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [fp + -17] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -9] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 393 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 361;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -8] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 328 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 298;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -7] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 265 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 235;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 202 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 172;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 134 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 104;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -22] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -23] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -23] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel 9989;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 7;
[ap + 0] = [[ap + -17] + 5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2] + 11200, ap++;
[ap + 0] = [ap + -20] + 9, ap++;
[ap + 0] = [[ap + -21] + 7], ap++;
[ap + 0] = [[ap + -22] + 8], ap++;
jmp rel 28;
ap += 12;
call rel 9961;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22150, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 19;
[ap + 0] = [[ap + -29] + 5], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -2] + 23150, ap++;
[ap + 0] = [ap + -32] + 9, ap++;
[ap + 0] = [[ap + -33] + 7], ap++;
[ap + 0] = [[ap + -34] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 24;
call rel 9925;
[ap + 0] = [ap + -40] + 1, ap++;
[ap + 0] = [ap + -35] + 34000, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -46] + 5], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 35450, ap++;
[ap + 0] = [ap + -49] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
[ap + 0] = [[ap + -53] + 8], ap++;
ret;
ap += 36;
call rel 9894;
[ap + 0] = [ap + -52] + 1, ap++;
[ap + 0] = [ap + -47] + 45850, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 48;
[ap + 0] = [[ap + -58] + 5], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 47300, ap++;
[ap + 0] = [ap + -61] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -64] + 7], ap++;
[ap + 0] = [[ap + -65] + 8], ap++;
ret;
ap += 48;
call rel 9863;
[ap + 0] = [ap + -64] + 1, ap++;
[ap + 0] = [ap + -59] + 57700, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 60;
[ap + 0] = [[ap + -70] + 5], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -2] + 59150, ap++;
[ap + 0] = [ap + -73] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -76] + 7], ap++;
[ap + 0] = [[ap + -77] + 8], ap++;
ret;
ap += 60;
call rel 9832;
[ap + 0] = [ap + -77] + 1, ap++;
[ap + 0] = [ap + -71] + 69550, ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 68;
[ap + 0] = [[ap + -78] + 5], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -2] + 70540, ap++;
[ap + 0] = [ap + -81] + 9, ap++;
[ap + 0] = [[ap + -82] + 7], ap++;
[ap + 0] = [[ap + -83] + 8], ap++;
jmp rel 28;
ap += 73;
call rel 9804;
[ap + 0] = [fp + -17] + 1, ap++;
[ap + 0] = [ap + -84] + 81490, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 81;
[ap + 0] = [[fp + -15] + 19], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [ap + -2] + 82580, ap++;
[ap + 0] = [fp + -15] + 23, ap++;
[ap + 0] = [[fp + -15] + 21], ap++;
[ap + 0] = [[fp + -15] + 22], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 91;
[ap + 0] = [[fp + -15] + 12], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [ap + -2] + 94080, ap++;
[ap + 0] = [fp + -15] + 16, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -15] + 14], ap++;
[ap + 0] = [[fp + -15] + 15], ap++;
ret;
ap += 96;
[ap + 0] = [[fp + -15] + 5], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [ap + -2] + 105130, ap++;
[ap + 0] = [fp + -15] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -15] + 7], ap++;
[ap + 0] = [[fp + -15] + 8], ap++;
ret;
jmp rel [fp + -13];
jmp rel 78;
jmp rel 62;
jmp rel 44;
jmp rel 30;
jmp rel 16;
[ap + 0] = 370242577458668682545045119996190494682028311340263200323079561980133513667, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
[ap + 0] = 429818349554338566495067474764254361714247349111439606614249586489517433437, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = 981091654700264506537564150529111462688929157948966999320884741938802189658, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = 1551606342435656187459620412714848484679274663429404088114513552336284468182, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -5] + 3];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
[ap + 0] = 1524957347993580362782972313714593590833763121067343414496233623101384695409, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -5] + 3];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = 100496441654634573157473344853726243145076371777105830457225443166473794816, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 32679328859932284685484343273296638558422352102053617774699179620, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1947839788194434922068377765916212200355044790868141896819, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1771549967265341294540465269006524149069080942, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1771549967265341294540465269006524170728992356, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 453516791619927371402359108865670182157507196517, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 383 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 0], ap++;
[ap + 3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 2];
jmp rel 331 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 302 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 264 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 226 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 185;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 142 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -12] + 0];
jmp rel 103;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 25 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 11;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
call rel -17063;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -30] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -36] + 6], ap++;
[ap + 0] = [[ap + -37] + 7], ap++;
ret;
ap += 16;
call rel 9348;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -27] + 12250, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 30;
[ap + 0] = [[ap + -42] + 4], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 13880, ap++;
[ap + 0] = [ap + -45] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -51] + 6], ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
ret;
ap += 29;
call rel -17310;
[ap + 0] = [ap + -48] + 3, ap++;
[ap + 0] = [ap + -43] + 24090, ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 44;
[ap + 0] = [[ap + -52] + 4], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -2] + 26050, ap++;
[ap + 0] = [ap + -55] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -61] + 6], ap++;
[ap + 0] = [[ap + -62] + 7], ap++;
ret;
ap += 34;
call rel -17209;
[ap + 0] = [ap + -53] + 3, ap++;
[ap + 0] = [ap + -48] + 34910, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 49;
[ap + 0] = [[ap + -57] + 4], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -2] + 37070, ap++;
[ap + 0] = [ap + -60] + 8, ap++;
[ap + 0] = [[ap + -61] + 6], ap++;
[ap + 0] = [[ap + -62] + 7], ap++;
jmp rel 39;
ap += 44;
call rel -17234;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -58] + 46580, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 59;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 48740, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -11] = [[fp + -10] + 1];
[fp + -9] = [[fp + -10] + 2];
[fp + -8] = [[fp + -10] + 3];
[fp + -7] = [[fp + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 6], ap++;
jmp rel 159 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 7];
[ap + -3] = [[fp + -10] + 8];
[fp + -9] = [[fp + -10] + 9];
[ap + -2] = [[fp + -10] + 10];
[fp + -6] = [[fp + -10] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 7) %}
[ap + 0] = [[fp + -10] + 13], ap++;
jmp rel 134 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 14];
[ap + -3] = [[fp + -10] + 15];
[fp + -9] = [[fp + -10] + 16];
[ap + -2] = [[fp + -10] + 17];
[fp + -5] = [[fp + -10] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 14) %}
[ap + 0] = [[fp + -10] + 20], ap++;
jmp rel 105 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 21];
[ap + -3] = [[fp + -10] + 22];
[fp + -9] = [[fp + -10] + 23];
[ap + -2] = [[fp + -10] + 24];
[fp + -4] = [[fp + -10] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 21) %}
[ap + 0] = [[fp + -10] + 27], ap++;
jmp rel 76 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 26], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -10] + 28, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -12] + 0];
jmp rel 46;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -9] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel 9074;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -10] + 26], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 11840, ap++;
[ap + 0] = [fp + -10] + 30, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 28], ap++;
[ap + 0] = [[fp + -10] + 29], ap++;
ret;
ap += 18;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 22890, ap++;
[ap + 0] = [fp + -10] + 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 21], ap++;
[ap + 0] = [[fp + -10] + 22], ap++;
ret;
ap += 19;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [ap + -1] + 33480, ap++;
[ap + 0] = [fp + -10] + 16, ap++;
[ap + 0] = [[fp + -10] + 14], ap++;
[ap + 0] = [[fp + -10] + 15], ap++;
jmp rel 11;
ap += 24;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -1] + 44630, ap++;
[ap + 0] = [fp + -10] + 9, ap++;
[ap + 0] = [[fp + -10] + 7], ap++;
[ap + 0] = [[fp + -10] + 8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -5] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 145 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 111 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 248;
jmp rel 85 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + -55] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 61;
[ap + -1] = [[ap + -9] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel -855;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -30] + 1, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -30] + 0];
[ap + -3] = [[ap + -30] + 1];
[ap + -7] = [[ap + -30] + 2];
[ap + -6] = [[ap + -30] + 3];
[ap + -5] = [[ap + -30] + 4];
[ap + -4] = [[ap + -30] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -30]) %}
[ap + 0] = [[ap + -30] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -31] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -35] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -31] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -35] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -37] + 8], ap++;
[ap + 0] = [[ap + -38] + 9], ap++;
ret;
ap += 24;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -29] + 13560, ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 28;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34] + 14190, ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -35], ap++;
ret;
ap += 61;
call rel -17073;
[ap + 0] = [ap + -81] + 3, ap++;
[ap + 0] = [ap + -76] + 38940, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 77;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -2] + 41090, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1947839788194434922068377765916212200355044806196846290276, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5817842327937750556956116149624, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -6] = [[fp + -8] + 0];
[fp + -5] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[fp + -4] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
[ap + -1] = [[fp + -8] + 6];
[fp + -3] = [[fp + -8] + 7];
[ap + 0] = [[fp + -8] + 8], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -10] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -7] = [[fp + -10] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel -879;
[ap + 0] = [fp + -8] + 9, ap++;
jmp rel 32 if [ap + -8] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 14 if [ap + -8] != 0;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 160 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 126 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 403807365716931852510979360495474669369490483994409651540023026512438364891, ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 86 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 55 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 6;
[ap + 0] = [ap + -23] * [ap + -11], ap++;
[ap + 0] = [ap + -10] + 230, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 4294967296 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -19] + 2];
jmp rel 25;
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -19] + 2];
[ap + 0] = 10000, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -5], memory[ap + -1]) %}
[ap + 4] = [[ap + -20] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -23] + 4], ap++;
[ap + -1] = [[ap + -24] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -10] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -25] + 6, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 11967;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -10] + 210, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -3246;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 16;
[ap + 0] = [[ap + -26] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 2050, ap++;
[ap + 0] = [ap + -29] + 8, ap++;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [[ap + -31] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 12;
call rel -17380;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -27] + 11820, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 28;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13970, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1947839788194434922068377928335178510969695615032644236653, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 30207964442802130652109113413655141757161980122037063303934601061, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -14] = [[fp + -3] + 0];
[fp + -13] = [[fp + -3] + 1];
[fp + -12] = [[fp + -3] + 2];
[fp + -11] = [[fp + -3] + 3];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
jmp rel 6 if [fp + -10] != 0;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + -9] = [[ap + -2] + 1];
[fp + -8] = [[ap + -2] + 2];
[fp + -7] = [[ap + -2] + 3];
[fp + -6] = [[ap + -2] + 4];
[fp + -5] = [[ap + -2] + 5];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 6, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8466698336946495152679820938685440523890257735238333907862903743333, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 0];
[fp + -17] = [[fp + -16] + 1];
[fp + -15] = [[fp + -16] + 2];
[fp + -14] = [[fp + -16] + 3];
[fp + -13] = [[fp + -16] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16]) %}
[ap + 0] = [[fp + -16] + 6], ap++;
jmp rel 976 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 7];
[ap + -3] = [[fp + -16] + 8];
[fp + -15] = [[fp + -16] + 9];
[ap + -2] = [[fp + -16] + 10];
[fp + -12] = [[fp + -16] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 7) %}
[ap + 0] = [[fp + -16] + 13], ap++;
jmp rel 943 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 14];
[ap + -3] = [[fp + -16] + 15];
[fp + -15] = [[fp + -16] + 16];
[ap + -2] = [[fp + -16] + 17];
[fp + -11] = [[fp + -16] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 14) %}
[ap + 0] = [[fp + -16] + 20], ap++;
jmp rel 918 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 21];
[ap + -3] = [[fp + -16] + 22];
[fp + -15] = [[fp + -16] + 23];
[ap + -2] = [[fp + -16] + 24];
[fp + -10] = [[fp + -16] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 21) %}
[ap + 0] = [[fp + -16] + 27], ap++;
jmp rel 889 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 26], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -16] + 28, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -18] + 0];
jmp rel 857;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -18] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [fp + -18] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -9] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 819 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 789;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -8] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 759 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -22] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -23] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 729;
[ap + 1] = [ap + -23] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -7] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 696 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 666;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel [fp + -6];
jmp rel 385;
jmp rel 321;
jmp rel 257;
jmp rel 193;
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 373;
ap += 26;
call rel 8203;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 565;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 573;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 311;
ap += 26;
call rel 8141;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 503;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 511;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 249;
ap += 26;
call rel 8079;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 441;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 449;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 187;
ap += 26;
call rel 8017;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 379;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 387;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 4, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 125;
ap += 26;
call rel 7955;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 317;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 325;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 63;
ap += 26;
call rel 7893;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 255;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 263;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 6, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 239 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 204;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -19] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 170;
[ap + 1] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 137 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 107;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel 7716;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
ret;
ap += 12;
call rel 7685;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22150, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 24;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 23600, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 7], ap++;
[ap + 0] = [[ap + -41] + 8], ap++;
ret;
ap += 24;
call rel 7654;
[ap + 0] = [ap + -37] + 1, ap++;
[ap + 0] = [ap + -37] + 34000, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
call rel 7638;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 45;
call rel 7598;
[ap + 0] = [ap + -61] + 1, ap++;
[ap + 0] = [ap + -56] + 47130, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 57;
[ap + 0] = [[ap + -67] + 5], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -2] + 48580, ap++;
[ap + 0] = [ap + -70] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -73] + 7], ap++;
[ap + 0] = [[ap + -74] + 8], ap++;
ret;
ap += 57;
call rel 7567;
[ap + 0] = [ap + -73] + 1, ap++;
[ap + 0] = [ap + -68] + 58980, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 64;
[ap + 0] = [[ap + -74] + 5], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2] + 59880, ap++;
[ap + 0] = [ap + -77] + 9, ap++;
[ap + 0] = [[ap + -78] + 7], ap++;
[ap + 0] = [[ap + -79] + 8], ap++;
jmp rel 28;
ap += 69;
call rel 7539;
[ap + 0] = [ap + -85] + 1, ap++;
[ap + 0] = [ap + -80] + 70830, ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 76;
[ap + 0] = [[ap + -86] + 5], ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = [ap + -2] + 71830, ap++;
[ap + 0] = [ap + -89] + 9, ap++;
[ap + 0] = [[ap + -90] + 7], ap++;
[ap + 0] = [[ap + -91] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 81;
call rel 7503;
[ap + 0] = [fp + -18] + 1, ap++;
[ap + 0] = [ap + -92] + 82680, ap++;
[ap + 0] = [ap + -94], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 94;
[ap + 0] = [[fp + -16] + 26], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -2] + 84220, ap++;
[ap + 0] = [fp + -16] + 30, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -16] + 28], ap++;
[ap + 0] = [[fp + -16] + 29], ap++;
ret;
ap += 95;
[ap + 0] = [[fp + -16] + 19], ap++;
[ap + 0] = [ap + -1] + 94810, ap++;
[ap + 0] = [fp + -16] + 23, ap++;
[ap + 0] = [[fp + -16] + 21], ap++;
[ap + 0] = [[fp + -16] + 22], ap++;
jmp rel 11;
ap += 100;
[ap + 0] = [[fp + -16] + 12], ap++;
[ap + 0] = [ap + -1] + 105960, ap++;
[ap + 0] = [fp + -16] + 16, ap++;
[ap + 0] = [[fp + -16] + 14], ap++;
[ap + 0] = [[fp + -16] + 15], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 109;
[ap + 0] = [[fp + -16] + 5], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -2] + 117370, ap++;
[ap + 0] = [fp + -16] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -16] + 7], ap++;
[ap + 0] = [[fp + -16] + 8], ap++;
ret;
jmp rel [fp + -16];
jmp rel 95;
jmp rel 76;
jmp rel 58;
jmp rel 40;
jmp rel 22;
[ap + 0] = 1161421884907165684534722683959634395527710082395067253614003966574012122326, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 10826;
ret;
ap += 15;
[ap + 0] = 1524957347993580362782972313714593590833763121067343414496233623101384695409, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -5] + 3];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
ap += 15;
[ap + 0] = 100496441654634573157473344853726243145076371777105830457225443166473794816, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 15;
[ap + 0] = 522360422089498844460372820427454763610214638166678315907573452224372440002, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 15;
[ap + 0] = 567973069892247199858674982226281251448771553086565275180494235891264391140, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -5] + 2];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 15;
[ap + 0] = 1164085952833259089211697452575449254046721108963196566204858881276624768985, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 30079754995947265970385662090878901931371247240048244, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 1265 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 1212;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 1152 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1088 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 1059 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1021 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 971 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -12] + 0];
jmp rel 920;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 865 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 801 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -13] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 774;
[ap + 1] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[fp + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 745 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 707 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -28] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -29] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 659;
[ap + 1] = [ap + -29] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[fp + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 609 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 554 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 503;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 10420;
jmp rel 457 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 423 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[ap + -49] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -50] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 378;
[ap + 1] = [ap + -50] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -4] = [[ap + -15] + 1];
[fp + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 5], ap++;
jmp rel 328 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 4], ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 273 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 222;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 172 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 119 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 70;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 23 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -182], ap++;
[ap + 0] = [ap + -169], ap++;
[ap + 0] = [ap + -160], ap++;
[ap + 0] = [ap + -148], ap++;
[ap + 0] = [ap + -138], ap++;
[ap + 0] = [ap + -124], ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [[ap + -30] + 6], ap++;
ret;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
ret;
call rel 6783;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -11] + 10300, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
call rel -19702;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15] + 10400, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 12350, ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [[ap + -46] + 7], ap++;
ret;
ap += 16;
call rel 6684;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -27] + 22650, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 16;
call rel -19803;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -31] + 22750, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 32;
[ap + 0] = [[ap + -48] + 4], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -2] + 24800, ap++;
[ap + 0] = [ap + -51] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -63] + 6], ap++;
[ap + 0] = [[ap + -64] + 7], ap++;
ret;
ap += 32;
call rel 6583;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -43] + 35100, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 43;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -45] + 36460, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60], ap++;
ret;
ap += 44;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51] + 36650, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60], ap++;
ret;
ap += 83;
call rel 6487;
[ap + 0] = [ap + -103] + 3, ap++;
[ap + 0] = [ap + -94] + 51630, ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 83;
call rel -20000;
[ap + 0] = [ap + -103] + 3, ap++;
[ap + 0] = [ap + -98] + 51730, ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 99;
[ap + 0] = [[ap + -112] + 4], ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = [ap + -2] + 53780, ap++;
[ap + 0] = [ap + -115] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -127] + 6], ap++;
[ap + 0] = [[ap + -128] + 7], ap++;
ret;
ap += 99;
call rel 6386;
[ap + 0] = [ap + -118] + 2, ap++;
[ap + 0] = [ap + -110] + 64080, ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 94;
call rel -20119;
[ap + 0] = [ap + -113] + 3, ap++;
[ap + 0] = [ap + -108] + 63260, ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 109;
[ap + 0] = [[ap + -122] + 4], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -2] + 65420, ap++;
[ap + 0] = [ap + -125] + 8, ap++;
[ap + 0] = [[ap + -126] + 6], ap++;
[ap + 0] = [[ap + -127] + 7], ap++;
jmp rel 64;
ap += 109;
call rel 6327;
[ap + 0] = [ap + -128] + 2, ap++;
[ap + 0] = [ap + -120] + 75720, ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 109;
call rel -20157;
[ap + 0] = [ap + -128] + 3, ap++;
[ap + 0] = [ap + -123] + 75550, ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 124;
[ap + 0] = [[ap + -135] + 4], ap++;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = [ap + -2] + 77710, ap++;
[ap + 0] = [ap + -138] + 8, ap++;
[ap + 0] = [[ap + -139] + 6], ap++;
[ap + 0] = [[ap + -140] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 129;
call rel 6237;
[ap + 0] = [ap + -147] + 1, ap++;
[ap + 0] = [ap + -140] + 88460, ap++;
[ap + 0] = [ap + -143], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 143;
[ap + 0] = [[ap + -151] + 4], ap++;
[ap + 0] = [ap + -147], ap++;
[ap + 0] = [ap + -2] + 90090, ap++;
[ap + 0] = [ap + -154] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -166] + 6], ap++;
[ap + 0] = [[ap + -167] + 7], ap++;
ret;
ap += 133;
call rel -20301;
[ap + 0] = [ap + -152] + 3, ap++;
[ap + 0] = [ap + -147] + 98950, ap++;
[ap + 0] = [ap + -149], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 148;
[ap + 0] = [[ap + -156] + 4], ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -2] + 101110, ap++;
[ap + 0] = [ap + -159] + 8, ap++;
[ap + 0] = [[ap + -160] + 6], ap++;
[ap + 0] = [[ap + -161] + 7], ap++;
jmp rel 51;
ap += 143;
call rel -20326;
[ap + 0] = [ap + -162] + 3, ap++;
[ap + 0] = [ap + -157] + 110620, ap++;
[ap + 0] = [ap + -159], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 158;
[ap + 0] = [[ap + -170] + 4], ap++;
[ap + 0] = [ap + -162], ap++;
[ap + 0] = [ap + -2] + 112780, ap++;
[ap + 0] = [ap + -173] + 8, ap++;
[ap + 0] = [[ap + -174] + 6], ap++;
[ap + 0] = [[ap + -175] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 162;
call rel -20547;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -176] + 123440, ap++;
[ap + 0] = [ap + -178], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 177;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 125400, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
jmp rel [fp + -4];
jmp rel 216;
jmp rel 180;
jmp rel 144;
jmp rel 108;
jmp rel 72;
jmp rel 36;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 30079754995947265970385662090878901931391068279174515, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -4] = [[ap + -1] + 0];
[fp + -3] = [[ap + -1] + 1];
[ap + 0] = 128670892847731096876195745459382156113904995915174282626924791624613405295, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -4] = [[fp + -6] + 3];
[ap + -3] = [[fp + -6] + 4];
[ap + -2] = [[fp + -6] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 7], ap++;
jmp rel 48 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [fp + -6] + 10, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 27;
ap += 1;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
ret;
call rel 3931;
[ap + 0] = [ap + -8] + 10, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 11;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [ap + -1] + 1200, ap++;
[ap + 0] = [fp + -6] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel -1687;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 440 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 420 if [ap + -14] != 0;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -4] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[fp + -3] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -25] + 0], ap++;
[ap + -4] = [[ap + -26] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -28] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -25] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -27] + 1], ap++;
[ap + -7] = [[ap + -28] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
call rel -2872;
[ap + 0] = [ap + -149] + 6, ap++;
jmp rel 343 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 332 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[ap + -3] = [[ap + -11] + 2];
[ap + -2] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 299 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -22] + 0], ap++;
[ap + -4] = [[ap + -23] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -24] + 2];
jmp rel 267;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -21] + 0], ap++;
[ap + -3] = [[ap + -22] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -23] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -4] = [[ap + -1] + 0];
[fp + -3] = [[ap + -1] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1558888491607572900297085498811328433870345751010628723758273609506997715944, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -6] = [[ap + -14] + 1];
[ap + -15] = [[ap + -14] + 2];
[ap + -5] = [[ap + -14] + 3];
[ap + -4] = [[ap + -14] + 4];
[ap + -3] = [[ap + -14] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 7], ap++;
jmp rel 217 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [[ap + -16] + 8], ap++;
[ap + 0] = [[ap + -17] + 9], ap++;
[ap + 0] = [ap + -18] + 10, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 192;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 166 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -12] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -13] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 975685559645786312946592976135617904278793537816092122519633166081268738026, ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[ap + -31] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
[ap + -5] = [[ap + -12] + 4];
[ap + -5] = [[ap + -12] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 7], ap++;
jmp rel 123 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [[ap + -14] + 8], ap++;
[ap + 0] = [[ap + -15] + 9], ap++;
[ap + 0] = [ap + -16] + 10, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 98;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 72 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -12] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -13] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel -2058;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -52] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -48] + 0];
[ap + -3] = [[ap + -48] + 1];
[ap + -7] = [[ap + -48] + 2];
[ap + -6] = [[ap + -48] + 3];
[ap + -5] = [[ap + -48] + 4];
[ap + -4] = [[ap + -48] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -48]) %}
[ap + 0] = [[ap + -48] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -49] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -53] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -49] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -53] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
[ap + 0] = [[ap + -56] + 9], ap++;
ret;
ap += 25;
[ap + 0] = [ap + -43] + 3, ap++;
[ap + 0] = [ap + -34] + 13480, ap++;
jmp rel 7;
ap += 34;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -37] + 14800, ap++;
call rel 3562;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 47;
[ap + 0] = [[ap + -60] + 6], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2] + 16370, ap++;
[ap + 0] = [ap + -63] + 10, ap++;
[ap + 0] = [[ap + -64] + 8], ap++;
[ap + 0] = [[ap + -65] + 9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 41;
[ap + 0] = [ap + -59] + 3, ap++;
[ap + 0] = [ap + -50] + 26060, ap++;
jmp rel 7;
ap += 50;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -53] + 27380, ap++;
call rel 3521;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 63;
[ap + 0] = [[ap + -78] + 6], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -2] + 28950, ap++;
[ap + 0] = [ap + -81] + 10, ap++;
[ap + 0] = [[ap + -82] + 8], ap++;
[ap + 0] = [[ap + -83] + 9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 65;
call rel -21368;
[ap + 0] = [ap + -95] + 3, ap++;
[ap + 0] = [ap + -79] + 39730, ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 80;
[ap + 0] = [[ap + -92] + 4], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -2] + 41790, ap++;
[ap + 0] = [ap + -95] + 8, ap++;
[ap + 0] = [[ap + -96] + 6], ap++;
[ap + 0] = [[ap + -97] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 88;
[ap + 0] = [ap + -89] + 52910, ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -93], ap++;
jmp rel 8;
ap += 89;
[ap + 0] = [ap + -96] + 53200, ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 230;
call rel 10746;
[ap + 0] = [ap + -1] + 10745, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 185060, ap++;
[ap + 0] = [ap + -238] + [ap + -1], ap++;
[ap + 0] = [ap + -242], ap++;
[ap + 0] = [ap + -242], ap++;
jmp rel 17;
ap += 231;
call rel 10729;
[ap + 0] = [ap + -1] + 10728, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 185350, ap++;
[ap + 0] = [ap + -254] + [ap + -1], ap++;
[ap + 0] = [ap + -242], ap++;
[ap + 0] = [ap + -242], ap++;
[ap + 0] = [ap + -258], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 30079754995947265970304447983584668075990570626933861, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8466698336946495152742507805328298621807841810373315186091759920484, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 447786778914225891416418376047947191489317987698, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 27357377799441806901529300984709551843694, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -15] = [[fp + -3] + 0];
[fp + -14] = [[fp + -3] + 1];
[fp + -13] = [[fp + -3] + 2];
[fp + -12] = [[fp + -3] + 3];
[fp + -11] = [[fp + -3] + 4];
[fp + -10] = [[fp + -3] + 5];
[fp + -9] = [[fp + -3] + 6];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
jmp rel [fp + -8];
jmp rel 60;
jmp rel 50;
jmp rel 40;
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 48;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 40;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 32;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 4, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 5, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 6, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -7] = [[ap + -1] + 0];
[fp + -6] = [[ap + -1] + 1];
[fp + -5] = [[ap + -1] + 2];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 3, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1872388116391579689807509434374778377146229379287883072657558273418085, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 755 if [ap + -2] != 0;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 735;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [fp + -5] + 3, ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 8;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 674 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 647 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 8;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 614 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 587 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 547;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[ap + -12] + 0], ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 8;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 490 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -14] + 0], ap++;
[ap + 3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -19] + 2];
jmp rel 463 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 8;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 430 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 403 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
jmp rel 8;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 345 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -13] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -15] + 1], ap++;
[ap + -5] = [[ap + -16] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 322 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 263 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 240 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 158 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 99 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 76 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -12] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 19 if [ap + -2] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [ap + -15] + 3, ap++;
jmp rel 5;
ap += 9;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 10;
[ap + 0] = [ap + -24] + 3, ap++;
jmp rel 5;
ap += 18;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 19;
[ap + 0] = [ap + -33] + 3, ap++;
jmp rel 5;
ap += 27;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 28;
[ap + 0] = [ap + -44] + 3, ap++;
jmp rel 5;
ap += 36;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 39;
[ap + 0] = [ap + -52] + 3, ap++;
jmp rel 5;
ap += 46;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 13;
ap += 47;
[ap + 0] = [ap + -66] + 3, ap++;
jmp rel 5;
ap += 54;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 64;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 61;
[ap + 0] = [ap + -74] + 3, ap++;
jmp rel 5;
ap += 68;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -73], ap++;
jmp rel 13;
ap += 69;
[ap + 0] = [ap + -82] + 3, ap++;
jmp rel 5;
ap += 76;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 81;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 5;
ap += 87;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 460936957440218058047455772526769177894613881956331714540915, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 0];
[fp + -17] = [[fp + -16] + 1];
[fp + -15] = [[fp + -16] + 2];
[fp + -14] = [[fp + -16] + 3];
[fp + -13] = [[fp + -16] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16]) %}
[ap + 0] = [[fp + -16] + 6], ap++;
jmp rel 1027 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 7];
[ap + -3] = [[fp + -16] + 8];
[fp + -15] = [[fp + -16] + 9];
[ap + -2] = [[fp + -16] + 10];
[fp + -12] = [[fp + -16] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 7) %}
[ap + 0] = [[fp + -16] + 13], ap++;
jmp rel 994 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 14];
[ap + -3] = [[fp + -16] + 15];
[fp + -15] = [[fp + -16] + 16];
[ap + -2] = [[fp + -16] + 17];
[fp + -11] = [[fp + -16] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 14) %}
[ap + 0] = [[fp + -16] + 20], ap++;
jmp rel 969 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 21];
[ap + -3] = [[fp + -16] + 22];
[fp + -15] = [[fp + -16] + 23];
[ap + -2] = [[fp + -16] + 24];
[fp + -10] = [[fp + -16] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 21) %}
[ap + 0] = [[fp + -16] + 27], ap++;
jmp rel 935 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 26], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -16] + 28, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -18] + 0];
jmp rel 903;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -18] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [fp + -18] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -9] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 873 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 841;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -8] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 808 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 778;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel [fp + -7];
jmp rel 193;
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 187;
ap += 47;
call rel 4022;
[ap + 0] = [ap + -67] + 1, ap++;
[ap + 0] = [ap + -58] + 47480, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 683;
ap += 60;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -1] + 49020, ap++;
[ap + 0] = [ap + -74] + 9, ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
[ap + 0] = [[ap + -76] + 8], ap++;
jmp rel 691;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 125;
ap += 47;
call rel 3960;
[ap + 0] = [ap + -67] + 1, ap++;
[ap + 0] = [ap + -58] + 47480, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 621;
ap += 60;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -1] + 49020, ap++;
[ap + 0] = [ap + -74] + 9, ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
[ap + 0] = [[ap + -76] + 8], ap++;
jmp rel 629;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 63;
ap += 47;
call rel 3898;
[ap + 0] = [ap + -67] + 1, ap++;
[ap + 0] = [ap + -58] + 47480, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 559;
ap += 60;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -1] + 49020, ap++;
[ap + 0] = [ap + -74] + 9, ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
[ap + 0] = [[ap + -76] + 8], ap++;
jmp rel 567;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 543 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 508;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -19] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 474;
[ap + 1] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel [fp + -6];
jmp rel 193;
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 187;
ap += 26;
call rel 3774;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 379;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 387;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 125;
ap += 26;
call rel 3712;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 317;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 325;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 63;
ap += 26;
call rel 3650;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 255;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 263;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 239 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 204;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -19] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 170;
[ap + 1] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 137 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 107;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel 3473;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
ret;
ap += 12;
call rel 3442;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22150, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 24;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 23600, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 7], ap++;
[ap + 0] = [[ap + -41] + 8], ap++;
ret;
ap += 24;
call rel 3411;
[ap + 0] = [ap + -37] + 1, ap++;
[ap + 0] = [ap + -37] + 34000, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
call rel 3395;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 45;
call rel 3355;
[ap + 0] = [ap + -58] + 1, ap++;
[ap + 0] = [ap + -58] + 47130, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 47;
call rel 3339;
[ap + 0] = [ap + -67] + 1, ap++;
[ap + 0] = [ap + -58] + 47480, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 60;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -1] + 49020, ap++;
[ap + 0] = [ap + -74] + 9, ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
[ap + 0] = [[ap + -76] + 8], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 66;
call rel 3299;
[ap + 0] = [ap + -82] + 1, ap++;
[ap + 0] = [ap + -77] + 60260, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 78;
[ap + 0] = [[ap + -88] + 5], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -2] + 61710, ap++;
[ap + 0] = [ap + -91] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -94] + 7], ap++;
[ap + 0] = [[ap + -95] + 8], ap++;
ret;
ap += 78;
call rel 3268;
[ap + 0] = [ap + -95] + 1, ap++;
[ap + 0] = [ap + -89] + 72110, ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 86;
[ap + 0] = [[ap + -96] + 5], ap++;
[ap + 0] = [ap + -90], ap++;
[ap + 0] = [ap + -2] + 73100, ap++;
[ap + 0] = [ap + -99] + 9, ap++;
[ap + 0] = [[ap + -100] + 7], ap++;
[ap + 0] = [[ap + -101] + 8], ap++;
jmp rel 28;
ap += 91;
call rel 3240;
[ap + 0] = [fp + -18] + 1, ap++;
[ap + 0] = [ap + -102] + 84050, ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 99;
[ap + 0] = [[fp + -16] + 26], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -2] + 85140, ap++;
[ap + 0] = [fp + -16] + 30, ap++;
[ap + 0] = [[fp + -16] + 28], ap++;
[ap + 0] = [[fp + -16] + 29], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 105;
[ap + 0] = [[fp + -16] + 19], ap++;
[ap + 0] = [ap + -1] + 96180, ap++;
[ap + 0] = [fp + -16] + 23, ap++;
[ap + 0] = [[fp + -16] + 21], ap++;
[ap + 0] = [[fp + -16] + 22], ap++;
jmp rel 11;
ap += 110;
[ap + 0] = [[fp + -16] + 12], ap++;
[ap + 0] = [ap + -1] + 107330, ap++;
[ap + 0] = [fp + -16] + 16, ap++;
[ap + 0] = [[fp + -16] + 14], ap++;
[ap + 0] = [[fp + -16] + 15], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 119;
[ap + 0] = [[fp + -16] + 5], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -2] + 118740, ap++;
[ap + 0] = [fp + -16] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -16] + 7], ap++;
[ap + 0] = [[fp + -16] + 8], ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 1236 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 1183;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 1123 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1059 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 1030 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 992 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 937 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 873 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 844;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 815 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 777 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 3, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 727;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 677 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 628;
[ap + 1] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 6725;
jmp rel 582 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 548 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[ap + -43] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 503;
[ap + 1] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 6945;
jmp rel 457 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 423 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[ap + -43] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 378;
[ap + 1] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -4] = [[ap + -15] + 1];
[fp + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 5], ap++;
jmp rel 328 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 4], ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 273 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 222;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 172 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 119 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 70;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 23 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -206], ap++;
[ap + 0] = [ap + -193], ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -175], ap++;
[ap + 0] = [ap + -160], ap++;
[ap + 0] = [ap + -143], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [[ap + -30] + 6], ap++;
ret;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
ret;
call rel 2660;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -11] + 10300, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
call rel -23825;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15] + 10400, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 12350, ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [[ap + -46] + 7], ap++;
ret;
ap += 16;
call rel 2561;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -27] + 22650, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 16;
call rel -23926;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -31] + 22750, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 32;
[ap + 0] = [[ap + -48] + 4], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -2] + 24800, ap++;
[ap + 0] = [ap + -51] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -63] + 6], ap++;
[ap + 0] = [[ap + -64] + 7], ap++;
ret;
ap += 32;
call rel 2460;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -43] + 35100, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 43;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -45] + 36460, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60], ap++;
ret;
ap += 44;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51] + 36650, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60], ap++;
ret;
ap += 77;
call rel 2364;
[ap + 0] = [ap + -96] + 1, ap++;
[ap + 0] = [ap + -88] + 50790, ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 88;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = [ap + -90] + 52150, ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = [ap + -105], ap++;
ret;
ap += 89;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = [ap + -96] + 52340, ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = [ap + -105], ap++;
ret;
ap += 122;
call rel 2268;
[ap + 0] = [ap + -139] + 1, ap++;
[ap + 0] = [ap + -133] + 66480, ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 135;
[ap + 0] = [[ap + -149] + 4], ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -2] + 68020, ap++;
[ap + 0] = [ap + -152] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -164] + 6], ap++;
[ap + 0] = [[ap + -165] + 7], ap++;
ret;
ap += 135;
call rel 2201;
[ap + 0] = [ap + -155] + 2, ap++;
[ap + 0] = [ap + -146] + 78320, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 131;
call rel -24304;
[ap + 0] = [ap + -150] + 3, ap++;
[ap + 0] = [ap + -145] + 77590, ap++;
[ap + 0] = [ap + -147], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 146;
[ap + 0] = [[ap + -160] + 4], ap++;
[ap + 0] = [ap + -150], ap++;
[ap + 0] = [ap + -2] + 79750, ap++;
[ap + 0] = [ap + -163] + 8, ap++;
[ap + 0] = [[ap + -164] + 6], ap++;
[ap + 0] = [[ap + -165] + 7], ap++;
jmp rel 64;
ap += 146;
call rel 2142;
[ap + 0] = [ap + -166] + 2, ap++;
[ap + 0] = [ap + -157] + 90050, ap++;
[ap + 0] = [ap + -163], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 147;
call rel -24342;
[ap + 0] = [ap + -166] + 3, ap++;
[ap + 0] = [ap + -161] + 89970, ap++;
[ap + 0] = [ap + -163], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 162;
[ap + 0] = [[ap + -170] + 4], ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -2] + 92130, ap++;
[ap + 0] = [ap + -173] + 8, ap++;
[ap + 0] = [[ap + -174] + 6], ap++;
[ap + 0] = [[ap + -175] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 157;
call rel -24419;
[ap + 0] = [ap + -176] + 3, ap++;
[ap + 0] = [ap + -171] + 101440, ap++;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 172;
[ap + 0] = [[ap + -180] + 4], ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -2] + 103600, ap++;
[ap + 0] = [ap + -183] + 8, ap++;
[ap + 0] = [[ap + -184] + 6], ap++;
[ap + 0] = [[ap + -185] + 7], ap++;
jmp rel 51;
ap += 167;
call rel -24444;
[ap + 0] = [ap + -186] + 3, ap++;
[ap + 0] = [ap + -181] + 113110, ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 182;
[ap + 0] = [[ap + -194] + 4], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = [ap + -2] + 115270, ap++;
[ap + 0] = [ap + -197] + 8, ap++;
[ap + 0] = [[ap + -198] + 6], ap++;
[ap + 0] = [[ap + -199] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 186;
call rel -24665;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -200] + 125930, ap++;
[ap + 0] = [ap + -202], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 201;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 127890, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
jmp rel [fp + -16];
jmp rel 114;
jmp rel 98;
jmp rel 79;
jmp rel 61;
jmp rel 40;
jmp rel 22;
[ap + 0] = 1002251722043407796381914257187451154319249077692389745961436558658833170794, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 6193;
ret;
ap += 22;
[ap + 0] = 1315073767143914406652148394641927989259025377370678343883420804647012091191, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 10;
[ap + 0] = 1338991570539227629652968659508509452999440546543359046329858247462908514515, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 6215;
ret;
ap += 22;
[ap + 0] = 1319269186374849392430702546045695014229445999961461257001705867859968848569, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -5] + 3];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
ap += 22;
[ap + 0] = 1128437317928784145444825890238045889700295715782934068810737330726780953452, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -5] + 2];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 22;
[ap + 0] = 1285448261331287045724978357852080410578708920464955352822619350189361317568, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 22;
[ap + 0] = 1354750726650008468843070812941655424587229077151228878914072867152800995089, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7891998437966260601762371672023996916393715052535837300, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1702927071520734616389433910047276443503088949054642808164, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
jmp rel [fp + -4];
jmp rel 63;
jmp rel 42;
jmp rel 21;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 435949330309308061794332689512135401393881765891066974922084, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7314016079654608163373270594669336133645042587978273663295604024676, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 25984604973155740606710932073097299372763061263688549, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 435949330309308061797057627592425306483098928051468198896505, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 0];
[fp + -14] = [[fp + -13] + 1];
[fp + -12] = [[fp + -13] + 2];
[fp + -11] = [[fp + -13] + 3];
[fp + -10] = [[fp + -13] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13]) %}
[ap + 0] = [[fp + -13] + 6], ap++;
jmp rel 525 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 7];
[ap + -3] = [[fp + -13] + 8];
[fp + -12] = [[fp + -13] + 9];
[ap + -2] = [[fp + -13] + 10];
[fp + -9] = [[fp + -13] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 7) %}
[ap + 0] = [[fp + -13] + 13], ap++;
jmp rel 500 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 14];
[ap + -3] = [[fp + -13] + 15];
[fp + -12] = [[fp + -13] + 16];
[ap + -2] = [[fp + -13] + 17];
[fp + -8] = [[fp + -13] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 14) %}
[ap + 0] = [[fp + -13] + 20], ap++;
jmp rel 471 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 21];
[ap + -3] = [[fp + -13] + 22];
[fp + -12] = [[fp + -13] + 23];
[ap + -2] = [[fp + -13] + 24];
[fp + -7] = [[fp + -13] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 21) %}
[ap + 0] = [[fp + -13] + 27], ap++;
jmp rel 442 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 26], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -13] + 28, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -15] + 0];
jmp rel 410;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -15] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 377 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 347;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel [fp + -5];
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -11] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -12] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 125;
ap += 14;
call rel 1466;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -25] + 22500, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 254;
ap += 27;
[ap + 0] = [[ap + -39] + 5], ap++;
[ap + 0] = [ap + -1] + 24040, ap++;
[ap + 0] = [ap + -41] + 9, ap++;
[ap + 0] = [[ap + -42] + 7], ap++;
[ap + 0] = [[ap + -43] + 8], ap++;
jmp rel 262;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -12] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 63;
ap += 14;
call rel 1404;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -25] + 22500, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 192;
ap += 27;
[ap + 0] = [[ap + -39] + 5], ap++;
[ap + 0] = [ap + -1] + 24040, ap++;
[ap + 0] = [ap + -41] + 9, ap++;
[ap + 0] = [[ap + -42] + 7], ap++;
[ap + 0] = [[ap + -43] + 8], ap++;
jmp rel 200;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -11] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -12] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 176 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 141;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -19] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 107;
[ap + 1] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel 1259;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
ret;
ap += 12;
call rel 1228;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -25] + 22150, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 14;
call rel 1212;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -25] + 22500, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 27;
[ap + 0] = [[ap + -39] + 5], ap++;
[ap + 0] = [ap + -1] + 24040, ap++;
[ap + 0] = [ap + -41] + 9, ap++;
[ap + 0] = [[ap + -42] + 7], ap++;
[ap + 0] = [[ap + -43] + 8], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 33;
call rel 1172;
[ap + 0] = [ap + -49] + 1, ap++;
[ap + 0] = [ap + -44] + 35280, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 45;
[ap + 0] = [[ap + -55] + 5], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 36730, ap++;
[ap + 0] = [ap + -58] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -61] + 7], ap++;
[ap + 0] = [[ap + -62] + 8], ap++;
ret;
ap += 45;
call rel 1141;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = [ap + -56] + 47130, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 58;
[ap + 0] = [[fp + -13] + 26], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -2] + 48670, ap++;
[ap + 0] = [fp + -13] + 30, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 28], ap++;
[ap + 0] = [[fp + -13] + 29], ap++;
ret;
ap += 63;
[ap + 0] = [[fp + -13] + 19], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -2] + 59720, ap++;
[ap + 0] = [fp + -13] + 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 21], ap++;
[ap + 0] = [[fp + -13] + 22], ap++;
ret;
ap += 64;
[ap + 0] = [[fp + -13] + 12], ap++;
[ap + 0] = [ap + -1] + 70310, ap++;
[ap + 0] = [fp + -13] + 16, ap++;
[ap + 0] = [[fp + -13] + 14], ap++;
[ap + 0] = [[fp + -13] + 15], ap++;
jmp rel 11;
ap += 69;
[ap + 0] = [[fp + -13] + 5], ap++;
[ap + 0] = [ap + -1] + 81460, ap++;
[ap + 0] = [fp + -13] + 9, ap++;
[ap + 0] = [[fp + -13] + 7], ap++;
[ap + 0] = [[fp + -13] + 8], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 760 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 0], ap++;
[ap + 3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 2];
jmp rel 702 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 673 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 635 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 591 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 544;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 495 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -12] + 0];
jmp rel 450;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 406 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 363;
[ap + 1] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 5281;
jmp rel 323 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 295 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[ap + -41] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -42] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 256;
[ap + 1] = [ap + -42] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -4] = [[ap + -15] + 1];
[fp + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 5], ap++;
jmp rel 212 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 4], ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 163 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 118;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 28 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 11;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -141], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -28], ap++;
ret;
call rel -25717;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -42] + 6], ap++;
[ap + 0] = [[ap + -43] + 7], ap++;
ret;
ap += 16;
call rel 682;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -27] + 12250, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 16;
call rel -25799;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -31] + 12350, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 32;
[ap + 0] = [[ap + -48] + 4], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -2] + 14400, ap++;
[ap + 0] = [ap + -51] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -60] + 6], ap++;
[ap + 0] = [[ap + -61] + 7], ap++;
ret;
ap += 32;
call rel 599;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -43] + 24700, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 43;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -45] + 26060, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
ret;
ap += 44;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51] + 26250, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
ret;
ap += 75;
call rel 521;
[ap + 0] = [ap + -92] + 1, ap++;
[ap + 0] = [ap + -86] + 40110, ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 88;
[ap + 0] = [[ap + -99] + 4], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2] + 41650, ap++;
[ap + 0] = [ap + -102] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -111] + 6], ap++;
[ap + 0] = [[ap + -112] + 7], ap++;
ret;
ap += 88;
call rel 466;
[ap + 0] = [ap + -106] + 1, ap++;
[ap + 0] = [ap + -99] + 51950, ap++;
[ap + 0] = [ap + -102], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 102;
[ap + 0] = [[ap + -114] + 4], ap++;
[ap + 0] = [ap + -106], ap++;
[ap + 0] = [ap + -2] + 53580, ap++;
[ap + 0] = [ap + -117] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -126] + 6], ap++;
[ap + 0] = [[ap + -127] + 7], ap++;
ret;
ap += 101;
call rel -26204;
[ap + 0] = [ap + -120] + 3, ap++;
[ap + 0] = [ap + -115] + 63790, ap++;
[ap + 0] = [ap + -117], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 116;
[ap + 0] = [[ap + -124] + 4], ap++;
[ap + 0] = [ap + -120], ap++;
[ap + 0] = [ap + -2] + 65750, ap++;
[ap + 0] = [ap + -127] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -136] + 6], ap++;
[ap + 0] = [[ap + -137] + 7], ap++;
ret;
ap += 106;
call rel -26115;
[ap + 0] = [ap + -125] + 3, ap++;
[ap + 0] = [ap + -120] + 74610, ap++;
[ap + 0] = [ap + -122], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 121;
[ap + 0] = [[ap + -129] + 4], ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -2] + 76770, ap++;
[ap + 0] = [ap + -132] + 8, ap++;
[ap + 0] = [[ap + -133] + 6], ap++;
[ap + 0] = [[ap + -134] + 7], ap++;
jmp rel 45;
ap += 116;
call rel -26140;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -130] + 86280, ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 131;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 88440, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5959518537025422419532192388965862262535781, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 23632860550747628264353745246870641142126, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 51 if [ap + -2] != 0;
jmp rel 8 if [ap + -1] != 0;
ap += 3;
[ap + 0] = 7, ap++;
jmp rel 28;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 8 if [ap + -1] != 0;
ap += 2;
[ap + 0] = 5, ap++;
jmp rel 18;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 8 if [ap + -1] != 0;
ap += 1;
[ap + 0] = 3, ap++;
jmp rel 8;
[ap + -3] = [ap + 0] + 3, ap++;
jmp rel 10 if [ap + -1] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 4;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -15] = [[fp + -3] + 0];
[fp + -14] = [[fp + -3] + 1];
[fp + -13] = [[fp + -3] + 2];
[fp + -12] = [[fp + -3] + 3];
[fp + -11] = [[fp + -3] + 4];
[fp + -10] = [[fp + -3] + 5];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 6, ap++;
jmp rel [fp + -9];
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel [fp + -8];
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -7] = [[ap + -1] + 0];
[fp + -6] = [[ap + -1] + 1];
[fp + -5] = [[ap + -1] + 2];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 3, ap++;
ret;
[fp + -12] = [[fp + -3] + 0];
[fp + -11] = [[fp + -3] + 1];
[fp + -10] = [[fp + -3] + 2];
[fp + -9] = [[fp + -3] + 3];
[fp + -8] = [[fp + -3] + 4];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
jmp rel [fp + -7];
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -6] = [[ap + -1] + 0];
[fp + -5] = [[ap + -1] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2, ap++;
ret;
[fp + -14] = [[fp + -3] + 0];
[fp + -13] = [[fp + -3] + 1];
[fp + -12] = [[fp + -3] + 2];
[fp + -11] = [[fp + -3] + 3];
[fp + -10] = [[fp + -3] + 4];
[fp + -9] = [[fp + -3] + 5];
[fp + -8] = [[fp + -3] + 6];
[fp + -7] = [[fp + -3] + 7];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
ret;
[fp + -12] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
[fp + -12] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642104203229548495787928534675319, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155801121784903550401946791117314617207, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
call rel 5536;
[ap + 0] = [ap + -1] + 5535, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 119280, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -10] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 403;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -7] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 373;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -7] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -5] = [[fp + -8] + 1];
[ap + -4] = [[fp + -8] + 2];
[ap + -6] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 300 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[ap + -6] + 0];
[fp + -7] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 7];
[ap + -6] = [[fp + -8] + 8];
[ap + -5] = [[fp + -8] + 9];
[ap + -7] = [[fp + -8] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8] + 7) %}
[ap + 0] = [[fp + -8] + 12], ap++;
jmp rel 227 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 11], ap++;
[ap + 0] = 1025310123145470443248164887320592303314351953140339051646286095766923394624, ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + -1] = [[ap + -7] + 1];
[ap + 0] = [[ap + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -8] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel -21792;
[ap + 0] = [ap + -127] + 3, ap++;
jmp rel 160 if [ap + -10] != 0;
[ap + 0] = [ap + -12], ap++;
jmp rel 151 if [ap + -10] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 8 if [ap + -131] != 0;
ap += 6;
[ap + 0] = [ap + -7] + 640, ap++;
jmp rel 21;
[ap + -131] = [ap + 0] + [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 56 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
jmp rel 13 if [fp + -7] != 0;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -2] + 3640, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -27] + 0];
jmp rel 16;
[ap + -1] = [[ap + -26] + 0];
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -246;
ret;
call rel -21894;
[ap + 0] = [ap + -33] + 1, ap++;
[ap + 0] = [ap + -11] + 2170, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -4] + 1900, ap++;
[fp + -5] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 0];
jmp rel 45;
[ap + -1] = [[ap + -24] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -29] + 1];
jmp rel 19;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -29] + 1];
[ap + 0] = [ap + -29] + 2, ap++;
[ap + 0] = [ap + -5] + 800, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -26219;
[ap + 0] = [ap + -35] + 2, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -21962;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = [ap + -11] + 570, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -1] + 4540, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -13] + 4730, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[fp + -8] + 11], ap++;
call rel 5180;
[ap + 0] = [ap + -1] + 5179, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 93460, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -8] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [[fp + -8] + 14], ap++;
ret;
[ap + 0] = [[fp + -8] + 4], ap++;
call rel 5159;
[ap + 0] = [ap + -1] + 5158, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 106270, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
ret;
call rel 5137;
[ap + 0] = [ap + -1] + 5136, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 118980, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -23644;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 176 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -500;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -550;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -597;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -13] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 18;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 2190, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
ap += 7;
%{ memory[ap + 0] = 5440 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768206016, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 63;
[fp + -7] = [ap + 0] + 5440, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 44;
[fp + 2] = [[fp + -6] + 0];
[fp + 3] = [[fp + -6] + 1];
[fp + 4] = [[fp + -6] + 2];
[fp + 5] = [[fp + -6] + 3];
[fp + 6] = [[fp + -6] + 4];
[fp + 2] = [[fp + -3] + 0];
[fp + 3] = [[fp + -3] + 1];
[fp + 5] = [ap + 0] + [fp + 4], ap++;
[ap + -1] = [[fp + -3] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[fp + 0] = [fp + -6] + 5;
[fp + 1] = [fp + -5];
call rel 140;
jmp rel 13 if [ap + -3] != 0;
[fp + 6] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
call rel -51;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2240, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 5740, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -23927;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = 13290 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768198166, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 78;
[fp + -8] = [ap + 0] + 13290, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 13790, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 3846;
jmp rel 36 if [ap + -9] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 19 if [ap + -7] != 0;
[ap + -6] = [[fp + -4] + 0];
[ap + -5] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -3] = [[fp + -4] + 3];
[ap + -2] = [[fp + -4] + 4];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 5, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -52;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2] + 2570, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 2770, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -24020;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 1770 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209686, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 34;
[fp + -7] = [ap + 0] + 1770, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -28;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 2070, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -24075;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 1;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 136 if [ap + -2] != 0;
[fp + 0] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -6] + 1], ap++;
[ap + -5] = [[fp + -6] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 112 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[fp + -6] + 0];
[ap + 0] = [fp + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 40 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel -19695;
jmp rel 11 if [ap + -6] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 29;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 900, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3170, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 14 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -9] + 4300, ap++;
jmp rel 7;
ap += 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -14] + 5620, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -25], ap++;
[ap + 0] = [fp + -24], ap++;
[ap + 0] = [fp + -23], ap++;
[ap + 0] = [fp + -22], ap++;
[ap + 0] = [fp + -21], ap++;
[ap + 0] = [fp + -20], ap++;
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + -15], ap++;
call rel 3832;
jmp rel 721 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 705 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -21] + 6, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -3] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -2] = [[ap + -9] + 3];
[fp + -14] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 672 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 635;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -20] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -13] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 605 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 578;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -12] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 548 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 521;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -11] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 491 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 464;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -10] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 434 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 407;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -9] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 377 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 6, ap++;
[ap + 0] = 6, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 345;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -8] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 307 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 272;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -7] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 242 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 215;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 185 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 158;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 128 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 101;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 71 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 19 if [ap + -1] != 0;
ap += 5;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 550, ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = [[ap + -14] + 7], ap++;
[ap + 0] = [[ap + -15] + 8], ap++;
jmp rel 48;
call rel -1468;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [[ap + -27] + 8], ap++;
jmp rel 25;
ap += 12;
call rel -1493;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22250, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 75;
ap += 24;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 23700, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = [[ap + -38] + 7], ap++;
[ap + 0] = [[ap + -39] + 8], ap++;
jmp rel 83;
ap += 24;
call rel -1518;
[ap + 0] = [ap + -40] + 1, ap++;
[ap + 0] = [ap + -35] + 34100, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 50;
ap += 36;
[ap + 0] = [[ap + -46] + 5], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 35550, ap++;
[ap + 0] = [ap + -49] + 9, ap++;
[ap + 0] = [[ap + -50] + 7], ap++;
[ap + 0] = [[ap + -51] + 8], ap++;
jmp rel 58;
ap += 36;
call rel -1543;
[ap + 0] = [ap + -52] + 1, ap++;
[ap + 0] = [ap + -47] + 45950, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 48;
[ap + 0] = [[ap + -58] + 5], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 47400, ap++;
[ap + 0] = [ap + -61] + 9, ap++;
[ap + 0] = [[ap + -62] + 7], ap++;
[ap + 0] = [[ap + -63] + 8], ap++;
jmp rel 33;
ap += 48;
call rel -1568;
[ap + 0] = [ap + -64] + 1, ap++;
[ap + 0] = [ap + -59] + 57900, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 60;
[ap + 0] = [[ap + -70] + 5], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -2] + 59350, ap++;
[ap + 0] = [ap + -73] + 9, ap++;
[ap + 0] = [[ap + -74] + 7], ap++;
[ap + 0] = [[ap + -75] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 65;
call rel -1609;
[ap + 0] = [ap + -82] + 1, ap++;
[ap + 0] = [ap + -76] + 70200, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 73;
[ap + 0] = [[ap + -83] + 5], ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -2] + 71090, ap++;
[ap + 0] = [ap + -86] + 9, ap++;
[ap + 0] = [[ap + -87] + 7], ap++;
[ap + 0] = [[ap + -88] + 8], ap++;
jmp rel 50;
ap += 73;
call rel -1637;
[ap + 0] = [ap + -89] + 1, ap++;
[ap + 0] = [ap + -84] + 81490, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 85;
[ap + 0] = [[ap + -95] + 5], ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -2] + 82940, ap++;
[ap + 0] = [ap + -98] + 9, ap++;
[ap + 0] = [[ap + -99] + 7], ap++;
[ap + 0] = [[ap + -100] + 8], ap++;
jmp rel 25;
ap += 85;
call rel -1662;
[ap + 0] = [ap + -101] + 1, ap++;
[ap + 0] = [ap + -96] + 93440, ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 75;
ap += 97;
[ap + 0] = [[ap + -107] + 5], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = [ap + -2] + 94890, ap++;
[ap + 0] = [ap + -110] + 9, ap++;
[ap + 0] = [[ap + -111] + 7], ap++;
[ap + 0] = [[ap + -112] + 8], ap++;
jmp rel 83;
ap += 97;
call rel -1687;
[ap + 0] = [ap + -113] + 1, ap++;
[ap + 0] = [ap + -108] + 105290, ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 50;
ap += 109;
[ap + 0] = [[ap + -119] + 5], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -2] + 106740, ap++;
[ap + 0] = [ap + -122] + 9, ap++;
[ap + 0] = [[ap + -123] + 7], ap++;
[ap + 0] = [[ap + -124] + 8], ap++;
jmp rel 58;
ap += 109;
call rel -1712;
[ap + 0] = [ap + -125] + 1, ap++;
[ap + 0] = [ap + -120] + 117140, ap++;
[ap + 0] = [ap + -122], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 121;
[ap + 0] = [[ap + -131] + 5], ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -2] + 118590, ap++;
[ap + 0] = [ap + -134] + 9, ap++;
[ap + 0] = [[ap + -135] + 7], ap++;
[ap + 0] = [[ap + -136] + 8], ap++;
jmp rel 33;
ap += 121;
call rel -1737;
[ap + 0] = [ap + -147] + 1, ap++;
[ap + 0] = [ap + -132] + 129090, ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 134;
[ap + 0] = [[ap + -144] + 5], ap++;
[ap + 0] = [ap + -147], ap++;
[ap + 0] = [ap + -2] + 130630, ap++;
[ap + 0] = [ap + -147] + 9, ap++;
[ap + 0] = [[ap + -148] + 7], ap++;
[ap + 0] = [[ap + -149] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 144;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -146] + 142130, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -152], ap++;
ret;
ap += 145;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -152] + 142320, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -152], ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 286 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -5] = [[fp + -7] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 241 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -4] = [[ap + -8] + 1];
[fp + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 198 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 7];
[ap + -4] = [[ap + -14] + 8];
[fp + -4] = [[ap + -14] + 9];
[ap + -3] = [[ap + -14] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14] + 7) %}
[ap + 0] = [[ap + -14] + 12], ap++;
jmp rel 161 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 11], ap++;
[ap + 0] = [[ap + -16] + 13], ap++;
[ap + 0] = [ap + -17] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -17] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -19] + 1], ap++;
[ap + -5] = [[ap + -20] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 116 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -14] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -15] + 1];
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -21] + 2];
jmp rel 73;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -21] + 2];
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 3268;
jmp rel 37 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 16 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 90, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 47;
call rel -1979;
[ap + 0] = [ap + -74] + 3, ap++;
[ap + 0] = [ap + -58] + 36650, ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 48;
call rel -28456;
[ap + 0] = [ap + -74] + 3, ap++;
[ap + 0] = [ap + -63] + 36840, ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 64;
[ap + 0] = [[ap + -79] + 11], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 38890, ap++;
[ap + 0] = [ap + -82] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -89] + 13], ap++;
[ap + 0] = [[ap + -90] + 14], ap++;
ret;
ap += 70;
[ap + 0] = [[ap + -79] + 4], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 49930, ap++;
[ap + 0] = [ap + -82] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -89] + 6], ap++;
[ap + 0] = [[ap + -90] + 7], ap++;
ret;
ap += 65;
call rel -27962;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -80] + 59710, ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 81;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 61760, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 364 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -8] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -8] + 1], ap++;
[ap + -5] = [[fp + -8] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 319 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -8] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 2];
jmp rel 278;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -5] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 238 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 199;
[ap + 1] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -5] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 159 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 114 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 73;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 2921;
jmp rel 37 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 16 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 90, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 47;
call rel -2326;
[ap + 0] = [ap + -67] + 3, ap++;
[ap + 0] = [ap + -58] + 36650, ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 47;
call rel -28803;
[ap + 0] = [ap + -67] + 3, ap++;
[ap + 0] = [ap + -62] + 36750, ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 63;
[ap + 0] = [[ap + -74] + 4], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -2] + 38800, ap++;
[ap + 0] = [ap + -77] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -84] + 6], ap++;
[ap + 0] = [[ap + -85] + 7], ap++;
ret;
ap += 63;
call rel -2397;
[ap + 0] = [ap + -80] + 1, ap++;
[ap + 0] = [ap + -74] + 49100, ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 76;
[ap + 0] = [[ap + -90] + 4], ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = [ap + -2] + 50640, ap++;
[ap + 0] = [ap + -93] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -100] + 6], ap++;
[ap + 0] = [[ap + -101] + 7], ap++;
ret;
ap += 76;
call rel -2444;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -87] + 60940, ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 76;
call rel -28357;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -91] + 61040, ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 92;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 63090, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 9230 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768202226, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 56;
[fp + -7] = [ap + 0] + 9230, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 37;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + 0] = [fp + -6] + 7;
[fp + 1] = [fp + -5];
call rel 2887;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -44;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2090, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 9530, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -25783;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5040 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768206416, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 58;
[fp + -7] = [ap + 0] + 5040, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 39;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -3] = [[fp + -3] + 0];
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[fp + 0] = [fp + -6] + 3;
[fp + 1] = [fp + -5];
call rel -1793;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -46;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2090, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 5340, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -25858;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 8, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 4] = [[fp + -6] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[fp + -6] + 1], ap++;
[ap + -1] = [[fp + -6] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
%{ memory[ap + 0] = memory[ap + -1] < 7 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 7, ap++;
[ap + -1] = [[fp + -6] + 3];
jmp rel 59;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211449, ap++;
[ap + -1] = [[fp + -6] + 3];
[ap + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010247, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
[ap + 0] = [fp + -6] + 4, ap++;
jmp rel [ap + -2];
jmp rel 42;
jmp rel 35;
jmp rel 28;
jmp rel 21;
jmp rel 14;
jmp rel 7;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1116352408, ap++;
jmp rel 38;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1899447441, ap++;
jmp rel 33;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 3049323471, ap++;
jmp rel 28;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 3921009573, ap++;
jmp rel 23;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 961987163, ap++;
jmp rel 18;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1508970993, ap++;
jmp rel 13;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 2453635748, ap++;
jmp rel 8;
ap += 3;
[ap + 0] = [fp + -6] + 4, ap++;
[ap + 0] = 2870763221, ap++;
[ap + 0] = 7, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 4] = [[ap + -3] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -6] + 1], ap++;
[ap + -1] = [[ap + -7] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -12] + 3];
jmp rel 28;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -12] + 3];
[ap + 0] = 64, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -13] + 4], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -16] + 5], ap++;
[ap + -1] = [[ap + -17] + 6], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -5] * [ap + -17], ap++;
[ap + 0] = [ap + -1] + [fp + -4], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -21] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4] + [ap + -7], ap++;
ret;
ap += 3;
call rel -28687;
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 12560 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768198896, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 286;
[fp + -8] = [ap + 0] + 12560, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -7] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 265;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 241;
[ap + 1] = [fp + -7] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -4] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 155;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -7] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 134;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 105;
[ap + 1] = [fp + -7] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[ap + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 2];
jmp rel 80;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -19] + 2];
[ap + 0] = [fp + -4] + [ap + -6], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 0] = [ap + -1];
[fp + 1] = [ap + -1];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel -20606;
jmp rel 32 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel -20496;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 84;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3160, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 5830, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -20343;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = [ap + -11] + 8880, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -28868;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -11] + 9450, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -20369;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 10320, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -2] + 7460, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -7] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 53;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 2, ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 17;
[ap + 1] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -242;
ret;
call rel -28941;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14] + 1390, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -20442;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 2760, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -28967;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 11390, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 12760, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -26298;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[fp + -14] = [[fp + -5] + 0];
[fp + -13] = [[fp + -5] + 1];
[fp + -12] = [[fp + -5] + 2];
[fp + -11] = [[fp + -3] + 0];
[fp + -10] = [[fp + -3] + 1];
[fp + -9] = [[fp + -3] + 2];
[fp + -8] = [[fp + -3] + 3];
[fp + -7] = [[fp + -3] + 4];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 226 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 6;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8] + 740, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
jmp rel 178;
call rel -3167;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -3217;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -3267;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -7] = [ap + 0] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -3314;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -15] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 20;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 2470, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
%{ memory[ap + 0] = 1770 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209686, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 34;
[fp + -7] = [ap + 0] + 1770, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -28;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 2070, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -26613;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504327651875780457110017927835511, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -15] = [[fp + -5] + 0];
[fp + -14] = [[fp + -5] + 1];
[fp + -13] = [[fp + -5] + 2];
[fp + -12] = [[fp + -3] + 0];
[fp + -11] = [[fp + -3] + 1];
[fp + -10] = [[fp + -3] + 2];
[fp + -9] = [[fp + -3] + 3];
[fp + -8] = [[fp + -3] + 4];
[fp + -7] = [[fp + -3] + 5];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 6, ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 376 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 12;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 1580, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 13, ap++;
jmp rel 328;
call rel -3490;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 10;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 1300, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 11, ap++;
jmp rel 278;
call rel -3540;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 8;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10] + 1020, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 9, ap++;
jmp rel 228;
call rel -3590;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -7] = [ap + 0] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 6;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8] + 740, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
jmp rel 178;
call rel -3640;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -9] = [ap + 0] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -3690;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -11] = [ap + 0] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -3740;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -13] = [ap + 0] + 6, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -3787;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -21] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 3310, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 226 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 6;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8] + 740, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
jmp rel 178;
call rel -3889;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -3939;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -3989;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -7] = [ap + 0] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -4036;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -15] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 20;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 2470, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 226 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 6;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8] + 740, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
jmp rel 178;
call rel -4138;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -4188;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -4238;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -7] = [ap + 0] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -4285;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -15] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 20;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 2470, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[fp + -15] = [[fp + -5] + 0];
[fp + -14] = [[fp + -5] + 1];
[fp + -13] = [[fp + -5] + 2];
[fp + -12] = [[fp + -3] + 0];
[fp + -11] = [[fp + -3] + 1];
[fp + -10] = [[fp + -3] + 2];
[fp + -9] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
jmp rel [fp + -8];
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -7] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
ret;
[fp + -12] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 176 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -4457;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -4507;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -4554;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -13] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 18;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 2190, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 266;
[fp + 1] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 216 if [ap + -2] != 0;
[fp + 0] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -6] + 1], ap++;
[ap + -5] = [[fp + -6] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 192 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[fp + -6] + 0];
[ap + 0] = [fp + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 136 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel -23434;
jmp rel 103 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 93 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 47 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -19] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -4] + 770, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 7;
ap += 9;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -15] + 1320, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 2010, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 27;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2710, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5380, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -9] + 6110, ap++;
jmp rel 7;
ap += 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -14] + 7430, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 8800, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -12] = [[fp + -11] + 1];
[fp + -10] = [[fp + -11] + 2];
[fp + -9] = [[fp + -11] + 3];
[fp + -8] = [[fp + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11]) %}
[ap + 0] = [[fp + -11] + 6], ap++;
jmp rel 264 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -11] + 7];
[ap + -3] = [[fp + -11] + 8];
[fp + -10] = [[fp + -11] + 9];
[ap + -2] = [[fp + -11] + 10];
[fp + -7] = [[fp + -11] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11] + 7) %}
[ap + 0] = [[fp + -11] + 13], ap++;
jmp rel 235 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -9] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -11] + 14];
[ap + -3] = [[fp + -11] + 15];
[fp + -10] = [[fp + -11] + 16];
[ap + -2] = [[fp + -11] + 17];
[fp + -6] = [[fp + -11] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11] + 14) %}
[ap + 0] = [[fp + -11] + 20], ap++;
jmp rel 206 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 19], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -11] + 21, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -13] + 0];
jmp rel 174;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -13] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -10] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 136 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 101;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -10] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 71 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -10] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 19 if [ap + -1] != 0;
ap += 5;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 450, ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = [[ap + -14] + 7], ap++;
[ap + 0] = [[ap + -15] + 8], ap++;
jmp rel 56;
call rel -5060;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [[ap + -27] + 8], ap++;
jmp rel 33;
ap += 12;
call rel -5085;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22250, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 24;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 23700, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = [[ap + -38] + 7], ap++;
[ap + 0] = [[ap + -39] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 29;
call rel -5126;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = [ap + -40] + 34550, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 42;
[ap + 0] = [[fp + -11] + 19], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -2] + 36090, ap++;
[ap + 0] = [fp + -11] + 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 21], ap++;
[ap + 0] = [[fp + -11] + 22], ap++;
ret;
ap += 47;
[ap + 0] = [[fp + -11] + 12], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -2] + 47140, ap++;
[ap + 0] = [fp + -11] + 16, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 14], ap++;
[ap + 0] = [[fp + -11] + 15], ap++;
ret;
ap += 52;
[ap + 0] = [[fp + -11] + 5], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -2] + 58190, ap++;
[ap + 0] = [fp + -11] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 7], ap++;
[ap + 0] = [[fp + -11] + 8], ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 224 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -8] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -8] + 1], ap++;
[ap + -5] = [[fp + -8] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 185 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -8] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 2];
jmp rel 150;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -5] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 116 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 79 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 46;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -5] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
ret;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -21] + 6], ap++;
[ap + 0] = [[ap + -22] + 7], ap++;
ret;
call rel -5332;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -11] + 10300, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 124;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15] + 10400, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 12350, ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -37] + 6], ap++;
[ap + 0] = [[ap + -38] + 7], ap++;
ret;
ap += 16;
call rel -5383;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -27] + 22650, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 16;
call rel 71;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -31] + 22750, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 32;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 24800, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[fp + -11] = [[fp + -3] + 0];
[fp + -10] = [[fp + -3] + 1];
[fp + -8] = [ap + 0] + [fp + -9], ap++;
[ap + -1] = [[fp + -3] + 2];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
call rel -4616;
jmp rel 17 if [ap + -3] != 0;
[fp + -7] = [[ap + -1] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [ap + 0] * 2, ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 20;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2490, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 110930490496575599150170734222081291576, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 4840 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768206616, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 56;
[fp + -7] = [ap + 0] + 4840, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 37;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[fp + 0] = [fp + -6] + 2;
[fp + 1] = [fp + -5];
call rel -4686;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -44;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2090, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 5140, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -28751;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
