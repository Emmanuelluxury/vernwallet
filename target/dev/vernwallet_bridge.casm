jmp rel 10 if [fp + -4] != 0;
[ap + 0] = [fp + -3], ap++;
call rel 108131;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
ret;
ap += 6;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 110 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 71 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 42;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 3;
[ap + -17] = [ap + 0] + [ap + -11], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -11] + 270, ap++;
jmp rel 15 if [ap + -3] != 0;
ap += 6;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 540, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 108045;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 108044;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 15;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1960, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 32;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13990, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 14 if [ap + -1] != 0;
ap += 6;
[ap + 0] = [ap + -10] + 540, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 107966;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 1470, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -4] + 0], ap++;
[ap + -4] = [[fp + -4] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -4] + 2];
jmp rel 33;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -4] + 0], ap++;
[ap + -3] = [[fp + -4] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -4] + 2];
[fp + -3] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
jmp rel 10 if [ap + -2] != 0;
call rel 107925;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
call rel 107914;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 39;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 23 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 9;
[ap + -1] = [[ap + -4] + 0];
ap += 17;
[ap + 0] = [ap + -21] + 1, ap++;
jmp rel 9;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 17;
ap += 20;
[ap + 0] = [ap + -21], ap++;
call rel 107875;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 4;
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 28 if [fp + -3] != 0;
[ap + 0] = 1000, ap++;
[fp + -4] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 7;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 16;
ap += 12;
call rel 107853;
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 3;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 69;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 23 if [fp + -3] != 0;
[ap + 0] = 340282366920938463463374607431768211455, ap++;
[ap + -1] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 7;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 11;
ap += 3;
[ap + 0] = [ap + -8] + 1, ap++;
jmp rel 47;
ap += 3;
[ap + 0] = [ap + -4], ap++;
jmp rel 28 if [fp + -3] != 0;
[ap + 0] = 1000, ap++;
[fp + -4] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 9;
[ap + -1] = [[ap + -4] + 0];
ap += 7;
[ap + 0] = [ap + -11] + 1, ap++;
jmp rel 14;
call rel 107792;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 10;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 7;
[ap + 0] = [ap + -12] + 1, ap++;
call rel 107778;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
jmp rel 25 if [fp + -3] != 0;
[ap + 0] = 1000, ap++;
[fp + -4] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 10;
[ap + -1] = [[fp + -5] + 0];
ap += 1;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 1, ap++;
ret;
ap += 4;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[fp + -4] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 13 if [ap + -2] != 0;
ap += 11;
[ap + 0] = [fp + -3], ap++;
call rel 107626;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -6] + 0], ap++;
[ap + -4] = [[ap + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -8] + 2];
jmp rel 44;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -5] + 0], ap++;
[ap + -3] = [[ap + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -7] + 2];
[fp + -4] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [ap + -8] + 3, ap++;
jmp rel 6 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
jmp rel 4;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 10 if [ap + -1] != 0;
call rel 107666;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 4;
call rel 107601;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 12;
call rel 107590;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -4] + 0], ap++;
[ap + -4] = [[fp + -4] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -4] + 2];
jmp rel 32;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -4] + 0], ap++;
[ap + -3] = [[fp + -4] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -4] + 2];
ap += 3;
[fp + -3] = [ap + 0] + [ap + -9], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
jmp rel 6 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
jmp rel 4;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
ret;
call rel 107532;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 683846996683820750284175136427820765332390866701628439304978134485807175402, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 273 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [ap + -1] + 1, ap++;
[ap + 0] = 1704892361995056365806582506719143211463188755204853979652856344756200540795, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -2] = [[ap + -8] + 1];
[ap + 0] = [[ap + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -12] + 0], ap++;
[ap + -4] = [[ap + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -15] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -7] = [[ap + -15] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -5] = [[fp + -4] + 8];
[ap + -4] = [[fp + -4] + 9];
[ap + -6] = [[fp + -4] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 196 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [fp + -4] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 152 if [ap + -1] != 0;
[ap + 0] = 1704892361995056365806582506719143211463188755204853979652856344756200540795, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -25] = [[ap + -13] + 1];
[ap + 0] = [[ap + -13] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -6] = [[ap + -21] + 1];
[ap + -5] = [[ap + -21] + 2];
[ap + -7] = [[ap + -21] + 3];
[ap + -4] = [[ap + -21] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 6], ap++;
jmp rel 78 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = 683846996683820750284175136427820765332390866701628439304978134485807175402, ap++;
[ap + -1] = [[ap + -6] + 0];
[fp + -3] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -37] + 7];
[ap + -5] = [[ap + -37] + 8];
[ap + -4] = [[ap + -37] + 9];
[ap + -6] = [[ap + -37] + 10];
[ap + -55] = [[ap + -37] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -37] + 7) %}
[ap + 0] = [[ap + -37] + 13], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -38] + 12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -42] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -38] + 12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -42] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -44] + 14], ap++;
[ap + 0] = [[ap + -45] + 15], ap++;
ret;
ap += 10;
[ap + 0] = [[ap + -32] + 5], ap++;
call rel 141763;
[ap + 0] = [ap + -1] + 141762, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12110, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -42] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -44] + 7], ap++;
[ap + 0] = [[ap + -45] + 8], ap++;
ret;
ap += 20;
call rel 141743;
[ap + 0] = [ap + -1] + 141742, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 24220, ap++;
call rel 107291;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -38] + [ap + -8], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 33;
[ap + 0] = [[fp + -4] + 11], ap++;
call rel 141719;
[ap + 0] = [ap + -1] + 141718, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 25790, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [[fp + -4] + 14], ap++;
ret;
ap += 51;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 141696;
[ap + 0] = [ap + -1] + 141695, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 38620, ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -3] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
[ap + -4] = [[fp + -6] + 2];
[ap + -5] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 48 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 6;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11] + 540, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 107159;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2] + 1470, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6] + [fp + -5], ap++;
[ap + 0] = [ap + -1] + [fp + -4], ap++;
[ap + 0] = [ap + -1] + [fp + -3], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -8] + 0], ap++;
[ap + 3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -8] + 2];
jmp rel 16 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -8] + 0];
ap += 99;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 3;
ret;
%{ memory[ap + 0] = (memory[fp + -4] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -8] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -8] + 1], ap++;
[ap + -5] = [[fp + -8] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 15 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[fp + -8] + 0];
[ap + 0] = [fp + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -8] + 1];
ap += 5;
[ap + 0] = [fp + -8] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 6;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 305419896, ap++;
[ap + 1] = [fp + -6] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 297;
[ap + -1] = [[ap + -4] + 0];
%{ memory[ap + 0] = memory[fp + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -5] + 1], ap++;
[ap + 3] = [[ap + -6] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -3] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -10] + 3];
jmp rel 12 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[ap + -5] + 1];
ap += 5;
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 6;
[ap + 0] = [ap + -10] + 4, ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [ap + -9] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 242;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -13] * 2, ap++;
%{ memory[ap + 0] = memory[ap + -1] < 4294967296 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -7] + 1];
jmp rel 220;
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -7] + 1];
[ap + 1] = [fp + -5] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 2];
jmp rel 197;
[ap + -1] = [[ap + -9] + 2];
[ap + 0] = 1664525, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -7] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -9], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -13] + 3], ap++;
[ap + -2] = [[ap + -14] + 4], ap++;
[ap + -2] = [[ap + -15] + 5];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -13] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -19] + 6], ap++;
[ap + -1] = [[ap + -20] + 7], ap++;
[ap + -3] = [[ap + -21] + 8];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -25] + 9], ap++;
[ap + -3] = [[ap + -26] + 10], ap++;
[ap + -16] = [[ap + -27] + 11];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -27] + 12, ap++;
jmp rel 147 if [ap + -18] != 0;
[ap + 0] = 1013904223, ap++;
[ap + 1] = [ap + -18] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 125;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = 4294967295, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + 5] = [[ap + -6] + 2], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -9] + 3], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -12] + 4];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -9] = [ap + -3] + [ap + -1];
[ap + 0] = 22695477, ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -32] * memory[ap + -1], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -34], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -16] + 5], ap++;
[ap + -2] = [[ap + -17] + 6], ap++;
[ap + -2] = [[ap + -18] + 7];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -38] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -7], ap++;
[ap + 0] = [ap + -4] * [ap + -8], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -22] + 8], ap++;
[ap + -1] = [[ap + -23] + 9], ap++;
[ap + -3] = [[ap + -24] + 10];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -28] + 11], ap++;
[ap + -3] = [[ap + -29] + 12], ap++;
[ap + -16] = [[ap + -30] + 13];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -30] + 14, ap++;
jmp rel 56 if [ap + -18] != 0;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -18] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 34;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = 4294967295, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + 5] = [[ap + -6] + 2], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -9] + 3], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -12] + 4];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -9] = [ap + -3] + [ap + -1];
[ap + -31] = [[fp + -7] + 0];
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [ap + -12] + 5, ap++;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -7] + 3], ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
call rel 106826;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 5;
call rel 106823;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 31;
call rel 106803;
[ap + 0] = [ap + -42] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 35;
call rel 106800;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 53;
call rel 106780;
[ap + 0] = [ap + -69] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 56;
call rel 106786;
[ap + 0] = [ap + -69] + 2, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 58;
call rel 106756;
[ap + 0] = [ap + -69] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 68;
call rel 106744;
[ap + 0] = [ap + -79] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
jmp rel 12 if [fp + -3] != 0;
ap += 17;
call rel 106757;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -4] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -4] + 1], ap++;
[ap + -5] = [[fp + -4] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 15 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[fp + -4] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -4] + 1];
ap += 5;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 6;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = 26, ap++;
[ap + 0] = 14, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 29;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = 74, ap++;
[ap + -1] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 14;
[ap + -1] = [[ap + -8] + 1];
ap += 8;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9] + 2, ap++;
jmp rel 6;
ap += 3;
[ap + 0] = [ap + -9] + 1, ap++;
call rel 106684;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 686 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 698825930367399625235315650030086715175536112812254075365890532169265202282, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -7] = [[fp + -5] + 6];
[ap + -6] = [[fp + -5] + 7];
[ap + -5] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 648 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -5] = [[fp + -7] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 614 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = 86400, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -7] + memory[ap + -2]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -8] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -7] + 2];
jmp rel 583;
[ap + 1] = [ap + -8] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + -16] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 3];
jmp rel 106;
[ap + -1] = [[fp + -7] + 3];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -6] = [[ap + -18] + 1];
[ap + -5] = [[ap + -18] + 2];
[ap + -4] = [[ap + -18] + 3];
[ap + -3] = [[ap + -18] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 6], ap++;
jmp rel 69 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 5], ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 7];
[ap + -5] = [[ap + -26] + 8];
[ap + -4] = [[ap + -26] + 9];
[ap + -3] = [[ap + -26] + 10];
[ap + -2] = [[ap + -26] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26] + 7) %}
[ap + 0] = [[ap + -26] + 13], ap++;
jmp rel 38 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 698825930367399625235315650030086715175536112812254075365890532169265202282, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -32] + 14];
[ap + -4] = [[ap + -32] + 15];
[ap + -3] = [[ap + -32] + 16];
[ap + -2] = [[ap + -32] + 17];
[ap + -38] = [[ap + -32] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -32] + 14) %}
[ap + 0] = [[ap + -32] + 20], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [[ap + -33] + 19], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -36] + 21, ap++;
jmp rel 50;
ap += 84;
[ap + 0] = [[ap + -117] + 19], ap++;
[ap + 0] = [ap + -102], ap++;
[ap + 0] = [ap + -2] + 51900, ap++;
[ap + 0] = [ap + -120] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -122] + 21], ap++;
[ap + 0] = [[ap + -123] + 22], ap++;
ret;
ap += 86;
[ap + 0] = [[ap + -113] + 12], ap++;
[ap + 0] = [ap + -1] + 62580, ap++;
[ap + 0] = [ap + -115] + 16, ap++;
[ap + 0] = [[ap + -116] + 14], ap++;
[ap + 0] = [[ap + -117] + 15], ap++;
jmp rel 11;
ap += 94;
[ap + 0] = [[ap + -113] + 5], ap++;
[ap + 0] = [ap + -1] + 74000, ap++;
[ap + 0] = [ap + -115] + 9, ap++;
[ap + 0] = [[ap + -116] + 7], ap++;
[ap + 0] = [[ap + -117] + 8], ap++;
[ap + 0] = [ap + -102], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 21;
[ap + 0] = [fp + -7] + 4, ap++;
[ap + 0] = [ap + -26] + 33590, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -5] = [[ap + -4] + 1];
[ap + -3] = [[ap + -4] + 2];
[ap + -2] = [[ap + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -4]) %}
[ap + 0] = [[ap + -4] + 5], ap++;
jmp rel 428 if [ap + -1] != 0;
[ap + 0] = [[ap + -5] + 4], ap++;
[ap + 0] = [[ap + -6] + 6], ap++;
[ap + 0] = [ap + -7] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -12] + 0], ap++;
[ap + 3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -17] + 2];
jmp rel 385 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -12] + 0];
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 352 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 314 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 277 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 234 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 201 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 163 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -28] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -47] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 87;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 72 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + -24] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 47;
[ap + -1] = [[ap + -7] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -28] = [ap + 0] + [ap + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 12;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15] + 1450, ap++;
jmp rel 18;
[ap + 0] = [ap + -2], ap++;
[ap + -42] = [ap + 1] + [ap + -9], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 17;
[ap + -1] = [[ap + -6] + 0];
ap += 9;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -13] + 1010, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 6;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 910, ap++;
call rel 106191;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 10;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 1440, ap++;
jmp rel 8;
ap += 13;
[ap + 0] = [ap + -25] + 2, ap++;
[ap + 0] = [ap + -18] + 1810, ap++;
call rel 106177;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
call rel 106174;
[ap + 0] = [ap + -35] + 3, ap++;
[ap + 0] = [ap + -30] + 2160, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 36;
[ap + 0] = [[ap + -46] + 4], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 4870, ap++;
[ap + 0] = [ap + -49] + 8, ap++;
[ap + 0] = [[ap + -50] + 6], ap++;
[ap + 0] = [[ap + -51] + 7], ap++;
jmp rel 30;
ap += 28;
call rel 106149;
[ap + 0] = [ap + -47] + 3, ap++;
[ap + 0] = [ap + -42] + 14010, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 48;
[ap + 0] = [[ap + -57] + 4], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 16720, ap++;
[ap + 0] = [ap + -60] + 8, ap++;
[ap + 0] = [[ap + -61] + 6], ap++;
[ap + 0] = [[ap + -62] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 39;
call rel 106113;
[ap + 0] = [ap + -58] + 3, ap++;
[ap + 0] = [ap + -53] + 25570, ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 59;
[ap + 0] = [[ap + -69] + 4], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -2] + 28280, ap++;
[ap + 0] = [ap + -72] + 8, ap++;
[ap + 0] = [[ap + -73] + 6], ap++;
[ap + 0] = [[ap + -74] + 7], ap++;
jmp rel 30;
ap += 51;
call rel 106088;
[ap + 0] = [ap + -74] + 3, ap++;
[ap + 0] = [ap + -65] + 37420, ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 71;
[ap + 0] = [[ap + -76] + 4], ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -2] + 40130, ap++;
[ap + 0] = [ap + -79] + 8, ap++;
[ap + 0] = [[ap + -80] + 6], ap++;
[ap + 0] = [[ap + -81] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 103;
call rel 106061;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -114] + 85380, ap++;
[ap + 0] = [ap + -120], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 98;
call rel 106056;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -113] + 84930, ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 114;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 87080, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 130;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 99020, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 280 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 0], ap++;
[ap + 3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 2];
jmp rel 237 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 204 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 166 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -24] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 90;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 75 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -38] + 12], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -41] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -34] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -36] + 16, ap++;
[ap + 0] = [[ap + -37] + 14], ap++;
[ap + 0] = [[ap + -38] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -36] + 9, ap++;
[ap + 0] = [[ap + -37] + 7], ap++;
[ap + 0] = [[ap + -38] + 8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 9;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + 21810, ap++;
jmp rel 8;
ap += 12;
[ap + 0] = [ap + -24] + 2, ap++;
[ap + 0] = [ap + -17] + 22180, ap++;
call rel 105746;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
call rel 105743;
[ap + 0] = [ap + -34] + 3, ap++;
[ap + 0] = [ap + -29] + 22530, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 35;
[ap + 0] = [[ap + -45] + 4], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -2] + 25240, ap++;
[ap + 0] = [ap + -48] + 8, ap++;
[ap + 0] = [[ap + -49] + 6], ap++;
[ap + 0] = [[ap + -50] + 7], ap++;
jmp rel 30;
ap += 27;
call rel 105718;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -41] + 34380, ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 47;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 37090, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 281 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 242 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 210;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 10 if [ap + -3] != 0;
ap += 17;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19] + 12340, ap++;
[ap + 0] = [ap + -29], ap++;
jmp rel 52;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 156 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 124;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + -31] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 97 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + -6] = [[ap + -5] + 1];
[ap + -4] = [[ap + -5] + 2];
[ap + -3] = [[ap + -5] + 3];
[ap + -2] = [[ap + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -5]) %}
[ap + 0] = [[ap + -5] + 6], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -6] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -9] + 7];
[ap + -2] = [[ap + -9] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9] + 7) %}
[ap + 0] = [[ap + -9] + 10], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 9], ap++;
[ap + 0] = [[ap + -11] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -18] + 12];
[ap + -5] = [[ap + -18] + 13];
[ap + -4] = [[ap + -18] + 14];
[ap + -3] = [[ap + -18] + 15];
[ap + -2] = [[ap + -18] + 16];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18] + 12) %}
[ap + 0] = [[ap + -18] + 18], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 17], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -22] + 19, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -19] + 17], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -22] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -24] + 19], ap++;
[ap + 0] = [[ap + -25] + 20], ap++;
ret;
ap += 9;
[ap + 0] = [[ap + -19] + 9], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -2] + 11310, ap++;
[ap + 0] = [ap + -22] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -24] + 11], ap++;
[ap + 0] = [[ap + -25] + 12], ap++;
ret;
ap += 13;
[ap + 0] = [[ap + -19] + 5], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -2] + 21970, ap++;
[ap + 0] = [ap + -22] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -24] + 7], ap++;
[ap + 0] = [[ap + -25] + 8], ap++;
ret;
ap += 16;
call rel 105498;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24] + 32740, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 13;
call rel 105296;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -27] + 32370, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 28;
[ap + 0] = [[ap + -43] + 4], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -2] + 34430, ap++;
[ap + 0] = [ap + -46] + 8, ap++;
[ap + 0] = [[ap + -47] + 6], ap++;
[ap + 0] = [[ap + -48] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 30;
call rel 105265;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -44] + 44910, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 45;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 46970, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 62;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 59000, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
ret;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 48 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 6;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11] + 540, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 105337;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2] + 1470, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 195 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 156 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 124;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 82 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 52;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
ap += 1;
[ap + -30] = [ap + 0] + [ap + -24], ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 8 if [ap + -3] != 0;
ap += 7;
[ap + 0] = [ap + -8] + 630, ap++;
jmp rel 10;
[ap + -33] = [ap + 0] + [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 16 if [ap + -2] != 0;
ap += 5;
[ap + 0] = [ap + -6] + 450, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 105173;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 104974;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 10, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 15;
[ap + 0] = [[ap + -28] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 1970, ap++;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = [[ap + -32] + 6], ap++;
[ap + 0] = [[ap + -33] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
call rel 104943;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -29] + 12170, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 30;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 14230, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 47;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 26260, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
ret;
[ap + 0] = [fp + -21], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = 5807899970288901803324239333710, ap++;
call rel -2777;
jmp rel 1253 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = 7021320231821291044729975883292901210285196230045550926, ap++;
call rel -2785;
[ap + 0] = [fp + -20], ap++;
jmp rel 1233 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -19] + 0];
[ap + -4] = [[fp + -19] + 1];
[ap + -3] = [[fp + -19] + 2];
[ap + -2] = [[fp + -19] + 3];
[fp + -18] = [[fp + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -19]) %}
[ap + 0] = [[fp + -19] + 6], ap++;
jmp rel 1205 if [ap + -1] != 0;
[ap + 0] = [[fp + -19] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -19] + 7];
[ap + -4] = [[fp + -19] + 8];
[ap + -3] = [[fp + -19] + 9];
[ap + -2] = [[fp + -19] + 10];
[fp + -17] = [[fp + -19] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -19] + 7) %}
[ap + 0] = [[fp + -19] + 13], ap++;
jmp rel 1176 if [ap + -1] != 0;
[ap + 0] = [[fp + -19] + 12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -19] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -24] + 0], ap++;
[ap + -4] = [[ap + -25] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -26] + 2];
jmp rel 1138;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -23] + 0], ap++;
[ap + -3] = [[ap + -24] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -25] + 2];
[fp + -16] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 212;
call rel 104835;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -220] + 286240, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 1123;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 1078;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -15] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 202;
call rel 104793;
[ap + 0] = [ap + -210], ap++;
[ap + 0] = [ap + -210] + 284830, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 1063;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 1018;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -14] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 192;
call rel 104751;
[ap + 0] = [ap + -200], ap++;
[ap + 0] = [ap + -200] + 283420, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 1003;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 958;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -13] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 182;
call rel 104709;
[ap + 0] = [ap + -190], ap++;
[ap + 0] = [ap + -190] + 282010, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 943;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 898;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -12] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 172;
call rel 104667;
[ap + 0] = [ap + -180], ap++;
[ap + 0] = [ap + -180] + 280600, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 883;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 838;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -11] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 162;
call rel 104625;
[ap + 0] = [ap + -170], ap++;
[ap + 0] = [ap + -170] + 279190, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 823;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 778;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -10] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 152;
call rel 104583;
[ap + 0] = [ap + -160], ap++;
[ap + 0] = [ap + -160] + 277780, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 763;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -74] + 0];
[ap + -4] = [[ap + -74] + 1];
[ap + -3] = [[ap + -74] + 2];
[ap + -2] = [[ap + -74] + 3];
[fp + -16] = [[ap + -74] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -74]) %}
[ap + 0] = [[ap + -74] + 6], ap++;
jmp rel 725 if [ap + -1] != 0;
[ap + 0] = [[ap + -75] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1526171809504728374681023080986779835603913378952539665964907005446042711382, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -80] + 7];
[ap + -4] = [[ap + -80] + 8];
[ap + -3] = [[ap + -80] + 9];
[ap + -2] = [[ap + -80] + 10];
[fp + -15] = [[ap + -80] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -80] + 7) %}
[ap + 0] = [[ap + -80] + 13], ap++;
jmp rel 696 if [ap + -1] != 0;
[ap + 0] = [[ap + -81] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -86] + 14];
[ap + -4] = [[ap + -86] + 15];
[ap + -3] = [[ap + -86] + 16];
[ap + -2] = [[ap + -86] + 17];
[fp + -14] = [[ap + -86] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -86] + 14) %}
[ap + 0] = [[ap + -86] + 20], ap++;
jmp rel 667 if [ap + -1] != 0;
[ap + 0] = [[ap + -87] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 434428485796416085034498104175908286789185203756459893121763025398211911987, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -92] + 21];
[ap + -4] = [[ap + -92] + 22];
[ap + -3] = [[ap + -92] + 23];
[ap + -2] = [[ap + -92] + 24];
[fp + -13] = [[ap + -92] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -92] + 21) %}
[ap + 0] = [[ap + -92] + 27], ap++;
jmp rel 638 if [ap + -1] != 0;
[ap + 0] = [[ap + -93] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -98] + 28];
[ap + -4] = [[ap + -98] + 29];
[ap + -3] = [[ap + -98] + 30];
[ap + -2] = [[ap + -98] + 31];
[fp + -12] = [[ap + -98] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -98] + 28) %}
[ap + 0] = [[ap + -98] + 34], ap++;
jmp rel 609 if [ap + -1] != 0;
[ap + 0] = [[ap + -99] + 33], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -104] + 35];
[ap + -4] = [[ap + -104] + 36];
[ap + -3] = [[ap + -104] + 37];
[ap + -2] = [[ap + -104] + 38];
[fp + -11] = [[ap + -104] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -104] + 35) %}
[ap + 0] = [[ap + -104] + 41], ap++;
jmp rel 580 if [ap + -1] != 0;
[ap + 0] = [[ap + -105] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 523410893316558122378830306191683135863976721326799590270659346354002858736, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -110] + 42];
[ap + -4] = [[ap + -110] + 43];
[ap + -3] = [[ap + -110] + 44];
[ap + -2] = [[ap + -110] + 45];
[fp + -10] = [[ap + -110] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -110] + 42) %}
[ap + 0] = [[ap + -110] + 48], ap++;
jmp rel 551 if [ap + -1] != 0;
[ap + 0] = [[ap + -111] + 47], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 760565771580090624121121792023365464265448761272770967981882436800089234901, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -116] + 49];
[ap + -4] = [[ap + -116] + 50];
[ap + -3] = [[ap + -116] + 51];
[ap + -2] = [[ap + -116] + 52];
[fp + -9] = [[ap + -116] + 53];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -116] + 49) %}
[ap + 0] = [[ap + -116] + 55], ap++;
jmp rel 522 if [ap + -1] != 0;
[ap + 0] = [[ap + -117] + 54], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 394323579402937197825070278441497235490914917810450857249771331122744639564, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -122] + 56];
[ap + -4] = [[ap + -122] + 57];
[ap + -3] = [[ap + -122] + 58];
[ap + -2] = [[ap + -122] + 59];
[fp + -8] = [[ap + -122] + 60];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -122] + 56) %}
[ap + 0] = [[ap + -122] + 62], ap++;
jmp rel 493 if [ap + -1] != 0;
[ap + 0] = [[ap + -123] + 61], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 863347913503261957104720878708744394926083541396783723686988354578931871543, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -128] + 63];
[ap + -4] = [[ap + -128] + 64];
[ap + -3] = [[ap + -128] + 65];
[ap + -2] = [[ap + -128] + 66];
[fp + -7] = [[ap + -128] + 67];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -128] + 63) %}
[ap + 0] = [[ap + -128] + 69], ap++;
jmp rel 464 if [ap + -1] != 0;
[ap + 0] = [[ap + -129] + 68], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -135] + 70];
[ap + -5] = [[ap + -135] + 71];
[ap + -4] = [[ap + -135] + 72];
[ap + -3] = [[ap + -135] + 73];
[ap + -2] = [[ap + -135] + 74];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -135] + 70) %}
[ap + 0] = [[ap + -135] + 76], ap++;
jmp rel 433 if [ap + -1] != 0;
[ap + 0] = [[ap + -136] + 75], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -142] + 77];
[ap + -5] = [[ap + -142] + 78];
[ap + -4] = [[ap + -142] + 79];
[ap + -3] = [[ap + -142] + 80];
[ap + -2] = [[ap + -142] + 81];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -142] + 77) %}
[ap + 0] = [[ap + -142] + 83], ap++;
jmp rel 402 if [ap + -1] != 0;
[ap + 0] = [[ap + -143] + 82], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -146] + 84];
[ap + -2] = [[ap + -146] + 85];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -146] + 84) %}
[ap + 0] = [[ap + -146] + 87], ap++;
jmp rel 380 if [ap + -1] != 0;
[ap + 0] = [[ap + -147] + 86], ap++;
[ap + 0] = [[ap + -148] + 88], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -155] + 89];
[ap + -5] = [[ap + -155] + 90];
[ap + -4] = [[ap + -155] + 91];
[ap + -3] = [[ap + -155] + 92];
[ap + -2] = [[ap + -155] + 93];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -155] + 89) %}
[ap + 0] = [[ap + -155] + 95], ap++;
jmp rel 348 if [ap + -1] != 0;
[ap + 0] = [[ap + -156] + 94], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -162] + 96];
[ap + -5] = [[ap + -162] + 97];
[ap + -4] = [[ap + -162] + 98];
[ap + -3] = [[ap + -162] + 99];
[ap + -2] = [[ap + -162] + 100];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -162] + 96) %}
[ap + 0] = [[ap + -162] + 102], ap++;
jmp rel 317 if [ap + -1] != 0;
[ap + 0] = [[ap + -163] + 101], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -168] + 103];
[ap + -4] = [[ap + -168] + 104];
[ap + -3] = [[ap + -168] + 105];
[ap + -2] = [[ap + -168] + 106];
[fp + -6] = [[ap + -168] + 107];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -168] + 103) %}
[ap + 0] = [[ap + -168] + 109], ap++;
jmp rel 284 if [ap + -1] != 0;
[ap + 0] = [[ap + -169] + 108], ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -175] + 110];
[ap + -4] = [[ap + -175] + 111];
[ap + -3] = [[ap + -175] + 112];
[ap + -2] = [[ap + -175] + 113];
[fp + -5] = [[ap + -175] + 114];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -175] + 110) %}
[ap + 0] = [[ap + -175] + 116], ap++;
jmp rel 255 if [ap + -1] != 0;
[ap + 0] = [[ap + -176] + 115], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -182] + 117];
[ap + -5] = [[ap + -182] + 118];
[ap + -4] = [[ap + -182] + 119];
[ap + -3] = [[ap + -182] + 120];
[ap + -2] = [[ap + -182] + 121];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -182] + 117) %}
[ap + 0] = [[ap + -182] + 123], ap++;
jmp rel 220 if [ap + -1] != 0;
[ap + 0] = [[ap + -183] + 122], ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -190] + 124];
[ap + -5] = [[ap + -190] + 125];
[ap + -4] = [[ap + -190] + 126];
[ap + -3] = [[ap + -190] + 127];
[ap + -2] = [[ap + -190] + 128];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -190] + 124) %}
[ap + 0] = [[ap + -190] + 130], ap++;
jmp rel 189 if [ap + -1] != 0;
[ap + 0] = [[ap + -191] + 129], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -194] + 131];
[ap + -2] = [[ap + -194] + 132];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -194] + 131) %}
[ap + 0] = [[ap + -194] + 134], ap++;
jmp rel 167 if [ap + -1] != 0;
[ap + 0] = [[ap + -195] + 133], ap++;
[ap + 0] = [[ap + -196] + 135], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 698825930367399625235315650030086715175536112812254075365890532169265202282, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -203] + 136];
[ap + -5] = [[ap + -203] + 137];
[ap + -4] = [[ap + -203] + 138];
[ap + -3] = [[ap + -203] + 139];
[ap + -2] = [[ap + -203] + 140];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -203] + 136) %}
[ap + 0] = [[ap + -203] + 142], ap++;
jmp rel 135 if [ap + -1] != 0;
[ap + 0] = [[ap + -204] + 141], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -209] + 143];
[ap + -4] = [[ap + -209] + 144];
[ap + -3] = [[ap + -209] + 145];
[ap + -2] = [[ap + -209] + 146];
[fp + -4] = [[ap + -209] + 147];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -209] + 143) %}
[ap + 0] = [[ap + -209] + 149], ap++;
jmp rel 102 if [ap + -1] != 0;
[ap + 0] = [[ap + -210] + 148], ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -216] + 150];
[ap + -4] = [[ap + -216] + 151];
[ap + -3] = [[ap + -216] + 152];
[ap + -2] = [[ap + -216] + 153];
[fp + -3] = [[ap + -216] + 154];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -216] + 150) %}
[ap + 0] = [[ap + -216] + 156], ap++;
jmp rel 73 if [ap + -1] != 0;
[ap + 0] = [[ap + -217] + 155], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 424430062299509631194636216159545428754079010585937662617424618645861123492, ap++;
[ap + 0] = 100, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -223] + 157];
[ap + -5] = [[ap + -223] + 158];
[ap + -4] = [[ap + -223] + 159];
[ap + -3] = [[ap + -223] + 160];
[ap + -2] = [[ap + -223] + 161];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -223] + 157) %}
[ap + 0] = [[ap + -223] + 163], ap++;
jmp rel 42 if [ap + -1] != 0;
[ap + 0] = [[ap + -224] + 162], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1186423139533537089827846530073695414305470307342419724096222587041583312528, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -230] + 164];
[ap + -5] = [[ap + -230] + 165];
[ap + -4] = [[ap + -230] + 166];
[ap + -3] = [[ap + -230] + 167];
[ap + -2] = [[ap + -230] + 168];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -230] + 164) %}
[ap + 0] = [[ap + -230] + 170], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -231] + 169], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -234] + 171, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -231] + 169], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -234] + 173, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 171], ap++;
[ap + 0] = [[ap + -237] + 172], ap++;
ret;
ap += 7;
[ap + 0] = [[ap + -231] + 162], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 11130, ap++;
[ap + 0] = [ap + -234] + 166, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 164], ap++;
[ap + 0] = [[ap + -237] + 165], ap++;
ret;
ap += 10;
[ap + 0] = [[ap + -227] + 155], ap++;
[ap + 0] = [ap + -1] + 21900, ap++;
[ap + 0] = [ap + -229] + 159, ap++;
[ap + 0] = [[ap + -230] + 157], ap++;
[ap + 0] = [[ap + -231] + 158], ap++;
jmp rel 11;
ap += 17;
[ap + 0] = [[ap + -227] + 148], ap++;
[ap + 0] = [ap + -1] + 33230, ap++;
[ap + 0] = [ap + -229] + 152, ap++;
[ap + 0] = [[ap + -230] + 150], ap++;
[ap + 0] = [[ap + -231] + 151], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [[ap + -231] + 141], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 44730, ap++;
[ap + 0] = [ap + -234] + 145, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 143], ap++;
[ap + 0] = [[ap + -237] + 144], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -231] + 133], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 56140, ap++;
[ap + 0] = [ap + -234] + 137, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 135], ap++;
[ap + 0] = [[ap + -237] + 136], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -227] + 129], ap++;
[ap + 0] = [ap + -1] + 66340, ap++;
[ap + 0] = [ap + -229] + 133, ap++;
[ap + 0] = [[ap + -230] + 131], ap++;
[ap + 0] = [[ap + -231] + 132], ap++;
jmp rel 11;
ap += 44;
[ap + 0] = [[ap + -227] + 122], ap++;
[ap + 0] = [ap + -1] + 77760, ap++;
[ap + 0] = [ap + -229] + 126, ap++;
[ap + 0] = [[ap + -230] + 124], ap++;
[ap + 0] = [[ap + -231] + 125], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 51;
[ap + 0] = [[ap + -227] + 115], ap++;
[ap + 0] = [ap + -1] + 88890, ap++;
[ap + 0] = [ap + -229] + 119, ap++;
[ap + 0] = [[ap + -230] + 117], ap++;
[ap + 0] = [[ap + -231] + 118], ap++;
jmp rel 11;
ap += 58;
[ap + 0] = [[ap + -227] + 108], ap++;
[ap + 0] = [ap + -1] + 100220, ap++;
[ap + 0] = [ap + -229] + 112, ap++;
[ap + 0] = [[ap + -230] + 110], ap++;
[ap + 0] = [[ap + -231] + 111], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 68;
[ap + 0] = [[ap + -231] + 101], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 111720, ap++;
[ap + 0] = [ap + -234] + 105, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 103], ap++;
[ap + 0] = [[ap + -237] + 104], ap++;
ret;
ap += 75;
[ap + 0] = [[ap + -231] + 94], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 122950, ap++;
[ap + 0] = [ap + -234] + 98, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 96], ap++;
[ap + 0] = [[ap + -237] + 97], ap++;
ret;
ap += 84;
[ap + 0] = [[ap + -231] + 86], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 134360, ap++;
[ap + 0] = [ap + -234] + 90, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 88], ap++;
[ap + 0] = [[ap + -237] + 89], ap++;
ret;
ap += 88;
[ap + 0] = [[ap + -231] + 82], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 145020, ap++;
[ap + 0] = [ap + -234] + 86, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 84], ap++;
[ap + 0] = [[ap + -237] + 85], ap++;
ret;
ap += 95;
[ap + 0] = [[ap + -231] + 75], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 156250, ap++;
[ap + 0] = [ap + -234] + 79, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 77], ap++;
[ap + 0] = [[ap + -237] + 78], ap++;
ret;
ap += 102;
[ap + 0] = [[ap + -231] + 68], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 167480, ap++;
[ap + 0] = [ap + -234] + 72, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 70], ap++;
[ap + 0] = [[ap + -237] + 71], ap++;
ret;
ap += 108;
[ap + 0] = [[ap + -231] + 61], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 178620, ap++;
[ap + 0] = [ap + -234] + 65, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 63], ap++;
[ap + 0] = [[ap + -237] + 64], ap++;
ret;
ap += 114;
[ap + 0] = [[ap + -231] + 54], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 189760, ap++;
[ap + 0] = [ap + -234] + 58, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 56], ap++;
[ap + 0] = [[ap + -237] + 57], ap++;
ret;
ap += 120;
[ap + 0] = [[ap + -231] + 47], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 200900, ap++;
[ap + 0] = [ap + -234] + 51, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 49], ap++;
[ap + 0] = [[ap + -237] + 50], ap++;
ret;
ap += 126;
[ap + 0] = [[ap + -231] + 40], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 212040, ap++;
[ap + 0] = [ap + -234] + 44, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 42], ap++;
[ap + 0] = [[ap + -237] + 43], ap++;
ret;
ap += 132;
[ap + 0] = [[ap + -231] + 33], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 223180, ap++;
[ap + 0] = [ap + -234] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 35], ap++;
[ap + 0] = [[ap + -237] + 36], ap++;
ret;
ap += 138;
[ap + 0] = [[ap + -231] + 26], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 234320, ap++;
[ap + 0] = [ap + -234] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 28], ap++;
[ap + 0] = [[ap + -237] + 29], ap++;
ret;
ap += 144;
[ap + 0] = [[ap + -231] + 19], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 245460, ap++;
[ap + 0] = [ap + -234] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 21], ap++;
[ap + 0] = [[ap + -237] + 22], ap++;
ret;
ap += 150;
[ap + 0] = [[ap + -231] + 12], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 256600, ap++;
[ap + 0] = [ap + -234] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 14], ap++;
[ap + 0] = [[ap + -237] + 15], ap++;
ret;
ap += 156;
[ap + 0] = [[ap + -231] + 5], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -2] + 267740, ap++;
[ap + 0] = [ap + -234] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -236] + 7], ap++;
[ap + 0] = [[ap + -237] + 8], ap++;
ret;
ap += 154;
call rel 103830;
[ap + 0] = [ap + -170] + 3, ap++;
[ap + 0] = [ap + -168] + 278060, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 164;
call rel 103812;
[ap + 0] = [ap + -180] + 3, ap++;
[ap + 0] = [ap + -178] + 279470, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 174;
call rel 103794;
[ap + 0] = [ap + -190] + 3, ap++;
[ap + 0] = [ap + -188] + 280880, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 184;
call rel 103776;
[ap + 0] = [ap + -200] + 3, ap++;
[ap + 0] = [ap + -198] + 282290, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 194;
call rel 103758;
[ap + 0] = [ap + -210] + 3, ap++;
[ap + 0] = [ap + -208] + 283700, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 204;
call rel 103740;
[ap + 0] = [ap + -220] + 3, ap++;
[ap + 0] = [ap + -218] + 285110, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 214;
call rel 103722;
[ap + 0] = [ap + -246] + 3, ap++;
[ap + 0] = [ap + -228] + 286520, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 233;
[ap + 0] = [[fp + -19] + 12], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -2] + 288840, ap++;
[ap + 0] = [fp + -19] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -19] + 14], ap++;
[ap + 0] = [[fp + -19] + 15], ap++;
ret;
ap += 239;
[ap + 0] = [[fp + -19] + 5], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -2] + 299980, ap++;
[ap + 0] = [fp + -19] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -19] + 7], ap++;
[ap + 0] = [[fp + -19] + 8], ap++;
ret;
ap += 245;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -247] + 311120, ap++;
[ap + 0] = [fp + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -252], ap++;
[ap + 0] = [ap + -252], ap++;
ret;
ap += 280;
[ap + 0] = [ap + -284], ap++;
[ap + 0] = [fp + -20] + 315690, ap++;
[ap + 0] = [fp + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -286], ap++;
[ap + 0] = [ap + -286], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 256 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 223 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 191;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 165 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
[fp + -3] = [[ap + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 6], ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 27, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 103694;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -52] + 7];
[ap + -2] = [[ap + -52] + 8];
[ap + -6] = [[ap + -52] + 9];
[ap + -5] = [[ap + -52] + 10];
[ap + -4] = [[ap + -52] + 11];
[ap + -3] = [[ap + -52] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -52] + 7) %}
[ap + 0] = [[ap + -52] + 14], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -53] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -56] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -53] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -56] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -58] + 15], ap++;
[ap + 0] = [[ap + -59] + 16], ap++;
ret;
ap += 40;
[ap + 0] = [[ap + -53] + 5], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 15300, ap++;
[ap + 0] = [ap + -56] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -58] + 7], ap++;
[ap + 0] = [[ap + -59] + 8], ap++;
ret;
ap += 35;
call rel 103436;
[ap + 0] = [ap + -58] + 3, ap++;
[ap + 0] = [ap + -49] + 25150, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 50;
[ap + 0] = [[ap + -65] + 4], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -2] + 27210, ap++;
[ap + 0] = [ap + -68] + 8, ap++;
[ap + 0] = [[ap + -69] + 6], ap++;
[ap + 0] = [[ap + -70] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 50;
call rel 103396;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58] + 37510, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 52;
call rel 103393;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -66] + 37590, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 67;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 39650, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 79;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 51330, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 103299;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 242 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 202 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 2];
jmp rel 163;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 130 if [ap + -3] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
[fp + -3] = [[ap + -24] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 6], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 31, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 103345;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -64] + 7];
[ap + -2] = [[ap + -64] + 8];
[ap + -6] = [[ap + -64] + 9];
[ap + -5] = [[ap + -64] + 10];
[ap + -4] = [[ap + -64] + 11];
[ap + -3] = [[ap + -64] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -64] + 7) %}
[ap + 0] = [[ap + -64] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -65] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -65] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 15], ap++;
[ap + 0] = [[ap + -72] + 16], ap++;
ret;
ap += 40;
[ap + 0] = [[ap + -65] + 5], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 15300, ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 7], ap++;
[ap + 0] = [[ap + -72] + 8], ap++;
ret;
ap += 39;
call rel 137607;
[ap + 0] = [ap + -1] + 137606, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26320, ap++;
call rel 103067;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -53] + [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 41;
call rel 137588;
[ap + 0] = [ap + -1] + 137587, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26400, ap++;
call rel 103057;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -61] + [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 56;
[ap + 0] = [[fp + -5] + 9], ap++;
call rel 137567;
[ap + 0] = [ap + -1] + 137566, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28460, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 19;
ap += 68;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 137548;
[ap + 0] = [ap + -1] + 137547, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40140, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 30 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 640, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 242 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 202 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 2];
jmp rel 163;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 130 if [ap + -3] != 0;
[ap + 0] = 1090654979984666118274814236676208321276316261611326539512404368163006837786, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
[fp + -3] = [[ap + -24] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 6], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 102981;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -64] + 7];
[ap + -2] = [[ap + -64] + 8];
[ap + -6] = [[ap + -64] + 9];
[ap + -5] = [[ap + -64] + 10];
[ap + -4] = [[ap + -64] + 11];
[ap + -3] = [[ap + -64] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -64] + 7) %}
[ap + 0] = [[ap + -64] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -65] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -65] + 13], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 15], ap++;
[ap + 0] = [[ap + -72] + 16], ap++;
ret;
ap += 40;
[ap + 0] = [[ap + -65] + 5], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 15300, ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -69] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 7], ap++;
[ap + 0] = [[ap + -72] + 8], ap++;
ret;
ap += 39;
call rel 137243;
[ap + 0] = [ap + -1] + 137242, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26320, ap++;
call rel 102703;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -53] + [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 41;
call rel 137224;
[ap + 0] = [ap + -1] + 137223, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26400, ap++;
call rel 102693;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -61] + [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 56;
[ap + 0] = [[fp + -5] + 9], ap++;
call rel 137203;
[ap + 0] = [ap + -1] + 137202, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28460, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 19;
ap += 68;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 137184;
[ap + 0] = [ap + -1] + 137183, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40140, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1090654979984666118274814236676208321276316261611326539512404368163006837786, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 30 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 640, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -10] = [[fp + -8] + 1];
[ap + -3] = [[fp + -8] + 2];
[ap + -2] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 742 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 715 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 678 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 634 if [ap + -1] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -7] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 0], ap++;
[ap + -4] = [[fp + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -11] + 1], ap++;
[ap + -7] = [[fp + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 557 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 530 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -5446;
[ap + 0] = [ap + -41], ap++;
jmp rel 501 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 5807899970288901803406028129614, ap++;
call rel -5251;
[ap + 0] = [ap + -35], ap++;
jmp rel 471 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 25 if [fp + -3] != 0;
ap += 393;
call rel 136936;
[ap + 0] = [ap + -1] + 136935, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 287610, ap++;
call rel 103047;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = [ap + -408] + [ap + -8], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -488], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
jmp rel 25 if [fp + -4] != 0;
ap += 392;
call rel 136910;
[ap + 0] = [ap + -1] + 136909, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 287420, ap++;
call rel 103030;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = [ap + -407] + [ap + -8], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -488], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -82] + 0];
[ap + -2] = [[ap + -82] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -82]) %}
[ap + 0] = [[ap + -82] + 3], ap++;
jmp rel 388 if [ap + -1] != 0;
[ap + 0] = [[ap + -83] + 2], ap++;
[ap + 0] = [[ap + -84] + 4], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -88] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
call rel -5146;
jmp rel 355 if [ap + -3] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[ap + -6] + 0];
[fp + -7] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -5] = [[ap + -18] + 1];
[ap + -4] = [[ap + -18] + 2];
[ap + -6] = [[ap + -18] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 5], ap++;
jmp rel 280 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 4], ap++;
[ap + 0] = [[ap + -20] + 6], ap++;
[ap + 0] = [ap + -21] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 255 if [ap + -3] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -9] + 0];
[fp + -7] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -5] = [[ap + -16] + 1];
[ap + -4] = [[ap + -16] + 2];
[ap + -6] = [[ap + -16] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 5], ap++;
jmp rel 191 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 4], ap++;
[ap + 0] = [[ap + -18] + 6], ap++;
[ap + 0] = [ap + -19] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 265;
call rel 102878;
[ap + 0] = [ap + -282], ap++;
[ap + 0] = [ap + -276] + 197430, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -280], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -4339;
jmp rel 135 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -2] = [[ap + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 3], ap++;
jmp rel 113 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 2], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -16] + 5];
[ap + -7] = [[ap + -16] + 6];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16] + 5) %}
[ap + 0] = [[ap + -16] + 8], ap++;
jmp rel 84 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 7], ap++;
[ap + 0] = [[ap + -18] + 9], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -21] + 10, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -3667;
jmp rel 60 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 45, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -83], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 102347;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -42] + 0];
[ap + -2] = [[ap + -42] + 1];
[ap + -6] = [[ap + -42] + 2];
[ap + -5] = [[ap + -42] + 3];
[ap + -4] = [[ap + -42] + 4];
[ap + -3] = [[ap + -42] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42]) %}
[ap + 0] = [[ap + -42] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -47] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -47] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -49] + 8], ap++;
[ap + 0] = [[ap + -50] + 9], ap++;
ret;
ap += 40;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -46] + 15300, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
ret;
ap += 111;
[ap + 0] = [[ap + -128] + 7], ap++;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = [ap + -2] + 65250, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -132] + 11, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -134] + 9], ap++;
[ap + 0] = [[ap + -135] + 10], ap++;
ret;
ap += 121;
[ap + 0] = [[ap + -128] + 2], ap++;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = [ap + -2] + 76450, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -132] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -134] + 4], ap++;
[ap + 0] = [[ap + -135] + 5], ap++;
ret;
ap += 125;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = [ap + -131] + 87110, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -132], ap++;
ret;
ap += 278;
[ap + 0] = [[ap + -295] + 4], ap++;
[ap + 0] = [ap + -282], ap++;
[ap + 0] = [ap + -2] + 199000, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -299] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -301] + 6], ap++;
[ap + 0] = [[ap + -302] + 7], ap++;
ret;
ap += 278;
call rel 136557;
[ap + 0] = [ap + -1] + 136556, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 210010, ap++;
call rel 102116;
[ap + 0] = [ap + -291] + [ap + -7], ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 18;
ap += 287;
[ap + 0] = [[ap + -306] + 4], ap++;
call rel 136538;
[ap + 0] = [ap + -1] + 136537, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 211120, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -314] + 8, ap++;
[ap + 0] = [[ap + -315] + 6], ap++;
[ap + 0] = [[ap + -316] + 7], ap++;
[ap + 0] = [ap + -301], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -304], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 306;
call rel 136514;
[ap + 0] = [ap + -1] + 136513, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 224040, ap++;
[ap + 0] = [ap + -320], ap++;
[ap + 0] = [ap + -320] + [ap + -2], ap++;
[ap + 0] = [ap + -320], ap++;
[ap + 0] = [ap + -320], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -320], ap++;
[ap + 0] = [ap + -320], ap++;
ret;
ap += 394;
[ap + 0] = [[ap + -477] + 2], ap++;
call rel 136492;
[ap + 0] = [ap + -1] + 136491, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 277400, ap++;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -488] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -490] + 4], ap++;
[ap + 0] = [[ap + -491] + 5], ap++;
ret;
ap += 400;
call rel 136470;
[ap + 0] = [ap + -1] + 136469, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 288440, ap++;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = [ap + -409] + [ap + -2], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -488], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -415], ap++;
[ap + 0] = [ap + -415], ap++;
ret;
ap += 435;
call rel 136449;
[ap + 0] = [ap + -1] + 136448, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 293010, ap++;
[ap + 0] = [ap + -447], ap++;
[ap + 0] = [ap + -444] + [ap + -2], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -488], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -450], ap++;
[ap + 0] = [ap + -450], ap++;
ret;
ap += 466;
call rel 136428;
[ap + 0] = [ap + -1] + 136427, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 297720, ap++;
call rel 102093;
[ap + 0] = [ap + -480] + [ap + -7], ap++;
[ap + 0] = [ap + -482], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 475;
[ap + 0] = [[ap + -496] + 4], ap++;
call rel 136407;
[ap + 0] = [ap + -1] + 136406, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 298830, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -505] + 8, ap++;
[ap + 0] = [[ap + -506] + 6], ap++;
[ap + 0] = [[ap + -507] + 7], ap++;
[ap + 0] = [ap + -490], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -493], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 489;
call rel 136381;
[ap + 0] = [ap + -1] + 136380, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 311200, ap++;
call rel 102519;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -507] + [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -511], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 502;
[ap + 0] = [[ap + -509] + 4], ap++;
call rel 136357;
[ap + 0] = [ap + -1] + 136356, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 312770, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -520] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -522] + 6], ap++;
[ap + 0] = [[ap + -523] + 7], ap++;
ret;
ap += 498;
call rel 136335;
[ap + 0] = [ap + -1] + 136334, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 322710, ap++;
call rel 101811;
[ap + 0] = [ap + -512] + [ap + -7], ap++;
[ap + 0] = [ap + -514], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 507;
[ap + 0] = [[fp + -8] + 4], ap++;
call rel 136314;
[ap + 0] = [ap + -1] + 136313, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 323820, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 396 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -9] = [[fp + -7] + 6];
[ap + -8] = [[fp + -7] + 7];
[ap + -7] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 356 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 317;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 284 if [ap + -3] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 5], ap++;
jmp rel 220 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 56;
call rel 102313;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -67] + 17790, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 0];
jmp rel 49;
[ap + -1] = [[ap + -15] + 0];
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 27 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 11;
[ap + -1] = [[ap + -6] + 0];
ap += 44;
[ap + 0] = [ap + -50] + 1, ap++;
[ap + 0] = [ap + -48] + 16170, ap++;
jmp rel 12;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 24;
ap += 48;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -50] + 16800, ap++;
call rel 102263;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -7] + 0], ap++;
[ap + -4] = [[ap + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -9] + 2];
jmp rel 90;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -6] + 0], ap++;
[ap + -3] = [[ap + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -8] + 2];
[fp + -5] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [ap + -9] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 16 if [ap + -3] != 0;
ap += 34;
call rel 102169;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42] + 14660, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 43, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 101698;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -66] + 0];
[ap + -2] = [[ap + -66] + 1];
[ap + -6] = [[ap + -66] + 2];
[ap + -5] = [[ap + -66] + 3];
[ap + -4] = [[ap + -66] + 4];
[ap + -3] = [[ap + -66] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -66]) %}
[ap + 0] = [[ap + -66] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -67] + 6], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -67] + 6], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -73] + 8], ap++;
[ap + 0] = [[ap + -74] + 9], ap++;
ret;
ap += 36;
call rel 101478;
[ap + 0] = [ap + -51] + 3, ap++;
[ap + 0] = [ap + -51] + 14840, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 69;
[ap + 0] = [[ap + -94] + 4], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 19360, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -98] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -100] + 6], ap++;
[ap + 0] = [[ap + -101] + 7], ap++;
ret;
ap += 68;
call rel 135945;
[ap + 0] = [ap + -1] + 135944, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 30280, ap++;
call rel 101405;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -82] + [ap + -8], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 70;
call rel 135926;
[ap + 0] = [ap + -1] + 135925, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 30360, ap++;
call rel 101395;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -90] + [ap + -8], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 85;
[ap + 0] = [[fp + -7] + 9], ap++;
call rel 135905;
[ap + 0] = [ap + -1] + 135904, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 32420, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
jmp rel 19;
ap += 97;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 135886;
[ap + 0] = [ap + -1] + 135885, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 44100, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -7] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 0], ap++;
[ap + -4] = [[fp + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -11] + 1], ap++;
[ap + -7] = [[fp + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -10] = [[fp + -8] + 1];
[ap + -4] = [[fp + -8] + 2];
[ap + -5] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 148 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 49;
call rel 101948;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -60] + 36610, ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -2] = [[ap + -8] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 3], ap++;
jmp rel 91 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -18] + 5];
[ap + -7] = [[ap + -18] + 6];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18] + 5) %}
[ap + 0] = [[ap + -18] + 8], ap++;
jmp rel 62 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 7], ap++;
[ap + 0] = [[ap + -20] + 9], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 41, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 101418;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -59] + 10];
[ap + -2] = [[ap + -59] + 11];
[ap + -6] = [[ap + -59] + 12];
[ap + -5] = [[ap + -59] + 13];
[ap + -4] = [[ap + -59] + 14];
[ap + -3] = [[ap + -59] + 15];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -59] + 10) %}
[ap + 0] = [[ap + -59] + 17], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -60] + 16], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -64] + 18, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -60] + 16], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -64] + 20, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -66] + 18], ap++;
[ap + 0] = [[ap + -67] + 19], ap++;
ret;
ap += 41;
[ap + 0] = [[ap + -60] + 7], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2] + 15390, ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -64] + 11, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -66] + 9], ap++;
[ap + 0] = [[ap + -67] + 10], ap++;
ret;
ap += 51;
[ap + 0] = [[ap + -60] + 2], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2] + 26590, ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -64] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -66] + 4], ap++;
[ap + 0] = [[ap + -67] + 5], ap++;
ret;
ap += 62;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2] + 38180, ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 273 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -9] = [[fp + -7] + 6];
[ap + -8] = [[fp + -7] + 7];
[ap + -7] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 233 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 194;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 161 if [ap + -3] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 5], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 34;
call rel 101677;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -45] + 14660, ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 101170;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -49] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -49] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -51] + 8], ap++;
[ap + 0] = [[ap + -52] + 9], ap++;
ret;
ap += 47;
[ap + 0] = [[ap + -72] + 4], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2] + 16230, ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -76] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -78] + 6], ap++;
[ap + 0] = [[ap + -79] + 7], ap++;
ret;
ap += 46;
call rel 135432;
[ap + 0] = [ap + -1] + 135431, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 27150, ap++;
call rel 100892;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60] + [ap + -8], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 48;
call rel 135413;
[ap + 0] = [ap + -1] + 135412, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 27230, ap++;
call rel 100882;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -68] + [ap + -8], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 63;
[ap + 0] = [[fp + -7] + 9], ap++;
call rel 135392;
[ap + 0] = [ap + -1] + 135391, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 29290, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
jmp rel 19;
ap += 75;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 135373;
[ap + 0] = [ap + -1] + 135372, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40970, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 61 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 37, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 101002;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -2] = [[fp + -6] + 6];
[ap + -6] = [[fp + -6] + 7];
[ap + -5] = [[fp + -6] + 8];
[ap + -4] = [[fp + -6] + 9];
[ap + -3] = [[fp + -6] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -6] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 13], ap++;
[ap + 0] = [[fp + -6] + 14], ap++;
ret;
ap += 41;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [ap + -1] + 15390, ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -12] = [[fp + -10] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 3], ap++;
jmp rel 493 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -10] + 5];
[ap + -9] = [[fp + -10] + 6];
[ap + -8] = [[fp + -10] + 7];
[ap + -7] = [[fp + -10] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 5) %}
[ap + 0] = [[fp + -10] + 10], ap++;
jmp rel 451 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [fp + -10] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -13] + 0], ap++;
[ap + -4] = [[fp + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -13] + 2];
jmp rel 410;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -13] + 0], ap++;
[ap + -3] = [[fp + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -13] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 375 if [ap + -3] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -9] = [[fp + -11] + 1];
[ap + 0] = [[fp + -11] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 5], ap++;
jmp rel 304 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 23 if [ap + -1] != 0;
ap += 92;
call rel 135138;
[ap + 0] = [ap + -1] + 135137, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 43290, ap++;
call rel 101287;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [ap + -109] + [ap + -8], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1090654979984666118274814236676208321276316261611326539512404368163006837786, ap++;
[ap + -1] = [[ap + -13] + 0];
[fp + -9] = [[ap + -13] + 1];
[ap + 0] = [[ap + -13] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 198 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 58 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 100710;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -47] + 8, ap++;
jmp rel 61;
ap += 41;
[ap + 0] = [[ap + -86] + 6], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2] + 15490, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -90] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -92] + 8], ap++;
[ap + 0] = [[ap + -93] + 9], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 35, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 27700496323012974, ap++;
[ap + 0] = 510983966385352810443144247626396267, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 100650;
[ap + 0] = [ap + -40] + 100, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 66 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -47] + 8, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 35, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 100608;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -38] + 0];
[ap + -39] = [[ap + -38] + 1];
[ap + -5] = [[ap + -38] + 2];
[ap + -4] = [[ap + -38] + 3];
[ap + -3] = [[ap + -38] + 4];
[ap + -2] = [[ap + -38] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -38]) %}
[ap + 0] = [[ap + -38] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -39] + 6], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -43] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -39] + 6], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -43] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -45] + 8], ap++;
[ap + 0] = [[ap + -46] + 9], ap++;
ret;
ap += 41;
[ap + 0] = [[ap + -86] + 6], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2] + 15390, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -90] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -92] + 8], ap++;
[ap + 0] = [[ap + -93] + 9], ap++;
ret;
ap += 88;
[ap + 0] = [[ap + -109] + 4], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2] + 31820, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -113] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -115] + 6], ap++;
[ap + 0] = [[ap + -116] + 7], ap++;
ret;
ap += 105;
[ap + 0] = [[ap + -130] + 4], ap++;
call rel 134856;
[ap + 0] = [ap + -1] + 134855, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 44860, ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -140] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -142] + 6], ap++;
[ap + 0] = [[ap + -143] + 7], ap++;
ret;
ap += 109;
call rel 134836;
[ap + 0] = [ap + -1] + 134835, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 56230, ap++;
call rel 100294;
[ap + 0] = [ap + -124], ap++;
[ap + 0] = [ap + -124] + [ap + -8], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 111;
call rel 134815;
[ap + 0] = [ap + -1] + 134814, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 56310, ap++;
call rel 100282;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [ap + -132] + [ap + -8], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 126;
[ap + 0] = [[fp + -10] + 9], ap++;
call rel 134792;
[ap + 0] = [ap + -1] + 134791, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 58370, ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -10] + 13, ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [[fp + -10] + 12], ap++;
jmp rel 21;
ap += 138;
[ap + 0] = [[fp + -10] + 2], ap++;
call rel 134771;
[ap + 0] = [ap + -1] + 134770, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 70050, ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -10] + 6, ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -13] = [[fp + -10] + 1];
[ap + -3] = [[fp + -10] + 2];
[ap + -2] = [[fp + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 5], ap++;
jmp rel 1019 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [[fp + -10] + 6], ap++;
[ap + 0] = [fp + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 990 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 950 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 903 if [ap + -1] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -6] = [[fp + -11] + 1];
[ap + 0] = [[fp + -11] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -14] + 0], ap++;
[ap + -4] = [[fp + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -14] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -14] + 1], ap++;
[ap + -7] = [[fp + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 825 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 798 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
call rel -7770;
[ap + 0] = [ap + -41], ap++;
jmp rel 768 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 22 if [fp + -7] != 0;
ap += 514;
call rel 134621;
[ap + 0] = [ap + -1] + 134620, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 244050, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 100214;
[ap + 0] = [ap + -534], ap++;
[ap + 0] = [ap + -530] + [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 735;
[ap + 0] = [ap + -1], ap++;
%{ memory[ap + 0] = (memory[fp + -7] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -7] = [[ap + -8] + 0];
[ap + 0] = [fp + -7] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -9] + 420, ap++;
[ap + 0] = [fp + -7], ap++;
jmp rel 7;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 26, ap++;
[ap + 0] = 14, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 667;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 74, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 1];
jmp rel 638;
[ap + -1] = [[ap + -10] + 1];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 24944740430830204917384312225949778138452, ap++;
call rel -7659;
[ap + 0] = [ap + -37], ap++;
jmp rel 605 if [ap + -4] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 563;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[fp + -3] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 26 if [ap + -3] != 0;
ap += 455;
call rel 134500;
[ap + 0] = [ap + -1] + 134499, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 236060, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 100611;
[ap + 0] = [ap + -471], ap++;
[ap + 0] = [ap + -471] + [ap + -8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -585], ap++;
[ap + 0] = [ap + -580], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 68;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [fp + -4] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 443;
call rel 134447;
[ap + 0] = [ap + -1] + 134446, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 234440, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -457] + 1, ap++;
[ap + 0] = [ap + -455] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 34;
ap += 447;
call rel 134425;
[ap + 0] = [ap + -1] + 134424, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 235070, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -457], ap++;
[ap + 0] = [ap + -457] + [ap + -2], ap++;
call rel 100588;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -585], ap++;
[ap + 0] = [ap + -580], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -127] + 0];
[fp + -6] = [[ap + -127] + 1];
[ap + 0] = [[ap + -127] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -136] + 3, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -133] + 0];
[ap + -14] = [[ap + -133] + 1];
[ap + -4] = [[ap + -133] + 2];
[ap + -5] = [[ap + -133] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -133]) %}
[ap + 0] = [[ap + -133] + 5], ap++;
jmp rel 371 if [ap + -1] != 0;
[ap + 0] = [[ap + -134] + 4], ap++;
[ap + 0] = [[ap + -135] + 6], ap++;
[ap + 0] = [ap + -136] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 24 if [ap + -1] != 0;
ap += 422;
call rel 134323;
[ap + 0] = [ap + -1] + 134322, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 220940, ap++;
call rel 100454;
[ap + 0] = [ap + -445], ap++;
[ap + 0] = [ap + -439] + [ap + -8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -449], ap++;
[ap + 0] = [ap + -444], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
call rel -6763;
jmp rel 299 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -2] = [[ap + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 3], ap++;
jmp rel 269 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 2], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [fp + -9] + [fp + -8], ap++;
[ap + 0] = [fp + -6] + [fp + -3], ap++;
[ap + 0] = [ap + -2] + [fp + -7], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -17] + 5, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [[ap + -11] + 2], ap++;
%{ memory[ap + 0] = memory[ap + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -5], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -23] + 0], ap++;
[ap + 3] = [[ap + -24] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -8] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -28] + 2];
jmp rel 24 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -5] = [[ap + -23] + 0];
ap += 99;
call rel 134243;
[ap + 0] = [ap + -1] + 134242, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 16010, ap++;
[ap + 0] = [ap + -128] + 1, ap++;
[ap + 0] = [ap + -109] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = 0, ap++;
jmp rel 19;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -7287;
[ap + 0] = [ap + -107], ap++;
jmp rel 184 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -116], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
call rel -6150;
jmp rel 157 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -191], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -15], ap++;
call rel 99862;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 106 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -47] + 8, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -55] + 0], ap++;
[ap + -4] = [[ap + -56] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -57] + 2];
jmp rel 70;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -54] + 0], ap++;
[ap + -3] = [[ap + -55] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -56] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 33, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 99800;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -93] + 3, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -46] + 0];
[ap + -3] = [[ap + -46] + 1];
[ap + -7] = [[ap + -46] + 2];
[ap + -6] = [[ap + -46] + 3];
[ap + -5] = [[ap + -46] + 4];
[ap + -4] = [[ap + -46] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -46]) %}
[ap + 0] = [[ap + -46] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -47] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -449], ap++;
[ap + 0] = [ap + -52] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -95], ap++;
ret;
[ap + 0] = [[ap + -47] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -449], ap++;
[ap + 0] = [ap + -52] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -54] + 8], ap++;
[ap + 0] = [[ap + -55] + 9], ap++;
ret;
ap += 34;
call rel 99578;
[ap + 0] = [ap + -97] + 3, ap++;
[ap + 0] = [ap + -48] + 14560, ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -449], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 49;
[ap + 0] = [[ap + -94] + 6], ap++;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = [ap + -2] + 16520, ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -449], ap++;
[ap + 0] = [ap + -99] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -101] + 8], ap++;
[ap + 0] = [[ap + -102] + 9], ap++;
ret;
ap += 91;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = [ap + -97] + 32100, ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -449], ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -99], ap++;
ret;
ap += 166;
[ap + 0] = [ap + -172], ap++;
[ap + 0] = [ap + -168] + 82410, ap++;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -449], ap++;
[ap + 0] = [ap + -279], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -175], ap++;
[ap + 0] = [ap + -175], ap++;
ret;
ap += 278;
[ap + 0] = [[ap + -285] + 2], ap++;
call rel 134016;
[ap + 0] = [ap + -1] + 134015, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 99960, ap++;
[ap + 0] = [ap + -294], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -449], ap++;
[ap + 0] = [ap + -296] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -298] + 4], ap++;
[ap + 0] = [[ap + -299] + 5], ap++;
ret;
ap += 282;
call rel 133995;
[ap + 0] = [ap + -1] + 133994, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 110620, ap++;
[ap + 0] = [ap + -294], ap++;
[ap + 0] = [ap + -294] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -449], ap++;
[ap + 0] = [ap + -296], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -296], ap++;
[ap + 0] = [ap + -296], ap++;
ret;
ap += 435;
[ap + 0] = [[ap + -569] + 4], ap++;
call rel 133974;
[ap + 0] = [ap + -1] + 133973, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 222510, ap++;
[ap + 0] = [ap + -445], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -449], ap++;
[ap + 0] = [ap + -580] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -582] + 6], ap++;
[ap + 0] = [[ap + -583] + 7], ap++;
ret;
ap += 457;
call rel 133953;
[ap + 0] = [ap + -1] + 133952, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 236240, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 99447;
[ap + 0] = [ap + -484] + 3, ap++;
[ap + 0] = [ap + -479] + [ap + -8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -585], ap++;
[ap + 0] = [ap + -580], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 471;
call rel 133928;
[ap + 0] = [ap + -1] + 133927, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 238110, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -484], ap++;
[ap + 0] = [ap + -481] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -585], ap++;
[ap + 0] = [ap + -580], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -488], ap++;
[ap + 0] = [ap + -488], ap++;
ret;
ap += 493;
call rel 133906;
[ap + 0] = [ap + -1] + 133905, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 241210, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -512] + 2, ap++;
[ap + 0] = [ap + -506] + [ap + -2], ap++;
jmp rel 17;
ap += 497;
call rel 133889;
[ap + 0] = [ap + -1] + 133888, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 241840, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -512] + 1, ap++;
[ap + 0] = [ap + -512] + [ap + -2], ap++;
call rel 99488;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -585], ap++;
[ap + 0] = [ap + -580], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 525;
call rel 133858;
[ap + 0] = [ap + -1] + 133857, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 245340, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -538], ap++;
[ap + 0] = [ap + -535] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -585], ap++;
[ap + 0] = [ap + -580], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -542], ap++;
[ap + 0] = [ap + -542], ap++;
ret;
ap += 556;
call rel 133836;
[ap + 0] = [ap + -1] + 133835, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 250050, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 99501;
[ap + 0] = [ap + -571] + [ap + -7], ap++;
[ap + 0] = [ap + -573], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 565;
[ap + 0] = [[ap + -586] + 4], ap++;
call rel 133815;
[ap + 0] = [ap + -1] + 133814, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 251160, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -9] + [ap + -1], ap++;
[ap + 0] = [ap + -596] + 8, ap++;
[ap + 0] = [[ap + -597] + 6], ap++;
[ap + 0] = [[ap + -598] + 7], ap++;
[ap + 0] = [ap + -581], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -585], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 578;
call rel 133788;
[ap + 0] = [ap + -1] + 133787, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 263440, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 99924;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -598] + [ap + -8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -603], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 591;
[ap + 0] = [[ap + -598] + 4], ap++;
call rel 133761;
[ap + 0] = [ap + -1] + 133760, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 265010, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -612] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -614] + 6], ap++;
[ap + 0] = [[ap + -615] + 7], ap++;
ret;
ap += 587;
call rel 133736;
[ap + 0] = [ap + -1] + 133735, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 274950, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 99210;
[ap + 0] = [ap + -603] + [ap + -7], ap++;
[ap + 0] = [ap + -605], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 22;
ap += 596;
[ap + 0] = [[fp + -10] + 4], ap++;
call rel 133713;
[ap + 0] = [ap + -1] + 133712, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 276060, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -10] + [ap + -1], ap++;
[ap + 0] = [fp + -10] + 8, ap++;
[ap + 0] = [[fp + -10] + 6], ap++;
[ap + 0] = [[fp + -10] + 7], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -12] = [[fp + -9] + 1];
[ap + -3] = [[fp + -9] + 2];
[ap + -2] = [[fp + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 5], ap++;
jmp rel 904 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 6], ap++;
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 875 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 835 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 788 if [ap + -1] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -8] = [[fp + -10] + 1];
[ap + 0] = [[fp + -10] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -13] + 0], ap++;
[ap + -4] = [[fp + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -13] + 1], ap++;
[ap + -7] = [[fp + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 710 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 683 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -8830;
[ap + 0] = [ap + -41], ap++;
jmp rel 653 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 22 if [fp + -5] != 0;
ap += 468;
call rel 133561;
[ap + 0] = [ap + -1] + 133560, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 237980, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 99154;
[ap + 0] = [ap + -488], ap++;
[ap + 0] = [ap + -484] + [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 620;
[ap + 0] = [ap + -1], ap++;
%{ memory[ap + 0] = (memory[fp + -5] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -5] = [[ap + -8] + 0];
[ap + 0] = [fp + -5] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -9] + 420, ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 7;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 26, ap++;
[ap + 0] = 14, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 552;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 74, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 1];
jmp rel 523;
[ap + -1] = [[ap + -10] + 1];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 2];
jmp rel 68;
[ap + -1] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 442;
call rel 133452;
[ap + 0] = [ap + -1] + 133451, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 234350, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -456] + 1, ap++;
[ap + 0] = [ap + -454] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 34;
ap += 446;
call rel 133430;
[ap + 0] = [ap + -1] + 133429, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 234980, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -456], ap++;
[ap + 0] = [ap + -456] + [ap + -2], ap++;
call rel 99602;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -539], ap++;
[ap + 0] = [ap + -534], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -82] + 0];
[fp + -8] = [[ap + -82] + 1];
[ap + 0] = [[ap + -82] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -91] + 3, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -88] + 0];
[ap + -14] = [[ap + -88] + 1];
[ap + -4] = [[ap + -88] + 2];
[ap + -5] = [[ap + -88] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -88]) %}
[ap + 0] = [[ap + -88] + 5], ap++;
jmp rel 368 if [ap + -1] != 0;
[ap + 0] = [[ap + -89] + 4], ap++;
[ap + 0] = [[ap + -90] + 6], ap++;
[ap + 0] = [ap + -91] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 24 if [ap + -1] != 0;
ap += 421;
call rel 133328;
[ap + 0] = [ap + -1] + 133327, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 220850, ap++;
call rel 99459;
[ap + 0] = [ap + -444], ap++;
[ap + 0] = [ap + -438] + [ap + -8], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -448], ap++;
[ap + 0] = [ap + -443], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -7758;
jmp rel 296 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -2] = [[ap + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 3], ap++;
jmp rel 266 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 2], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [fp + -7] + [fp + -6], ap++;
[ap + 0] = [ap + -1] + [fp + -5], ap++;
[ap + 0] = [ap + -1] + [fp + -8], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -16] + 5, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -10] + 2], ap++;
%{ memory[ap + 0] = memory[ap + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -5], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -22] + 0], ap++;
[ap + 3] = [[ap + -23] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -8] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -27] + 2];
jmp rel 24 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -5] = [[ap + -22] + 0];
ap += 99;
call rel 133249;
[ap + 0] = [ap + -1] + 133248, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 16010, ap++;
[ap + 0] = [ap + -127] + 1, ap++;
[ap + 0] = [ap + -109] + [ap + -2], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = 0, ap++;
jmp rel 19;
[ap + 0] = [ap + -27] + 3, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -8], ap++;
call rel -8281;
[ap + 0] = [ap + -107], ap++;
jmp rel 182 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -116], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -7144;
jmp rel 155 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -191], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -15], ap++;
call rel 98868;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 104 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -47] + 8, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -55] + 0], ap++;
[ap + -4] = [[ap + -56] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -57] + 2];
jmp rel 68;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -54] + 0], ap++;
[ap + -3] = [[ap + -55] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -56] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 33, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -242], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 98808;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -93] + 3, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -46] + 0];
[ap + -3] = [[ap + -46] + 1];
[ap + -7] = [[ap + -46] + 2];
[ap + -6] = [[ap + -46] + 3];
[ap + -5] = [[ap + -46] + 4];
[ap + -4] = [[ap + -46] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -46]) %}
[ap + 0] = [[ap + -46] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -47] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -448], ap++;
[ap + 0] = [ap + -52] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -95], ap++;
ret;
[ap + 0] = [[ap + -47] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -448], ap++;
[ap + 0] = [ap + -52] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -54] + 8], ap++;
[ap + 0] = [[ap + -55] + 9], ap++;
ret;
ap += 34;
call rel 98586;
[ap + 0] = [ap + -97] + 3, ap++;
[ap + 0] = [ap + -48] + 14560, ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -448], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 49;
[ap + 0] = [[ap + -94] + 6], ap++;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = [ap + -2] + 16520, ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -448], ap++;
[ap + 0] = [ap + -99] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -101] + 8], ap++;
[ap + 0] = [[ap + -102] + 9], ap++;
ret;
ap += 91;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = [ap + -97] + 32100, ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -448], ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -99], ap++;
ret;
ap += 166;
[ap + 0] = [ap + -172], ap++;
[ap + 0] = [ap + -168] + 82410, ap++;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -448], ap++;
[ap + 0] = [ap + -279], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -175], ap++;
[ap + 0] = [ap + -175], ap++;
ret;
ap += 277;
[ap + 0] = [[ap + -284] + 2], ap++;
call rel 133024;
[ap + 0] = [ap + -1] + 133023, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 99870, ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -448], ap++;
[ap + 0] = [ap + -295] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -297] + 4], ap++;
[ap + 0] = [[ap + -298] + 5], ap++;
ret;
ap += 281;
call rel 133003;
[ap + 0] = [ap + -1] + 133002, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 110530, ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = [ap + -293] + [ap + -2], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -448], ap++;
[ap + 0] = [ap + -295], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -295], ap++;
[ap + 0] = [ap + -295], ap++;
ret;
ap += 434;
[ap + 0] = [[ap + -523] + 4], ap++;
call rel 132982;
[ap + 0] = [ap + -1] + 132981, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 222420, ap++;
[ap + 0] = [ap + -444], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -448], ap++;
[ap + 0] = [ap + -534] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -536] + 6], ap++;
[ap + 0] = [[ap + -537] + 7], ap++;
ret;
ap += 447;
call rel 132961;
[ap + 0] = [ap + -1] + 132960, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 235140, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -466] + 2, ap++;
[ap + 0] = [ap + -460] + [ap + -2], ap++;
jmp rel 17;
ap += 451;
call rel 132944;
[ap + 0] = [ap + -1] + 132943, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 235770, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -466] + 1, ap++;
[ap + 0] = [ap + -466] + [ap + -2], ap++;
call rel 98543;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -539], ap++;
[ap + 0] = [ap + -534], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 479;
call rel 132913;
[ap + 0] = [ap + -1] + 132912, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 239270, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -492], ap++;
[ap + 0] = [ap + -489] + [ap + -2], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -539], ap++;
[ap + 0] = [ap + -534], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -496], ap++;
[ap + 0] = [ap + -496], ap++;
ret;
ap += 510;
call rel 132891;
[ap + 0] = [ap + -1] + 132890, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 243980, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 98556;
[ap + 0] = [ap + -525] + [ap + -7], ap++;
[ap + 0] = [ap + -527], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 519;
[ap + 0] = [[ap + -540] + 4], ap++;
call rel 132870;
[ap + 0] = [ap + -1] + 132869, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 245090, ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -9] + [ap + -1], ap++;
[ap + 0] = [ap + -550] + 8, ap++;
[ap + 0] = [[ap + -551] + 6], ap++;
[ap + 0] = [[ap + -552] + 7], ap++;
[ap + 0] = [ap + -535], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -539], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 532;
call rel 132843;
[ap + 0] = [ap + -1] + 132842, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 257370, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 98979;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -552] + [ap + -8], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -557], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 545;
[ap + 0] = [[ap + -552] + 4], ap++;
call rel 132816;
[ap + 0] = [ap + -1] + 132815, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 258940, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -566] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -568] + 6], ap++;
[ap + 0] = [[ap + -569] + 7], ap++;
ret;
ap += 541;
call rel 132791;
[ap + 0] = [ap + -1] + 132790, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 268880, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 98265;
[ap + 0] = [ap + -557] + [ap + -7], ap++;
[ap + 0] = [ap + -559], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 22;
ap += 550;
[ap + 0] = [[fp + -9] + 4], ap++;
call rel 132768;
[ap + 0] = [ap + -1] + 132767, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 269990, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -10] + [ap + -1], ap++;
[ap + 0] = [fp + -9] + 8, ap++;
[ap + 0] = [[fp + -9] + 6], ap++;
[ap + 0] = [[fp + -9] + 7], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -13] = [[fp + -11] + 1];
[ap + -3] = [[fp + -11] + 2];
[ap + -2] = [[fp + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11]) %}
[ap + 0] = [[fp + -11] + 5], ap++;
jmp rel 1140 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 4], ap++;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [fp + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 1113 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 1076 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 1032 if [ap + -1] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -9] = [[fp + -12] + 1];
[ap + 0] = [[fp + -12] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -14] + 0], ap++;
[ap + -4] = [[fp + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -14] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -14] + 1], ap++;
[ap + -7] = [[fp + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 955 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 928 if [ap + -3] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[ap + -9] + 0];
[fp + -8] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -5] = [[ap + -16] + 1];
[ap + -4] = [[ap + -16] + 2];
[ap + -6] = [[ap + -16] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 5], ap++;
jmp rel 851 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 4], ap++;
[ap + 0] = [[ap + -18] + 6], ap++;
[ap + 0] = [ap + -19] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 824 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -9832;
[ap + 0] = [ap + -41], ap++;
jmp rel 795 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 97440392307930487958532469632616319310, ap++;
call rel -9637;
[ap + 0] = [ap + -35], ap++;
jmp rel 765 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 24944740430830204917384312225949778138452, ap++;
call rel -9646;
[ap + 0] = [ap + -35], ap++;
jmp rel 735 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = 1486822392393958861669744346678610, ap++;
call rel -9655;
[ap + 0] = [ap + -35], ap++;
jmp rel 705 if [ap + -4] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 664;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[fp + -3] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 367;
call rel 132504;
[ap + 0] = [ap + -1] + 132503, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 213580, ap++;
call rel 98615;
[ap + 0] = [ap + -382], ap++;
[ap + 0] = [ap + -382] + [ap + -8], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 67;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [fp + -4] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 355;
call rel 132452;
[ap + 0] = [ap + -1] + 132451, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 211960, ap++;
[ap + 0] = [ap + -368] + 1, ap++;
[ap + 0] = [ap + -366] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 359;
call rel 132430;
[ap + 0] = [ap + -1] + 132429, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 212590, ap++;
[ap + 0] = [ap + -368], ap++;
[ap + 0] = [ap + -368] + [ap + -2], ap++;
call rel 98593;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -178] + 0];
[fp + -9] = [[ap + -178] + 1];
[ap + 0] = [[ap + -178] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -187] + 3, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -184] + 0];
[ap + -14] = [[ap + -184] + 1];
[ap + -4] = [[ap + -184] + 2];
[ap + -5] = [[ap + -184] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -184]) %}
[ap + 0] = [[ap + -184] + 5], ap++;
jmp rel 475 if [ap + -1] != 0;
[ap + 0] = [[ap + -185] + 4], ap++;
[ap + 0] = [[ap + -186] + 6], ap++;
[ap + 0] = [ap + -187] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 23 if [ap + -1] != 0;
ap += 333;
call rel 132329;
[ap + 0] = [ap + -1] + 132328, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 198370, ap++;
call rel 98460;
[ap + 0] = [ap + -356], ap++;
[ap + 0] = [ap + -350] + [ap + -8], ap++;
[ap + 0] = [ap + -359], ap++;
[ap + 0] = [ap + -354], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -13] + 0];
[fp + -8] = [[ap + -13] + 1];
[ap + 0] = [[ap + -13] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 369 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 16 if [ap + -1] != 0;
ap += 316;
call rel 98376;
[ap + 0] = [ap + -333], ap++;
[ap + 0] = [ap + -327] + 185330, ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -331], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -8841;
jmp rel 313 if [ap + -3] != 0;
[ap + 0] = 200, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[fp + -7] + memory[fp + -6] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + 0] = [[ap + -9] + 1], ap++;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [[ap + -11] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -15] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -15] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [fp + -7], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -24] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[fp + -6] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -28] + 6], ap++;
[ap + -2] = [[ap + -29] + 7], ap++;
[ap + -2] = [[ap + -30] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -34] + 9], ap++;
[ap + -1] = [[ap + -35] + 10], ap++;
[ap + -3] = [[ap + -36] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -40] + 12], ap++;
[ap + -3] = [[ap + -41] + 13], ap++;
[ap + -27] = [[ap + -42] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -41], ap++;
[fp + -6] = [ap + 1] + [ap + -34], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -46] + 15];
jmp rel 13;
[ap + -1] = [[ap + -45] + 15];
ap += 1;
[ap + 0] = [ap + -46] + 16, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -46] + 16, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[fp + -7] = [ap + 1] + [ap + -42], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 155;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 140 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 114;
[ap + -1] = [[ap + -7] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -8] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -4], ap++;
[ap + -11] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 79;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel -8330;
jmp rel 56 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 33, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 97686;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -42] + 0];
[ap + -2] = [[ap + -42] + 1];
[ap + -6] = [[ap + -42] + 2];
[ap + -5] = [[ap + -42] + 3];
[ap + -4] = [[ap + -42] + 4];
[ap + -3] = [[ap + -42] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42]) %}
[ap + 0] = [[ap + -42] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -47] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -121], ap++;
[ap + 0] = [ap + -121], ap++;
ret;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -47] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -49] + 8], ap++;
[ap + 0] = [[ap + -50] + 9], ap++;
ret;
ap += 40;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -46] + 15300, ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
ret;
ap += 101;
[ap + 0] = [ap + -110] + 1, ap++;
[ap + 0] = [ap + -106] + 64050, ap++;
jmp rel 8;
ap += 109;
[ap + 0] = [ap + -117] + 1, ap++;
[ap + 0] = [ap + -114] + 65240, ap++;
call rel 98133;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 113;
[ap + 0] = [ap + -117], ap++;
[ap + 0] = [ap + -117] + 65770, ap++;
jmp rel 8;
ap += 116;
[ap + 0] = [ap + -128] + 2, ap++;
[ap + 0] = [ap + -121] + 66140, ap++;
call rel 98118;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 176;
[ap + 0] = [ap + -182], ap++;
[ap + 0] = [ap + -182] + 75010, ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = [ap + -183], ap++;
ret;
ap += 329;
[ap + 0] = [[ap + -350] + 4], ap++;
[ap + 0] = [ap + -333], ap++;
[ap + 0] = [ap + -2] + 186900, ap++;
[ap + 0] = [ap + -336], ap++;
[ap + 0] = [ap + -354] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -356] + 6], ap++;
[ap + 0] = [[ap + -357] + 7], ap++;
ret;
ap += 346;
[ap + 0] = [[ap + -531] + 4], ap++;
call rel 131876;
[ap + 0] = [ap + -1] + 131875, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 199940, ap++;
[ap + 0] = [ap + -356], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -359], ap++;
[ap + 0] = [ap + -541] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -543] + 6], ap++;
[ap + 0] = [[ap + -544] + 7], ap++;
ret;
ap += 369;
call rel 131856;
[ap + 0] = [ap + -1] + 131855, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 213760, ap++;
call rel 97350;
[ap + 0] = [ap + -395] + 3, ap++;
[ap + 0] = [ap + -390] + [ap + -8], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 383;
call rel 131832;
[ap + 0] = [ap + -1] + 131831, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 215630, ap++;
[ap + 0] = [ap + -395], ap++;
[ap + 0] = [ap + -392] + [ap + -2], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -398], ap++;
[ap + 0] = [ap + -398], ap++;
ret;
ap += 418;
call rel 131811;
[ap + 0] = [ap + -1] + 131810, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 220200, ap++;
[ap + 0] = [ap + -430], ap++;
[ap + 0] = [ap + -427] + [ap + -2], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -433], ap++;
[ap + 0] = [ap + -433], ap++;
ret;
ap += 453;
call rel 131790;
[ap + 0] = [ap + -1] + 131789, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 224770, ap++;
[ap + 0] = [ap + -465], ap++;
[ap + 0] = [ap + -462] + [ap + -2], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -468], ap++;
[ap + 0] = [ap + -468], ap++;
ret;
ap += 488;
call rel 131769;
[ap + 0] = [ap + -1] + 131768, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 229340, ap++;
[ap + 0] = [ap + -500], ap++;
[ap + 0] = [ap + -497] + [ap + -2], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -541], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -503], ap++;
[ap + 0] = [ap + -503], ap++;
ret;
ap += 519;
call rel 131748;
[ap + 0] = [ap + -1] + 131747, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 234050, ap++;
call rel 97413;
[ap + 0] = [ap + -533] + [ap + -7], ap++;
[ap + 0] = [ap + -535], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 528;
[ap + 0] = [[ap + -545] + 4], ap++;
call rel 131727;
[ap + 0] = [ap + -1] + 131726, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 235160, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -554] + 8, ap++;
[ap + 0] = [[ap + -555] + 6], ap++;
[ap + 0] = [[ap + -556] + 7], ap++;
[ap + 0] = [ap + -543], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -546], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 538;
call rel 131701;
[ap + 0] = [ap + -1] + 131700, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 247070, ap++;
call rel 97366;
[ap + 0] = [ap + -552] + [ap + -7], ap++;
[ap + 0] = [ap + -554], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 547;
[ap + 0] = [[ap + -568] + 4], ap++;
call rel 131680;
[ap + 0] = [ap + -1] + 131679, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 248180, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -577] + 8, ap++;
[ap + 0] = [[ap + -578] + 6], ap++;
[ap + 0] = [[ap + -579] + 7], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -565], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 561;
call rel 131654;
[ap + 0] = [ap + -1] + 131653, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 260550, ap++;
call rel 97792;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -579] + [ap + -8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -583], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 574;
[ap + 0] = [[ap + -581] + 4], ap++;
call rel 131630;
[ap + 0] = [ap + -1] + 131629, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 262120, ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -592] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -594] + 6], ap++;
[ap + 0] = [[ap + -595] + 7], ap++;
ret;
ap += 570;
call rel 131608;
[ap + 0] = [ap + -1] + 131607, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 272060, ap++;
call rel 97084;
[ap + 0] = [ap + -584] + [ap + -7], ap++;
[ap + 0] = [ap + -586], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 579;
[ap + 0] = [[fp + -11] + 4], ap++;
call rel 131587;
[ap + 0] = [ap + -1] + 131586, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 273170, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [fp + -11] + 8, ap++;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [[fp + -11] + 7], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 200, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[fp + -7] + memory[fp + -6] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[fp + -13] + 0], ap++;
[ap + 0] = [[fp + -13] + 1], ap++;
[ap + 0] = [[fp + -13] + 2], ap++;
[ap + 0] = [[fp + -13] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[fp + -13] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[fp + -13] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [fp + -7], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -13] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[fp + -6] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -13] + 6], ap++;
[ap + -2] = [[fp + -13] + 7], ap++;
[ap + -2] = [[fp + -13] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -13] + 9], ap++;
[ap + -1] = [[fp + -13] + 10], ap++;
[ap + -3] = [[fp + -13] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -13] + 12], ap++;
[ap + -3] = [[fp + -13] + 13], ap++;
[ap + -27] = [[fp + -13] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[fp + -6] = [ap + 1] + [ap + -33], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -13] + 15];
jmp rel 13;
[ap + -1] = [[fp + -13] + 15];
ap += 1;
[ap + 0] = [fp + -13] + 16, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [fp + -13] + 16, ap++;
[ap + 0] = [fp + -12] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[fp + -7] = [ap + 1] + [ap + -41], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 132;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 117 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 92;
[ap + -1] = [[ap + -7] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -8] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -4], ap++;
[ap + -11] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 57;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 33, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 97041;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + -38] = [[fp + -11] + 1];
[ap + -5] = [[fp + -11] + 2];
[ap + -4] = [[fp + -11] + 3];
[ap + -3] = [[fp + -11] + 4];
[ap + -2] = [[fp + -11] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11]) %}
[ap + 0] = [[fp + -11] + 7], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -11] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
ret;
[ap + 0] = [[fp + -11] + 6], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -11] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 8], ap++;
[ap + 0] = [[fp + -11] + 9], ap++;
ret;
ap += 32;
[ap + 0] = [ap + -41] + 1, ap++;
[ap + 0] = [ap + -37] + 14280, ap++;
jmp rel 8;
ap += 40;
[ap + 0] = [ap + -48] + 1, ap++;
[ap + 0] = [ap + -45] + 15470, ap++;
call rel 97503;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 44;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48] + 16000, ap++;
jmp rel 8;
ap += 47;
[ap + 0] = [ap + -59] + 2, ap++;
[ap + 0] = [ap + -52] + 16370, ap++;
call rel 97489;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
[ap + -3] = [[fp + -7] + 2];
[ap + -2] = [[fp + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 5], ap++;
jmp rel 491 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 466 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 431 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 389 if [ap + -1] != 0;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -11182;
[ap + 0] = [ap + -44], ap++;
jmp rel 362 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 20 if [fp + -4] != 0;
ap += 419;
call rel 131209;
[ap + 0] = [ap + -1] + 131208, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 210630, ap++;
call rel 96804;
[ap + 0] = [ap + -437], ap++;
[ap + 0] = [ap + -433] + [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 332;
[ap + 0] = [ap + -1], ap++;
%{ memory[ap + 0] = (memory[fp + -4] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -9] + 420, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 26, ap++;
[ap + 0] = 14, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 266;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 74, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 1];
jmp rel 239;
[ap + -1] = [[ap + -10] + 1];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 24944740430830204917346695914468432760404, ap++;
call rel -11069;
[ap + 0] = [ap + -37], ap++;
jmp rel 209 if [ap + -4] != 0;
[ap + 0] = [fp + -6] + [fp + -5], ap++;
[ap + 0] = [ap + -1] + [fp + -4], ap++;
[ap + 0] = [ap + -1] + [fp + -3], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -8], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -14] + 0], ap++;
[ap + 3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -19] + 2];
jmp rel 24 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -14] + 0];
ap += 99;
call rel 131086;
[ap + 0] = [ap + -1] + 131085, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 16010, ap++;
[ap + 0] = [ap + -119] + 1, ap++;
[ap + 0] = [ap + -108] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -111], ap++;
[ap + 0] = 0, ap++;
jmp rel 19;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -10444;
[ap + 0] = [ap + -106], ap++;
jmp rel 131 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -222], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -10014;
jmp rel 105 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -9316;
jmp rel 84 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -2] = [[ap + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 3], ap++;
jmp rel 62 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 2], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -225], ap++;
[ap + 0] = [ap + -225], ap++;
[ap + 0] = 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -15], ap++;
call rel 96686;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -49] + 5];
[ap + -2] = [[ap + -49] + 6];
[ap + -6] = [[ap + -49] + 7];
[ap + -5] = [[ap + -49] + 8];
[ap + -4] = [[ap + -49] + 9];
[ap + -3] = [[ap + -49] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -49] + 5) %}
[ap + 0] = [[ap + -49] + 12], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -50] + 11], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -268], ap++;
[ap + 0] = [ap + -54] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -45], ap++;
ret;
[ap + 0] = [[ap + -50] + 11], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -268], ap++;
[ap + 0] = [ap + -54] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -56] + 13], ap++;
[ap + 0] = [[ap + -57] + 14], ap++;
ret;
ap += 43;
[ap + 0] = [[ap + -50] + 2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -2] + 15570, ap++;
[ap + 0] = [ap + -268], ap++;
[ap + 0] = [ap + -54] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -56] + 4], ap++;
[ap + 0] = [[ap + -57] + 5], ap++;
ret;
ap += 47;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -53] + 26230, ap++;
[ap + 0] = [ap + -268], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -54], ap++;
ret;
ap += 117;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -123] + 76090, ap++;
[ap + 0] = [ap + -268], ap++;
[ap + 0] = [ap + -124], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -124], ap++;
[ap + 0] = [ap + -124], ap++;
ret;
ap += 268;
[ap + 0] = [ap + -274], ap++;
[ap + 0] = [ap + -270] + 187500, ap++;
[ap + 0] = [ap + -275], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -276], ap++;
[ap + 0] = [ap + -276], ap++;
ret;
ap += 376;
call rel 130914;
[ap + 0] = [ap + -1] + 130913, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 204690, ap++;
[ap + 0] = [ap + -387], ap++;
[ap + 0] = [ap + -384] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -390], ap++;
ret;
ap += 398;
call rel 130895;
[ap + 0] = [ap + -1] + 130894, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 207790, ap++;
[ap + 0] = [ap + -415] + 2, ap++;
[ap + 0] = [ap + -409] + [ap + -2], ap++;
jmp rel 15;
ap += 402;
call rel 130880;
[ap + 0] = [ap + -1] + 130879, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 208420, ap++;
[ap + 0] = [ap + -415] + 1, ap++;
[ap + 0] = [ap + -415] + [ap + -2], ap++;
call rel 96481;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 430;
call rel 130852;
[ap + 0] = [ap + -1] + 130851, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 211920, ap++;
[ap + 0] = [ap + -441], ap++;
[ap + 0] = [ap + -438] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -444], ap++;
[ap + 0] = [ap + -444], ap++;
ret;
ap += 465;
call rel 130833;
[ap + 0] = [ap + -1] + 130832, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 217090, ap++;
call rel 96973;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -482] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 478;
[ap + 0] = [[ap + -485] + 4], ap++;
call rel 130811;
[ap + 0] = [ap + -1] + 130810, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 218660, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -495] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -497] + 6], ap++;
[ap + 0] = [[ap + -498] + 7], ap++;
ret;
ap += 474;
call rel 130791;
[ap + 0] = [ap + -1] + 130790, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 228600, ap++;
call rel 96269;
[ap + 0] = [ap + -487] + [ap + -7], ap++;
[ap + 0] = [ap + -489], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 18;
ap += 483;
[ap + 0] = [[fp + -7] + 4], ap++;
call rel 130772;
[ap + 0] = [ap + -1] + 130771, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 229710, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [[fp + -7] + 7], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 474 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 449 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 414 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 372 if [ap + -1] != 0;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel -11709;
[ap + 0] = [ap + -44], ap++;
jmp rel 345 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 20 if [fp + -3] != 0;
ap += 387;
call rel 130682;
[ap + 0] = [ap + -1] + 130681, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 206330, ap++;
call rel 96277;
[ap + 0] = [ap + -405], ap++;
[ap + 0] = [ap + -401] + [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 315;
[ap + 0] = [ap + -1], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 17 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[ap + -8] + 0];
[ap + 0] = [fp + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -9] + 420, ap++;
[ap + 0] = [fp + -3], ap++;
jmp rel 7;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 26, ap++;
[ap + 0] = 14, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 249;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 74, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 1];
jmp rel 222;
[ap + -1] = [[ap + -10] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -69] + 0];
[ap + -3] = [[ap + -69] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -69]) %}
[ap + 0] = [[ap + -69] + 3], ap++;
jmp rel 190 if [ap + -1] != 0;
[ap + 0] = [[ap + -70] + 2], ap++;
[ap + 0] = [[ap + -71] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + 0] = [fp + -5] + [fp + -4], ap++;
[ap + 0] = [ap + -1] + [fp + -3], ap++;
[ap + 0] = [ap + -1] + [ap + -3], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -80] + 5, ap++;
[ap + 0] = [ap + -11], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -16] + 0], ap++;
[ap + 3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -21] + 2];
jmp rel 24 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -16] + 0];
ap += 99;
call rel 130554;
[ap + 0] = [ap + -1] + 130553, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 16010, ap++;
[ap + 0] = [ap + -121] + 1, ap++;
[ap + 0] = [ap + -108] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -112], ap++;
[ap + 0] = 0, ap++;
jmp rel 19;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -10976;
[ap + 0] = [ap + -106], ap++;
jmp rel 107 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel -10546;
jmp rel 81 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel -9848;
jmp rel 60 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -346], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -15], ap++;
call rel 96164;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -2] = [[ap + -44] + 1];
[ap + -6] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
[ap + -4] = [[ap + -44] + 4];
[ap + -3] = [[ap + -44] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -263], ap++;
[ap + 0] = [ap + -49] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -45], ap++;
ret;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -263], ap++;
[ap + 0] = [ap + -49] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -51] + 8], ap++;
[ap + 0] = [[ap + -52] + 9], ap++;
ret;
ap += 42;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48] + 15480, ap++;
[ap + 0] = [ap + -263], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -49], ap++;
ret;
ap += 112;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -118] + 65340, ap++;
[ap + 0] = [ap + -263], ap++;
[ap + 0] = [ap + -119], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -119], ap++;
[ap + 0] = [ap + -119], ap++;
ret;
ap += 263;
[ap + 0] = [ap + -269], ap++;
[ap + 0] = [ap + -265] + 176750, ap++;
[ap + 0] = [ap + -270], ap++;
[ap + 0] = [ap + -374], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -271], ap++;
[ap + 0] = [ap + -271], ap++;
ret;
ap += 374;
[ap + 0] = [[ap + -444] + 2], ap++;
call rel 130405;
[ap + 0] = [ap + -1] + 130404, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 194210, ap++;
[ap + 0] = [ap + -384], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -454] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -456] + 4], ap++;
[ap + 0] = [[ap + -457] + 5], ap++;
ret;
ap += 366;
call rel 130385;
[ap + 0] = [ap + -1] + 130384, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 203490, ap++;
[ap + 0] = [ap + -383] + 2, ap++;
[ap + 0] = [ap + -377] + [ap + -2], ap++;
jmp rel 15;
ap += 370;
call rel 130370;
[ap + 0] = [ap + -1] + 130369, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 204120, ap++;
[ap + 0] = [ap + -383] + 1, ap++;
[ap + 0] = [ap + -383] + [ap + -2], ap++;
call rel 95971;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -454], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 398;
call rel 130342;
[ap + 0] = [ap + -1] + 130341, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 207620, ap++;
[ap + 0] = [ap + -409], ap++;
[ap + 0] = [ap + -406] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -454], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = [ap + -412], ap++;
ret;
ap += 433;
call rel 130323;
[ap + 0] = [ap + -1] + 130322, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 212790, ap++;
call rel 96463;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -450] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -454], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 446;
[ap + 0] = [[ap + -453] + 4], ap++;
call rel 130301;
[ap + 0] = [ap + -1] + 130300, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 214360, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -463] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -465] + 6], ap++;
[ap + 0] = [[ap + -466] + 7], ap++;
ret;
ap += 442;
call rel 130281;
[ap + 0] = [ap + -1] + 130280, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 224300, ap++;
call rel 95759;
[ap + 0] = [ap + -455] + [ap + -7], ap++;
[ap + 0] = [ap + -457], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 18;
ap += 451;
[ap + 0] = [[fp + -6] + 4], ap++;
call rel 130262;
[ap + 0] = [ap + -1] + 130261, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 225410, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -11] = [[fp + -10] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 3], ap++;
jmp rel 227 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -10] + 5];
[ap + -9] = [[fp + -10] + 6];
[ap + -8] = [[fp + -10] + 7];
[ap + -7] = [[fp + -10] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 5) %}
[ap + 0] = [[fp + -10] + 10], ap++;
jmp rel 194 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [fp + -10] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -12] + 0], ap++;
[ap + -4] = [[fp + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -12] + 2];
jmp rel 162;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -12] + 0], ap++;
[ap + -3] = [[fp + -12] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -12] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 136 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 17;
[ap + -1] = [[ap + -6] + 0];
ap += 39;
call rel 96376;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -49] + 15510, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 15 if [fp + -9] != 0;
ap += 36;
call rel 96366;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44] + 15040, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
jmp rel 15 if [fp + -8] != 0;
ap += 35;
call rel 96359;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -43] + 14850, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
jmp rel 15 if [fp + -7] != 0;
ap += 34;
call rel 96352;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -42] + 14660, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 21, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 95764;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -57] + 0];
[ap + -2] = [[ap + -57] + 1];
[ap + -6] = [[ap + -57] + 2];
[ap + -5] = [[ap + -57] + 3];
[ap + -4] = [[ap + -57] + 4];
[ap + -3] = [[ap + -57] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -57]) %}
[ap + 0] = [[ap + -57] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -58] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -61] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
ret;
[ap + 0] = [[ap + -58] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -61] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -63] + 8], ap++;
[ap + 0] = [[ap + -64] + 9], ap++;
ret;
ap += 38;
call rel 95511;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -46] + 15490, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 40;
call rel 95508;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [ap + -54] + 15570, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 55;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 17630, ap++;
[ap + 0] = [fp + -10] + 13, ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [[fp + -10] + 12], ap++;
jmp rel 12;
ap += 67;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 29310, ap++;
[ap + 0] = [fp + -10] + 6, ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 750 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 732 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 705 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 671 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
jmp rel 15 if [fp + -5] != 0;
ap += 134;
call rel 96177;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -142] + 99980, ap++;
[ap + 0] = [ap + -149], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[ap + -3] = [[ap + -11] + 2];
[ap + -2] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 623 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -8] + 0], ap++;
[ap + 3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -8] + 2];
jmp rel 580 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -8] + 0];
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 547 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 509 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 481;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[fp + -4] = [ap + 1] + [ap + -23], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 448;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + -4] = [[ap + -17] + 1];
[ap + -3] = [[ap + -17] + 2];
[ap + -2] = [[ap + -17] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17]) %}
[ap + 0] = [[ap + -17] + 5], ap++;
jmp rel 413 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 4], ap++;
[ap + 0] = [[ap + -19] + 6], ap++;
[ap + 0] = [ap + -20] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -16] + 2];
jmp rel 381;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -15] + 2];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -21] + 3], ap++;
[ap + -4] = [[ap + -22] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -23] + 5];
jmp rel 338;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -20] + 3], ap++;
[ap + -3] = [[ap + -21] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -22] + 5];
[ap + -15] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -23] + 6, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 13 if [ap + -3] != 0;
ap += 74;
call rel 95215;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -82] + 61180, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 323;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1186423139533537089827846530073695414305470307342419724096222587041583312528, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -4] = [[ap + -21] + 1];
[ap + -3] = [[ap + -21] + 2];
[ap + -2] = [[ap + -21] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 5], ap++;
jmp rel 281 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 4], ap++;
[ap + 0] = [[ap + -23] + 6], ap++;
[ap + 0] = [ap + -24] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 247 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -12] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 424430062299509631194636216159545428754079010585937662617424618645861123492, ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 207 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 173 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + -18] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 2];
jmp rel 17;
[ap + -1] = [[ap + -12] + 2];
ap += 52;
call rel 95871;
[ap + 0] = [ap + -70] + 3, ap++;
[ap + 0] = [ap + -62] + 37450, ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -23] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -24] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -18] + 3];
jmp rel 118;
[ap + 1] = [ap + -24] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -18] + 3];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1186423139533537089827846530073695414305470307342419724096222587041583312528, ap++;
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -5] = [[ap + -18] + 1];
[ap + -4] = [[ap + -18] + 2];
[ap + -3] = [[ap + -18] + 3];
[ap + -6] = [[ap + -18] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 6], ap++;
jmp rel 84 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -22] + 7];
[ap + -2] = [[ap + -22] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22] + 7) %}
[ap + 0] = [[ap + -22] + 10], ap++;
jmp rel 62 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 9], ap++;
[ap + 0] = [[ap + -24] + 11], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 19, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -8] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 95222;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -63] + 12];
[ap + -2] = [[ap + -63] + 13];
[ap + -6] = [[ap + -63] + 14];
[ap + -5] = [[ap + -63] + 15];
[ap + -4] = [[ap + -63] + 16];
[ap + -3] = [[ap + -63] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -63] + 12) %}
[ap + 0] = [[ap + -63] + 19], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -64] + 18], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -67] + 20, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -64] + 18], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -67] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -69] + 20], ap++;
[ap + 0] = [[ap + -70] + 21], ap++;
ret;
ap += 41;
[ap + 0] = [[ap + -64] + 9], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 15390, ap++;
[ap + 0] = [ap + -67] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -69] + 11], ap++;
[ap + 0] = [[ap + -70] + 12], ap++;
ret;
ap += 45;
[ap + 0] = [[ap + -64] + 5], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 26050, ap++;
[ap + 0] = [ap + -67] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -69] + 7], ap++;
[ap + 0] = [[ap + -70] + 8], ap++;
ret;
ap += 46;
call rel 95739;
[ap + 0] = [ap + -70] + 4, ap++;
[ap + 0] = [ap + -57] + 36540, ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 45;
call rel 95734;
[ap + 0] = [ap + -65] + 3, ap++;
[ap + 0] = [ap + -60] + 36720, ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 61;
[ap + 0] = [[ap + -71] + 4], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 38870, ap++;
[ap + 0] = [ap + -74] + 8, ap++;
[ap + 0] = [[ap + -75] + 6], ap++;
[ap + 0] = [[ap + -76] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 57;
call rel 95703;
[ap + 0] = [ap + -81] + 3, ap++;
[ap + 0] = [ap + -72] + 48640, ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 73;
[ap + 0] = [[ap + -95] + 4], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -2] + 50790, ap++;
[ap + 0] = [ap + -98] + 8, ap++;
[ap + 0] = [[ap + -99] + 6], ap++;
[ap + 0] = [[ap + -100] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 76;
call rel 94902;
[ap + 0] = [ap + -105] + 6, ap++;
[ap + 0] = [ap + -90] + 61460, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 82;
call rel 94857;
[ap + 0] = [ap + -104] + 3, ap++;
[ap + 0] = [ap + -96] + 62310, ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 97;
[ap + 0] = [[ap + -115] + 4], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -2] + 64370, ap++;
[ap + 0] = [ap + -118] + 8, ap++;
[ap + 0] = [[ap + -119] + 6], ap++;
[ap + 0] = [[ap + -120] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 100;
[ap + 0] = [ap + -107] + 1, ap++;
[ap + 0] = [ap + -105] + 74840, ap++;
jmp rel 8;
ap += 106;
[ap + 0] = [ap + -118] + 2, ap++;
[ap + 0] = [ap + -111] + 75850, ap++;
call rel 95620;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 97;
call rel 94964;
[ap + 0] = [ap + -116] + 3, ap++;
[ap + 0] = [ap + -111] + 74570, ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 117;
[ap + 0] = [[ap + -127] + 4], ap++;
[ap + 0] = [ap + -121], ap++;
[ap + 0] = [ap + -2] + 77280, ap++;
[ap + 0] = [ap + -130] + 8, ap++;
[ap + 0] = [[ap + -131] + 6], ap++;
[ap + 0] = [[ap + -132] + 7], ap++;
jmp rel 30;
ap += 109;
call rel 94939;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -123] + 86420, ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 129;
[ap + 0] = [[ap + -141] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 89130, ap++;
[ap + 0] = [ap + -144] + 8, ap++;
[ap + 0] = [[ap + -145] + 6], ap++;
[ap + 0] = [[ap + -146] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 135;
call rel 95412;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -146] + 100170, ap++;
[ap + 0] = [ap + -149], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 148;
[ap + 0] = [[ap + -155] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 101740, ap++;
[ap + 0] = [ap + -158] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -160] + 6], ap++;
[ap + 0] = [[ap + -161] + 7], ap++;
ret;
ap += 144;
call rel 94724;
[ap + 0] = [ap + -151] + 111680, ap++;
[ap + 0] = [ap + -153], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 11;
ap += 153;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -1] + 112790, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 236 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 203 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 171;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 145 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -5] = [[ap + -15] + 1];
[ap + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
[ap + -2] = [[ap + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 6], ap++;
jmp rel 115 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -2] = [[ap + -19] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 10], ap++;
jmp rel 93 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [[ap + -21] + 11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -29] + 12];
[ap + -7] = [[ap + -29] + 13];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29] + 12) %}
[ap + 0] = [[ap + -29] + 15], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 14], ap++;
[ap + 0] = [[ap + -31] + 16], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 17, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [[ap + -11] + 1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 94767;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -71] + 17];
[ap + -2] = [[ap + -71] + 18];
[ap + -6] = [[ap + -71] + 19];
[ap + -5] = [[ap + -71] + 20];
[ap + -4] = [[ap + -71] + 21];
[ap + -3] = [[ap + -71] + 22];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -71] + 17) %}
[ap + 0] = [[ap + -71] + 24], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -72] + 23], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -75] + 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -72] + 23], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -75] + 27, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 25], ap++;
[ap + 0] = [[ap + -78] + 26], ap++;
ret;
ap += 42;
[ap + 0] = [[ap + -72] + 14], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 15480, ap++;
[ap + 0] = [ap + -75] + 18, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 16], ap++;
[ap + 0] = [[ap + -78] + 17], ap++;
ret;
ap += 52;
[ap + 0] = [[ap + -72] + 9], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 26680, ap++;
[ap + 0] = [ap + -75] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 11], ap++;
[ap + 0] = [[ap + -78] + 12], ap++;
ret;
ap += 56;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 37340, ap++;
[ap + 0] = [ap + -75] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 7], ap++;
[ap + 0] = [[ap + -78] + 8], ap++;
ret;
ap += 52;
call rel 94474;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60] + 47380, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 54;
call rel 94471;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -68] + 47460, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 69;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 49520, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 81;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 61200, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 236 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 203 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 171;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 145 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -5] = [[ap + -15] + 1];
[ap + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
[ap + -2] = [[ap + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 6], ap++;
jmp rel 115 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -2] = [[ap + -19] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 10], ap++;
jmp rel 93 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [[ap + -21] + 11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -29] + 12];
[ap + -7] = [[ap + -29] + 13];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29] + 12) %}
[ap + 0] = [[ap + -29] + 15], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 14], ap++;
[ap + 0] = [[ap + -31] + 16], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [[ap + -11] + 1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 94508;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -71] + 17];
[ap + -2] = [[ap + -71] + 18];
[ap + -6] = [[ap + -71] + 19];
[ap + -5] = [[ap + -71] + 20];
[ap + -4] = [[ap + -71] + 21];
[ap + -3] = [[ap + -71] + 22];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -71] + 17) %}
[ap + 0] = [[ap + -71] + 24], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -72] + 23], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -75] + 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -72] + 23], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -75] + 27, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 25], ap++;
[ap + 0] = [[ap + -78] + 26], ap++;
ret;
ap += 42;
[ap + 0] = [[ap + -72] + 14], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 15480, ap++;
[ap + 0] = [ap + -75] + 18, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 16], ap++;
[ap + 0] = [[ap + -78] + 17], ap++;
ret;
ap += 52;
[ap + 0] = [[ap + -72] + 9], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 26680, ap++;
[ap + 0] = [ap + -75] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 11], ap++;
[ap + 0] = [[ap + -78] + 12], ap++;
ret;
ap += 56;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -2] + 37340, ap++;
[ap + 0] = [ap + -75] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -77] + 7], ap++;
[ap + 0] = [[ap + -78] + 8], ap++;
ret;
ap += 52;
call rel 94215;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60] + 47380, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 54;
call rel 94212;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -68] + 47460, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 69;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 49520, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 81;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 61200, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 28 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 640, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 94067;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 93990;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 434428485796416085034498104175908286789185203756459893121763025398211911987, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 93913;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 93836;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 93759;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 523410893316558122378830306191683135863976721326799590270659346354002858736, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 93682;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 760565771580090624121121792023365464265448761272770967981882436800089234901, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
ret;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 394323579402937197825070278441497235490914917810450857249771331122744639564, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 94370;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 1494 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 1467 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 1430 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 1386 if [ap + -1] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 1309 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 1282 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -14444;
[ap + 0] = [ap + -41], ap++;
jmp rel 1253 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 5807899970288901803406028129614, ap++;
call rel -14249;
[ap + 0] = [ap + -35], ap++;
jmp rel 1223 if [ap + -4] != 0;
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[ap + -85] + 0];
[fp + -5] = [[ap + -85] + 1];
[ap + 0] = [[ap + -85] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -95] + 3, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -92] + 0];
[ap + -5] = [[ap + -92] + 1];
[ap + -4] = [[ap + -92] + 2];
[ap + -6] = [[ap + -92] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -92]) %}
[ap + 0] = [[ap + -92] + 5], ap++;
jmp rel 1150 if [ap + -1] != 0;
[ap + 0] = [[ap + -93] + 4], ap++;
[ap + 0] = [[ap + -94] + 6], ap++;
[ap + 0] = [ap + -95] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 25 if [ap + -1] != 0;
ap += 1124;
call rel 127870;
[ap + 0] = [ap + -1] + 127869, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 625460, ap++;
call rel 93999;
[ap + 0] = [ap + -1148], ap++;
[ap + 0] = [ap + -1142] + [ap + -8], ap++;
[ap + 0] = [ap + -1151], ap++;
[ap + 0] = [ap + -1146], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -2] = [[ap + -8] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 3], ap++;
jmp rel 1075 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -18] + 5];
[ap + -7] = [[ap + -18] + 6];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18] + 5) %}
[ap + 0] = [[ap + -18] + 8], ap++;
jmp rel 1037 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 7], ap++;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[ap + -29] + 0];
[ap + -9] = [[ap + -29] + 1];
[ap + 0] = [[ap + -29] + 2], ap++;
[ap + -1] = [[ap + -30] + 3];
[fp + -5] = [[ap + -30] + 4];
[ap + 0] = [[ap + -30] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -34] + 0], ap++;
[ap + -4] = [[ap + -35] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -37] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -34] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -36] + 1], ap++;
[ap + -7] = [[ap + -37] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -37] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -34] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 94070;
[ap + 0] = [[ap + -161] + 0], ap++;
[ap + 0] = [[ap + -162] + 1], ap++;
[ap + 0] = [[ap + -163] + 2], ap++;
[ap + 0] = [ap + -191] + 6, ap++;
jmp rel 956 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 936 if [ap + -14] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -12], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 0];
jmp rel 60;
[ap + -1] = [[ap + -22] + 0];
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -16] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -19], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 653;
call rel 127735;
[ap + 0] = [ap + -1] + 127734, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 327670, ap++;
[ap + 0] = [ap + -666] + 1, ap++;
[ap + 0] = [ap + -664] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 26;
ap += 657;
call rel 127713;
[ap + 0] = [ap + -1] + 127712, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 328300, ap++;
[ap + 0] = [ap + -666], ap++;
[ap + 0] = [ap + -666] + [ap + -2], ap++;
[ap + 0] = [ap + -674], ap++;
[ap + 0] = [ap + -689], ap++;
jmp rel 20;
ap += 6;
[ap + 0] = [ap + -29] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -188], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 94907;
jmp rel 832 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 25 if [ap + -685] != 0;
[ap + 0] = [ap + -3], ap++;
jmp rel 19 if [ap + -685] != 0;
ap += 19;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -21] + 2430, ap++;
[ap + 0] = [ap + -869], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -704], ap++;
[ap + 0] = [ap + -705], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 83;
[ap + 0] = [ap + -1], ap++;
jmp rel 6;
ap += 1;
[ap + 0] = [ap + -4] + 190, ap++;
[ap + 1] = [ap + -686] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 13;
[ap + -1] = [[ap + -8] + 0];
ap += 1;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -694] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 717;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 693 if [ap + -12] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = [ap + -709], ap++;
[ap + 0] = 1786449290591910003246333706333060122114570550634379142335606457909262123456, ap++;
[ap + -1] = [[ap + -33] + 0];
[fp + -5] = [[ap + -33] + 1];
[ap + 0] = [[ap + -33] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -42] + 3, ap++;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -22] = [[ap + -44] + 1];
[ap + -4] = [[ap + -44] + 2];
[ap + -5] = [[ap + -44] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 5], ap++;
jmp rel 606 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 4], ap++;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -47] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 554 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 514 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 467 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 1] = [ap + -13] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 1];
jmp rel 13;
[ap + -1] = [[ap + -19] + 1];
ap += 1;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -13] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -31] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 373;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 349 if [ap + -12] != 0;
[ap + 0] = 1786449290591910003246333706333060122114570550634379142335606457909262123456, ap++;
[ap + -1] = [[ap + -48] + 0];
[fp + -5] = [[ap + -48] + 1];
[ap + 0] = [[ap + -48] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -58] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -44] + 0];
[ap + -5] = [[ap + -44] + 1];
[ap + -4] = [[ap + -44] + 2];
[ap + -6] = [[ap + -44] + 3];
[ap + -16] = [[ap + -44] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44]) %}
[ap + 0] = [[ap + -44] + 6], ap++;
jmp rel 271 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -50] + 7];
[ap + -4] = [[ap + -50] + 8];
[ap + -3] = [[ap + -50] + 9];
[ap + -2] = [[ap + -50] + 10];
[ap + -21] = [[ap + -50] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -50] + 7) %}
[ap + 0] = [[ap + -50] + 13], ap++;
jmp rel 235 if [ap + -1] != 0;
[ap + 0] = [[ap + -51] + 12], ap++;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -957] = [[ap + -12] + 1];
[ap + 0] = [[ap + -12] + 2], ap++;
[ap + -1] = [[ap + -13] + 3];
[fp + -5] = [[ap + -13] + 4];
[ap + 0] = [[ap + -13] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -64] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
call rel 95761;
[ap + 0] = [ap + -123] + 6, ap++;
jmp rel 160 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 149 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 1] = [ap + -168] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 13;
[ap + -1] = [[ap + -12] + 0];
ap += 1;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -186] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 75;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 60 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -1094], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 92851;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -64] + 0];
[ap + -2] = [[ap + -64] + 1];
[ap + -6] = [[ap + -64] + 2];
[ap + -5] = [[ap + -64] + 3];
[ap + -4] = [[ap + -64] + 4];
[ap + -3] = [[ap + -64] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -64]) %}
[ap + 0] = [[ap + -64] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -65] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -69] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -65] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -69] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 8], ap++;
[ap + 0] = [[ap + -72] + 9], ap++;
ret;
ap += 32;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -36] + 14380, ap++;
jmp rel 8;
ap += 35;
[ap + 0] = [ap + -47] + 2, ap++;
[ap + 0] = [ap + -40] + 14750, ap++;
call rel 92746;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 56;
[ap + 0] = [ap + -57] + 17460, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
jmp rel 8;
ap += 57;
[ap + 0] = [ap + -64] + 17750, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 162;
[ap + 0] = [[ap + -213] + 12], ap++;
call rel 127079;
[ap + 0] = [ap + -1] + 127078, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 113860, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -222] + 16, ap++;
[ap + 0] = [[ap + -223] + 14], ap++;
[ap + 0] = [[ap + -224] + 15], ap++;
jmp rel 20;
ap += 168;
[ap + 0] = [[ap + -213] + 5], ap++;
call rel 127059;
[ap + 0] = [ap + -1] + 127058, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 125100, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -222] + 9, ap++;
[ap + 0] = [[ap + -223] + 7], ap++;
[ap + 0] = [[ap + -224] + 8], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 180;
call rel 127033;
[ap + 0] = [ap + -1] + 127032, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 137290, ap++;
[ap + 0] = [ap + -191], ap++;
[ap + 0] = [ap + -191] + [ap + -2], ap++;
jmp rel 17;
ap += 183;
call rel 127017;
[ap + 0] = [ap + -1] + 127016, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 137660, ap++;
[ap + 0] = [ap + -202] + 2, ap++;
[ap + 0] = [ap + -195] + [ap + -2], ap++;
call rel 92634;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 194;
call rel 126991;
[ap + 0] = [ap + -1] + 126990, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 138730, ap++;
call rel 92620;
[ap + 0] = [ap + -220] + 3, ap++;
[ap + 0] = [ap + -215] + [ap + -8], ap++;
[ap + 0] = [ap + -217], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 214;
[ap + 0] = [[ap + -223] + 4], ap++;
call rel 126968;
[ap + 0] = [ap + -1] + 126967, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 141440, ap++;
[ap + 0] = [ap + -225], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -233] + 8, ap++;
[ap + 0] = [[ap + -234] + 6], ap++;
[ap + 0] = [[ap + -235] + 7], ap++;
jmp rel 48;
ap += 205;
call rel 126948;
[ap + 0] = [ap + -1] + 126947, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 150490, ap++;
call rel 92577;
[ap + 0] = [ap + -231] + 3, ap++;
[ap + 0] = [ap + -226] + [ap + -8], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 225;
[ap + 0] = [[ap + -270] + 4], ap++;
call rel 126920;
[ap + 0] = [ap + -1] + 126919, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 153200, ap++;
[ap + 0] = [ap + -236], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -280] + 8, ap++;
[ap + 0] = [[ap + -281] + 6], ap++;
[ap + 0] = [[ap + -282] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 247;
call rel 126893;
[ap + 0] = [ap + -1] + 126892, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 166190, ap++;
[ap + 0] = [ap + -258], ap++;
[ap + 0] = [ap + -258] + [ap + -2], ap++;
jmp rel 17;
ap += 250;
call rel 126877;
[ap + 0] = [ap + -1] + 126876, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 166560, ap++;
[ap + 0] = [ap + -269] + 2, ap++;
[ap + 0] = [ap + -262] + [ap + -2], ap++;
call rel 92494;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -286], ap++;
[ap + 0] = [ap + -286], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 279;
call rel 126851;
[ap + 0] = [ap + -1] + 126850, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 170390, ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = [ap + -293] + [ap + -2], ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -293], ap++;
[ap + 0] = [ap + -293], ap++;
ret;
ap += 946;
call rel 126830;
[ap + 0] = [ap + -1] + 126829, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 499960, ap++;
[ap + 0] = [ap + -954] + [ap + -1], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -961], ap++;
jmp rel 17;
ap += 947;
call rel 126813;
[ap + 0] = [ap + -1] + 126812, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 500250, ap++;
[ap + 0] = [ap + -970] + [ap + -1], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -974], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -960], ap++;
[ap + 0] = [ap + -975], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1116;
[ap + 0] = [[ap + -1135] + 7], ap++;
call rel 126788;
[ap + 0] = [ap + -1] + 126787, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 604240, ap++;
[ap + 0] = [ap + -1148], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -1151], ap++;
[ap + 0] = [ap + -1146] + 11, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -1148] + 9], ap++;
[ap + 0] = [[ap + -1149] + 10], ap++;
ret;
ap += 1126;
[ap + 0] = [[ap + -1135] + 2], ap++;
call rel 126765;
[ap + 0] = [ap + -1] + 126764, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 615440, ap++;
[ap + 0] = [ap + -1148], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -1151], ap++;
[ap + 0] = [ap + -1146] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -1148] + 4], ap++;
[ap + 0] = [[ap + -1149] + 5], ap++;
ret;
ap += 1137;
[ap + 0] = [[ap + -1230] + 4], ap++;
call rel 126742;
[ap + 0] = [ap + -1] + 126741, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 627030, ap++;
[ap + 0] = [ap + -1148], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -1151], ap++;
[ap + 0] = [ap + -1241] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -1243] + 6], ap++;
[ap + 0] = [[ap + -1244] + 7], ap++;
ret;
ap += 1153;
call rel 126720;
[ap + 0] = [ap + -1] + 126719, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 639680, ap++;
[ap + 0] = [ap + -1165], ap++;
[ap + 0] = [ap + -1162] + [ap + -2], ap++;
[ap + 0] = [ap + -1246], ap++;
[ap + 0] = [ap + -1241], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1168], ap++;
[ap + 0] = [ap + -1168], ap++;
ret;
ap += 1188;
call rel 126699;
[ap + 0] = [ap + -1] + 126698, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 644250, ap++;
[ap + 0] = [ap + -1200], ap++;
[ap + 0] = [ap + -1197] + [ap + -2], ap++;
[ap + 0] = [ap + -1246], ap++;
[ap + 0] = [ap + -1241], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -1203], ap++;
[ap + 0] = [ap + -1203], ap++;
ret;
ap += 1219;
call rel 126678;
[ap + 0] = [ap + -1] + 126677, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 648960, ap++;
call rel 92343;
[ap + 0] = [ap + -1233] + [ap + -7], ap++;
[ap + 0] = [ap + -1235], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 1228;
[ap + 0] = [[ap + -1249] + 4], ap++;
call rel 126657;
[ap + 0] = [ap + -1] + 126656, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 650070, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -1258] + 8, ap++;
[ap + 0] = [[ap + -1259] + 6], ap++;
[ap + 0] = [[ap + -1260] + 7], ap++;
[ap + 0] = [ap + -1243], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -1246], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1242;
call rel 126631;
[ap + 0] = [ap + -1] + 126630, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 15, ap++;
[ap + 0] = [ap + -1] + 662440, ap++;
call rel 92769;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -1260] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -1264], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1255;
[ap + 0] = [[ap + -1262] + 4], ap++;
call rel 126607;
[ap + 0] = [ap + -1] + 126606, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 15, ap++;
[ap + 0] = [ap + -1] + 664010, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -1273] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -1275] + 6], ap++;
[ap + 0] = [[ap + -1276] + 7], ap++;
ret;
ap += 1251;
call rel 126585;
[ap + 0] = [ap + -1] + 126584, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 15, ap++;
[ap + 0] = [ap + -1] + 673950, ap++;
call rel 92061;
[ap + 0] = [ap + -1265] + [ap + -7], ap++;
[ap + 0] = [ap + -1267], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 1260;
[ap + 0] = [[fp + -6] + 4], ap++;
call rel 126564;
[ap + 0] = [ap + -1] + 126563, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 15, ap++;
[ap + 0] = [ap + -1] + 675060, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 1142 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -2] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[fp + -5] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 92777;
[ap + 0] = [fp + -7] + 6, ap++;
jmp rel 1064 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 1044 if [ap + -11] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -9], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 67;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -13] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 932;
call rel 126445;
[ap + 0] = [ap + -1] + 126444, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 499040, ap++;
[ap + 0] = [ap + -945] + 1, ap++;
[ap + 0] = [ap + -943] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 936;
call rel 126423;
[ap + 0] = [ap + -1] + 126422, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 499670, ap++;
[ap + 0] = [ap + -945], ap++;
[ap + 0] = [ap + -945] + [ap + -2], ap++;
call rel 95331;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -973], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + -20] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 928;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -24] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -27] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 886;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 67;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 36 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 910;
call rel 126327;
[ap + 0] = [ap + -1] + 126326, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 495880, ap++;
[ap + 0] = [ap + -923] + 1, ap++;
[ap + 0] = [ap + -921] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 914;
call rel 126305;
[ap + 0] = [ap + -1] + 126304, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 496510, ap++;
[ap + 0] = [ap + -923], ap++;
[ap + 0] = [ap + -923] + [ap + -2], ap++;
call rel 92459;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -973], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12] + 810, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -200], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 93492;
jmp rel 772 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + -700] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 13;
[ap + -1] = [[ap + -10] + 0];
ap += 1;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -708] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 689;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 665 if [ap + -12] != 0;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -875] = [[ap + -25] + 1];
[ap + 0] = [[ap + -25] + 2], ap++;
[ap + -1] = [[ap + -26] + 3];
[fp + -5] = [[ap + -26] + 4];
[ap + 0] = [[ap + -26] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -736], ap++;
[ap + 0] = [ap + -736], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -736], ap++;
[ap + 0] = [ap + -736], ap++;
[ap + 0] = [ap + -736], ap++;
[ap + 0] = [ap + -736], ap++;
call rel 94651;
[ap + 0] = [ap + -136] + 6, ap++;
jmp rel 583 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 563 if [ap + -5] != 0;
[ap + 0] = 1786449290591910003246333706333060122114570550634379142335606457909262123456, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -5] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -18] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -7] = [[ap + -18] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -5] = [[ap + -21] + 1];
[ap + -4] = [[ap + -21] + 2];
[ap + -6] = [[ap + -21] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 5], ap++;
jmp rel 487 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 4], ap++;
[ap + 0] = [[ap + -23] + 6], ap++;
[ap + 0] = [ap + -24] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 437 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 399 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 354 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -23] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 270;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 248 if [ap + -12] != 0;
[ap + 0] = 1786449290591910003246333706333060122114570550634379142335606457909262123456, ap++;
[ap + -1] = [[ap + -40] + 0];
[fp + -5] = [[ap + -40] + 1];
[ap + 0] = [[ap + -40] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -5] = [[ap + -36] + 1];
[ap + -4] = [[ap + -36] + 2];
[ap + -6] = [[ap + -36] + 3];
[ap + -16] = [[ap + -36] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 6], ap++;
jmp rel 179 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -42] + 7];
[ap + -4] = [[ap + -42] + 8];
[ap + -3] = [[ap + -42] + 9];
[ap + -2] = [[ap + -42] + 10];
[ap + -21] = [[ap + -42] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42] + 7) %}
[ap + 0] = [[ap + -42] + 13], ap++;
jmp rel 152 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 12], ap++;
[ap + 0] = [ap + -44] + 14, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -47] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 0];
jmp rel 13;
[ap + -1] = [[ap + -14] + 0];
ap += 1;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -65] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 75;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 60 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -1085], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 91484;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -58] + 0];
[ap + -2] = [[ap + -58] + 1];
[ap + -6] = [[ap + -58] + 2];
[ap + -5] = [[ap + -58] + 3];
[ap + -4] = [[ap + -58] + 4];
[ap + -3] = [[ap + -58] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -58]) %}
[ap + 0] = [[ap + -58] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -59] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -63] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -59] + 6], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -63] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -65] + 8], ap++;
[ap + 0] = [[ap + -66] + 9], ap++;
ret;
ap += 32;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -36] + 14380, ap++;
jmp rel 8;
ap += 35;
[ap + 0] = [ap + -47] + 2, ap++;
[ap + 0] = [ap + -40] + 14750, ap++;
call rel 91951;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 56;
[ap + 0] = [[ap + -99] + 12], ap++;
[ap + 0] = [ap + -1] + 17460, ap++;
[ap + 0] = [ap + -101] + 16, ap++;
[ap + 0] = [[ap + -102] + 14], ap++;
[ap + 0] = [[ap + -103] + 15], ap++;
jmp rel 11;
ap += 62;
[ap + 0] = [[ap + -99] + 5], ap++;
[ap + 0] = [ap + -1] + 28700, ap++;
[ap + 0] = [ap + -101] + 9, ap++;
[ap + 0] = [[ap + -102] + 7], ap++;
[ap + 0] = [[ap + -103] + 8], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 68;
call rel 125707;
[ap + 0] = [ap + -1] + 125706, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40350, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -78] + [ap + -2], ap++;
jmp rel 15;
ap += 71;
call rel 125693;
[ap + 0] = [ap + -1] + 125692, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40720, ap++;
[ap + 0] = [ap + -89] + 2, ap++;
[ap + 0] = [ap + -82] + [ap + -2], ap++;
call rel 91884;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 74;
call rel 125669;
[ap + 0] = [ap + -1] + 125668, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 41070, ap++;
call rel 91300;
[ap + 0] = [ap + -99] + 3, ap++;
[ap + 0] = [ap + -94] + [ap + -8], ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 94;
[ap + 0] = [[ap + -103] + 4], ap++;
call rel 125648;
[ap + 0] = [ap + -1] + 125647, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 43780, ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -112] + 8, ap++;
[ap + 0] = [[ap + -113] + 6], ap++;
[ap + 0] = [[ap + -114] + 7], ap++;
jmp rel 44;
ap += 85;
call rel 125630;
[ap + 0] = [ap + -1] + 125629, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 52830, ap++;
call rel 91261;
[ap + 0] = [ap + -110] + 3, ap++;
[ap + 0] = [ap + -105] + [ap + -8], ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 105;
[ap + 0] = [[ap + -127] + 4], ap++;
call rel 125604;
[ap + 0] = [ap + -1] + 125603, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 55540, ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -136] + 8, ap++;
[ap + 0] = [[ap + -137] + 6], ap++;
[ap + 0] = [[ap + -138] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 122;
call rel 125579;
[ap + 0] = [ap + -1] + 125578, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 68180, ap++;
[ap + 0] = [ap + -130] + [ap + -1], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -134], ap++;
jmp rel 17;
ap += 123;
call rel 125562;
[ap + 0] = [ap + -1] + 125561, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 68470, ap++;
[ap + 0] = [ap + -137] + [ap + -1], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -141], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [ap + -142], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 231;
call rel 125538;
[ap + 0] = [ap + -1] + 125537, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 164750, ap++;
[ap + 0] = [ap + -242], ap++;
[ap + 0] = [ap + -242] + [ap + -2], ap++;
jmp rel 17;
ap += 234;
call rel 125522;
[ap + 0] = [ap + -1] + 125521, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 165120, ap++;
[ap + 0] = [ap + -253] + 2, ap++;
[ap + 0] = [ap + -246] + [ap + -2], ap++;
call rel 91711;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 258;
call rel 125496;
[ap + 0] = [ap + -1] + 125495, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 168200, ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = [ap + -272] + [ap + -2], ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -272], ap++;
[ap + 0] = [ap + -272], ap++;
ret;
ap += 920;
call rel 125475;
[ap + 0] = [ap + -1] + 125474, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 497120, ap++;
[ap + 0] = [ap + -934] + 1, ap++;
[ap + 0] = [ap + -932] + [ap + -2], ap++;
jmp rel 17;
ap += 926;
call rel 125458;
[ap + 0] = [ap + -1] + 125457, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 498130, ap++;
[ap + 0] = [ap + -938] + 1, ap++;
[ap + 0] = [ap + -938] + [ap + -2], ap++;
call rel 94374;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -973], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 947;
call rel 125432;
[ap + 0] = [ap + -1] + 125431, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 500930, ap++;
[ap + 0] = [ap + -955] + [ap + -1], ap++;
[ap + 0] = [ap + -959], ap++;
[ap + 0] = [ap + -959], ap++;
jmp rel 17;
ap += 948;
call rel 125415;
[ap + 0] = [ap + -1] + 125414, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 501220, ap++;
[ap + 0] = [ap + -968] + [ap + -1], ap++;
[ap + 0] = [ap + -959], ap++;
[ap + 0] = [ap + -959], ap++;
[ap + 0] = [ap + -972], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -961], ap++;
[ap + 0] = [ap + -973], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1114;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 125390;
[ap + 0] = [ap + -1] + 125389, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 604940, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 488 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 92574;
jmp rel 454 if [ap + -3] != 0;
[ap + 0] = 289265142035346446792964224515421021597899183432205077896626966918004183212, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -656] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -5] = [[ap + -18] + 1];
[ap + -4] = [[ap + -18] + 2];
[ap + -6] = [[ap + -18] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 5], ap++;
jmp rel 378 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 4], ap++;
[ap + 0] = [[ap + -20] + 6], ap++;
[ap + 0] = [ap + -21] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 328 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 290 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 245 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -4] = [ap + 1] + [ap + -8], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 63;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 34 if [ap + -12] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -25], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 18;
[ap + -1] = [[ap + -6] + 0];
ap += 52;
call rel 125195;
[ap + 0] = [ap + -1] + 125194, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38290, ap++;
[ap + 0] = [ap + -64] + 1, ap++;
[ap + 0] = [ap + -62] + [ap + -2], ap++;
jmp rel 19;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 31;
ap += 56;
call rel 125175;
[ap + 0] = [ap + -1] + 125174, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38920, ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64] + [ap + -2], ap++;
call rel 94103;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -21] + 2, ap++;
[ap + 0] = [ap + -13] + 810, ap++;
[ap + 0] = 289265142035346446792964224515421021597899183432205077896626966918004183212, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -702] = [[ap + -36] + 1];
[ap + 0] = [[ap + -36] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -46] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -32] + 0];
[ap + -15] = [[ap + -32] + 1];
[ap + -5] = [[ap + -32] + 2];
[ap + -6] = [[ap + -32] + 3];
[ap + -4] = [[ap + -32] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -32]) %}
[ap + 0] = [[ap + -32] + 6], ap++;
jmp rel 92 if [ap + -1] != 0;
[ap + 0] = [[ap + -33] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -39] + 7];
[ap + -5] = [[ap + -39] + 8];
[ap + -4] = [[ap + -39] + 9];
[ap + -3] = [[ap + -39] + 10];
[ap + -2] = [[ap + -39] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -39] + 7) %}
[ap + 0] = [[ap + -39] + 13], ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + 0] = [[ap + -40] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -731], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 90739;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -79] + 14];
[ap + -2] = [[ap + -79] + 15];
[ap + -6] = [[ap + -79] + 16];
[ap + -5] = [[ap + -79] + 17];
[ap + -4] = [[ap + -79] + 18];
[ap + -3] = [[ap + -79] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -79] + 14) %}
[ap + 0] = [[ap + -79] + 21], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -80] + 20], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -84] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -80] + 20], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -84] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 22], ap++;
[ap + 0] = [[ap + -87] + 23], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -76] + 12], ap++;
[ap + 0] = [ap + -1] + 14840, ap++;
[ap + 0] = [ap + -78] + 16, ap++;
[ap + 0] = [[ap + -79] + 14], ap++;
[ap + 0] = [[ap + -80] + 15], ap++;
jmp rel 11;
ap += 43;
[ap + 0] = [[ap + -76] + 5], ap++;
[ap + 0] = [ap + -1] + 26170, ap++;
[ap + 0] = [ap + -78] + 9, ap++;
[ap + 0] = [[ap + -79] + 7], ap++;
[ap + 0] = [[ap + -80] + 8], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 51;
call rel 124986;
[ap + 0] = [ap + -1] + 124985, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38000, ap++;
call rel 90617;
[ap + 0] = [ap + -76] + 3, ap++;
[ap + 0] = [ap + -71] + [ap + -8], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 71;
[ap + 0] = [[ap + -80] + 4], ap++;
call rel 124965;
[ap + 0] = [ap + -1] + 124964, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40710, ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -89] + 8, ap++;
[ap + 0] = [[ap + -90] + 6], ap++;
[ap + 0] = [[ap + -91] + 7], ap++;
jmp rel 44;
ap += 62;
call rel 124947;
[ap + 0] = [ap + -1] + 124946, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 49760, ap++;
call rel 90578;
[ap + 0] = [ap + -87] + 3, ap++;
[ap + 0] = [ap + -82] + [ap + -8], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 82;
[ap + 0] = [[ap + -101] + 4], ap++;
call rel 124921;
[ap + 0] = [ap + -1] + 124920, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 52470, ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -110] + 8, ap++;
[ap + 0] = [[ap + -111] + 6], ap++;
[ap + 0] = [[ap + -112] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 102;
call rel 124896;
[ap + 0] = [ap + -1] + 124895, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 65480, ap++;
[ap + 0] = [ap + -116], ap++;
[ap + 0] = [ap + -116] + [ap + -2], ap++;
[ap + 0] = [ap + -116], ap++;
[ap + 0] = [ap + -116], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -116], ap++;
[ap + 0] = [ap + -116], ap++;
ret;
ap += 762;
[ap + 0] = [[fp + -4] + 2], ap++;
call rel 124874;
[ap + 0] = [ap + -1] + 124873, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 9, ap++;
[ap + 0] = [ap + -1] + 393880, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
ret;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 91102;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 41 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 17 if [ap + -11] != 0;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = 289265142035346446792964224515421021597899183432205077896626966918004183212, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel 90246;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel 90222;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1786449290591910003246333706333060122114570550634379142335606457909262123456, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel 90051;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel 90027;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 189 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 2];
jmp rel 110;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 79 if [ap + -3] != 0;
ap += 1;
[ap + 0] = 1331680487542315342050552882940934570364094189087734488524537652590749950424, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -5] = [[ap + -25] + 1];
[ap + -4] = [[ap + -25] + 2];
[ap + -6] = [[ap + -25] + 3];
[fp + -3] = [[ap + -25] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25]) %}
[ap + 0] = [[ap + -25] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -32] + 7], ap++;
[ap + 0] = [[ap + -33] + 8], ap++;
ret;
call rel 124213;
[ap + 0] = [ap + -1] + 124212, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11120, ap++;
call rel 89673;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 2;
call rel 124194;
[ap + 0] = [ap + -1] + 124193, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11100, ap++;
call rel 89663;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -22] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 17;
[ap + 0] = [[fp + -5] + 9], ap++;
call rel 124173;
[ap + 0] = [ap + -1] + 124172, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13160, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 19;
ap += 29;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 124154;
[ap + 0] = [ap + -1] + 124153, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 24840, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 488 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 446 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 405;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 370 if [ap + -3] != 0;
[ap + 0] = 1255235991522866093190400328027936434203587216166838216390545567461445183904, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 5], ap++;
jmp rel 294 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 244 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 206 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 161 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1255235991522866093190400328027936434203587216166838216390545567461445183904, ap++;
[ap + -1] = [[ap + -21] + 0];
[fp + -5] = [[ap + -21] + 1];
[ap + 0] = [[ap + -21] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -4] = [[ap + -15] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -17] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -16] + 2], ap++;
[ap + -7] = [[ap + -17] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -31] + 3, ap++;
[ap + 0] = [ap + -20] + 4, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + -5] = [[ap + -17] + 1];
[ap + -4] = [[ap + -17] + 2];
[ap + -6] = [[ap + -17] + 3];
[fp + -4] = [[ap + -17] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17]) %}
[ap + 0] = [[ap + -17] + 6], ap++;
jmp rel 89 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -23] + 7];
[ap + -4] = [[ap + -23] + 8];
[ap + -3] = [[ap + -23] + 9];
[ap + -2] = [[ap + -23] + 10];
[fp + -3] = [[ap + -23] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -23] + 7) %}
[ap + 0] = [[ap + -23] + 13], ap++;
jmp rel 62 if [ap + -1] != 0;
[ap + 0] = [[ap + -24] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 89543;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -63] + 14];
[ap + -2] = [[ap + -63] + 15];
[ap + -6] = [[ap + -63] + 16];
[ap + -5] = [[ap + -63] + 17];
[ap + -4] = [[ap + -63] + 18];
[ap + -3] = [[ap + -63] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -63] + 14) %}
[ap + 0] = [[ap + -63] + 21], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -64] + 20], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -68] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -64] + 20], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -68] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -70] + 22], ap++;
[ap + 0] = [[ap + -71] + 23], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -60] + 12], ap++;
[ap + 0] = [ap + -1] + 14840, ap++;
[ap + 0] = [ap + -62] + 16, ap++;
[ap + 0] = [[ap + -63] + 14], ap++;
[ap + 0] = [[ap + -64] + 15], ap++;
jmp rel 11;
ap += 42;
[ap + 0] = [[ap + -60] + 5], ap++;
[ap + 0] = [ap + -1] + 26080, ap++;
[ap + 0] = [ap + -62] + 9, ap++;
[ap + 0] = [[ap + -63] + 7], ap++;
[ap + 0] = [[ap + -64] + 8], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 35;
call rel 123790;
[ap + 0] = [ap + -1] + 123789, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 35920, ap++;
call rel 89421;
[ap + 0] = [ap + -60] + 3, ap++;
[ap + 0] = [ap + -55] + [ap + -8], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 55;
[ap + 0] = [[ap + -64] + 4], ap++;
call rel 123769;
[ap + 0] = [ap + -1] + 123768, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38630, ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -73] + 8, ap++;
[ap + 0] = [[ap + -74] + 6], ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
jmp rel 44;
ap += 46;
call rel 123751;
[ap + 0] = [ap + -1] + 123750, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 47680, ap++;
call rel 89382;
[ap + 0] = [ap + -71] + 3, ap++;
[ap + 0] = [ap + -66] + [ap + -8], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 66;
[ap + 0] = [[ap + -91] + 4], ap++;
call rel 123725;
[ap + 0] = [ap + -1] + 123724, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 50390, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -100] + 8, ap++;
[ap + 0] = [[ap + -101] + 6], ap++;
[ap + 0] = [[ap + -102] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 75;
call rel 123700;
[ap + 0] = [ap + -1] + 123699, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 62210, ap++;
call rel 89158;
[ap + 0] = [ap + -90], ap++;
[ap + 0] = [ap + -90] + [ap + -8], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 77;
call rel 123679;
[ap + 0] = [ap + -1] + 123678, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 62290, ap++;
call rel 89146;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -98] + [ap + -8], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 92;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 123656;
[ap + 0] = [ap + -1] + 123655, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 64350, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 21;
ap += 104;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 123635;
[ap + 0] = [ap + -1] + 123634, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 76030, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1255235991522866093190400328027936434203587216166838216390545567461445183904, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel 89115;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel 89091;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 88783;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 88780;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 88686;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 189 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 110;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 79 if [ap + -3] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -6] = [[ap + -25] + 1];
[ap + -5] = [[ap + -25] + 2];
[ap + -7] = [[ap + -25] + 3];
[ap + -4] = [[ap + -25] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25]) %}
[ap + 0] = [[ap + -25] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -32] + 7], ap++;
[ap + 0] = [[ap + -33] + 8], ap++;
ret;
call rel 123047;
[ap + 0] = [ap + -1] + 123046, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11110, ap++;
call rel 88507;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 2;
call rel 123028;
[ap + 0] = [ap + -1] + 123027, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11090, ap++;
call rel 88497;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
call rel 123007;
[ap + 0] = [ap + -1] + 123006, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13150, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 19;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
call rel 122988;
[ap + 0] = [ap + -1] + 122987, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 24830, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 189 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 110;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 79 if [ap + -3] != 0;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -6] = [[ap + -25] + 1];
[ap + -5] = [[ap + -25] + 2];
[ap + -7] = [[ap + -25] + 3];
[ap + -4] = [[ap + -25] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25]) %}
[ap + 0] = [[ap + -25] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -32] + 7], ap++;
[ap + 0] = [[ap + -33] + 8], ap++;
ret;
call rel 122827;
[ap + 0] = [ap + -1] + 122826, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11110, ap++;
call rel 88287;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 2;
call rel 122808;
[ap + 0] = [ap + -1] + 122807, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11090, ap++;
call rel 88277;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
call rel 122787;
[ap + 0] = [ap + -1] + 122786, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13150, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 19;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
call rel 122768;
[ap + 0] = [ap + -1] + 122767, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 24830, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 30 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 640, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 87986;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 87983;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -5] + 0], ap++;
[ap + 3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -5] + 2];
jmp rel 85 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 17 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
call rel 88005;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -28] + 8, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
jmp rel 31;
ap += 12;
call rel 87981;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -26] + 11750, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13910, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -5] + 0], ap++;
[ap + 3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -5] + 2];
jmp rel 85 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 17 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
call rel 87847;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -28] + 8, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
jmp rel 31;
ap += 12;
call rel 87823;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -26] + 11750, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13910, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 87481;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 87478;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -5] + 0], ap++;
[ap + 3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -5] + 2];
jmp rel 85 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 17 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
call rel 87500;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -28] + 8, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
jmp rel 31;
ap += 12;
call rel 87476;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -26] + 11750, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13910, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 87406;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1186423139533537089827846530073695414305470307342419724096222587041583312528, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 87946;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 863347913503261957104720878708744394926083541396783723686988354578931871543, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
ret;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -18024;
jmp rel 95 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[ap + -2] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -13] + 7];
[ap + -2] = [[ap + -13] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13] + 7) %}
[ap + 0] = [[ap + -13] + 10], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 9], ap++;
[ap + 0] = [[ap + -15] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -22] + 12];
[ap + -5] = [[ap + -22] + 13];
[ap + -4] = [[ap + -22] + 14];
[ap + -3] = [[ap + -22] + 15];
[ap + -2] = [[ap + -22] + 16];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22] + 12) %}
[ap + 0] = [[ap + -22] + 18], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 17], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -26] + 19, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -23] + 17], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -26] + 21, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 19], ap++;
[ap + 0] = [[ap + -29] + 20], ap++;
ret;
ap += 9;
[ap + 0] = [[ap + -23] + 9], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2] + 11310, ap++;
[ap + 0] = [ap + -26] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 11], ap++;
[ap + 0] = [[ap + -29] + 12], ap++;
ret;
ap += 13;
[ap + 0] = [[ap + -23] + 5], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2] + 21970, ap++;
[ap + 0] = [ap + -26] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
ret;
ap += 20;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26] + 33200, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -11] = [[fp + -10] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 3], ap++;
jmp rel 304 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -10] + 5];
[ap + -9] = [[fp + -10] + 6];
[ap + -8] = [[fp + -10] + 7];
[ap + -7] = [[fp + -10] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 5) %}
[ap + 0] = [[fp + -10] + 10], ap++;
jmp rel 271 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [fp + -10] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -12] + 0], ap++;
[ap + -4] = [[fp + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -12] + 2];
jmp rel 239;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -12] + 0], ap++;
[ap + -3] = [[fp + -12] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -12] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 213 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -9] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 185 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1526171809504728374681023080986779835603913378952539665964907005446042711382, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -20] + 7];
[ap + -4] = [[ap + -20] + 8];
[ap + -3] = [[ap + -20] + 9];
[ap + -2] = [[ap + -20] + 10];
[fp + -8] = [[ap + -20] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20] + 7) %}
[ap + 0] = [[ap + -20] + 13], ap++;
jmp rel 156 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 14];
[ap + -4] = [[ap + -26] + 15];
[ap + -3] = [[ap + -26] + 16];
[ap + -2] = [[ap + -26] + 17];
[fp + -7] = [[ap + -26] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26] + 14) %}
[ap + 0] = [[ap + -26] + 20], ap++;
jmp rel 127 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 434428485796416085034498104175908286789185203756459893121763025398211911987, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -32] + 21];
[ap + -4] = [[ap + -32] + 22];
[ap + -3] = [[ap + -32] + 23];
[ap + -2] = [[ap + -32] + 24];
[fp + -6] = [[ap + -32] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -32] + 21) %}
[ap + 0] = [[ap + -32] + 27], ap++;
jmp rel 98 if [ap + -1] != 0;
[ap + 0] = [[ap + -33] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -38] + 28];
[ap + -4] = [[ap + -38] + 29];
[ap + -3] = [[ap + -38] + 30];
[ap + -2] = [[ap + -38] + 31];
[fp + -5] = [[ap + -38] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -38] + 28) %}
[ap + 0] = [[ap + -38] + 34], ap++;
jmp rel 69 if [ap + -1] != 0;
[ap + 0] = [[ap + -39] + 33], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -44] + 35];
[ap + -4] = [[ap + -44] + 36];
[ap + -3] = [[ap + -44] + 37];
[ap + -2] = [[ap + -44] + 38];
[fp + -4] = [[ap + -44] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -44] + 35) %}
[ap + 0] = [[ap + -44] + 41], ap++;
jmp rel 40 if [ap + -1] != 0;
[ap + 0] = [[ap + -45] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 523410893316558122378830306191683135863976721326799590270659346354002858736, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -50] + 42];
[ap + -4] = [[ap + -50] + 43];
[ap + -3] = [[ap + -50] + 44];
[ap + -2] = [[ap + -50] + 45];
[fp + -3] = [[ap + -50] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -50] + 42) %}
[ap + 0] = [[ap + -50] + 48], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -51] + 47], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -54] + 49, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -51] + 47], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -54] + 51, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -56] + 49], ap++;
[ap + 0] = [[ap + -57] + 50], ap++;
ret;
ap += 6;
[ap + 0] = [[ap + -51] + 40], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 11040, ap++;
[ap + 0] = [ap + -54] + 44, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -56] + 42], ap++;
[ap + 0] = [[ap + -57] + 43], ap++;
ret;
ap += 12;
[ap + 0] = [[ap + -51] + 33], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 22180, ap++;
[ap + 0] = [ap + -54] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -56] + 35], ap++;
[ap + 0] = [[ap + -57] + 36], ap++;
ret;
ap += 18;
[ap + 0] = [[ap + -51] + 26], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 33320, ap++;
[ap + 0] = [ap + -54] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -56] + 28], ap++;
[ap + 0] = [[ap + -57] + 29], ap++;
ret;
ap += 24;
[ap + 0] = [[ap + -51] + 19], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 44460, ap++;
[ap + 0] = [ap + -54] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -56] + 21], ap++;
[ap + 0] = [[ap + -57] + 22], ap++;
ret;
ap += 30;
[ap + 0] = [[ap + -51] + 12], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 55600, ap++;
[ap + 0] = [ap + -54] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -56] + 14], ap++;
[ap + 0] = [[ap + -57] + 15], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -2] + 66740, ap++;
[ap + 0] = [ap + -54] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -56] + 7], ap++;
[ap + 0] = [[ap + -57] + 8], ap++;
ret;
ap += 31;
call rel 86699;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39] + 76690, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 33;
call rel 86696;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [ap + -47] + 76770, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 48;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 78830, ap++;
[ap + 0] = [fp + -10] + 13, ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [[fp + -10] + 12], ap++;
jmp rel 12;
ap += 60;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 90510, ap++;
[ap + 0] = [fp + -10] + 6, ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 132 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 99 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 67;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 43 if [ap + -3] != 0;
ap += 4;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -5] = [[ap + -19] + 1];
[ap + -4] = [[ap + -19] + 2];
[ap + -3] = [[ap + -19] + 3];
[ap + -2] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 86544;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10140, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 86541;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -16] + 10120, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 12180, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 23860, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 28 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 640, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -5] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 82 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = 987487477892071739885678087625628393443584938265845517311290340822738272931, ap++;
[ap + 0] = [[ap + -2] + 2], ap++;
[ap + -2] = [[fp + -4] + 0];
[ap + -1] = [[fp + -4] + 1];
[ap + 0] = [[fp + -4] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -6] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -7] = [[fp + -6] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -6] = [[fp + -3] + 6];
[ap + -5] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
[ap + -4] = [[fp + -3] + 9];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 11], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -3] + 10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -3] + 14, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
[ap + 0] = [[fp + -3] + 13], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -3] + 2], ap++;
call rel 120882;
[ap + 0] = [ap + -1] + 120881, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12380, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
ret;
[ap + 0] = 987487477892071739885678087625628393443584938265845517311290340822738272931, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 30 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 640, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -11] = [[fp + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 3], ap++;
jmp rel 1944 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + 0] = 987487477892071739885678087625628393443584938265845517311290340822738272931, ap++;
[ap + -1] = [[fp + -10] + 0];
[ap + -2] = [[fp + -10] + 1];
[ap + 0] = [[fp + -10] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -12] + 0], ap++;
[ap + -4] = [[fp + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -12] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -12] + 1], ap++;
[ap + -7] = [[fp + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -9] + 5];
[ap + -5] = [[fp + -9] + 6];
[ap + -4] = [[fp + -9] + 7];
[ap + -6] = [[fp + -9] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 5) %}
[ap + 0] = [[fp + -9] + 10], ap++;
jmp rel 1868 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 9], ap++;
[ap + 0] = [[fp + -9] + 11], ap++;
[ap + 0] = [fp + -9] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 25 if [ap + -1] != 0;
ap += 289;
call rel 120690;
[ap + 0] = [ap + -1] + 120689, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 197070, ap++;
call rel 89627;
[ap + 0] = [ap + -313], ap++;
[ap + 0] = [ap + -307] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 4] = memory[fp + -8] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + -8] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -18] + 2];
jmp rel 1785;
%{
(value, scalar) = (memory[fp + -8], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + -8] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -17] + 2];
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 4] = memory[fp + -6] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + -6] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -22] + 3], ap++;
[ap + -4] = [[ap + -23] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -24] + 5];
jmp rel 1738;
%{
(value, scalar) = (memory[fp + -6], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + -6] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -21] + 3], ap++;
[ap + -3] = [[ap + -22] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -23] + 5];
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 4] = memory[fp + -4] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -28] + 6], ap++;
[ap + -4] = [[ap + -29] + 7], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -30] + 8];
jmp rel 1691;
%{
(value, scalar) = (memory[fp + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -27] + 6], ap++;
[ap + -3] = [[ap + -28] + 7], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[fp + -7] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -34] + 9], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -36] + 10], ap++;
[ap + -5] = [[ap + -37] + 11];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1642 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -7] = [[ap + -31] + 9];
[ap + 0] = [fp + -7] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -32] + 10];
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[fp + -5] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -37] + 11], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -5] = [[ap + -40] + 13];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1595 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -5] = [[ap + -34] + 11];
[ap + 0] = [fp + -5] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -35] + 12];
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -40] + 13], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -42] + 14], ap++;
[ap + -5] = [[ap + -43] + 15];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1548 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -3] = [[ap + -37] + 13];
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -38] + 14];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -44] + 15], ap++;
[ap + -4] = [[ap + -45] + 16], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -46] + 17];
jmp rel 1501;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -43] + 15], ap++;
[ap + -3] = [[ap + -44] + 16], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -45] + 17];
[fp + -8] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -46] + 18, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 252;
call rel 120498;
[ap + 0] = [ap + -1] + 120497, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 190980, ap++;
call rel 89444;
[ap + 0] = [ap + -267], ap++;
[ap + 0] = [ap + -267] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[fp + -6] = [ap + 0] + [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 250;
call rel 120471;
[ap + 0] = [ap + -1] + 120470, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 190700, ap++;
call rel 89426;
[ap + 0] = [ap + -267], ap++;
[ap + 0] = [ap + -265] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[fp + -4] = [ap + 0] + [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 248;
call rel 120444;
[ap + 0] = [ap + -1] + 120443, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 190420, ap++;
call rel 89408;
[ap + 0] = [ap + -267], ap++;
[ap + 0] = [ap + -263] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[fp + -8] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 246;
call rel 120417;
[ap + 0] = [ap + -1] + 120416, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 190140, ap++;
call rel 89390;
[ap + 0] = [ap + -267], ap++;
[ap + 0] = [ap + -261] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[fp + -8] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 244;
call rel 120390;
[ap + 0] = [ap + -1] + 120389, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 189860, ap++;
call rel 89363;
[ap + 0] = [ap + -267], ap++;
[ap + 0] = [ap + -259] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[fp + -6] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 242;
call rel 120363;
[ap + 0] = [ap + -1] + 120362, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 189580, ap++;
call rel 89336;
[ap + 0] = [ap + -267], ap++;
[ap + 0] = [ap + -257] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -17] + 0];
jmp rel 20;
[ap + -1] = [[ap + -16] + 0];
ap += 236;
call rel 120328;
[ap + 0] = [ap + -1] + 120327, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 188770, ap++;
[ap + 0] = [ap + -259] + 1, ap++;
[ap + 0] = [ap + -247] + [ap + -2], ap++;
jmp rel 1289;
[ap + 0] = 100, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -22] + 1];
jmp rel 1263;
[ap + -1] = [[ap + -21] + 1];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -26] + 2];
jmp rel 20;
[ap + -1] = [[ap + -25] + 2];
ap += 227;
call rel 120287;
[ap + 0] = [ap + -1] + 120286, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 187520, ap++;
[ap + 0] = [ap + -259] + 3, ap++;
[ap + 0] = [ap + -238] + [ap + -2], ap++;
jmp rel 1222;
[ap + 0] = 100, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -31] + 3];
jmp rel 1196;
[ap + -1] = [[ap + -30] + 3];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -35] + 4];
jmp rel 20;
[ap + -1] = [[ap + -34] + 4];
ap += 218;
call rel 120246;
[ap + 0] = [ap + -1] + 120245, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 186270, ap++;
[ap + 0] = [ap + -259] + 5, ap++;
[ap + 0] = [ap + -229] + [ap + -2], ap++;
jmp rel 1155;
[ap + 0] = 100, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -40] + 5];
jmp rel 1129;
[ap + -1] = [[ap + -39] + 5];
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[fp + -5]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [fp + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -43] + 6];
jmp rel 1095;
[ap + 1] = [fp + -7] + [fp + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -43] + 6];
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[fp + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -47] + 7];
jmp rel 1058;
[ap + 1] = [ap + -3] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -47] + 7];
[ap + 0] = [ap + -47] + 8, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -3] = [ap + 0] + 100, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 25;
ap += 204;
call rel 120182;
[ap + 0] = [ap + -1] + 120181, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 184400, ap++;
call rel 89164;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -220] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1053731514923185813048533144849227363216675629688939678342851003194816382656, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -95] + 0];
[ap + -4] = [[ap + -95] + 1];
[ap + -3] = [[ap + -95] + 2];
[ap + -2] = [[ap + -95] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -95]) %}
[ap + 0] = [[ap + -95] + 5], ap++;
jmp rel 980 if [ap + -1] != 0;
[ap + 0] = [[ap + -96] + 4], ap++;
[ap + 0] = [[ap + -97] + 6], ap++;
[ap + 0] = [ap + -98] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -13] + 0], ap++;
[ap + 3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -18] + 2];
jmp rel 928 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -13] + 0];
[ap + 0] = 1053731514923185813048533144849227363216675629688939678342851003194816382656, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 886 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 839 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [ap + -21] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 1];
jmp rel 13;
[ap + -1] = [[ap + -15] + 1];
ap += 5;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -12] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -19], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 1] = [ap + -14] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 2];
jmp rel 773;
[ap + -1] = [[ap + -20] + 2];
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 749 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1053731514923185813048533144849227363216675629688939678342851003194816382656, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -23] + 0];
[ap + -4] = [[ap + -23] + 1];
[ap + -3] = [[ap + -23] + 2];
[ap + -2] = [[ap + -23] + 3];
[ap + -6] = [[ap + -23] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -23]) %}
[ap + 0] = [[ap + -23] + 6], ap++;
jmp rel 707 if [ap + -1] != 0;
[ap + 0] = [[ap + -24] + 5], ap++;
[ap + 0] = 1053731514923185813048533144849227363216675629688939678342851003194816382656, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -30] + 7];
[ap + -4] = [[ap + -30] + 8];
[ap + -3] = [[ap + -30] + 9];
[ap + -2] = [[ap + -30] + 10];
[ap + -12] = [[ap + -30] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -30] + 7) %}
[ap + 0] = [[ap + -30] + 13], ap++;
jmp rel 669 if [ap + -1] != 0;
[ap + 0] = [[ap + -31] + 12], ap++;
[ap + 0] = 1552975885734959436909596928797091402164378429869856532089389112858524589442, ap++;
[ap + -1] = [[ap + -149] + 0];
[ap + -46] = [[ap + -149] + 1];
[ap + 0] = [[ap + -149] + 2], ap++;
[ap + -1] = [[ap + -150] + 3];
[ap + -35] = [[ap + -150] + 4];
[ap + 0] = [[ap + -150] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -24] + 0], ap++;
[ap + -4] = [[ap + -25] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -27] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -24] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -26] + 1], ap++;
[ap + -7] = [[ap + -27] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -160] + 6, ap++;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -47] + 14];
[ap + -5] = [[ap + -47] + 15];
[ap + -4] = [[ap + -47] + 16];
[ap + -6] = [[ap + -47] + 17];
[ap + -175] = [[ap + -47] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -47] + 14) %}
[ap + 0] = [[ap + -47] + 20], ap++;
jmp rel 591 if [ap + -1] != 0;
[ap + 0] = [[ap + -48] + 19], ap++;
[ap + 0] = 376172039617525223398104227042100338122204737598547041898283256687279968792, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -63] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + -1] = [[ap + -7] + 3];
[ap + -52] = [[ap + -7] + 4];
[ap + 0] = [[ap + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17] + 6, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -64] + 21];
[ap + -5] = [[ap + -64] + 22];
[ap + -4] = [[ap + -64] + 23];
[ap + -6] = [[ap + -64] + 24];
[fp + -8] = [[ap + -64] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -64] + 21) %}
[ap + 0] = [[ap + -64] + 27], ap++;
jmp rel 509 if [ap + -1] != 0;
[ap + 0] = [[ap + -65] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -70] + 28];
[ap + -4] = [[ap + -70] + 29];
[ap + -3] = [[ap + -70] + 30];
[ap + -2] = [[ap + -70] + 31];
[fp + -7] = [[ap + -70] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -70] + 28) %}
[ap + 0] = [[ap + -70] + 34], ap++;
jmp rel 473 if [ap + -1] != 0;
[ap + 0] = [[ap + -71] + 33], ap++;
[ap + 0] = 570275081082906139618089942019828439552474686634885326052085539652282650782, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -86] = [[ap + -12] + 1];
[ap + 0] = [[ap + -12] + 2], ap++;
[ap + -1] = [[ap + -13] + 3];
[ap + -75] = [[ap + -13] + 4];
[ap + 0] = [[ap + -13] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -23] + 6, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -87] + 35];
[ap + -5] = [[ap + -87] + 36];
[ap + -4] = [[ap + -87] + 37];
[ap + -6] = [[ap + -87] + 38];
[fp + -6] = [[ap + -87] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -87] + 35) %}
[ap + 0] = [[ap + -87] + 41], ap++;
jmp rel 391 if [ap + -1] != 0;
[ap + 0] = [[ap + -88] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -93] + 42];
[ap + -4] = [[ap + -93] + 43];
[ap + -3] = [[ap + -93] + 44];
[ap + -2] = [[ap + -93] + 45];
[fp + -5] = [[ap + -93] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -93] + 42) %}
[ap + 0] = [[ap + -93] + 48], ap++;
jmp rel 355 if [ap + -1] != 0;
[ap + 0] = [[ap + -94] + 47], ap++;
[ap + 0] = 86160472822691725120407679008162224249033762782759083909972827479365356210, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -109] = [[ap + -12] + 1];
[ap + 0] = [[ap + -12] + 2], ap++;
[ap + -1] = [[ap + -13] + 3];
[ap + -98] = [[ap + -13] + 4];
[ap + 0] = [[ap + -13] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -23] + 6, ap++;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -110] + 49];
[ap + -5] = [[ap + -110] + 50];
[ap + -4] = [[ap + -110] + 51];
[ap + -6] = [[ap + -110] + 52];
[fp + -4] = [[ap + -110] + 53];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -110] + 49) %}
[ap + 0] = [[ap + -110] + 55], ap++;
jmp rel 273 if [ap + -1] != 0;
[ap + 0] = [[ap + -111] + 54], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -116] + 56];
[ap + -4] = [[ap + -116] + 57];
[ap + -3] = [[ap + -116] + 58];
[ap + -2] = [[ap + -116] + 59];
[fp + -3] = [[ap + -116] + 60];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -116] + 56) %}
[ap + 0] = [[ap + -116] + 62], ap++;
jmp rel 237 if [ap + -1] != 0;
[ap + 0] = [[ap + -117] + 61], ap++;
[ap + 0] = 1740165864355814664449406372604861328101563954232233746964269413466337437234, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -132] = [[ap + -12] + 1];
[ap + 0] = [[ap + -12] + 2], ap++;
[ap + -1] = [[ap + -13] + 3];
[ap + -121] = [[ap + -13] + 4];
[ap + 0] = [[ap + -13] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -24] + 6, ap++;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -134] + 63];
[ap + -6] = [[ap + -134] + 64];
[ap + -5] = [[ap + -134] + 65];
[ap + -7] = [[ap + -134] + 66];
[ap + -4] = [[ap + -134] + 67];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -134] + 63) %}
[ap + 0] = [[ap + -134] + 69], ap++;
jmp rel 159 if [ap + -1] != 0;
[ap + 0] = [[ap + -135] + 68], ap++;
[ap + 0] = 1468721540580420751386073404412340098687291872736492511865321927096849428876, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -265] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -150] + 70];
[ap + -5] = [[ap + -150] + 71];
[ap + -4] = [[ap + -150] + 72];
[ap + -6] = [[ap + -150] + 73];
[ap + -163] = [[ap + -150] + 74];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -150] + 70) %}
[ap + 0] = [[ap + -150] + 76], ap++;
jmp rel 89 if [ap + -1] != 0;
[ap + 0] = [[ap + -151] + 75], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -156] + 77];
[ap + -4] = [[ap + -156] + 78];
[ap + -3] = [[ap + -156] + 79];
[ap + -2] = [[ap + -156] + 80];
[ap + -157] = [[ap + -156] + 81];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -156] + 77) %}
[ap + 0] = [[ap + -156] + 83], ap++;
jmp rel 62 if [ap + -1] != 0;
[ap + 0] = [[ap + -157] + 82], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = [ap + -296], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 85262;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -196] + 84];
[ap + -2] = [[ap + -196] + 85];
[ap + -6] = [[ap + -196] + 86];
[ap + -5] = [[ap + -196] + 87];
[ap + -4] = [[ap + -196] + 88];
[ap + -3] = [[ap + -196] + 89];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -196] + 84) %}
[ap + 0] = [[ap + -196] + 91], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -197] + 90], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -201] + 92, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -198], ap++;
[ap + 0] = [ap + -198], ap++;
ret;
[ap + 0] = [[ap + -197] + 90], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -201] + 94, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -203] + 92], ap++;
[ap + 0] = [[ap + -204] + 93], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -193] + 82], ap++;
[ap + 0] = [ap + -1] + 14840, ap++;
[ap + 0] = [ap + -195] + 86, ap++;
[ap + 0] = [[ap + -196] + 84], ap++;
[ap + 0] = [[ap + -197] + 85], ap++;
jmp rel 11;
ap += 42;
[ap + 0] = [[ap + -193] + 75], ap++;
[ap + 0] = [ap + -1] + 26080, ap++;
[ap + 0] = [ap + -195] + 79, ap++;
[ap + 0] = [[ap + -196] + 77], ap++;
[ap + 0] = [[ap + -197] + 78], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 56;
[ap + 0] = [[ap + -191] + 68], ap++;
call rel 119510;
[ap + 0] = [ap + -1] + 119509, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38650, ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -201] + 72, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -203] + 70], ap++;
[ap + 0] = [[ap + -204] + 71], ap++;
ret;
ap += 69;
[ap + 0] = [[ap + -186] + 61], ap++;
call rel 119489;
[ap + 0] = [ap + -1] + 119488, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 51230, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -195] + 65, ap++;
[ap + 0] = [[ap + -196] + 63], ap++;
[ap + 0] = [[ap + -197] + 64], ap++;
jmp rel 20;
ap += 75;
[ap + 0] = [[ap + -186] + 54], ap++;
call rel 119469;
[ap + 0] = [ap + -1] + 119468, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 62470, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -195] + 58, ap++;
[ap + 0] = [[ap + -196] + 56], ap++;
[ap + 0] = [[ap + -197] + 57], ap++;
[ap + 0] = [ap + -90], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 92;
[ap + 0] = [[ap + -186] + 47], ap++;
call rel 119442;
[ap + 0] = [ap + -1] + 119441, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 75410, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -195] + 51, ap++;
[ap + 0] = [[ap + -196] + 49], ap++;
[ap + 0] = [[ap + -197] + 50], ap++;
jmp rel 20;
ap += 98;
[ap + 0] = [[ap + -186] + 40], ap++;
call rel 119422;
[ap + 0] = [ap + -1] + 119421, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 86650, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -195] + 44, ap++;
[ap + 0] = [[ap + -196] + 42], ap++;
[ap + 0] = [[ap + -197] + 43], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -116], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 115;
[ap + 0] = [[ap + -186] + 33], ap++;
call rel 119395;
[ap + 0] = [ap + -1] + 119394, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 99590, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -195] + 37, ap++;
[ap + 0] = [[ap + -196] + 35], ap++;
[ap + 0] = [[ap + -197] + 36], ap++;
jmp rel 20;
ap += 121;
[ap + 0] = [[ap + -186] + 26], ap++;
call rel 119375;
[ap + 0] = [ap + -1] + 119374, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 110830, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -195] + 30, ap++;
[ap + 0] = [[ap + -196] + 28], ap++;
[ap + 0] = [[ap + -197] + 29], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 142;
[ap + 0] = [[ap + -190] + 19], ap++;
call rel 119348;
[ap + 0] = [ap + -1] + 119347, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 9, ap++;
[ap + 0] = [ap + -1] + 124230, ap++;
[ap + 0] = [ap + -153], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -156], ap++;
[ap + 0] = [ap + -201] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -203] + 21], ap++;
[ap + 0] = [[ap + -204] + 22], ap++;
ret;
ap += 155;
[ap + 0] = [[ap + -186] + 12], ap++;
call rel 119325;
[ap + 0] = [ap + -1] + 119324, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 136810, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -195] + 16, ap++;
[ap + 0] = [[ap + -196] + 14], ap++;
[ap + 0] = [[ap + -197] + 15], ap++;
jmp rel 20;
ap += 162;
[ap + 0] = [[ap + -186] + 5], ap++;
call rel 119305;
[ap + 0] = [ap + -1] + 119304, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 148140, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -195] + 9, ap++;
[ap + 0] = [[ap + -196] + 7], ap++;
[ap + 0] = [[ap + -197] + 8], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 164;
call rel 119279;
[ap + 0] = [ap + -1] + 119278, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 158720, ap++;
[ap + 0] = [ap + -175], ap++;
[ap + 0] = [ap + -175] + [ap + -2], ap++;
jmp rel 17;
ap += 167;
call rel 119263;
[ap + 0] = [ap + -1] + 119262, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 159090, ap++;
[ap + 0] = [ap + -195] + 3, ap++;
[ap + 0] = [ap + -179] + [ap + -2], ap++;
call rel 84880;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -201], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 167;
call rel 119237;
[ap + 0] = [ap + -1] + 119236, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 158890, ap++;
call rel 84866;
[ap + 0] = [ap + -193] + 3, ap++;
[ap + 0] = [ap + -188] + [ap + -8], ap++;
[ap + 0] = [ap + -190], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 187;
[ap + 0] = [[ap + -197] + 4], ap++;
call rel 119214;
[ap + 0] = [ap + -1] + 119213, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 161600, ap++;
[ap + 0] = [ap + -198], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -207] + 8, ap++;
[ap + 0] = [[ap + -208] + 6], ap++;
[ap + 0] = [[ap + -209] + 7], ap++;
jmp rel 48;
ap += 179;
call rel 119194;
[ap + 0] = [ap + -1] + 119193, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 170740, ap++;
call rel 84823;
[ap + 0] = [ap + -210] + 3, ap++;
[ap + 0] = [ap + -200] + [ap + -8], ap++;
[ap + 0] = [ap + -202], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 199;
[ap + 0] = [[ap + -295] + 4], ap++;
call rel 119166;
[ap + 0] = [ap + -1] + 119165, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 173450, ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -305] + 8, ap++;
[ap + 0] = [[ap + -306] + 6], ap++;
[ap + 0] = [[ap + -307] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 207;
call rel 119139;
[ap + 0] = [ap + -1] + 119138, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 184670, ap++;
call rel 88130;
[ap + 0] = [ap + -267] + 8, ap++;
[ap + 0] = [ap + -225] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 211;
call rel 119115;
[ap + 0] = [ap + -1] + 119114, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 185200, ap++;
call rel 88106;
[ap + 0] = [ap + -267] + 7, ap++;
[ap + 0] = [ap + -229] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 212;
call rel 119091;
[ap + 0] = [ap + -1] + 119090, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 185460, ap++;
[ap + 0] = [ap + -259] + 6, ap++;
[ap + 0] = [ap + -224] + [ap + -2], ap++;
call rel 88088;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 221;
call rel 119065;
[ap + 0] = [ap + -1] + 119064, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 186710, ap++;
[ap + 0] = [ap + -259] + 4, ap++;
[ap + 0] = [ap + -233] + [ap + -2], ap++;
call rel 88071;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 230;
call rel 119039;
[ap + 0] = [ap + -1] + 119038, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 187960, ap++;
[ap + 0] = [ap + -259] + 2, ap++;
[ap + 0] = [ap + -242] + [ap + -2], ap++;
call rel 88054;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 254;
call rel 119013;
[ap + 0] = [ap + -1] + 119012, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 191160, ap++;
call rel 84507;
[ap + 0] = [ap + -313] + 18, ap++;
[ap + 0] = [ap + -275] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 257;
call rel 118989;
[ap + 0] = [ap + -1] + 118988, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 191770, ap++;
call rel 87989;
[ap + 0] = [ap + -313] + 16, ap++;
[ap + 0] = [ap + -279] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 260;
call rel 118965;
[ap + 0] = [ap + -1] + 118964, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 192380, ap++;
call rel 87974;
[ap + 0] = [ap + -313] + 14, ap++;
[ap + 0] = [ap + -282] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 263;
call rel 118941;
[ap + 0] = [ap + -1] + 118940, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 192990, ap++;
call rel 87959;
[ap + 0] = [ap + -313] + 12, ap++;
[ap + 0] = [ap + -285] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 270;
call rel 118917;
[ap + 0] = [ap + -1] + 118916, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 194030, ap++;
call rel 87881;
[ap + 0] = [ap + -313] + 9, ap++;
[ap + 0] = [ap + -291] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 276;
call rel 118893;
[ap + 0] = [ap + -1] + 118892, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 194980, ap++;
call rel 87848;
[ap + 0] = [ap + -313] + 6, ap++;
[ap + 0] = [ap + -297] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 282;
call rel 118869;
[ap + 0] = [ap + -1] + 118868, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 195930, ap++;
call rel 87815;
[ap + 0] = [ap + -313] + 3, ap++;
[ap + 0] = [ap + -303] + [ap + -8], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 302;
[ap + 0] = [[fp + -9] + 9], ap++;
call rel 118844;
[ap + 0] = [ap + -1] + 118843, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 11, ap++;
[ap + 0] = [ap + -1] + 198640, ap++;
[ap + 0] = [ap + -313], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -316], ap++;
[ap + 0] = [fp + -9] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 11], ap++;
[ap + 0] = [[fp + -9] + 12], ap++;
ret;
ap += 320;
[ap + 0] = [[fp + -9] + 2], ap++;
call rel 118821;
[ap + 0] = [ap + -1] + 118820, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 12, ap++;
[ap + 0] = [ap + -1] + 211470, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 3017 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -8] + 0], ap++;
[ap + 3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -8] + 2];
jmp rel 16 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[fp + -8] + 0];
ap += 5;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -9] + 790, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 7;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[fp + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[fp + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 2934;
%{
(value, scalar) = (memory[fp + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[fp + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[ap + 0] = 950071732276994763680909267741104265053146747924813047115077679817926440210, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -3] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 3], ap++;
[ap + -4] = [[ap + -16] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -18] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -15] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -17] + 4], ap++;
[ap + -7] = [[ap + -18] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -21] + 6, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -32] + 0];
[ap + -5] = [[ap + -32] + 1];
[ap + -4] = [[ap + -32] + 2];
[ap + -6] = [[ap + -32] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -32]) %}
[ap + 0] = [[ap + -32] + 5], ap++;
jmp rel 2853 if [ap + -1] != 0;
[ap + 0] = [[ap + -33] + 4], ap++;
[ap + 0] = [[ap + -34] + 6], ap++;
[ap + 0] = [ap + -35] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
jmp rel 7 if [ap + -5] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 25 if [ap + -1] != 0;
ap += 929;
call rel 118652;
[ap + 0] = [ap + -1] + 118651, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 333740, ap++;
call rel 87679;
[ap + 0] = [ap + -955], ap++;
[ap + 0] = [ap + -947] + [ap + -8], ap++;
[ap + 0] = [ap + -958], ap++;
[ap + 0] = [ap + -953], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [ap + -33], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 67;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -37] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -40], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 917;
call rel 118600;
[ap + 0] = [ap + -1] + 118599, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 332120, ap++;
[ap + 0] = [ap + -930] + 1, ap++;
[ap + 0] = [ap + -928] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 921;
call rel 118578;
[ap + 0] = [ap + -1] + 118577, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 332750, ap++;
[ap + 0] = [ap + -930], ap++;
[ap + 0] = [ap + -930] + [ap + -2], ap++;
call rel 87612;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -958], ap++;
[ap + 0] = [ap + -953], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 1468721540580420751386073404412340098687291872736492511865321927096849428876, ap++;
[ap + -1] = [[ap + -28] + 0];
[ap + -55] = [[ap + -28] + 1];
[ap + 0] = [[ap + -28] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -37] + 3, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -34] + 0];
[ap + -14] = [[ap + -34] + 1];
[ap + -4] = [[ap + -34] + 2];
[ap + -5] = [[ap + -34] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -34]) %}
[ap + 0] = [[ap + -34] + 5], ap++;
jmp rel 2648 if [ap + -1] != 0;
[ap + 0] = [[ap + -35] + 4], ap++;
[ap + 0] = [[ap + -36] + 6], ap++;
[ap + 0] = [ap + -37] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 2596 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 2556 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 2509 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -4] = [ap + 1] + [ap + -8], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 67;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 36 if [ap + -12] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -25], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 872;
call rel 118395;
[ap + 0] = [ap + -1] + 118394, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 12, ap++;
[ap + 0] = [ap + -1] + 305380, ap++;
[ap + 0] = [ap + -885] + 1, ap++;
[ap + 0] = [ap + -883] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 876;
call rel 118373;
[ap + 0] = [ap + -1] + 118372, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 12, ap++;
[ap + 0] = [ap + -1] + 306010, ap++;
[ap + 0] = [ap + -885], ap++;
[ap + 0] = [ap + -885] + [ap + -2], ap++;
call rel 87416;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -921], ap++;
[ap + 0] = [ap + -905], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -21] + 2, ap++;
[ap + 0] = [ap + -13] + 810, ap++;
[ap + 0] = 1740165864355814664449406372604861328101563954232233746964269413466337437234, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -31] = [[ap + -36] + 1];
[ap + 0] = [[ap + -36] + 2], ap++;
[ap + -1] = [[ap + -37] + 3];
[ap + -21] = [[ap + -37] + 4];
[ap + 0] = [[ap + -37] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -46] + 6, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -32] + 0];
[ap + -15] = [[ap + -32] + 1];
[ap + -4] = [[ap + -32] + 2];
[ap + -5] = [[ap + -32] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -32]) %}
[ap + 0] = [[ap + -32] + 5], ap++;
jmp rel 2347 if [ap + -1] != 0;
[ap + 0] = [[ap + -33] + 4], ap++;
[ap + 0] = [[ap + -34] + 6], ap++;
[ap + 0] = [ap + -35] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 25 if [ap + -1] != 0;
ap += 848;
call rel 118269;
[ap + 0] = [ap + -1] + 118268, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 291410, ap++;
call rel 87323;
[ap + 0] = [ap + -872], ap++;
[ap + 0] = [ap + -866] + [ap + -8], ap++;
[ap + 0] = [ap + -875], ap++;
[ap + 0] = [ap + -870], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1552975885734959436909596928797091402164378429869856532089389112858524589442, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -54] = [[ap + -13] + 1];
[ap + 0] = [[ap + -13] + 2], ap++;
[ap + -1] = [[ap + -14] + 3];
[ap + -44] = [[ap + -14] + 4];
[ap + 0] = [[ap + -14] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 0], ap++;
[ap + -4] = [[ap + -19] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 1], ap++;
[ap + -7] = [[ap + -21] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -24] + 6, ap++;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -5] = [[ap + -21] + 1];
[ap + -4] = [[ap + -21] + 2];
[ap + -6] = [[ap + -21] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 5], ap++;
jmp rel 2222 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 4], ap++;
[ap + 0] = [[ap + -23] + 6], ap++;
[ap + 0] = [ap + -24] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 2181;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + -8] = [ap + 0] + [ap + -147], ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 2144 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -2] = [[ap + -12] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 3], ap++;
jmp rel 2113 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 2], ap++;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1318762164544401419801377745598577778800844723940937261005552771285365981457, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -19] + 5];
[ap + -4] = [[ap + -19] + 6];
[ap + -3] = [[ap + -19] + 7];
[ap + -2] = [[ap + -19] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 5) %}
[ap + 0] = [[ap + -19] + 10], ap++;
jmp rel 2069 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [[ap + -21] + 11], ap++;
[ap + 0] = [ap + -22] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -20] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -22] + 1], ap++;
[ap + -5] = [[ap + -23] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 2026 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -17] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -18] + 1];
[ap + 0] = [ap + -18] + 2, ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
call rel 87177;
[ap + 0] = [ap + -90], ap++;
jmp rel 1985 if [ap + -2] != 0;
[ap + 0] = 100, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -37], ap++;
[ap + -281] = [ap + 1] + [ap + -34], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -45] + 15];
jmp rel 1866;
[ap + -1] = [[ap + -44] + 15];
[ap + 0] = [ap + -44] + 16, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -285] = [ap + 0] + [ap + -38], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -288] = [ap + 1] + [ap + -41], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 1824;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -291] = [ap + 1] + [ap + -44], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 13;
[ap + -1] = [[ap + -4] + 0];
ap += 1;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -299] = [ap + 1] + [ap + -52], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 1738;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 1714 if [ap + -12] != 0;
[ap + 0] = 376172039617525223398104227042100338122204737598547041898283256687279968792, ap++;
[ap + -1] = [[ap + -186] + 0];
[ap + -251] = [[ap + -186] + 1];
[ap + 0] = [[ap + -186] + 2], ap++;
[ap + -1] = [[ap + -187] + 3];
[ap + -241] = [[ap + -187] + 4];
[ap + 0] = [[ap + -187] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -197] + 6, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -172] + 0];
[ap + -5] = [[ap + -172] + 1];
[ap + -4] = [[ap + -172] + 2];
[ap + -6] = [[ap + -172] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -172]) %}
[ap + 0] = [[ap + -172] + 5], ap++;
jmp rel 1633 if [ap + -1] != 0;
[ap + 0] = [[ap + -173] + 4], ap++;
[ap + 0] = [[ap + -174] + 6], ap++;
[ap + 0] = [ap + -175] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1587;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 1542 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1499 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 570275081082906139618089942019828439552474686634885326052085539652282650782, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -288] = [[ap + -26] + 1];
[ap + 0] = [[ap + -26] + 2], ap++;
[ap + -1] = [[ap + -27] + 3];
[ap + -278] = [[ap + -27] + 4];
[ap + 0] = [[ap + -27] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 2], ap++;
[ap + -4] = [[ap + -17] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 3], ap++;
[ap + -7] = [[ap + -19] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -37] + 6, ap++;
[ap + 0] = [ap + -22] + 5, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -5] = [[ap + -19] + 1];
[ap + -4] = [[ap + -19] + 2];
[ap + -6] = [[ap + -19] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 5], ap++;
jmp rel 1412 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -21] + 6], ap++;
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1366;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 1321 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1278 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 86160472822691725120407679008162224249033762782759083909972827479365356210, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -325] = [[ap + -26] + 1];
[ap + 0] = [[ap + -26] + 2], ap++;
[ap + -1] = [[ap + -27] + 3];
[ap + -315] = [[ap + -27] + 4];
[ap + 0] = [[ap + -27] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 2], ap++;
[ap + -4] = [[ap + -17] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 3], ap++;
[ap + -7] = [[ap + -19] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -37] + 6, ap++;
[ap + 0] = [ap + -22] + 5, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -5] = [[ap + -19] + 1];
[ap + -4] = [[ap + -19] + 2];
[ap + -6] = [[ap + -19] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 5], ap++;
jmp rel 1191 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -21] + 6], ap++;
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1145;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 1100 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 1057 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -114], ap++;
[ap + 0] = [ap + -114], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = 0, ap++;
call rel 86610;
[ap + 0] = [ap + -90], ap++;
jmp rel 1016 if [ap + -2] != 0;
[ap + 0] = 100, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -41] + 15, ap++;
[ap + 0] = [ap + -124], ap++;
[ap + 0] = [ap + -124], ap++;
[ap + 0] = [ap + -169], ap++;
[ap + 0] = 0, ap++;
call rel 86514;
[ap + 0] = [ap + -124], ap++;
jmp rel 897 if [ap + -2] != 0;
[ap + 0] = 100, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -41] + 15, ap++;
[ap + 0] = [ap + -248], ap++;
[ap + 0] = [ap + -248], ap++;
[ap + 0] = [ap + -256], ap++;
[ap + 0] = 0, ap++;
call rel 86418;
[ap + 0] = [ap + -124], ap++;
jmp rel 778 if [ap + -2] != 0;
[ap + 0] = 100, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + -2] = [ap + 1] + [ap + -547], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -46] + 15];
jmp rel 60;
[ap + -1] = [[ap + -45] + 15];
[ap + 0] = [ap + -45] + 16, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -551] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -554], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 121;
call rel 117225;
[ap + 0] = [ap + -1] + 117224, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 78280, ap++;
[ap + 0] = [ap + -134] + 1, ap++;
[ap + 0] = [ap + -132] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 26;
ap += 125;
call rel 117203;
[ap + 0] = [ap + -1] + 117202, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 78910, ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -134] + [ap + -2], ap++;
[ap + 0] = [ap + -537], ap++;
[ap + 0] = [ap + -517], ap++;
jmp rel 346;
ap += 6;
[ap + 0] = [ap + -52] + 16, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 924631572402547687866905762840324602257264124730146175649296257597821159577, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -392] + 0];
[ap + -4] = [[ap + -392] + 1];
[ap + -3] = [[ap + -392] + 2];
[ap + -2] = [[ap + -392] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -392]) %}
[ap + 0] = [[ap + -392] + 5], ap++;
jmp rel 578 if [ap + -1] != 0;
[ap + 0] = [[ap + -393] + 4], ap++;
[ap + 0] = [[ap + -394] + 6], ap++;
[ap + 0] = [ap + -395] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -16] + 2];
jmp rel 537;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -15] + 2];
[ap + 0] = 840235611250556866470127695599541744396877675795694044469249720788412799709, ap++;
[ap + -1] = [[ap + -424] + 0];
[fp + -3] = [[ap + -424] + 1];
[ap + 0] = [[ap + -424] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -21] + 3], ap++;
[ap + -4] = [[ap + -22] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -24] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -21] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -23] + 4], ap++;
[ap + -7] = [[ap + -24] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -434] + 3, ap++;
[ap + 0] = [ap + -27] + 6, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -5] = [[ap + -21] + 1];
[ap + -4] = [[ap + -21] + 2];
[ap + -6] = [[ap + -21] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 5], ap++;
jmp rel 453 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 4], ap++;
[ap + 0] = [[ap + -23] + 6], ap++;
[ap + 0] = [ap + -24] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 403 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 365 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 320 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [ap + -603], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -23] + [ap + -611], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 236;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 214 if [ap + -12] != 0;
[ap + 0] = 840235611250556866470127695599541744396877675795694044469249720788412799709, ap++;
[ap + -1] = [[ap + -40] + 0];
[fp + -3] = [[ap + -40] + 1];
[ap + 0] = [[ap + -40] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -5] = [[ap + -36] + 1];
[ap + -4] = [[ap + -36] + 2];
[ap + -6] = [[ap + -36] + 3];
[ap + -16] = [[ap + -36] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 6], ap++;
jmp rel 145 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -42] + 7];
[ap + -4] = [[ap + -42] + 8];
[ap + -3] = [[ap + -42] + 9];
[ap + -2] = [[ap + -42] + 10];
[ap + -21] = [[ap + -42] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42] + 7) %}
[ap + 0] = [[ap + -42] + 13], ap++;
jmp rel 118 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -652], ap++;
[ap + 0] = [ap + -652], ap++;
[ap + 0] = 31075983413406114344811982702, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 82547;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -82] + 14];
[ap + -2] = [[ap + -82] + 15];
[ap + -6] = [[ap + -82] + 16];
[ap + -5] = [[ap + -82] + 17];
[ap + -4] = [[ap + -82] + 18];
[ap + -3] = [[ap + -82] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -82] + 14) %}
[ap + 0] = [[ap + -82] + 21], ap++;
jmp rel 66 if [ap + -1] != 0;
[ap + 0] = [[ap + -83] + 20], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -87] + 22, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -864], ap++;
[ap + 0] = [ap + -864], ap++;
[ap + 0] = [ap + -521], ap++;
[ap + 0] = [ap + -521], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 82506;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -38] + 0];
[ap + -40] = [[ap + -38] + 1];
[ap + -5] = [[ap + -38] + 2];
[ap + -4] = [[ap + -38] + 3];
[ap + -3] = [[ap + -38] + 4];
[ap + -2] = [[ap + -38] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -38]) %}
[ap + 0] = [[ap + -38] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -39] + 6], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -39] + 6], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -45] + 8], ap++;
[ap + 0] = [[ap + -46] + 9], ap++;
ret;
ap += 43;
[ap + 0] = [[ap + -126] + 20], ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -2] + 15570, ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = [ap + -130] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -132] + 22], ap++;
[ap + 0] = [[ap + -133] + 23], ap++;
ret;
ap += 79;
[ap + 0] = [[ap + -122] + 12], ap++;
[ap + 0] = [ap + -1] + 30510, ap++;
[ap + 0] = [ap + -124] + 16, ap++;
[ap + 0] = [[ap + -125] + 14], ap++;
[ap + 0] = [[ap + -126] + 15], ap++;
jmp rel 11;
ap += 85;
[ap + 0] = [[ap + -122] + 5], ap++;
[ap + 0] = [ap + -1] + 41750, ap++;
[ap + 0] = [ap + -124] + 9, ap++;
[ap + 0] = [[ap + -125] + 7], ap++;
[ap + 0] = [[ap + -126] + 8], ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 91;
call rel 116740;
[ap + 0] = [ap + -1] + 116739, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 53400, ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = [ap + -101] + [ap + -2], ap++;
jmp rel 15;
ap += 94;
call rel 116726;
[ap + 0] = [ap + -1] + 116725, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 53770, ap++;
[ap + 0] = [ap + -112] + 2, ap++;
[ap + 0] = [ap + -105] + [ap + -2], ap++;
call rel 82345;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -130], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 97;
call rel 116702;
[ap + 0] = [ap + -1] + 116701, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 54120, ap++;
call rel 82333;
[ap + 0] = [ap + -122] + 3, ap++;
[ap + 0] = [ap + -117] + [ap + -8], ap++;
[ap + 0] = [ap + -119], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 117;
[ap + 0] = [[ap + -126] + 4], ap++;
call rel 116681;
[ap + 0] = [ap + -1] + 116680, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 56830, ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -135] + 8, ap++;
[ap + 0] = [[ap + -136] + 6], ap++;
[ap + 0] = [[ap + -137] + 7], ap++;
jmp rel 44;
ap += 108;
call rel 116663;
[ap + 0] = [ap + -1] + 116662, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 65880, ap++;
call rel 82294;
[ap + 0] = [ap + -133] + 3, ap++;
[ap + 0] = [ap + -128] + [ap + -8], ap++;
[ap + 0] = [ap + -130], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 128;
[ap + 0] = [[ap + -150] + 4], ap++;
call rel 116637;
[ap + 0] = [ap + -1] + 116636, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 68590, ap++;
[ap + 0] = [ap + -138], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -159] + 8, ap++;
[ap + 0] = [[ap + -160] + 6], ap++;
[ap + 0] = [[ap + -161] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 136;
call rel 116612;
[ap + 0] = [ap + -1] + 116611, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 80220, ap++;
call rel 82079;
[ap + 0] = [ap + -165] + 3, ap++;
[ap + 0] = [ap + -157] + [ap + -8], ap++;
[ap + 0] = [ap + -159], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 151;
[ap + 0] = [[ap + -544] + 4], ap++;
call rel 116589;
[ap + 0] = [ap + -1] + 116588, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 82280, ap++;
[ap + 0] = [ap + -165], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -554] + 8, ap++;
[ap + 0] = [[ap + -555] + 6], ap++;
[ap + 0] = [[ap + -556] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -580], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 204;
call rel 116562;
[ap + 0] = [ap + -1] + 116561, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 100640, ap++;
call rel 85839;
[ap + 0] = [ap + -222], ap++;
[ap + 0] = [ap + -219] + [ap + -8], ap++;
[ap + 0] = [ap + -580], ap++;
[ap + 0] = [ap + -560], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 328;
call rel 116539;
[ap + 0] = [ap + -1] + 116538, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 120040, ap++;
call rel 85816;
[ap + 0] = [ap + -346], ap++;
[ap + 0] = [ap + -343] + [ap + -8], ap++;
[ap + 0] = [ap + -580], ap++;
[ap + 0] = [ap + -560], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 452;
call rel 116516;
[ap + 0] = [ap + -1] + 116515, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 139440, ap++;
call rel 85793;
[ap + 0] = [ap + -470], ap++;
[ap + 0] = [ap + -467] + [ap + -8], ap++;
[ap + 0] = [ap + -580], ap++;
[ap + 0] = [ap + -560], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 525;
call rel 116493;
[ap + 0] = [ap + -1] + 116492, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 151330, ap++;
call rel 85779;
[ap + 0] = [ap + -552] + 3, ap++;
[ap + 0] = [ap + -547] + [ap + -8], ap++;
[ap + 0] = [ap + -549], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 546;
[ap + 0] = [[ap + -559] + 4], ap++;
call rel 116470;
[ap + 0] = [ap + -1] + 116469, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 153930, ap++;
[ap + 0] = [ap + -557], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -569] + 8, ap++;
[ap + 0] = [[ap + -570] + 6], ap++;
[ap + 0] = [[ap + -571] + 7], ap++;
jmp rel 48;
ap += 541;
call rel 116450;
[ap + 0] = [ap + -1] + 116449, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 163780, ap++;
call rel 81917;
[ap + 0] = [ap + -567] + 3, ap++;
[ap + 0] = [ap + -562] + [ap + -8], ap++;
[ap + 0] = [ap + -564], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 561;
[ap + 0] = [[ap + -581] + 4], ap++;
call rel 116422;
[ap + 0] = [ap + -1] + 116421, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 166290, ap++;
[ap + 0] = [ap + -572], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -591] + 8, ap++;
[ap + 0] = [[ap + -592] + 6], ap++;
[ap + 0] = [[ap + -593] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -580], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 562;
call rel 116395;
[ap + 0] = [ap + -1] + 116394, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 177320, ap++;
call rel 85681;
[ap + 0] = [ap + -589] + 3, ap++;
[ap + 0] = [ap + -584] + [ap + -8], ap++;
[ap + 0] = [ap + -586], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 583;
[ap + 0] = [[ap + -596] + 4], ap++;
call rel 116372;
[ap + 0] = [ap + -1] + 116371, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 179920, ap++;
[ap + 0] = [ap + -594], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -606] + 8, ap++;
[ap + 0] = [[ap + -607] + 6], ap++;
[ap + 0] = [[ap + -608] + 7], ap++;
jmp rel 48;
ap += 578;
call rel 116352;
[ap + 0] = [ap + -1] + 116351, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 189770, ap++;
call rel 81819;
[ap + 0] = [ap + -604] + 3, ap++;
[ap + 0] = [ap + -599] + [ap + -8], ap++;
[ap + 0] = [ap + -601], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 598;
[ap + 0] = [[ap + -618] + 4], ap++;
call rel 116324;
[ap + 0] = [ap + -1] + 116323, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 192280, ap++;
[ap + 0] = [ap + -609], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -628] + 8, ap++;
[ap + 0] = [[ap + -629] + 6], ap++;
[ap + 0] = [[ap + -630] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -617], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 599;
call rel 116297;
[ap + 0] = [ap + -1] + 116296, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 203310, ap++;
call rel 85583;
[ap + 0] = [ap + -626] + 3, ap++;
[ap + 0] = [ap + -621] + [ap + -8], ap++;
[ap + 0] = [ap + -623], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 620;
[ap + 0] = [[ap + -633] + 4], ap++;
call rel 116274;
[ap + 0] = [ap + -1] + 116273, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 205910, ap++;
[ap + 0] = [ap + -631], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -643] + 8, ap++;
[ap + 0] = [[ap + -644] + 6], ap++;
[ap + 0] = [[ap + -645] + 7], ap++;
jmp rel 48;
ap += 615;
call rel 116254;
[ap + 0] = [ap + -1] + 116253, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 215760, ap++;
call rel 81721;
[ap + 0] = [ap + -641] + 3, ap++;
[ap + 0] = [ap + -636] + [ap + -8], ap++;
[ap + 0] = [ap + -638], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 635;
[ap + 0] = [[ap + -808] + 4], ap++;
call rel 116226;
[ap + 0] = [ap + -1] + 116225, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 218270, ap++;
[ap + 0] = [ap + -646], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -818] + 8, ap++;
[ap + 0] = [[ap + -819] + 6], ap++;
[ap + 0] = [[ap + -820] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -654], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 649;
call rel 116199;
[ap + 0] = [ap + -1] + 116198, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 230740, ap++;
[ap + 0] = [ap + -660], ap++;
[ap + 0] = [ap + -660] + [ap + -2], ap++;
jmp rel 17;
ap += 652;
call rel 116183;
[ap + 0] = [ap + -1] + 116182, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 231110, ap++;
[ap + 0] = [ap + -671] + 2, ap++;
[ap + 0] = [ap + -664] + [ap + -2], ap++;
call rel 82372;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -851], ap++;
[ap + 0] = [ap + -824], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 668;
call rel 116157;
[ap + 0] = [ap + -1] + 116156, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 233170, ap++;
[ap + 0] = [ap + -682] + 1, ap++;
[ap + 0] = [ap + -680] + [ap + -2], ap++;
jmp rel 17;
ap += 674;
call rel 116140;
[ap + 0] = [ap + -1] + 116139, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 234180, ap++;
[ap + 0] = [ap + -726] + 16, ap++;
[ap + 0] = [ap + -686] + [ap + -2], ap++;
call rel 85432;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -851], ap++;
[ap + 0] = [ap + -824], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 716;
call rel 116114;
[ap + 0] = [ap + -1] + 116113, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 240780, ap++;
call rel 85391;
[ap + 0] = [ap + -734], ap++;
[ap + 0] = [ap + -731] + [ap + -8], ap++;
[ap + 0] = [ap + -851], ap++;
[ap + 0] = [ap + -824], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 794;
call rel 116091;
[ap + 0] = [ap + -1] + 116090, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 253220, ap++;
call rel 85377;
[ap + 0] = [ap + -830] + 3, ap++;
[ap + 0] = [ap + -816] + [ap + -8], ap++;
[ap + 0] = [ap + -818], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 810;
[ap + 0] = [[ap + -830] + 9], ap++;
call rel 116068;
[ap + 0] = [ap + -1] + 116067, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 255370, ap++;
[ap + 0] = [ap + -830], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -840] + 13, ap++;
[ap + 0] = [[ap + -841] + 11], ap++;
[ap + 0] = [[ap + -842] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -851], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 822;
[ap + 0] = [[ap + -835] + 2], ap++;
call rel 116040;
[ap + 0] = [ap + -1] + 116039, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 266950, ap++;
[ap + 0] = [ap + -835], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -851], ap++;
[ap + 0] = [ap + -846] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -848] + 4], ap++;
[ap + 0] = [[ap + -849] + 5], ap++;
ret;
ap += 820;
call rel 116018;
[ap + 0] = [ap + -1] + 116017, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 276970, ap++;
call rel 85322;
[ap + 0] = [ap + -835], ap++;
[ap + 0] = [ap + -835] + [ap + -8], ap++;
[ap + 0] = [ap + -851], ap++;
[ap + 0] = [ap + -846], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 817;
call rel 115995;
[ap + 0] = [ap + -1] + 115994, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 276600, ap++;
call rel 81462;
[ap + 0] = [ap + -843] + 3, ap++;
[ap + 0] = [ap + -838] + [ap + -8], ap++;
[ap + 0] = [ap + -840], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 832;
[ap + 0] = [[ap + -854] + 4], ap++;
call rel 115972;
[ap + 0] = [ap + -1] + 115971, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 278660, ap++;
[ap + 0] = [ap + -843], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -864] + 8, ap++;
[ap + 0] = [[ap + -865] + 6], ap++;
[ap + 0] = [[ap + -866] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -851], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 861;
[ap + 0] = [[ap + -894] + 4], ap++;
call rel 115944;
[ap + 0] = [ap + -1] + 115943, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 292980, ap++;
[ap + 0] = [ap + -872], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -875], ap++;
[ap + 0] = [ap + -905] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -907] + 6], ap++;
[ap + 0] = [[ap + -908] + 7], ap++;
ret;
ap += 871;
call rel 115922;
[ap + 0] = [ap + -1] + 115921, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 12, ap++;
[ap + 0] = [ap + -1] + 305090, ap++;
call rel 81551;
[ap + 0] = [ap + -897] + 3, ap++;
[ap + 0] = [ap + -892] + [ap + -8], ap++;
[ap + 0] = [ap + -894], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 891;
[ap + 0] = [[ap + -900] + 4], ap++;
call rel 115899;
[ap + 0] = [ap + -1] + 115898, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 12, ap++;
[ap + 0] = [ap + -1] + 307800, ap++;
[ap + 0] = [ap + -902], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -910] + 8, ap++;
[ap + 0] = [[ap + -911] + 6], ap++;
[ap + 0] = [[ap + -912] + 7], ap++;
jmp rel 48;
ap += 882;
call rel 115879;
[ap + 0] = [ap + -1] + 115878, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 12, ap++;
[ap + 0] = [ap + -1] + 316850, ap++;
call rel 81508;
[ap + 0] = [ap + -908] + 3, ap++;
[ap + 0] = [ap + -903] + [ap + -8], ap++;
[ap + 0] = [ap + -905], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 902;
[ap + 0] = [[ap + -937] + 4], ap++;
call rel 115851;
[ap + 0] = [ap + -1] + 115850, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 12, ap++;
[ap + 0] = [ap + -1] + 319560, ap++;
[ap + 0] = [ap + -913], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -947] + 8, ap++;
[ap + 0] = [[ap + -948] + 6], ap++;
[ap + 0] = [[ap + -949] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -921], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 944;
[ap + 0] = [[ap + -977] + 4], ap++;
call rel 115823;
[ap + 0] = [ap + -1] + 115822, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 335490, ap++;
[ap + 0] = [ap + -955], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -958], ap++;
[ap + 0] = [ap + -988] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -990] + 6], ap++;
[ap + 0] = [[ap + -991] + 7], ap++;
ret;
ap += 953;
call rel 115801;
[ap + 0] = [ap + -1] + 115800, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 347310, ap++;
call rel 85114;
[ap + 0] = [ap + -976] + 3, ap++;
[ap + 0] = [ap + -976] + [ap + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -988], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 979;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 115776;
[ap + 0] = [ap + -1] + 115775, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 350970, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 189 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 2];
jmp rel 110;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 79 if [ap + -3] != 0;
ap += 1;
[ap + 0] = 950071732276994763680909267741104265053146747924813047115077679817926440210, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -5] = [[ap + -25] + 1];
[ap + -4] = [[ap + -25] + 2];
[ap + -6] = [[ap + -25] + 3];
[fp + -3] = [[ap + -25] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25]) %}
[ap + 0] = [[ap + -25] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -26] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -30] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -32] + 7], ap++;
[ap + 0] = [[ap + -33] + 8], ap++;
ret;
call rel 115618;
[ap + 0] = [ap + -1] + 115617, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11120, ap++;
call rel 81078;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 2;
call rel 115599;
[ap + 0] = [ap + -1] + 115598, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11100, ap++;
call rel 81068;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -22] + [ap + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 17;
[ap + 0] = [[fp + -5] + 9], ap++;
call rel 115578;
[ap + 0] = [ap + -1] + 115577, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13160, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 19;
ap += 29;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 115559;
[ap + 0] = [ap + -1] + 115558, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 24840, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 154 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 121 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 89;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 65 if [ap + -3] != 0;
[ap + 0] = 10, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 256 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 42;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1318762164544401419801377745598577778800844723940937261005552771285365981457, ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -5] = [[ap + -19] + 1];
[ap + -4] = [[ap + -19] + 2];
[ap + -3] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 84756;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80880;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10570, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 80877;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10550, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12610, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 24290, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 924631572402547687866905762840324602257264124730146175649296257597821159577, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 80727;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 80724;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 1552975885734959436909596928797091402164378429869856532089389112858524589442, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -5] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 299 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 258;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 376172039617525223398104227042100338122204737598547041898283256687279968792, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 84459;
jmp rel 204 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 570275081082906139618089942019828439552474686634885326052085539652282650782, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 84447;
jmp rel 159 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 86160472822691725120407679008162224249033762782759083909972827479365356210, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 84435;
jmp rel 114 if [ap + -3] != 0;
[ap + 0] = 1740165864355814664449406372604861328101563954232233746964269413466337437234, ap++;
[ap + -1] = [[ap + -6] + 0];
[fp + -4] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + -1] = [[ap + -7] + 3];
[fp + -3] = [[ap + -7] + 4];
[ap + 0] = [[ap + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -17] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -7] = [[ap + -17] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17] + 6, ap++;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -5] = [[ap + -19] + 1];
[ap + -4] = [[ap + -19] + 2];
[ap + -6] = [[ap + -19] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 5], ap++;
jmp rel 35 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -21] + 6], ap++;
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -165], ap++;
[ap + 0] = [ap + -165], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + -13] = [ap + 0] + [ap + -14], ap++;
ret;
ap += 6;
[ap + 0] = [[ap + -26] + 4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 640, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -30] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -38] + 6], ap++;
[ap + 0] = [[ap + -39] + 7], ap++;
ret;
ap += 16;
call rel 114976;
[ap + 0] = [ap + -1] + 114975, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 12950, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30] + [ap + -2], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -36], ap++;
ret;
ap += 83;
call rel 114943;
[ap + 0] = [ap + -1] + 114942, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 42110, ap++;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = [ap + -97] + [ap + -2], ap++;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = [ap + -103], ap++;
ret;
ap += 150;
call rel 114910;
[ap + 0] = [ap + -1] + 114909, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 71270, ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -164] + [ap + -2], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = [ap + -164], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -170], ap++;
[ap + 0] = [ap + -170], ap++;
ret;
ap += 205;
call rel 114877;
[ap + 0] = [ap + -1] + 114876, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 99050, ap++;
call rel 80344;
[ap + 0] = [ap + -231] + 3, ap++;
[ap + 0] = [ap + -226] + [ap + -8], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 220;
[ap + 0] = [[fp + -5] + 4], ap++;
call rel 114854;
[ap + 0] = [ap + -1] + 114853, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 101110, ap++;
[ap + 0] = [ap + -231], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -239], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = 1468721540580420751386073404412340098687291872736492511865321927096849428876, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel 80322;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel 80298;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 840235611250556866470127695599541744396877675795694044469249720788412799709, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel 80127;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel 80103;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 329 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 297 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -5] = [[ap + -11] + 1];
[ap + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 269 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 7];
[ap + -4] = [[ap + -17] + 8];
[ap + -3] = [[ap + -17] + 9];
[ap + -2] = [[ap + -17] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17] + 7) %}
[ap + 0] = [[ap + -17] + 12], ap++;
jmp rel 239 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 11], ap++;
[ap + 0] = [[ap + -19] + 13], ap++;
[ap + 0] = [ap + -20] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 223 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 198 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 166 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + -1] = [ap + 0] * 4, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 11 if [ap + -2] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 48380, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 83827;
jmp rel 126 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -5] = [[ap + -10] + 1];
[ap + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
[ap + -2] = [[ap + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 6], ap++;
jmp rel 98 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -17] + 7];
[ap + -5] = [[ap + -17] + 8];
[ap + -4] = [[ap + -17] + 9];
[ap + -3] = [[ap + -17] + 10];
[ap + -2] = [[ap + -17] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17] + 7) %}
[ap + 0] = [[ap + -17] + 13], ap++;
jmp rel 69 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -24] + 14];
[ap + -5] = [[ap + -24] + 15];
[ap + -4] = [[ap + -24] + 16];
[ap + -3] = [[ap + -24] + 17];
[ap + -2] = [[ap + -24] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24] + 14) %}
[ap + 0] = [[ap + -24] + 20], ap++;
jmp rel 40 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -31] + 21];
[ap + -5] = [[ap + -31] + 22];
[ap + -4] = [[ap + -31] + 23];
[ap + -3] = [[ap + -31] + 24];
[ap + -2] = [[ap + -31] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -31] + 21) %}
[ap + 0] = [[ap + -31] + 27], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[ap + -32] + 26], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -35] + 28, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -35], ap++;
ret;
[ap + 0] = [[ap + -32] + 26], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -35] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -37] + 28], ap++;
[ap + 0] = [[ap + -38] + 29], ap++;
ret;
[ap + 0] = [[ap + -25] + 19], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 11300, ap++;
[ap + 0] = [ap + -28] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -30] + 21], ap++;
[ap + 0] = [[ap + -31] + 22], ap++;
ret;
[ap + 0] = [[ap + -18] + 12], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -2] + 22600, ap++;
[ap + 0] = [ap + -21] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -23] + 14], ap++;
[ap + 0] = [[ap + -24] + 15], ap++;
ret;
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2] + 33900, ap++;
[ap + 0] = [ap + -14] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 45200, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80303;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 48180, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 49880, ap++;
[ap + 0] = [ap + -10] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [[ap + -13] + 7], ap++;
ret;
call rel 79619;
[ap + 0] = [ap + -7] + 59780, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 9;
[ap + 0] = [[ap + -18] + 11], ap++;
[ap + 0] = [ap + -1] + 60980, ap++;
[ap + 0] = [ap + -20] + 15, ap++;
[ap + 0] = [[ap + -21] + 13], ap++;
[ap + 0] = [[ap + -22] + 14], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 72480, ap++;
[ap + 0] = [ap + -15] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -17] + 7], ap++;
[ap + 0] = [[ap + -18] + 8], ap++;
ret;
call rel 84036;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 83080, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 84780, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 212 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 180 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -5] = [[ap + -11] + 1];
[ap + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 152 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 7];
[ap + -4] = [[ap + -17] + 8];
[ap + -3] = [[ap + -17] + 9];
[ap + -2] = [[ap + -17] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17] + 7) %}
[ap + 0] = [[ap + -17] + 12], ap++;
jmp rel 122 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 11], ap++;
[ap + 0] = [[ap + -19] + 13], ap++;
[ap + 0] = [ap + -20] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 106 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 81 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 49 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + -1] = [ap + 0] * 4, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 11 if [ap + -2] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 3070, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 83888;
jmp rel 10 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80069;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 2870, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 4570, ap++;
[ap + 0] = [ap + -10] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [[ap + -13] + 7], ap++;
ret;
call rel 79385;
[ap + 0] = [ap + -7] + 14470, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 9;
[ap + 0] = [[ap + -18] + 11], ap++;
[ap + 0] = [ap + -1] + 15670, ap++;
[ap + 0] = [ap + -20] + 15, ap++;
[ap + 0] = [[ap + -21] + 13], ap++;
[ap + 0] = [[ap + -22] + 14], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 27170, ap++;
[ap + 0] = [ap + -15] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -17] + 7], ap++;
[ap + 0] = [[ap + -18] + 8], ap++;
ret;
call rel 83802;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 37770, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 39470, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 212 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 180 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -5] = [[ap + -11] + 1];
[ap + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 152 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 7];
[ap + -4] = [[ap + -17] + 8];
[ap + -3] = [[ap + -17] + 9];
[ap + -2] = [[ap + -17] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17] + 7) %}
[ap + 0] = [[ap + -17] + 12], ap++;
jmp rel 122 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 11], ap++;
[ap + 0] = [[ap + -19] + 13], ap++;
[ap + 0] = [ap + -20] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 106 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 81 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 49 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + -1] = [ap + 0] * 4, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 11 if [ap + -2] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 3070, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 84009;
jmp rel 10 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79835;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 2870, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 4570, ap++;
[ap + 0] = [ap + -10] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [[ap + -13] + 7], ap++;
ret;
call rel 79151;
[ap + 0] = [ap + -7] + 14470, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 9;
[ap + 0] = [[ap + -18] + 11], ap++;
[ap + 0] = [ap + -1] + 15670, ap++;
[ap + 0] = [ap + -20] + 15, ap++;
[ap + 0] = [[ap + -21] + 13], ap++;
[ap + 0] = [[ap + -22] + 14], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 27170, ap++;
[ap + 0] = [ap + -15] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -17] + 7], ap++;
[ap + 0] = [[ap + -18] + 8], ap++;
ret;
call rel 83568;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 37770, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 39470, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 212 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 180 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1262491600870307410901822433465257959156747548315585794746688645479519301254, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -5] = [[ap + -11] + 1];
[ap + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 152 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 7];
[ap + -4] = [[ap + -17] + 8];
[ap + -3] = [[ap + -17] + 9];
[ap + -2] = [[ap + -17] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17] + 7) %}
[ap + 0] = [[ap + -17] + 12], ap++;
jmp rel 122 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 11], ap++;
[ap + 0] = [[ap + -19] + 13], ap++;
[ap + 0] = [ap + -20] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 106 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 81 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 49 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + -1] = [ap + 0] * 4, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 11 if [ap + -2] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 3070, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 84130;
jmp rel 10 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79601;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 2870, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 4570, ap++;
[ap + 0] = [ap + -10] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [[ap + -13] + 7], ap++;
ret;
call rel 78917;
[ap + 0] = [ap + -7] + 14470, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 9;
[ap + 0] = [[ap + -18] + 11], ap++;
[ap + 0] = [ap + -1] + 15670, ap++;
[ap + 0] = [ap + -20] + 15, ap++;
[ap + 0] = [[ap + -21] + 13], ap++;
[ap + 0] = [[ap + -22] + 14], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 27170, ap++;
[ap + 0] = [ap + -15] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -17] + 7], ap++;
[ap + 0] = [[ap + -18] + 8], ap++;
ret;
call rel 83334;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 37770, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 39470, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 29980 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768181476, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 1085;
[fp + -6] = [ap + 0] + 29980, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 1043 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 1022;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 975 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 954;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 907 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 886;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 839 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 818;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 771 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 750;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 703 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 682;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 635 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 614;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 567 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 546;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 499 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 478;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 451;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 410 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -19] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -21] + 1], ap++;
[ap + -5] = [[ap + -22] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 386 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -17] + 1];
[ap + 0] = [ap + -17] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 361;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -14] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 320 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -16] + 0], ap++;
[ap + 3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -21] + 2];
jmp rel 292 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 258 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 230 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 186 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -13] + 0], ap++;
[ap + 3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -18] + 2];
jmp rel 158 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 124 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 96 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 83650;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 112627;
[ap + 0] = [ap + -1] + 112626, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 325410 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 325410, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 48;
[ap + -3] = [ap + 0] + 325410, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -200], ap++;
[ap + 0] = [ap + -187], ap++;
[ap + 0] = [ap + -174], ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = [ap + -148], ap++;
[ap + 0] = [ap + -135], ap++;
[ap + 0] = [ap + -122], ap++;
[ap + 0] = [ap + -109], ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -31], ap++;
call rel -26835;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83587;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 83565;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3470, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5080, ap++;
jmp rel 11;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -8] + 5140, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 6750, ap++;
call rel 83544;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83543;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 8150, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -9] + 7680, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 9190, ap++;
call rel 83532;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83531;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 10590, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 10590, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 11900, ap++;
call rel 83520;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 12700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 14010, ap++;
call rel 83510;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 14810, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 16120, ap++;
call rel 83500;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 16920, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 18230, ap++;
call rel 83490;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 19030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 20340, ap++;
call rel 83480;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 21140, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 22450, ap++;
call rel 83470;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 23250, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 24560, ap++;
call rel 83460;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 25360, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 26670, ap++;
call rel 83450;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 27470, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 28780, ap++;
call rel 83440;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83304;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 83217;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 112194;
[ap + 0] = [ap + -1] + 112193, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 63820 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 63820, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 63820, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -25983;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83169;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 83275;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83139;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 83101;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 112078;
[ap + 0] = [ap + -1] + 112077, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 77480;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 82998;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 82987;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 192;
[fp + -6] = [ap + 0] + 4780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 149 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 128;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 82879;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 111855;
[ap + 0] = [ap + -1] + 111854, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 53520, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + -6] = [ap + 0] + [ap + -17], ap++;
call rel -25971;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 82823;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 82928;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 2270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3580, ap++;
call rel 82916;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 82779;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 230;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 187 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 166;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 82691;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 111667;
[ap + 0] = [ap + -1] + 111666, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13410, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 109;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 868064458215670311512433156545729084208212347817222658436416550603225323819, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -20] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 45 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 82564;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 82669;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 82532;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 192;
[fp + -6] = [ap + 0] + 4780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 149 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 128;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 82423;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 111399;
[ap + 0] = [ap + -1] + 111398, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 53520, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + -6] = [ap + 0] + [ap + -17], ap++;
call rel -26063;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 82367;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 82472;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 2270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3580, ap++;
call rel 82460;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 82323;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 230;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 187 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 166;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 82235;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 111211;
[ap + 0] = [ap + -1] + 111210, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13410, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 109;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 1090654979984666118274814236676208321276316261611326539512404368163006837786, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -20] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 45 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 82108;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 82213;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 82076;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 8220 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203236, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 339;
[fp + -6] = [ap + 0] + 8220, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 296 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 275;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 227 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 199 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 165 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 137 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 114;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 92;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 81866;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 110842;
[ap + 0] = [ap + -1] + 110841, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 342190, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -24] + 0];
jmp rel 39;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -23] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -26259;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 81807;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 81894;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 81891;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1630, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3240, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3300, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4910, ap++;
call rel 81868;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 5710, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7020, ap++;
call rel 81857;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 81720;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 13470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768197986, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 540;
[fp + -6] = [ap + 0] + 13470, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 496 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 468 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 434 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 406 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 382;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -11] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 337 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 0], ap++;
[ap + -4] = [[ap + -21] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -22] + 2];
jmp rel 316;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -19] + 0], ap++;
[ap + -3] = [[ap + -20] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -21] + 2];
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 267 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 239 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 205 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 177 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 131 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 110;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
call rel 81365;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 110340;
[ap + 0] = [ap + -1] + 110339, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 296120, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -7] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -8] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 0];
jmp rel 47;
[ap + -8] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -33], ap++;
call rel -24442;
jmp rel 17 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -10] + 300, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 81295;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -8] + 1570, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 2880, ap++;
call rel 81363;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2940, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4550, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4610, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6220, ap++;
call rel 81340;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -8] + 7020, ap++;
jmp rel 5;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -6] + 8330, ap++;
call rel 81328;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 81325;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 9930, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 8990, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 10600, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 10660, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 12270, ap++;
call rel 81301;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 81163;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 11160 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768200296, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 467;
[fp + -6] = [ap + 0] + 11160, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 423 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 402;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 353 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 325 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 291 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 263 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 239;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 9;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 194 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -18] + 0], ap++;
[ap + 3] = [[ap + -19] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -23] + 2];
jmp rel 166 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 132 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 104 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
call rel 80858;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 109833;
[ap + 0] = [ap + -1] + 109832, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 289490, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -7] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -8] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 0];
jmp rel 46;
[ap + -8] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -28], ap++;
call rel -23888;
jmp rel 17 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -10] + 300, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 80789;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 630, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2240, ap++;
jmp rel 11;
[ap + 0] = [ap + -23] + 3, ap++;
[ap + 0] = [ap + -8] + 2300, ap++;
jmp rel 5;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -6] + 3910, ap++;
call rel 80855;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 80852;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 5510, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4570, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6180, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 6240, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7850, ap++;
call rel 80828;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 8650, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 9960, ap++;
call rel 80816;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 80678;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 16890 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768194566, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 645;
[fp + -6] = [ap + 0] + 16890, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 602 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 581;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 533 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 512;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 464 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 443;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 395 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 367 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 333 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 305 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 260 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -13] + 0], ap++;
[ap + 3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -18] + 2];
jmp rel 232 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 198 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 170 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 125 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 104;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 80234;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 109210;
[ap + 0] = [ap + -1] + 109209, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 292760, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 45;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -114], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -31], ap++;
call rel -23565;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 80169;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 80229;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2740, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4350, ap++;
jmp rel 11;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -8] + 4410, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 6020, ap++;
call rel 80207;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 6080, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7690, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 7750, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 9360, ap++;
call rel 80185;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 10160, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 11470, ap++;
call rel 80174;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 12270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 13580, ap++;
call rel 80163;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 14380, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 15690, ap++;
call rel 80152;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 80015;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7720 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203736, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 319;
[fp + -6] = [ap + 0] + 7720, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 276 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 248 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 214 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 186 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 163;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -11] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 0], ap++;
[ap + -4] = [[ap + -21] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -22] + 2];
jmp rel 98;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -19] + 0], ap++;
[ap + -3] = [[ap + -20] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -21] + 2];
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 79813;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 108789;
[ap + 0] = [ap + -1] + 108788, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 247840, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 41;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -26], ap++;
call rel -22516;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 79754;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 79841;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 79839;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10] + 4180, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3240, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4850, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4910, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6520, ap++;
call rel 79816;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 79679;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5410 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206046, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 247;
[fp + -6] = [ap + 0] + 5410, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 204 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 176 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 142 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 114 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 91;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 79528;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 108504;
[ap + 0] = [ap + -1] + 108503, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -1] + 243120, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 40;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -22273;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 79470;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 79575;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10] + 1870, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 930, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2540, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4210, ap++;
call rel 79552;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 79415;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 11500 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768199956, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 107;
[fp + -6] = [ap + 0] + 11500, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 79524;
[ap + 0] = [ap + -69], ap++;
jmp rel 84 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 79369;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 108346;
[ap + 0] = [ap + -1] + 108345, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 42380 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 42380, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -22] + 0];
jmp rel 41;
[ap + -3] = [ap + 0] + 42380, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -21923;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79313;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79428;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -8] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79291;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5210 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206246, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 236;
[fp + -6] = [ap + 0] + 5210, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 214;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 173 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -16] + 0], ap++;
[ap + 3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -21] + 2];
jmp rel 145 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 111 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 83 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 79141;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 108118;
[ap + 0] = [ap + -1] + 108117, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 126520 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 126520, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 35;
[ap + -3] = [ap + 0] + 126520, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -21897;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79091;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 79177;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79176;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 4810, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79039;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 79001;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 107978;
[ap + 0] = [ap + -1] + 107977, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 73610 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 73610, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 73610, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -21256;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78954;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78943;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 78905;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 107882;
[ap + 0] = [ap + -1] + 107881, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 73610 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 73610, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 73610, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -21093;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78858;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78847;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 122;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 78809;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 107786;
[ap + 0] = [ap + -1] + 107785, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 11800 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 74;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 879303759977353020115219435004302732055042107497590674649242571609254067415, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 78720;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78709;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 78671;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 107648;
[ap + 0] = [ap + -1] + 107647, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 73050;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78568;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78557;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 78519;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 107496;
[ap + 0] = [ap + -1] + 107495, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 72898;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78416;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78405;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 78367;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 107344;
[ap + 0] = [ap + -1] + 107343, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 434428485796416085034498104175908286789185203756459893121763025398211911987, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 72746;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78264;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78253;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 78215;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 107192;
[ap + 0] = [ap + -1] + 107191, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 72594;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78112;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 78101;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 78063;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 107040;
[ap + 0] = [ap + -1] + 107039, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 72442;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77960;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77949;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 77911;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 106888;
[ap + 0] = [ap + -1] + 106887, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 523410893316558122378830306191683135863976721326799590270659346354002858736, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 72290;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77808;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77797;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 95;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 77759;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 106736;
[ap + 0] = [ap + -1] + 106735, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 10600 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 10600, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 47;
[ap + -3] = [ap + 0] + 10600, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 760565771580090624121121792023365464265448761272770967981882436800089234901, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 17 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 300, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 77697;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77686;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 77648;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 106625;
[ap + 0] = [ap + -1] + 106624, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 394323579402937197825070278441497235490914917810450857249771331122744639564, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 72824;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77545;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 77534;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 77345;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 106321;
[ap + 0] = [ap + -1] + 106320, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 15, ap++;
[ap + 0] = [ap + -1] + 700760, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -21780;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 77288;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 77373;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 77362;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 77225;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 77035;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 106011;
[ap + 0] = [ap + -1] + 106010, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 628380, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -20558;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76978;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 77063;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 77052;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76915;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3880 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207576, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 158;
[fp + -6] = [ap + 0] + 3880, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 94;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 76827;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 105803;
[ap + 0] = [ap + -1] + 105802, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 9, ap++;
[ap + 0] = [ap + -1] + 413600, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 35;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -24], ap++;
call rel -19594;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76772;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 76877;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76740;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5990 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205466, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 5990, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 160;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 76603;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 105579;
[ap + 0] = [ap + -1] + 105578, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 106480, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 101;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -35] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[ap + -22] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 1], ap++;
[ap + -4] = [[ap + -21] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -23] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -20] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -22] + 2], ap++;
[ap + -7] = [[ap + -23] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -23] + 4, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 71806;
[ap + 0] = [fp + -8] + 6, ap++;
jmp rel 34 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 25 if [ap + -11] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 77050;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1] + 1900, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -14] + 2090, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76482;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 76578;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 3480, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4790, ap++;
call rel 76567;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76430;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 76342;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 105318;
[ap + 0] = [ap + -1] + 105317, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28290, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -19448;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76286;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 76391;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76254;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 76166;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 105142;
[ap + 0] = [ap + -1] + 105141, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28290, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -19429;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76110;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 76215;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76078;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 192;
[fp + -6] = [ap + 0] + 4780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 149 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 128;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 75969;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 104945;
[ap + 0] = [ap + -1] + 104944, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 37830, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + -6] = [ap + 0] + [ap + -17], ap++;
call rel -19434;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75913;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 76018;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 2270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3580, ap++;
call rel 76006;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75869;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 75679;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 104655;
[ap + 0] = [ap + -1] + 104654, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 89870, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -19505;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75622;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 75707;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 75696;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75559;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 75471;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 104447;
[ap + 0] = [ap + -1] + 104446, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28290, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -19188;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75415;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 75520;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 75383;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 75295;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 104272;
[ap + 0] = [ap + -1] + 104271, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -19166;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 75247;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 75353;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 75217;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 75179;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 104156;
[ap + 0] = [ap + -1] + 104155, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1573469280246125620598404798169661829209098040147974068013105990801107484794, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 69558;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 75076;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 75065;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 156;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 113 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 92;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 74978;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 103954;
[ap + 0] = [ap + -1] + 103953, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 37620, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 35;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -19256;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 74925;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 75030;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 74893;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 156;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 113 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 92;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 74805;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 103781;
[ap + 0] = [ap + -1] + 103780, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 37620, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 35;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -19209;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 74752;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 74857;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 74720;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 230;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 187 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 166;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 74632;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 103608;
[ap + 0] = [ap + -1] + 103607, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13410, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 109;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 709245944824791821743656528978744131825438901955834289949420596549526017430, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -20] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 45 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 74505;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 74610;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 74473;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 74332;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 103309;
[ap + 0] = [ap + -1] + 103308, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -19369;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 74283;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 74378;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 74242;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 74204;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 103181;
[ap + 0] = [ap + -1] + 103180, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 994077977828493228676956393598678113301403782311146764536887726995897058816, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 68695;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 68675;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 74025;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 74014;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73976;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102953;
[ap + 0] = [ap + -1] + 102952, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 749525064301342958593240017579288433523232103251443542187819704157909509838, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 68467;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 68447;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73797;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73786;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73646;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102623;
[ap + 0] = [ap + -1] + 102622, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -19550;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73597;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 73692;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73556;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73518;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102495;
[ap + 0] = [ap + -1] + 102494, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1036697010112987795885481709990178917315264254500717406568501259605260695979, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 68009;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 67989;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73339;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73328;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73290;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102267;
[ap + 0] = [ap + -1] + 102266, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 67849;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73187;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73176;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 73138;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 102115;
[ap + 0] = [ap + -1] + 102114, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1186423139533537089827846530073695414305470307342419724096222587041583312528, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 68314;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73035;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73024;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 95;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 72986;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 101963;
[ap + 0] = [ap + -1] + 101962, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 10600 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 10600, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 47;
[ap + -3] = [ap + 0] + 10600, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 863347913503261957104720878708744394926083541396783723686988354578931871543, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 17 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 300, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 72924;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72913;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 164;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 72875;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 101852;
[ap + 0] = [ap + -1] + 101851, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 71730 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 71730, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 116;
[ap + -3] = [ap + 0] + 71730, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -37807;
jmp rel 90 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[ap + -2] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 62 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -13] + 7];
[ap + -2] = [[ap + -13] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13] + 7) %}
[ap + 0] = [[ap + -13] + 10], ap++;
jmp rel 42 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 9], ap++;
[ap + 0] = [[ap + -15] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1801067911730513605445853614530588058510450967142401396424799325072600071309, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -22] + 12];
[ap + -5] = [[ap + -22] + 13];
[ap + -4] = [[ap + -22] + 14];
[ap + -3] = [[ap + -22] + 15];
[ap + -2] = [[ap + -22] + 16];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22] + 12) %}
[ap + 0] = [[ap + -22] + 18], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 17], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -3] + 400, ap++;
[ap + 0] = [ap + -27] + 19, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[ap + -23] + 17], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -25] + 21, ap++;
[ap + 0] = [[ap + -26] + 19], ap++;
[ap + 0] = [[ap + -27] + 20], ap++;
jmp rel 31;
ap += 9;
[ap + 0] = [[ap + -23] + 9], ap++;
[ap + 0] = [ap + -1] + 11310, ap++;
[ap + 0] = [ap + -25] + 13, ap++;
[ap + 0] = [[ap + -26] + 11], ap++;
[ap + 0] = [[ap + -27] + 12], ap++;
jmp rel 20;
ap += 13;
[ap + 0] = [[ap + -23] + 5], ap++;
[ap + 0] = [ap + -1] + 21970, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [[ap + -27] + 8], ap++;
jmp rel 9;
ap += 20;
[ap + 0] = [ap + -25] + 33300, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72744;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72733;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 16240 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768195216, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 563;
[fp + -6] = [ap + 0] + 16240, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 521 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 500;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 453 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 432;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 385 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 364;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 317 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 296;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 249 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 228;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 160;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 113 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 92;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 72352;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 101329;
[ap + 0] = [ap + -1] + 101328, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 103410 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 103410, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 39;
[ap + -3] = [ap + 0] + 103410, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -26], ap++;
call rel -20205;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72298;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 72350;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 3180, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4490, ap++;
call rel 72340;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 5290, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6600, ap++;
call rel 72330;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 7400, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 8710, ap++;
call rel 72320;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 9510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 10820, ap++;
call rel 72310;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 11620, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 12930, ap++;
call rel 72300;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 13730, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 15040, ap++;
call rel 72290;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72154;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 72116;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 101093;
[ap + 0] = [ap + -1] + 101092, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35750 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35750, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 35750, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -20107;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72069;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 72058;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 122;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 72020;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 100997;
[ap + 0] = [ap + -1] + 100996, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 11800 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 74;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 71931;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 71920;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1670 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209786, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 171;
[fp + -6] = [ap + 0] + 1670, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 71882;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 100858;
[ap + 0] = [ap + -1] + 100857, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 23810, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 119;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -3] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 82 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = 987487477892071739885678087625628393443584938265845517311290340822738272931, ap++;
[ap + 0] = [[ap + -2] + 2], ap++;
[ap + -2] = [[fp + -8] + 0];
[ap + -1] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -12] + 0], ap++;
[ap + -4] = [[ap + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -15] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -7] = [[ap + -15] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -6] = [[fp + -5] + 6];
[ap + -5] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
[ap + -4] = [[fp + -5] + 9];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 11], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 10], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4] + 600, ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[fp + -5] + 10], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 18;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 100748;
[ap + 0] = [ap + -1] + 100747, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12710, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -3], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71745;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71733;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 230;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 187 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 166;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 71645;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 100621;
[ap + 0] = [ap + -1] + 100620, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13410, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 109;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 987487477892071739885678087625628393443584938265845517311290340822738272931, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -20] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 45 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 71518;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 71623;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71486;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5370 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206086, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 229;
[fp + -6] = [ap + 0] + 5370, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 206;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 184;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 162;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 140;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 118;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 96;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 71387;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 100363;
[ap + 0] = [ap + -1] + 100362, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 12, ap++;
[ap + 0] = [ap + -1] + 227470, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -44] + 0];
jmp rel 43;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -43] + 0];
[ap + 0] = [ap + -43] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -20442;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71324;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71393;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -11] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71390;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -11] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71387;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -11] + 3170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71384;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -11] + 3770, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71381;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 4370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71378;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 4970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71240;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 2970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 134;
[fp + -6] = [ap + 0] + 2970, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 111;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 89;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 71181;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 100157;
[ap + 0] = [ap + -1] + 100156, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 372960, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -24] + 0];
jmp rel 36;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -23] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -18672;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71125;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71230;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71227;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71089;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 192;
[fp + -6] = [ap + 0] + 4780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 149 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 128;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 70980;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 99956;
[ap + 0] = [ap + -1] + 99955, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 37830, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + -6] = [ap + 0] + [ap + -17], ap++;
call rel -15828;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70924;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71029;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 2270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3580, ap++;
call rel 71017;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70880;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 70791;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 99768;
[ap + 0] = [ap + -1] + 99767, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 36280 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 36280, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 36280, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -15791;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 70743;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 70849;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 70713;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 70626;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 99603;
[ap + 0] = [ap + -1] + 99602, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -15779;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 70578;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 70684;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 70548;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 235;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 192 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 164 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 130 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 102 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 70408;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 99384;
[ap + 0] = [ap + -1] + 99383, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 121720, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 48;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -15850;
jmp rel 25 if [ap + -9] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 70909;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 2800, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70340;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 70434;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70297;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 70209;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 99185;
[ap + 0] = [ap + -1] + 99184, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28290, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -15657;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70153;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 70258;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 70121;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 70033;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 99009;
[ap + 0] = [ap + -1] + 99008, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28290, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -15638;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 69977;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 70082;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 69945;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 173;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 131 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 70457;
jmp rel 109 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 101 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 69864;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 98841;
[ap + 0] = [ap + -1] + 98840, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 99500 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 99500, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 58;
[ap + -3] = [ap + 0] + 99500, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -15610;
[fp + 0] = [ap + -4];
jmp rel 35 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [ap + 0] * 4, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 70489;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 3130, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69791;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 69889;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69753;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 173;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 131 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 70266;
jmp rel 109 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 101 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 69673;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 98650;
[ap + 0] = [ap + -1] + 98649, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 54150 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 54150, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 58;
[ap + -3] = [ap + 0] + 54150, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -15450;
[fp + 0] = [ap + -4];
jmp rel 35 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [ap + 0] * 2, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 70388;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 3090, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69600;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 69698;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69562;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 173;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 131 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 70075;
jmp rel 109 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 101 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 69482;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 98459;
[ap + 0] = [ap + -1] + 98458, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 54150 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 54150, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 58;
[ap + -3] = [ap + 0] + 54150, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -15407;
[fp + 0] = [ap + -4];
jmp rel 35 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [ap + 0] * 2, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 70197;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 3090, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69409;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 69507;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69371;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 173;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 131 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 69884;
jmp rel 109 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 101 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 69291;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 98268;
[ap + 0] = [ap + -1] + 98267, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 54150 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 54150, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 58;
[ap + -3] = [ap + 0] + 54150, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -15364;
[fp + 0] = [ap + -4];
jmp rel 35 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [ap + 0] * 2, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 70006;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 3090, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69218;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 69316;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 69180;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
[fp + -5] = [[fp + -6] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 6], ap++;
jmp rel 96 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 667762922074743212655112191605651022555914490794209966519997349159573672584, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 7];
[ap + -4] = [[fp + -6] + 8];
[ap + -3] = [[fp + -6] + 9];
[ap + -2] = [[fp + -6] + 10];
[fp + -4] = [[fp + -6] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 7) %}
[ap + 0] = [[fp + -6] + 13], ap++;
jmp rel 68 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 163567562514348492070331390455692180584235264620730029616953355796637619313, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 14];
[ap + -4] = [[fp + -6] + 15];
[ap + -3] = [[fp + -6] + 16];
[ap + -2] = [[fp + -6] + 17];
[fp + -3] = [[fp + -6] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 14) %}
[ap + 0] = [[fp + -6] + 20], ap++;
jmp rel 40 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 21];
[ap + -5] = [[fp + -6] + 22];
[ap + -4] = [[fp + -6] + 23];
[ap + -3] = [[fp + -6] + 24];
[ap + -2] = [[fp + -6] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 21) %}
[ap + 0] = [[fp + -6] + 27], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -6] + 28, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -6] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -6] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 28], ap++;
[ap + 0] = [[fp + -6] + 29], ap++;
ret;
ap += 7;
[ap + 0] = [[fp + -6] + 19], ap++;
[ap + 0] = [ap + -1] + 11130, ap++;
[ap + 0] = [fp + -6] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 21], ap++;
[ap + 0] = [[fp + -6] + 22], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [ap + -1] + 22270, ap++;
[ap + 0] = [fp + -6] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 14], ap++;
[ap + 0] = [[fp + -6] + 15], ap++;
ret;
ap += 19;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -1] + 33410, ap++;
[ap + 0] = [fp + -6] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
ret;
ap += 3;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -13] = [[fp + -10] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 3], ap++;
jmp rel 966 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 2], ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -10] + 5];
[ap + -9] = [[fp + -10] + 6];
[ap + -8] = [[fp + -10] + 7];
[ap + -7] = [[fp + -10] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 5) %}
[ap + 0] = [[fp + -10] + 10], ap++;
jmp rel 924 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [fp + -10] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -14] + 0], ap++;
[ap + -4] = [[fp + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -14] + 2];
jmp rel 883;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -14] + 0], ap++;
[ap + -3] = [[fp + -14] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -14] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 848 if [ap + -3] != 0;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -3] = [[fp + -11] + 1];
[ap + 0] = [[fp + -11] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[fp + 1] = [fp + -11] + 3;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -23] + 0];
[ap + -4] = [[ap + -23] + 1];
[ap + -3] = [[ap + -23] + 2];
[ap + -5] = [[ap + -23] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -23]) %}
[ap + 0] = [[ap + -23] + 5], ap++;
jmp rel 774 if [ap + -1] != 0;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [[ap + -25] + 6], ap++;
[fp + 2] = [ap + -26] + 7;
[ap + 0] = [ap + -2], ap++;
jmp rel 743 if [ap + -2] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 28;
[ap + -1] = [[ap + -10] + 0];
call rel 97896;
[ap + 0] = [ap + -1] + 97895, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 225550, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 69737;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -19] + [ap + -8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = 16777216, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -5], memory[ap + -1]) %}
[ap + 4] = [[ap + -12] + 1], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -15] + 2], ap++;
[ap + -1] = [[ap + -16] + 3], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -5] = [ap + -3] + [ap + -1];
[ap + 0] = 16777215, ap++;
[fp + -5] = [[fp + -12] + 0];
[ap + -1] = [[fp + -12] + 1];
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -12], ap++;
[fp + 0] = [fp + -12] + 5;
[ap + -5] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 4];
jmp rel 652;
[ap + -1] = [[ap + -22] + 4];
[ap + 0] = [ap + -22] + 5, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
call rel 69699;
jmp rel 625 if [ap + -3] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 85;
[ap + -1] = [[ap + -9] + 0];
call rel 97821;
[ap + 0] = [ap + -1] + 97820, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 1680, ap++;
[ap + 0] = [ap + -9] + [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 667762922074743212655112191605651022555914490794209966519997349159573672584, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + 2] + 0];
[ap + -5] = [[fp + 2] + 1];
[ap + -4] = [[fp + 2] + 2];
[ap + -3] = [[fp + 2] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 2]) %}
[ap + 0] = [[fp + 2] + 5], ap++;
jmp rel 38 if [ap + -1] != 0;
[ap + 0] = [[fp + 2] + 4], ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[fp + -8] = [ap + 0] + [ap + -1], ap++;
[ap + 0] = [fp + 2] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 120;
call rel 97783;
[ap + 0] = [ap + -1] + 97782, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 206660, ap++;
call rel 69700;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -15] + [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[fp + 2] + 4], ap++;
call rel 97760;
[ap + 0] = [ap + -1] + 97759, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 207860, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + 0] = [[fp + 2] + 7], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[fp + -3] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 497;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + 1] + 0];
[ap + -2] = [[fp + 1] + 1];
[ap + 0] = [[fp + 1] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 2], ap++;
[ap + -4] = [[ap + -21] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -23] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -22] + 3], ap++;
[ap + -7] = [[ap + -23] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1] + 3, ap++;
[ap + 0] = [ap + -26] + 5, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + 2] + 0];
[ap + -5] = [[fp + 2] + 1];
[ap + -4] = [[fp + 2] + 2];
[ap + -6] = [[fp + 2] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 2]) %}
[ap + 0] = [[fp + 2] + 5], ap++;
jmp rel 424 if [ap + -1] != 0;
[ap + 0] = [[fp + 2] + 4], ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + -1] = [ap + 0] + [fp + -8], ap++;
[ap + 0] = [fp + 2] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 394 if [ap + -3] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -3] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -16] = [[ap + -14] + 1];
[ap + -4] = [[ap + -14] + 2];
[ap + -5] = [[ap + -14] + 3];
[fp + -9] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 318 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 1025310123145470443248164887320592303314351953140339051646286095766923394624, ap++;
[ap + -1] = [[ap + -6] + 0];
[fp + -9] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 69501;
[ap + 0] = [ap + -97] + 3, ap++;
jmp rel 239 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 223 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[ap + -3] = [[ap + -11] + 2];
[ap + -2] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 182 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 143 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -19] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + -6] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -24] + 2];
jmp rel 12;
[ap + -1] = [[ap + -23] + 2];
ap += 8;
[ap + 0] = [ap + -31] + 3, ap++;
[ap + 0] = [ap + -12] + 11220, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 24;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = [ap + -27] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -5] = [[ap + -13] + 1];
[ap + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
[fp + -3] = [[ap + -13] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 6], ap++;
jmp rel 81 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 69751;
jmp rel 56 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 70305;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -2] = [[ap + -25] + 1];
[ap + -6] = [[ap + -25] + 2];
[ap + -5] = [[ap + -25] + 3];
[ap + -4] = [[ap + -25] + 4];
[ap + -3] = [[ap + -25] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25]) %}
[ap + 0] = [[ap + -25] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
ret;
[ap + 0] = [[ap + -26] + 6], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -33] + 8], ap++;
[ap + 0] = [[ap + -34] + 9], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 13700, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[ap + -14] + 5], ap++;
call rel 97399;
[ap + 0] = [ap + -1] + 97398, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 85050, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -27] + 7], ap++;
[ap + 0] = [[ap + -28] + 8], ap++;
ret;
call rel 97380;
[ap + 0] = [ap + -1] + 97379, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 95050, ap++;
call rel 63646;
[ap + 0] = [ap + -37] + 3, ap++;
[ap + 0] = [ap + -21] + [ap + -8], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 16;
[ap + 0] = [[ap + -28] + 4], ap++;
call rel 97359;
[ap + 0] = [ap + -1] + 97358, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 97100, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -37] + 8, ap++;
[ap + 0] = [[ap + -38] + 6], ap++;
[ap + 0] = [[ap + -39] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 97335;
[ap + 0] = [ap + -1] + 97334, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 108560, ap++;
[ap + 0] = [ap + -7] + [ap + -1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 15;
ap += 1;
call rel 97320;
[ap + 0] = [ap + -1] + 97319, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 108750, ap++;
[ap + 0] = [ap + -14] + [ap + -1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[ap + -15] + 5], ap++;
call rel 97298;
[ap + 0] = [ap + -1] + 97297, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 194050, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -27] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
[ap + 0] = [[ap + -30] + 8], ap++;
ret;
call rel 97277;
[ap + 0] = [ap + -1] + 97276, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 206560, ap++;
call rel 69194;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -15] + [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[fp + 2] + 4], ap++;
call rel 97254;
[ap + 0] = [ap + -1] + 97253, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 207760, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + 2] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 2] + 6], ap++;
[ap + 0] = [[fp + 2] + 7], ap++;
ret;
call rel 97233;
[ap + 0] = [ap + -1] + 97232, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 219670, ap++;
call rel 70108;
[ap + 0] = [ap + -28] + 2, ap++;
[ap + 0] = [ap + -18] + [ap + -8], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 97210;
[ap + 0] = [ap + -1] + 97209, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 221410, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12] + [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 19;
call rel 97194;
[ap + 0] = [ap + -1] + 97193, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 222980, ap++;
call rel 70069;
[ap + 0] = [ap + -36] + 5, ap++;
[ap + 0] = [ap + -18] + [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 97167;
[ap + 0] = [ap + -1] + 97166, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 226120, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 70049;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -17] + [ap + -8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[ap + -24] + 4], ap++;
call rel 97142;
[ap + 0] = [ap + -1] + 97141, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 227210, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -38] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 6], ap++;
[ap + 0] = [[ap + -41] + 7], ap++;
ret;
call rel 97119;
[ap + 0] = [ap + -1] + 97118, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 238710, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 70010;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17] + [ap + -8], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
call rel 97098;
[ap + 0] = [ap + -1] + 97097, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 238810, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
call rel 62563;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = [ap + -23] + [ap + -8], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[fp + -10] + 9], ap++;
call rel 97075;
[ap + 0] = [ap + -1] + 97074, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 241020, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -10] + 13, ap++;
[ap + 0] = [[fp + -10] + 11], ap++;
[ap + 0] = [[fp + -10] + 12], ap++;
jmp rel 21;
[ap + 0] = [[fp + -10] + 2], ap++;
call rel 97054;
[ap + 0] = [ap + -1] + 97053, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 252820, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -10] + 6, ap++;
[ap + 0] = [[fp + -10] + 4], ap++;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 145 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 33 if [ap + -3] != 0;
ap += 111;
call rel 96968;
[ap + 0] = [ap + -1] + 96967, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 86510, ap++;
call rel 68813;
[ap + 0] = [ap + -130], ap++;
[ap + 0] = [ap + -125] + [ap + -8], ap++;
[ap + 0] = [ap + -133], ap++;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = 1025310123145470443248164887320592303314351953140339051646286095766923394624, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 69810;
[ap + 0] = [ap + -129] + 3, ap++;
jmp rel 38 if [ap + -10] != 0;
[ap + 0] = [ap + -12], ap++;
jmp rel 16 if [ap + -10] != 0;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 120;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 96831;
[ap + 0] = [ap + -1] + 96830, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 87520, ap++;
[ap + 0] = [ap + -130], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -133], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
ret;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 62952;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 113 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 23 if [ap + -3] != 0;
ap += 120;
call rel 96596;
[ap + 0] = [ap + -1] + 96595, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 87520, ap++;
[ap + 0] = [ap + -133], ap++;
[ap + 0] = [ap + -128] + [ap + -2], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1025310123145470443248164887320592303314351953140339051646286095766923394624, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -16] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -7] = [[ap + -16] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 69448;
[ap + 0] = [ap + -129] + 3, ap++;
jmp rel 23 if [ap + -10] != 0;
[ap + 0] = [ap + -12], ap++;
jmp rel 15 if [ap + -10] != 0;
ap += 3;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -13] + 190, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 123;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 96491;
[ap + 0] = [ap + -1] + 96490, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 87890, ap++;
[ap + 0] = [ap + -133], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 69276;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 61838;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 61744;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 6020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 241;
[fp + -6] = [ap + 0] + 6020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 199 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 178;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 151;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -19] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -21] + 1], ap++;
[ap + -5] = [[ap + -22] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 86 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -17] + 1];
[ap + 0] = [ap + -17] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 67127;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 96104;
[ap + 0] = [ap + -1] + 96103, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 45400 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 45400, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 35;
[ap + -3] = [ap + 0] + 45400, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -2067;
[ap + 0] = [ap + -46] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 67077;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 67165;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67164;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 3510, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 3510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4820, ap++;
call rel 67153;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 67017;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 12000 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768199456, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 124;
[fp + -6] = [ap + 0] + 12000, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 69545;
[ap + 0] = [ap + -69], ap++;
jmp rel 99 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
call rel 66972;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 95947;
[ap + 0] = [ap + -1] + 95946, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 266550, ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -7] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -8] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -27] + 0];
jmp rel 46;
[ap + -8] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
call rel -2117;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -10] + 200, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 66903;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 67016;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel 66877;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 3610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 170;
[fp + -6] = [ap + 0] + 3610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 127 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 103 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 66787;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 95763;
[ap + 0] = [ap + -1] + 95762, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 105330, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 46;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -1290;
jmp rel 24 if [ap + -8] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 69696;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + 2100, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 66721;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 900, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2410, ap++;
call rel 66826;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 66689;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 204;
[fp + -6] = [ap + 0] + 3510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 161 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 137 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 66600;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 95576;
[ap + 0] = [ap + -1] + 95575, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12210, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 82;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -17] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -24] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 18 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3] + 300, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 66500;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2310, ap++;
call rel 66605;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 66468;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 66429;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 95406;
[ap + 0] = [ap + -1] + 95405, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 61605;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 66326;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 66315;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 161;
[fp + -6] = [ap + 0] + 3610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 94 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 66227;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 95203;
[ap + 0] = [ap + -1] + 95202, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 103330, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -1478;
jmp rel 15 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 200, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 66170;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 900, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2410, ap++;
call rel 66275;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 66138;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 66050;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 95027;
[ap + 0] = [ap + -1] + 95026, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -1469;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 66002;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 66108;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 65972;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 65934;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 94911;
[ap + 0] = [ap + -1] + 94910, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 60313;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 65831;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 65820;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -10] = [[fp + -9] + 1];
[ap + -3] = [[fp + -9] + 2];
[ap + -2] = [[fp + -9] + 3];
[fp + -8] = [[fp + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 6], ap++;
jmp rel 199 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -9] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -7], ap++;
call rel 68746;
jmp rel 167 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 156 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel [fp + -7];
jmp rel 19;
jmp rel 10;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 3652501241, ap++;
[ap + 0] = 10628944869218562084050143519444549580389464591454674019345556079, ap++;
jmp rel 15;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 118034699, ap++;
[ap + 0] = 969166842145694355898879064562217049827305169495536240246191507779, ap++;
jmp rel 8;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 4206867930, ap++;
[ap + 0] = 8154142684220187899712437956956085183, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 779633036333210596272271987671964396375339327212352681668431549906787458932, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -6] = [[ap + -13] + 1];
[ap + -3] = [[ap + -13] + 2];
[ap + -2] = [[ap + -13] + 3];
[ap + -5] = [[ap + -13] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 6], ap++;
jmp rel 102 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 667762922074743212655112191605651022555914490794209966519997349159573672584, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -4] = [[ap + -19] + 8];
[ap + -3] = [[ap + -19] + 9];
[ap + -2] = [[ap + -19] + 10];
[ap + -10] = [[ap + -19] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 13], ap++;
jmp rel 73 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 14];
[ap + -5] = [[ap + -26] + 15];
[ap + -4] = [[ap + -26] + 16];
[ap + -3] = [[ap + -26] + 17];
[ap + -2] = [[ap + -26] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26] + 14) %}
[ap + 0] = [[ap + -26] + 20], ap++;
jmp rel 42 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 21];
[ap + -5] = [[ap + -33] + 22];
[ap + -4] = [[ap + -33] + 23];
[ap + -3] = [[ap + -33] + 24];
[ap + -2] = [[ap + -33] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 21) %}
[ap + 0] = [[ap + -33] + 27], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 26], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -37] + 28, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -34] + 26], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -37] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -39] + 28], ap++;
[ap + 0] = [[ap + -40] + 29], ap++;
ret;
ap += 7;
[ap + 0] = [[ap + -34] + 19], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2] + 11130, ap++;
[ap + 0] = [ap + -37] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -39] + 21], ap++;
[ap + 0] = [[ap + -40] + 22], ap++;
ret;
ap += 14;
[ap + 0] = [[ap + -34] + 12], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2] + 22360, ap++;
[ap + 0] = [ap + -37] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -39] + 14], ap++;
[ap + 0] = [[ap + -40] + 15], ap++;
ret;
ap += 20;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2] + 33500, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -39] + 7], ap++;
[ap + 0] = [[ap + -40] + 8], ap++;
ret;
ap += 26;
[ap + 0] = [ap + -27] + 44840, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
jmp rel 8;
ap += 27;
[ap + 0] = [ap + -33] + 45130, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 106;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -2] + 106350, ap++;
[ap + 0] = [fp + -9] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 7], ap++;
[ap + 0] = [[fp + -9] + 8], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 357 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 324 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 292;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 266 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
call rel 68883;
jmp rel 241 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 230 if [ap + -7] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -5] = [[ap + -14] + 1];
[ap + -4] = [[ap + -14] + 2];
[ap + -3] = [[ap + -14] + 3];
[ap + -2] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 200 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel [ap + -11];
jmp rel 19;
jmp rel 10;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 3652501241, ap++;
[ap + 0] = 10628944869218562084050143519444549580389464591454674019345556079, ap++;
jmp rel 15;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 118034699, ap++;
[ap + 0] = 969166842145694355898879064562217049827305169495536240246191507779, ap++;
jmp rel 8;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 4206867930, ap++;
[ap + 0] = 8154142684220187899712437956956085183, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 779633036333210596272271987671964396375339327212352681668431549906787458932, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -6] = [[ap + -8] + 1];
[ap + -3] = [[ap + -8] + 2];
[ap + -2] = [[ap + -8] + 3];
[ap + -5] = [[ap + -8] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 6], ap++;
jmp rel 143 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 667762922074743212655112191605651022555914490794209966519997349159573672584, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 7];
[ap + -4] = [[ap + -14] + 8];
[ap + -3] = [[ap + -14] + 9];
[ap + -2] = [[ap + -14] + 10];
[ap + -10] = [[ap + -14] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14] + 7) %}
[ap + 0] = [[ap + -14] + 13], ap++;
jmp rel 114 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 14];
[ap + -5] = [[ap + -21] + 15];
[ap + -4] = [[ap + -21] + 16];
[ap + -3] = [[ap + -21] + 17];
[ap + -2] = [[ap + -21] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 14) %}
[ap + 0] = [[ap + -21] + 20], ap++;
jmp rel 83 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1765908283277496344688841180082140943953894109846608098189093375020781927514, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -27] + 21];
[ap + -4] = [[ap + -27] + 22];
[ap + -3] = [[ap + -27] + 23];
[ap + -2] = [[ap + -27] + 24];
[ap + -23] = [[ap + -27] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -27] + 21) %}
[ap + 0] = [[ap + -27] + 27], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[ap + -28] + 26], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 122537050860645, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 69078;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -53] + 28];
[ap + -2] = [[ap + -53] + 29];
[ap + -6] = [[ap + -53] + 30];
[ap + -5] = [[ap + -53] + 31];
[ap + -4] = [[ap + -53] + 32];
[ap + -3] = [[ap + -53] + 33];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -53] + 28) %}
[ap + 0] = [[ap + -53] + 35], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -54] + 34], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -57] + 36, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -54] + 34], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -57] + 38, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 36], ap++;
[ap + 0] = [[ap + -60] + 37], ap++;
ret;
ap += 26;
[ap + 0] = [[ap + -54] + 26], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 13740, ap++;
[ap + 0] = [ap + -57] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 28], ap++;
[ap + 0] = [[ap + -60] + 29], ap++;
ret;
ap += 32;
[ap + 0] = [[ap + -54] + 19], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 24880, ap++;
[ap + 0] = [ap + -57] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 21], ap++;
[ap + 0] = [[ap + -60] + 22], ap++;
ret;
ap += 39;
[ap + 0] = [[ap + -54] + 12], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 36110, ap++;
[ap + 0] = [ap + -57] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 14], ap++;
[ap + 0] = [[ap + -60] + 15], ap++;
ret;
ap += 45;
[ap + 0] = [[ap + -54] + 5], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 47250, ap++;
[ap + 0] = [ap + -57] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 7], ap++;
[ap + 0] = [[ap + -60] + 8], ap++;
ret;
ap += 55;
[ap + 0] = [[ap + -70] + 5], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -2] + 59050, ap++;
[ap + 0] = [ap + -73] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
[ap + 0] = [[ap + -76] + 8], ap++;
ret;
ap += 59;
[ap + 0] = [ap + -60] + 69910, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
jmp rel 8;
ap += 60;
[ap + 0] = [ap + -69] + 70200, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 148;
call rel 69045;
[ap + 0] = [ap + -156], ap++;
[ap + 0] = [ap + -156] + 132070, ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 150;
call rel 59702;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -164] + 132150, ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 165;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 134210, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 177;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 145890, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 114 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 15 if [ap + -1] != 0;
ap += 16;
call rel 68965;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27] + 12350, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[ap + -3] = [[ap + -10] + 2];
[ap + -2] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 60357;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -30] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -32] + 6], ap++;
[ap + 0] = [[ap + -33] + 7], ap++;
ret;
ap += 29;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13920, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 66 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 12 if [ap + -1] != 0;
call rel 68829;
[ap + 0] = [ap + -10] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1765908283277496344688841180082140943953894109846608098189093375020781927514, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[ap + -3] = [[ap + -10] + 2];
[ap + -2] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
ret;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 11870, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 21 if [ap + -1] != 0;
call rel 68740;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -10] + 360, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1] + 1470, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -14] = [[fp + -12] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12]) %}
[ap + 0] = [[fp + -12] + 3], ap++;
jmp rel 378 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 2], ap++;
[ap + 0] = [[fp + -12] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -12] + 5];
[ap + -9] = [[fp + -12] + 6];
[ap + -8] = [[fp + -12] + 7];
[ap + -7] = [[fp + -12] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 5) %}
[ap + 0] = [[fp + -12] + 10], ap++;
jmp rel 338 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 9], ap++;
[ap + 0] = [[fp + -12] + 11], ap++;
[ap + 0] = [fp + -12] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -15] + 0], ap++;
[ap + -4] = [[fp + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -15] + 2];
jmp rel 299;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -15] + 0], ap++;
[ap + -3] = [[fp + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -15] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -15] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 266 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 231 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 23 if [ap + -1] != 0;
ap += 41;
call rel 93763;
[ap + 0] = [ap + -1] + 93762, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26840, ap++;
call rel 68572;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -58] + [ap + -8], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 25;
[ap + -1] = [[ap + -19] + 0];
ap += 37;
call rel 93730;
[ap + 0] = [ap + -1] + 93729, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26310, ap++;
call rel 68548;
[ap + 0] = [ap + -68] + 1, ap++;
[ap + 0] = [ap + -53] + [ap + -8], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 1];
jmp rel 25;
[ap + -1] = [[ap + -24] + 1];
ap += 32;
call rel 93696;
[ap + 0] = [ap + -1] + 93695, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25590, ap++;
call rel 68523;
[ap + 0] = [ap + -68] + 2, ap++;
[ap + 0] = [ap + -48] + [ap + -8], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 745491264781582771719330910000109646431557734445668861291943495712878857246, ap++;
[ap + -1] = [[fp + -13] + 0];
[fp + -5] = [[fp + -13] + 1];
[ap + 0] = [[fp + -13] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -31] + 2], ap++;
[ap + -4] = [[ap + -32] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -34] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -31] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -33] + 3], ap++;
[ap + -7] = [[ap + -34] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [ap + -38] + 5, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -31] + 0];
[ap + -6] = [[ap + -31] + 1];
[ap + -5] = [[ap + -31] + 2];
[ap + -7] = [[ap + -31] + 3];
[ap + -4] = [[ap + -31] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -31]) %}
[ap + 0] = [[ap + -31] + 6], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[ap + -32] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 68325;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -57] + 7];
[ap + -2] = [[ap + -57] + 8];
[ap + -6] = [[ap + -57] + 9];
[ap + -5] = [[ap + -57] + 10];
[ap + -4] = [[ap + -57] + 11];
[ap + -3] = [[ap + -57] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -57] + 7) %}
[ap + 0] = [[ap + -57] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -58] + 13], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -62] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -58] + 13], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -62] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -64] + 15], ap++;
[ap + 0] = [[ap + -65] + 16], ap++;
ret;
ap += 26;
[ap + 0] = [[ap + -58] + 5], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13740, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -62] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -64] + 7], ap++;
[ap + 0] = [[ap + -65] + 8], ap++;
ret;
ap += 54;
[ap + 0] = [[ap + -69] + 4], ap++;
call rel 93554;
[ap + 0] = [ap + -1] + 93553, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28410, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -79] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -81] + 6], ap++;
[ap + 0] = [[ap + -82] + 7], ap++;
ret;
ap += 49;
call rel 93534;
[ap + 0] = [ap + -1] + 93533, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38260, ap++;
call rel 68334;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63] + [ap + -8], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 51;
call rel 93515;
[ap + 0] = [ap + -1] + 93514, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 38340, ap++;
call rel 58984;
[ap + 0] = [fp + -15] + 3, ap++;
[ap + 0] = [ap + -71] + [ap + -8], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 66;
[ap + 0] = [[fp + -12] + 9], ap++;
call rel 93494;
[ap + 0] = [ap + -1] + 93493, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 40400, ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -12] + 13, ap++;
[ap + 0] = [[fp + -12] + 11], ap++;
[ap + 0] = [[fp + -12] + 12], ap++;
jmp rel 19;
ap += 78;
[ap + 0] = [[fp + -12] + 2], ap++;
call rel 93475;
[ap + 0] = [ap + -1] + 93474, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 52080, ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -12] + 6, ap++;
[ap + 0] = [[fp + -12] + 4], ap++;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 64 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 21 if [ap + -1] != 0;
call rel 68235;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -10] + 540, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1] + 1470, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -12] = [[fp + -11] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11]) %}
[ap + 0] = [[fp + -11] + 3], ap++;
jmp rel 438 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 2], ap++;
[ap + 0] = [[fp + -11] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -11] + 5];
[ap + -9] = [[fp + -11] + 6];
[ap + -8] = [[fp + -11] + 7];
[ap + -7] = [[fp + -11] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11] + 5) %}
[ap + 0] = [[fp + -11] + 10], ap++;
jmp rel 405 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 9], ap++;
[ap + 0] = [[fp + -11] + 11], ap++;
[ap + 0] = [fp + -11] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -13] + 0], ap++;
[ap + -4] = [[fp + -13] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -13] + 2];
jmp rel 373;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -13] + 0], ap++;
[ap + -3] = [[fp + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -13] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 347 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 320 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 15 if [ap + -1] != 0;
ap += 66;
call rel 68074;
[ap + 0] = [ap + -87], ap++;
[ap + 0] = [ap + -77] + 50360, ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -10], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 17;
[ap + -1] = [[ap + -19] + 0];
ap += 62;
call rel 68076;
[ap + 0] = [ap + -87] + 1, ap++;
[ap + 0] = [ap + -72] + 49830, ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 1];
jmp rel 17;
[ap + -1] = [[ap + -24] + 1];
ap += 57;
call rel 68059;
[ap + 0] = [ap + -87] + 2, ap++;
[ap + 0] = [ap + -67] + 49110, ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -30] + 2];
jmp rel 17;
[ap + -1] = [[ap + -29] + 2];
ap += 52;
call rel 68042;
[ap + 0] = [ap + -87] + 3, ap++;
[ap + 0] = [ap + -62] + 48390, ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = [ap + -33] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -5] = [[ap + -26] + 1];
[ap + -4] = [[ap + -26] + 2];
[ap + -3] = [[ap + -26] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 5], ap++;
jmp rel 174 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [ap + -29] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 140 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + -6] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 2];
jmp rel 12;
[ap + -1] = [[ap + -12] + 2];
ap += 14;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [ap + -18] + 22360, ap++;
[ap + 0] = [ap + -23], ap++;
jmp rel 40;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -5] = [[ap + -13] + 1];
[ap + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
[fp + -3] = [[ap + -13] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 6], ap++;
jmp rel 85 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1765908283277496344688841180082140943953894109846608098189093375020781927514, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -4] = [[ap + -19] + 8];
[ap + -3] = [[ap + -19] + 9];
[ap + -2] = [[ap + -19] + 10];
[fp + -4] = [[ap + -19] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 13], ap++;
jmp rel 56 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 12], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 14, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 67770;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -25] = [[ap + -24] + 1];
[ap + -5] = [[ap + -24] + 2];
[ap + -4] = [[ap + -24] + 3];
[ap + -3] = [[ap + -24] + 4];
[ap + -2] = [[ap + -24] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 7], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 6], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -28] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -25] + 6], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -28] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -30] + 8], ap++;
[ap + 0] = [[ap + -31] + 9], ap++;
ret;
ap += 28;
[ap + 0] = [[ap + -48] + 12], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -2] + 13920, ap++;
[ap + 0] = [ap + -51] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -53] + 14], ap++;
[ap + 0] = [[ap + -54] + 15], ap++;
ret;
ap += 34;
[ap + 0] = [[ap + -48] + 5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -2] + 25060, ap++;
[ap + 0] = [ap + -51] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -53] + 7], ap++;
[ap + 0] = [[ap + -54] + 8], ap++;
ret;
ap += 29;
call rel 59265;
[ap + 0] = [ap + -49] + 3, ap++;
[ap + 0] = [ap + -44] + 35110, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 45;
[ap + 0] = [[ap + -72] + 4], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 37260, ap++;
[ap + 0] = [ap + -75] + 8, ap++;
[ap + 0] = [[ap + -76] + 6], ap++;
[ap + 0] = [[ap + -77] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 79;
[ap + 0] = [[ap + -94] + 4], ap++;
[ap + 0] = [ap + -87], ap++;
[ap + 0] = [ap + -2] + 51930, ap++;
[ap + 0] = [ap + -97] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -99] + 6], ap++;
[ap + 0] = [[ap + -100] + 7], ap++;
ret;
ap += 74;
call rel 67755;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -82] + 61780, ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 76;
call rel 58412;
[ap + 0] = [fp + -13] + 3, ap++;
[ap + 0] = [ap + -90] + 61860, ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 91;
[ap + 0] = [[fp + -11] + 9], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -2] + 63920, ap++;
[ap + 0] = [fp + -11] + 13, ap++;
[ap + 0] = [[fp + -11] + 11], ap++;
[ap + 0] = [[fp + -11] + 12], ap++;
jmp rel 12;
ap += 103;
[ap + 0] = [[fp + -11] + 2], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -2] + 75600, ap++;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = [[fp + -11] + 4], ap++;
[ap + 0] = [[fp + -11] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 164 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 131 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 99;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 73 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 12 if [ap + -1] != 0;
call rel 67615;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -11] + 540, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 13;
[ap + 0] = [[ap + -28] + 4], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -2] + 1470, ap++;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -33] + 6], ap++;
[ap + 0] = [[ap + -34] + 7], ap++;
ret;
ap += 8;
call rel 67568;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16] + 11320, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 10;
call rel 58225;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -24] + 11400, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 25;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 13460, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 37;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 25140, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 11 if [ap + -1] != 0;
call rel 67490;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -10] + 540, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1] + 1470, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 11 if [ap + -1] != 0;
call rel 67423;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 5;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -10] + 450, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -1] + 1470, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 269 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 229 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 190;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 157 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 122 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 23 if [ap + -1] != 0;
ap += 6;
call rel 92475;
[ap + 0] = [ap + -1] + 92474, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 11650, ap++;
call rel 67284;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -23] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = 836479067992782184641724601653471291068150613101661572383860787367006316385, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -22] + 0], ap++;
[ap + -4] = [[ap + -23] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -25] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -22] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -24] + 1], ap++;
[ap + -7] = [[ap + -25] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + -12] = [ap + 0] * 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -22] + 0];
[ap + -6] = [[ap + -22] + 1];
[ap + -5] = [[ap + -22] + 2];
[ap + -7] = [[ap + -22] + 3];
[ap + -4] = [[ap + -22] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22]) %}
[ap + 0] = [[ap + -22] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -23] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -27] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
[ap + 0] = [[ap + -30] + 8], ap++;
ret;
ap += 19;
[ap + 0] = [[ap + -34] + 4], ap++;
call rel 92375;
[ap + 0] = [ap + -1] + 92374, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13220, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -44] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [[ap + -47] + 7], ap++;
ret;
ap += 14;
call rel 92355;
[ap + 0] = [ap + -1] + 92354, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 23070, ap++;
call rel 67155;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28] + [ap + -8], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 58;
ap += 16;
call rel 92336;
[ap + 0] = [ap + -1] + 92335, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 23150, ap++;
call rel 57805;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -36] + [ap + -8], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 31;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 92315;
[ap + 0] = [ap + -1] + 92314, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25210, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 19;
ap += 43;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 92296;
[ap + 0] = [ap + -1] + 92295, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 36890, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 136 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 23 if [ap + -1] != 0;
ap += 10;
call rel 92237;
[ap + 0] = [ap + -1] + 92236, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12110, ap++;
call rel 67046;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -27] + [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 745491264781582771719330910000109646431557734445668861291943495712878857246, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -5] = [[ap + -20] + 1];
[ap + -4] = [[ap + -20] + 2];
[ap + -6] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 30 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
ret;
ap += 6;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 640, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -33] + 6], ap++;
[ap + 0] = [[ap + -34] + 7], ap++;
ret;
ap += 23;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 92123;
[ap + 0] = [ap + -1] + 92122, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13680, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 119 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 15 if [ap + -1] != 0;
ap += 21;
call rel 66886;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -32] + 12900, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[ap + -3] = [[ap + -10] + 2];
[ap + -2] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 16;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -20] + 1710, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel 58277;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 16;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 2050, ap++;
[ap + 0] = [ap + -30] + 8, ap++;
[ap + 0] = [[ap + -31] + 6], ap++;
[ap + 0] = [[ap + -32] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 34;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 14470, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 66670;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 57327;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 57233;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -8] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 180 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -9] = [[fp + -7] + 6];
[ap + -8] = [[fp + -7] + 7];
[ap + -7] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 147 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 115;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 89 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
call rel 66051;
jmp rel 64 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 53 if [ap + -7] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 65631;
jmp rel 23 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 15 if [ap + -4] != 0;
ap += 3;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -7] + 190, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 77;
[ap + 0] = [ap + -78] + 61040, ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -81], ap++;
jmp rel 8;
ap += 78;
[ap + 0] = [ap + -87] + 61330, ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 166;
call rel 66390;
[ap + 0] = [ap + -174], ap++;
[ap + 0] = [ap + -174] + 123200, ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 168;
call rel 57047;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -182] + 123280, ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 183;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -2] + 125340, ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
jmp rel 12;
ap += 195;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -2] + 137020, ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
call rel 65909;
jmp rel 22 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 14 if [ap + -7] != 0;
ap += 3;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -10] + 190, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 28 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 640, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 9120 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202336, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 359;
[fp + -6] = [ap + 0] + 9120, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 317 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 296;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 248 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 10 if [ap + -2] != 0;
ap += 4;
[ap + 0] = [ap + -5] + 360, ap++;
[ap + 0] = 5, ap++;
jmp rel 23;
[ap + -2] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 10 if [ap + -2] != 0;
ap += 2;
[ap + 0] = [ap + -3] + 80, ap++;
[ap + 0] = 3, ap++;
jmp rel 10;
[ap + -4] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 215 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 196;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 155 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -32] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -34] + 1], ap++;
[ap + -5] = [[ap + -35] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 131 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -29] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -30] + 1];
[ap + 0] = [ap + -30] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 106;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -14] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 85;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 62242;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 91219;
[ap + 0] = [ap + -1] + 91218, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 119610 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 119610, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 38;
[ap + -3] = [ap + 0] + 119610, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3597;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 62189;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 62259;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -10] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 62257;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -35] + 3, ap++;
[ap + 0] = [ap + -9] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -6] + 3310, ap++;
call rel 62246;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 62245;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -10] + 4710, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1] + 5010, ap++;
jmp rel 6;
ap += 5;
[ap + 0] = [ap + -10] + 5760, ap++;
call rel 62235;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 6610, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7920, ap++;
call rel 62225;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 62089;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 62051;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 91028;
[ap + 0] = [ap + -1] + 91027, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 159260 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 159260, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 159260, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -3558;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 62004;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 61993;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 177;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 61955;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 90932;
[ap + 0] = [ap + -1] + 90931, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 24610 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 24610, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 129;
[ap + -3] = [ap + 0] + 24610, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 94 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 12 if [ap + -3] != 0;
call rel 65708;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -8] + 12610, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 85;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 43836120581710488553524042679068009980800559100581330303876612773620507996, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -20] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -22] + 1], ap++;
[ap + -5] = [[ap + -23] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -17] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -18] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -19] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 57100;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 20;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [ap + -10] + 8, ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [[ap + -12] + 7], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 13810, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 61811;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 61800;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 140;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 61762;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 90739;
[ap + 0] = [ap + -1] + 90738, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 22300 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 22300, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 92;
[ap + -3] = [ap + 0] + 22300, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 56 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 11 if [ap + -3] != 0;
call rel 65515;
[ap + 0] = [ap + -7] + 10400, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 49;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1765908283277496344688841180082140943953894109846608098189093375020781927514, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 18 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -4] + 200, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -9] + 8, ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [[ap + -11] + 7], ap++;
jmp rel 11;
ap += 9;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 11410, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 61655;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 61644;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 2070 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209386, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 162;
[fp + -6] = [ap + 0] + 2070, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 140;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 61594;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 90571;
[ap + 0] = [ap + -1] + 90570, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 19220 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 19220, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 0];
jmp rel 93;
[ap + -3] = [ap + 0] + 19220, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[fp + 0] = [fp + -5] + 7;
[ap + 0] = [ap + -2], ap++;
jmp rel 11 if [ap + -2] != 0;
call rel 65347;
[ap + 0] = [ap + -7] + 7330, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 50;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 65373;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 8;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 8340, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 61486;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 61601;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 61464;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 20870 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768190586, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 267;
[fp + -6] = [ap + 0] + 20870, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 65345;
jmp rel 245 if [ap + -11] != 0;
[ap + 0] = [ap + -12], ap++;
jmp rel 230 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 192 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -27] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -29] + 1], ap++;
[ap + -5] = [[ap + -30] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 168 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -24] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -25] + 1];
[ap + 0] = [ap + -25] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 122 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 98 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 61316;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 90292;
[ap + 0] = [ap + -1] + 90291, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 66160, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 43;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -28], ap++;
call rel -3602;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 61255;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2310, ap++;
call rel 61342;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -9] + 2640, ap++;
jmp rel 5;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -6] + 4150, ap++;
call rel 61331;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 61329;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -9] + 5350, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 6250, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 61181;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 199;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 157 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 133 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 61092;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 90069;
[ap + 0] = [ap + -1] + 90068, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 12800 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 12800, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 82;
[ap + -3] = [ap + 0] + 12800, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 11 if [ap + -3] != 0;
call rel 64845;
[ap + 0] = [ap + -7] + 900, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 39;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 65357;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 9;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 1910, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60995;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 61101;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60965;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 12970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768198486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 175;
[fp + -6] = [ap + 0] + 12970, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 65286;
[ap + 0] = [ap + -66], ap++;
jmp rel 152 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -25] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -27] + 1], ap++;
[ap + -5] = [[ap + -28] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 91 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -22] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -23] + 1];
[ap + 0] = [ap + -23] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 60870;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 89847;
[ap + 0] = [ap + -1] + 89846, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 89030 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 89030, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 40;
[ap + -3] = [ap + 0] + 89030, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -24], ap++;
call rel -3538;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60815;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 60912;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60911;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -8] + 3310, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60774;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 151;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 109 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 65476;
jmp rel 87 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 79 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 60696;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 89673;
[ap + 0] = [ap + -1] + 89672, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 37410 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 37410, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 36;
[ap + -3] = [ap + 0] + 37410, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -3245;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60645;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 60743;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60607;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1970, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 114;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 60560;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 89537;
[ap + 0] = [ap + -1] + 89536, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 11900 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 11900, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 0];
jmp rel 68;
[ap + -3] = [ap + 0] + 11900, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 32 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 10 if [ap + -3] != 0;
call rel 64313;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 26;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4] + 900, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 9;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 1010, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60477;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60592;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60455;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 1970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 157;
[fp + -6] = [ap + 0] + 1970, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 135;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 60406;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 89383;
[ap + 0] = [ap + -1] + 89382, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13880 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13880, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 0];
jmp rel 89;
[ap + -3] = [ap + 0] + 13880, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[fp + 0] = [fp + -5] + 7;
[ap + 0] = [ap + -2], ap++;
jmp rel 11 if [ap + -2] != 0;
call rel 64159;
[ap + 0] = [ap + -7] + 1990, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 46;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [ap + 0] * 3, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 65224;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 8;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1] + 3000, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60302;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60417;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 60280;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 6530 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204926, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 180;
[fp + -6] = [ap + 0] + 6530, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 157;
[fp + 0] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 65172;
jmp rel 92 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 84 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 60190;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 89166;
[ap + 0] = [ap + -1] + 89165, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 50020, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 37;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -19], ap++;
call rel -3434;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 60135;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1370, ap++;
jmp rel 15;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -6] + 4740, ap++;
call rel 60222;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 60220;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 6130, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 60082;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 2270 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209186, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 123;
[fp + -6] = [ap + 0] + 2270, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 100;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 60033;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 89009;
[ap + 0] = [ap + -1] + 89008, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 26910, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 49;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -3289;
jmp rel 27 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 700, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 59966;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 60080;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1870, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 59942;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 59903;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 88880;
[ap + 0] = [ap + -1] + 88879, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 26310 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 26310, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 26310, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -3247;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59856;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59845;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 59758;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 88735;
[ap + 0] = [ap + -1] + 88734, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3250;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59710;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 59816;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59680;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 59642;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 88619;
[ap + 0] = [ap + -1] + 88618, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 54021;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59539;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59528;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5110 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206346, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 216;
[fp + -6] = [ap + 0] + 5110, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 194;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 153 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -19] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -21] + 1], ap++;
[ap + -5] = [[ap + -22] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 129 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -17] + 1];
[ap + 0] = [ap + -17] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 104;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -14] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 83;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 59410;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 88387;
[ap + 0] = [ap + -1] + 88386, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 150970 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 150970, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 36;
[ap + -3] = [ap + 0] + 150970, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -3371;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59359;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59447;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -10] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59445;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -9] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 3310, ap++;
call rel 59434;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59433;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 4710, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59296;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 131;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 59258;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 88235;
[ap + 0] = [ap + -1] + 88234, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 64050 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 64050, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 83;
[ap + -3] = [ap + 0] + 64050, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 964992813738888399208866949287633490829468483568514093815229222579920593734, ap++;
call rel 62596;
jmp rel 54 if [ap + -7] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 45 if [ap + -7] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
jmp rel [ap + -4];
jmp rel 23;
jmp rel 12;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 10;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1] + 600, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -10] + 790, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59160;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59149;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 122;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 59111;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 88088;
[ap + 0] = [ap + -1] + 88087, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 11800 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 74;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1800592988385362466966123572696940921751148247599547325159595375758796343126, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 59022;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 59011;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
[fp + -3] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 10 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
call rel 64038;
ret;
ap += 261;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 217370, ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
jmp rel 6 if [fp + -3] != 0;
[ap + 0] = 5, ap++;
jmp rel 4;
[ap + 0] = 5, ap++;
[ap + 0] = 5, ap++;
jmp rel [ap + -2];
jmp rel 30;
jmp rel 15;
jmp rel [ap + -1];
jmp rel 10;
jmp rel 6;
ap += 1;
jmp rel 89;
jmp rel 24;
jmp rel 22;
jmp rel [ap + -1];
jmp rel 10;
jmp rel 4;
jmp rel 15;
ap += 1;
jmp rel 74;
jmp rel 9;
jmp rel [ap + -1];
jmp rel 67;
jmp rel 4;
jmp rel 2;
[ap + 0] = 3, ap++;
jmp rel [ap + -3];
jmp rel 26;
jmp rel 13;
jmp rel [ap + -1];
jmp rel 8;
jmp rel 4;
jmp rel 37;
jmp rel 22;
jmp rel 20;
jmp rel [ap + -1];
jmp rel 8;
jmp rel 4;
jmp rel 13;
jmp rel 24;
jmp rel 9;
jmp rel [ap + -1];
jmp rel 19;
jmp rel 4;
jmp rel 2;
[ap + 0] = 0, ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 9, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
call rel 63955;
jmp rel 17 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5] + 12345, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 300, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -3] * 100000000, ap++;
%{ memory[ap + 0] = memory[ap + -1] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 15;
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -4] + 0];
ap += 6;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
ret;
call rel 64006;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = 100000000, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[fp + -4], memory[ap + -1]) %}
[ap + 5] = [[fp + -5] + 0], ap++;
[ap + 5] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[fp + -5] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[fp + -5] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[fp + -4] = [ap + -3] + [ap + -1];
%{ memory[ap + 0] = memory[ap + -2] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[fp + -5] + 4];
jmp rel 10;
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -5] + 4];
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 6;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 12247868912570024929994369972085044880615269779114182434815966989419180676, ap++;
call rel 63954;
jmp rel 58 if [ap + -20] != 0;
[ap + 0] = [ap + -22], ap++;
jmp rel 47 if [ap + -20] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel [fp + -3];
jmp rel 23;
jmp rel 12;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
jmp rel 19;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 10;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 5;
[ap + 0] = [ap + -6] + 550, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 8;
ap += 6;
[ap + 0] = [ap + -28] + 840, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 10;
[ap + -1] = [[fp + -4] + 0];
ap += 5;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 2100000000000000, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -4] + 1];
jmp rel 10;
[ap + -1] = [[fp + -4] + 1];
ap += 1;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [fp + -4] + 2, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -4] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 64124;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 52922;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 52828;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 181;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 139 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 118;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 58271;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 87248;
[ap + 0] = [ap + -1] + 87247, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 231780 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 231780, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 65;
[ap + -3] = [ap + 0] + 231780, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
[ap + -22] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 29 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
call rel 63286;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 500, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 220880, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58191;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 58297;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58161;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 2070 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209386, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 112;
[fp + -6] = [ap + 0] + 2070, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 90;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 58113;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 87090;
[ap + 0] = [ap + -1] + 87089, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 5100 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 5100, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 0];
jmp rel 43;
[ap + -3] = [ap + 0] + 5100, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + 0] = [ap + -9], ap++;
call rel -873;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 7 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
call rel 63720;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58055;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58170;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 58033;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 163;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 121 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 62735;
jmp rel 99 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 91 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 57955;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 86932;
[ap + 0] = [ap + -1] + 86931, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 7780 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 7780, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 48;
[ap + -3] = [ap + 0] + 7780, ap++;
[ap + -1] = [[ap + -18] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
call rel 63648;
jmp rel 10 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57892;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 57990;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57854;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 163;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 121 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 62556;
jmp rel 99 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 91 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 57776;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 86753;
[ap + 0] = [ap + -1] + 86752, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 2370 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 2370, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 48;
[ap + -3] = [ap + 0] + 2370, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + -17] = [ap + 0] + [ap + -18], ap++;
call rel 62885;
jmp rel 22 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -3] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 600, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57713;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 57811;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57675;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 164;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 122 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 98 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 57587;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 86564;
[ap + 0] = [ap + -1] + 86563, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 470 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 470, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 47;
[ap + -3] = [ap + 0] + 470, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -14] * 100000000, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 23;
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -14] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -17] + 2, ap++;
[ap + 0] = [ap + -7] + 300, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 62775;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57525;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 57631;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57495;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 238;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 196 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 168 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 134 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 106 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 57355;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 86332;
[ap + 0] = [ap + -1] + 86331, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 1650 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 1650, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 58;
[ap + -3] = [ap + 0] + 1650, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = 100000000, ap++;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -25], memory[ap + -1]) %}
[ap + 5] = [[ap + -11] + 1], ap++;
[ap + 5] = [[ap + -12] + 2], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -15] + 3], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -18] + 4];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -32] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -9], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 18446744073709551616 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -21] + 5];
jmp rel 11;
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -21] + 5];
[ap + 0] = [ap + -21] + 6, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 7;
[ap + 0] = [ap + -21] + 6, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 57282;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 57377;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57241;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3370 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208086, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 211;
[fp + -6] = [ap + 0] + 3370, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 168 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 10 if [ap + -2] != 0;
ap += 4;
[ap + 0] = [ap + -5] + 360, ap++;
[ap + 0] = 5, ap++;
jmp rel 23;
[ap + -2] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 10 if [ap + -2] != 0;
ap += 2;
[ap + 0] = [ap + -3] + 80, ap++;
[ap + 0] = 3, ap++;
jmp rel 10;
[ap + -4] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 135 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 57148;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 86125;
[ap + 0] = [ap + -1] + 86124, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 234960 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 234960, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -24] + 0];
jmp rel 90;
[ap + -3] = [ap + 0] + 234960, ap++;
[ap + -1] = [[ap + -23] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 12247868912570024929994369972085044880615269779114182434815966989419180676, ap++;
call rel 62368;
jmp rel 61 if [ap + -20] != 0;
[ap + 0] = [ap + -22], ap++;
jmp rel 52 if [ap + -20] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel [ap + -382];
jmp rel 23;
jmp rel 12;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
jmp rel 19;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 10;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -7] = [[ap + -1] + 0];
[ap + -6] = [[ap + -1] + 1];
[ap + -5] = [[ap + -1] + 2];
[ap + -4] = [[ap + -1] + 3];
[ap + -3] = [[ap + -1] + 4];
[ap + -2] = [[ap + -1] + 5];
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 6, ap++;
ret;
[ap + 0] = [ap + -1] + 1400, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -23] + 1590, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57043;
[ap + 0] = [ap + -30] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1] + 1370, ap++;
jmp rel 6;
ap += 5;
[ap + 0] = [ap + -10] + 2120, ap++;
call rel 57150;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 57014;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 190;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 148 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 124 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 56926;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 85903;
[ap + 0] = [ap + -1] + 85902, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 1540 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 1540, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 73;
[ap + -3] = [ap + 0] + 1540, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 11;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -4] + 870, ap++;
[ap + 0] = 0, ap++;
jmp rel 27;
[ap + 0] = 2100000000000000, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -2] = [ap + 1] + [ap + -21], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 2];
jmp rel 11;
[ap + -1] = [[ap + -19] + 2];
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -4] + 100, ap++;
[ap + 0] = 1, ap++;
jmp rel 7;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
call rel 56838;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 56944;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56808;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5380 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206076, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 206;
[fp + -6] = [ap + 0] + 5380, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 164 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 143;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 95 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 8 if [ap + -2] != 0;
ap += 4;
[ap + 0] = [ap + -5] + 360, ap++;
jmp rel 19;
[ap + -2] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 8 if [ap + -2] != 0;
ap += 2;
[ap + 0] = [ap + -3] + 80, ap++;
jmp rel 8;
[ap + -4] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 66 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 56672;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 85649;
[ap + 0] = [ap + -1] + 85648, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 0];
jmp rel 23;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -22] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -30] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -5] + 500, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
call rel 56634;
[ap + 0] = [ap + -29] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1] + 1270, ap++;
jmp rel 6;
ap += 5;
[ap + 0] = [ap + -10] + 2020, ap++;
call rel 56732;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 2870, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4180, ap++;
call rel 56722;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56586;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 56499;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 85476;
[ap + 0] = [ap + -1] + 85475, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -2104;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56451;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 56557;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56421;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 56383;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 85360;
[ap + 0] = [ap + -1] + 85359, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 50762;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56280;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56269;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
[fp + -3] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 62000;
jmp rel 53 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 62110;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 126892144473398, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 62169;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -30], ap++;
ret;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 13400, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 16070, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 5040, ap++;
jmp rel 28;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 61914;
jmp rel 113 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 62024;
jmp rel 94 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 0] = [ap + -1];
[fp + 1] = [ap + -1];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 61874;
jmp rel 53 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 61984;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7957310996628966338794911577398, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 62043;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -30], ap++;
ret;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 13400, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 16070, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 19220, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 21890, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 5040, ap++;
jmp rel 28;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 61768;
jmp rel 167 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 61878;
jmp rel 148 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 5040, ap++;
jmp rel 28;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 61734;
jmp rel 113 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 61844;
jmp rel 94 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 0] = [ap + -1];
[fp + 1] = [ap + -1];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 61694;
jmp rel 53 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 61804;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 29380545875162422, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 61863;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -30], ap++;
ret;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 13400, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 16070, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 19220, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 21890, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 24760, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 27430, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 5240, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 30;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 61568;
jmp rel 32 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 61678;
jmp rel 14 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 200, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2670, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 9 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 5240, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 30;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 61504;
jmp rel 32 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 61614;
jmp rel 14 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 200, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2670, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 12 if [ap + -1] != 0;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3870, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + -2] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 42;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 61677;
jmp rel 26 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3] + 800, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
ret;
call rel 61725;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1100, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -2] + 2270, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -3] + 800, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
ret;
call rel 61692;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 61684;
jmp rel 23 if [ap + -4] != 0;
[ap + -3] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 600, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
jmp rel 7 if [fp + -4] != 0;
ap += 2;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + 30787877913650548, ap++;
jmp rel 7 if [ap + -1] != 0;
ap += 1;
[ap + 0] = 1, ap++;
ret;
[fp + -3] = [ap + 0] + 32762643847472500, ap++;
jmp rel 5 if [ap + -1] != 0;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 61780;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 49850;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 49756;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 161;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 98;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 55199;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 84176;
[ap + 0] = [ap + -1] + 84175, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 10500 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 10500, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 45;
[ap + -3] = [ap + 0] + 10500, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
[ap + -22] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
call rel 55139;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 55245;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 55109;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 151;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 109 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 59811;
jmp rel 87 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 79 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 55031;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 84008;
[ap + 0] = [ap + -1] + 84007, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 19940 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 19940, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 36;
[ap + -3] = [ap + 0] + 19940, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -1219;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54980;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 55078;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54942;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 151;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 109 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 59644;
jmp rel 87 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 79 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 54864;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83841;
[ap + 0] = [ap + -1] + 83840, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25880 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25880, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 36;
[ap + -3] = [ap + 0] + 25880, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -1300;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54813;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 54911;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54775;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 151;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 109 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 59477;
jmp rel 87 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 79 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 54697;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83674;
[ap + 0] = [ap + -1] + 83673, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 31420 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 31420, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 36;
[ap + -3] = [ap + 0] + 31420, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
call rel -1321;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 200, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54646;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 54744;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54608;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5920 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205536, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 193;
[fp + -6] = [ap + 0] + 5920, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 151 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 59308;
jmp rel 129 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 121 if [ap + -4] != 0;
[fp + 0] = [ap + -3];
[fp + 1] = [ap + -2];
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 54526;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83503;
[ap + 0] = [ap + -1] + 83502, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 5140 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 5140, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 76;
[ap + -3] = [ap + 0] + 5140, ap++;
[ap + -1] = [[ap + -18] + 0];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 60279;
jmp rel 35 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 60389;
jmp rel 17 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2670, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54435;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1350, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2550, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4720, ap++;
call rel 54533;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54397;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5920 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205536, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 193;
[fp + -6] = [ap + 0] + 5920, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 151 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 59097;
jmp rel 129 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 121 if [ap + -4] != 0;
[fp + 0] = [ap + -3];
[fp + 1] = [ap + -2];
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 54315;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83292;
[ap + 0] = [ap + -1] + 83291, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 5140 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 5140, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 76;
[ap + -3] = [ap + 0] + 5140, ap++;
[ap + -1] = [[ap + -18] + 0];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 60068;
jmp rel 35 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel 60178;
jmp rel 17 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2670, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54224;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1350, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2550, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4720, ap++;
call rel 54322;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54186;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5740 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 60513;
jmp rel 86 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 78 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 54108;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 83085;
[ap + 0] = [ap + -1] + 83084, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 4570 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4570, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 35;
[ap + -3] = [ap + 0] + 4570, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
call rel -1581;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 200, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54058;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 54156;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54020;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 8760 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202696, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 289;
[fp + -6] = [ap + 0] + 8760, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 267;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[fp + 1] = [[fp + -4] + 0];
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 246;
[fp + 0] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 205 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 60325;
jmp rel 183 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 175 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 138 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 114 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -19] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 53870;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 82847;
[ap + 0] = [ap + -1] + 82846, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 3210 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 3210, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 63;
[ap + -3] = [ap + 0] + 3210, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -29], ap++;
call rel 59955;
jmp rel 38 if [ap + -4] != 0;
[ap + -3] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 1200, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53792;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 53871;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 3010, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 4210, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6] + 6380, ap++;
call rel 53853;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53852;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -9] + 7770, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53850;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 8360, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53713;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 2670 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208786, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 158;
[fp + -6] = [ap + 0] + 2670, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 136;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 115;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 53655;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 82632;
[ap + 0] = [ap + -1] + 82631, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 900 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 900, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -21] + 0];
jmp rel 68;
[ap + -3] = [ap + 0] + 900, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 10 if [ap + -16] != 0;
ap += 4;
[ap + 0] = [ap + -5] + 460, ap++;
[ap + 0] = 0, ap++;
jmp rel 29;
[ap + -11] = [ap + 0] + 30787877913650548, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 10 if [ap + -2] != 0;
ap += 2;
[ap + 0] = [ap + -3] + 180, ap++;
[ap + 0] = 1, ap++;
jmp rel 16;
[ap + -13] = [ap + 0] + 32762643847472500, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
call rel 53572;
[ap + 0] = [ap + -27] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53678;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -10] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53676;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2270, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53539;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 94 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 70 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 53451;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 82428;
[ap + 0] = [ap + -1] + 82427, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 19;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -10] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -15] = [[ap + -1] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3] + 700, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 53417;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 53523;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53387;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1970 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209486, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 89;
[fp + -6] = [ap + 0] + 1970, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 67;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 53340;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 82317;
[ap + 0] = [ap + -1] + 82316, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 0];
jmp rel 21;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -14] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -4] + 600, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 53304;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53419;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53282;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 53195;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 82172;
[ap + 0] = [ap + -1] + 82171, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -2336;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53147;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 53253;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53117;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 53079;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 82056;
[ap + 0] = [ap + -1] + 82055, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 47458;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52976;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52965;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[ap + -3] = [[fp + -5] + 2];
[ap + -2] = [[fp + -5] + 3];
[fp + -4] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 38 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[fp + -3] = [[fp + -5] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -1] + 11040, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
ret;
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -10] = [[fp + -9] + 1];
[ap + -3] = [[fp + -9] + 2];
[ap + -2] = [[fp + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 5], ap++;
jmp rel 247 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 6], ap++;
[fp + 0] = [fp + -9] + 7;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 0], ap++;
[ap + -4] = [[fp + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -11] + 2];
jmp rel 217;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -11] + 0], ap++;
[ap + -3] = [[fp + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -11] + 2];
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 59318;
jmp rel 187 if [ap + -4] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
jmp rel 9 if [fp + -3] != 0;
ap += 6;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -9] + 710, ap++;
jmp rel 37;
[ap + 0] = 1000000, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 20;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8 if [fp + -7] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
jmp rel 16;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
jmp rel 10;
ap += 1;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
jmp rel 7 if [ap + -10] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
jmp rel 5;
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 59396;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + 0] + 0];
[ap + -26] = [[fp + 0] + 1];
[ap + -5] = [[fp + 0] + 2];
[ap + -4] = [[fp + 0] + 3];
[ap + -3] = [[fp + 0] + 4];
[ap + -2] = [[fp + 0] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 0]) %}
[ap + 0] = [[fp + 0] + 7], ap++;
jmp rel 80 if [ap + -1] != 0;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [fp + 0] + 8, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 60 if [ap + -29] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 7 if [ap + -41] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 419219720643212038379758834364529219528643538790, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1790776030044565804009322301133241069732886176270684001806990409753956, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 59349;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -29] + 0];
[ap + -26] = [[ap + -29] + 1];
[ap + -5] = [[ap + -29] + 2];
[ap + -4] = [[ap + -29] + 3];
[ap + -3] = [[ap + -29] + 4];
[ap + -2] = [[ap + -29] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29]) %}
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -32] + 8, ap++;
jmp rel 18;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -62], ap++;
[ap + 0] = [ap + -2] + 300, ap++;
[ap + 0] = [ap + -33] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -35] + 8], ap++;
[ap + 0] = [[ap + -36] + 9], ap++;
ret;
ap += 29;
[ap + 0] = [ap + -30] + 14310, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -65], ap++;
ret;
[ap + 0] = [[fp + 0] + 6], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -2] + 15200, ap++;
[ap + 0] = [fp + 0] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + 0] + 8], ap++;
[ap + 0] = [[fp + 0] + 9], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 31570, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 47099;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -14] + 32840, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -2] + 35040, ap++;
[ap + 0] = [fp + -9] + 8, ap++;
[ap + 0] = [[fp + -9] + 6], ap++;
[ap + 0] = [[fp + -9] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 59293;
jmp rel 23 if [ap + -4] != 0;
[ap + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 600, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [fp + -11] * 31, ap++;
[ap + 0] = [fp + -10] * 31, ap++;
[ap + 0] = [ap + -2] + [ap + -1], ap++;
[ap + 0] = [fp + -9] * 31, ap++;
[ap + 0] = [ap + -2] + [ap + -1], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -3] + [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 59410;
jmp rel 36 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 59499;
jmp rel 17 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5] + 12345, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 300, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2870, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
jmp rel 7 if [fp + -8] != 0;
ap += 9;
[ap + 0] = [fp + -9], ap++;
jmp rel 65;
[ap + 0] = 3, ap++;
[ap + -1] = [ap + 1] + [fp + -8], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 51;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
jmp rel 6 if [fp + -7] != 0;
ap += 5;
jmp rel 6;
jmp rel 8 if [fp + -6] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -4] = [ap + 0] + [fp + -3], ap++;
jmp rel 25 if [ap + -1] != 0;
[ap + 0] = 4294967295, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 10;
[ap + -1] = [[ap + -5] + 0];
ap += 1;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 4;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
ret;
ap += 5;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 59391;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 46785;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 46691;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 59161;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 46555;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 46461;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 5690 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205766, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 260;
[fp + -6] = [ap + 0] + 5690, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 218 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 197;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 150 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 129;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 51855;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80832;
[ap + 0] = [ap + -1] + 80831, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 22100 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 22100, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 76;
[ap + -3] = [ap + 0] + 22100, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
[ap + -36] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[ap + -28] = [[fp + -5] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -3] + 400, ap++;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
jmp rel 11;
ap += 6;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -1] + 11140, ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51764;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 51861;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 3180, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4490, ap++;
call rel 51851;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51715;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 13190 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768198266, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 199;
[fp + -6] = [ap + 0] + 13190, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 58748;
jmp rel 178 if [ap + -9] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 164 if [ap + -7] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 127 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -25] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -27] + 1], ap++;
[ap + -5] = [[ap + -28] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 103 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -22] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -23] + 1];
[ap + 0] = [ap + -23] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 51617;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80594;
[ap + 0] = [ap + -1] + 80593, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 48250 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 48250, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 52;
[ap + -3] = [ap + 0] + 48250, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -1305;
jmp rel 26 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 700, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51550;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 51647;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51646;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -8] + 3310, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 4210, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51500;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 8760 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202696, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 289;
[fp + -6] = [ap + 0] + 8760, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 267;
[fp + 1] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 226 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 57815;
jmp rel 204 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 196 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 179;
[fp + 0] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 138 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -26] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -28] + 1], ap++;
[ap + -5] = [[ap + -29] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 114 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -23] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -24] + 1];
[ap + 0] = [ap + -24] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 51350;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80327;
[ap + 0] = [ap + -1] + 80326, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 3070 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 3070, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 63;
[ap + -3] = [ap + 0] + 3070, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
call rel 58006;
jmp rel 38 if [ap + -4] != 0;
[ap + -3] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 1200, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51272;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 51351;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51350;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 3500, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 3600, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 4800, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -6] + 6970, ap++;
call rel 51331;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51330;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 8360, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51193;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 7;
%{ memory[ap + 0] = 19100 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768192356, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 249;
[fp + -6] = [ap + 0] + 19100, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 58468;
[ap + 0] = [ap + -56], ap++;
jmp rel 226 if [ap + -7] != 0;
[fp + 2] = [ap + -6];
[fp + 3] = [ap + -5];
[fp + 4] = [ap + -4];
[fp + 5] = [ap + -3];
[fp + 6] = [ap + -2];
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 184 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 57506;
jmp rel 162 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 154 if [ap + -4] != 0;
[fp + 0] = [ap + -3];
[fp + 1] = [ap + -2];
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 57464;
jmp rel 93 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 85 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 51059;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 80036;
[ap + 0] = [ap + -1] + 80035, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 7140 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 7140, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 42;
[ap + -3] = [ap + 0] + 7140, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -1548;
jmp rel 14 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 200, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51002;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 1170, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6] + 4540, ap++;
call rel 51082;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 5620, ap++;
jmp rel 14;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 6820, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6] + 8990, ap++;
call rel 51064;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 51063;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -8] + 10640, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50926;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 10530 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768200926, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 203;
[fp + -6] = [ap + 0] + 10530, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 58203;
[ap + 0] = [ap + -56], ap++;
jmp rel 180 if [ap + -7] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 163;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -14] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 50871;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79848;
[ap + 0] = [ap + -1] + 79847, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 2540 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 2540, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 0];
jmp rel 116;
[ap + -3] = [ap + 0] + 2540, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7 if [ap + -22] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2140, ap++;
jmp rel 78;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -24], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 63;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8 if [ap + -27] != 0;
ap += 1;
[ap + 0] = [ap + -2] + 960, ap++;
jmp rel 7;
[ap + 0] = [ap + -1], ap++;
jmp rel 10 if [ap + -27] != 0;
[ap + 0] = [ap + -1] + 970, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
jmp rel 46;
[ap + -25] = [ap + 0] + [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 29 if [ap + -2] != 0;
[ap + 0] = 4294967295, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -30], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 11;
[ap + -1] = [[ap + -9] + 0];
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -4] + 200, ap++;
[ap + 0] = 1, ap++;
jmp rel 22;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 15;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -2] + 770, ap++;
[ap + 0] = 0, ap++;
jmp rel 8;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5] + 1470, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
call rel 50740;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50846;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -9] + 1670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50844;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -8] + 2070, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50707;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 50620;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79597;
[ap + 0] = [ap + -1] + 79596, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -1846;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50572;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 50678;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50542;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 50504;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79481;
[ap + 0] = [ap + -1] + 79480, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 44883;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50401;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50390;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 50303;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79280;
[ap + 0] = [ap + -1] + 79279, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -1933;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50255;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 50361;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50225;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 50187;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 79164;
[ap + 0] = [ap + -1] + 79163, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 44566;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50084;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 50073;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
[ap + -3] = [[fp + -7] + 2];
[ap + -2] = [[fp + -7] + 3];
[fp + -6] = [[fp + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 6], ap++;
jmp rel 291 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 249;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[fp + -3] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 23 if [ap + -3] != 0;
ap += 51;
call rel 78991;
[ap + 0] = [ap + -1] + 78990, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 59000, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
[fp + -5] = [[ap + -24] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 6], ap++;
jmp rel 145 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -30] + 7];
[ap + -4] = [[ap + -30] + 8];
[ap + -3] = [[ap + -30] + 9];
[ap + -2] = [[ap + -30] + 10];
[fp + -4] = [[ap + -30] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -30] + 7) %}
[ap + 0] = [[ap + -30] + 13], ap++;
jmp rel 118 if [ap + -1] != 0;
[ap + 0] = [[ap + -31] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 14];
[ap + -4] = [[ap + -36] + 15];
[ap + -3] = [[ap + -36] + 16];
[ap + -2] = [[ap + -36] + 17];
[fp + -5] = [[ap + -36] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36] + 14) %}
[ap + 0] = [[ap + -36] + 20], ap++;
jmp rel 84 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 19], ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -43] + 21];
[ap + -4] = [[ap + -43] + 22];
[ap + -3] = [[ap + -43] + 23];
[ap + -2] = [[ap + -43] + 24];
[fp + -4] = [[ap + -43] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -43] + 21) %}
[ap + 0] = [[ap + -43] + 27], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[ap + -44] + 26], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 57507;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -65] + 28];
[ap + -2] = [[ap + -65] + 29];
[ap + -6] = [[ap + -65] + 30];
[ap + -5] = [[ap + -65] + 31];
[ap + -4] = [[ap + -65] + 32];
[ap + -3] = [[ap + -65] + 33];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -65] + 28) %}
[ap + 0] = [[ap + -65] + 35], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -66] + 34], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -70] + 36, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -66] + 34], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -70] + 38, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -72] + 36], ap++;
[ap + 0] = [[ap + -73] + 37], ap++;
ret;
ap += 18;
[ap + 0] = [[ap + -62] + 26], ap++;
[ap + 0] = [ap + -1] + 12820, ap++;
[ap + 0] = [ap + -64] + 30, ap++;
[ap + 0] = [[ap + -65] + 28], ap++;
[ap + 0] = [[ap + -66] + 29], ap++;
jmp rel 11;
ap += 25;
[ap + 0] = [[ap + -62] + 19], ap++;
[ap + 0] = [ap + -1] + 24150, ap++;
[ap + 0] = [ap + -64] + 23, ap++;
[ap + 0] = [[ap + -65] + 21], ap++;
[ap + 0] = [[ap + -66] + 22], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 31;
[ap + 0] = [[ap + -62] + 12], ap++;
[ap + 0] = [ap + -1] + 35190, ap++;
[ap + 0] = [ap + -64] + 16, ap++;
[ap + 0] = [[ap + -65] + 14], ap++;
[ap + 0] = [[ap + -66] + 15], ap++;
jmp rel 11;
ap += 37;
[ap + 0] = [[ap + -62] + 5], ap++;
[ap + 0] = [ap + -1] + 46430, ap++;
[ap + 0] = [ap + -64] + 9, ap++;
[ap + 0] = [[ap + -65] + 7], ap++;
[ap + 0] = [[ap + -66] + 8], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 47;
call rel 78758;
[ap + 0] = [ap + -1] + 78757, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 58540, ap++;
call rel 44254;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -67] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 62;
[ap + 0] = [[fp + -7] + 5], ap++;
call rel 78735;
[ap + 0] = [ap + -1] + 78734, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 60500, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 7], ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
ret;
[ap + 0] = 110930206544728495286294282378369001838, ap++;
ret;
[ap + 0] = 1933726787, ap++;
ret;
[ap + 0] = 8, ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -5] + 0], ap++;
[ap + 3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -5] + 2];
jmp rel 85 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 17 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
call rel 44248;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -25] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -28] + 8, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
jmp rel 31;
ap += 12;
call rel 44224;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -26] + 11750, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13910, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel 44055;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel 44031;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 337994139936370667767799129369552596157394447336989834104582481799883947719, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 57087;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 37 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 57262;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 67;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 78299;
[ap + 0] = [ap + -1] + 78298, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 40150, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 181 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 106 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -5] = [[ap + -7] + 1];
[ap + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
[ap + -2] = [[ap + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 6], ap++;
jmp rel 69 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 57409;
jmp rel 43 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[ap + -2] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
ap += 7;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 11130, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 212;
[ap + 0] = [[ap + -220] + 5], ap++;
call rel 78157;
[ap + 0] = [ap + -1] + 78156, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 132330, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -229] + 9, ap++;
[ap + 0] = [[ap + -230] + 7], ap++;
[ap + 0] = [[ap + -231] + 8], ap++;
jmp rel 40;
ap += 213;
call rel 78138;
[ap + 0] = [ap + -1] + 78137, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 142920, ap++;
call rel 58491;
[ap + 0] = [ap + -227] + [ap + -7], ap++;
[ap + 0] = [ap + -229], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 222;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 78117;
[ap + 0] = [ap + -1] + 78116, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 144030, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 238;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 78090;
[ap + 0] = [ap + -1] + 78089, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 155970, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 480 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = 337994139936370667767799129369552596157394447336989834104582481799883947719, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[ap + -2] + 2], ap++;
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[ap + -2] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -10] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -7] = [[fp + -10] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -5] = [[fp + -7] + 6];
[ap + -4] = [[fp + -7] + 7];
[ap + -6] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 396 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 344 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 304 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 257 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 219;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -22] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 177;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 13;
[ap + -1] = [[ap + -4] + 0];
ap += 1;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -33] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 91;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 67 if [ap + -12] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 56761;
jmp rel 34 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 57005;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 209;
call rel 77787;
[ap + 0] = [ap + -1] + 77786, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 121560, ap++;
[ap + 0] = [ap + -223], ap++;
[ap + 0] = [ap + -223] + [ap + -2], ap++;
[ap + 0] = [ap + -223], ap++;
[ap + 0] = [ap + -223], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -223], ap++;
[ap + 0] = [ap + -223], ap++;
ret;
ap += 274;
call rel 77766;
[ap + 0] = [ap + -1] + 77765, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 161430, ap++;
[ap + 0] = [ap + -285], ap++;
[ap + 0] = [ap + -285] + [ap + -2], ap++;
jmp rel 17;
ap += 277;
call rel 77750;
[ap + 0] = [ap + -1] + 77749, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 161800, ap++;
[ap + 0] = [ap + -296] + 2, ap++;
[ap + 0] = [ap + -289] + [ap + -2], ap++;
call rel 43939;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -340], ap++;
[ap + 0] = [ap + -324], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 293;
call rel 77724;
[ap + 0] = [ap + -1] + 77723, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 163860, ap++;
[ap + 0] = [ap + -307] + 1, ap++;
[ap + 0] = [ap + -305] + [ap + -2], ap++;
jmp rel 17;
ap += 299;
call rel 77707;
[ap + 0] = [ap + -1] + 77706, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 164870, ap++;
[ap + 0] = [ap + -318] + 2, ap++;
[ap + 0] = [ap + -311] + [ap + -2], ap++;
call rel 58066;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -340], ap++;
[ap + 0] = [ap + -324], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 290;
call rel 77681;
[ap + 0] = [ap + -1] + 77680, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 163590, ap++;
call rel 43310;
[ap + 0] = [ap + -316] + 3, ap++;
[ap + 0] = [ap + -311] + [ap + -8], ap++;
[ap + 0] = [ap + -313], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 310;
[ap + 0] = [[ap + -319] + 4], ap++;
call rel 77658;
[ap + 0] = [ap + -1] + 77657, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 166300, ap++;
[ap + 0] = [ap + -321], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -329] + 8, ap++;
[ap + 0] = [[ap + -330] + 6], ap++;
[ap + 0] = [[ap + -331] + 7], ap++;
jmp rel 48;
ap += 301;
call rel 77638;
[ap + 0] = [ap + -1] + 77637, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 175350, ap++;
call rel 43267;
[ap + 0] = [ap + -327] + 3, ap++;
[ap + 0] = [ap + -322] + [ap + -8], ap++;
[ap + 0] = [ap + -324], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 321;
[ap + 0] = [[fp + -7] + 9], ap++;
call rel 77610;
[ap + 0] = [ap + -1] + 77609, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 178060, ap++;
[ap + 0] = [ap + -332], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -340], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 345;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 77582;
[ap + 0] = [ap + -1] + 77581, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 191630, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 1227 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 583936847901168531744846041173805170834282611706669097317999134304583535803, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 1185 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 1144;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 1109 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 1068;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -5] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 192;
call rel 77468;
[ap + 0] = [ap + -1] + 77467, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160460, ap++;
call rel 57839;
[ap + 0] = [ap + -207], ap++;
[ap + 0] = [ap + -207] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 67;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 180;
call rel 77416;
[ap + 0] = [ap + -1] + 77415, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 158840, ap++;
[ap + 0] = [ap + -193] + 1, ap++;
[ap + 0] = [ap + -191] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 184;
call rel 77394;
[ap + 0] = [ap + -1] + 77393, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 159470, ap++;
[ap + 0] = [ap + -193], ap++;
[ap + 0] = [ap + -193] + [ap + -2], ap++;
call rel 57772;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -4] = [[ap + -36] + 1];
[ap + -3] = [[ap + -36] + 2];
[ap + -2] = [[ap + -36] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 5], ap++;
jmp rel 909 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 4], ap++;
[ap + 0] = [[ap + -38] + 6], ap++;
[ap + 0] = [ap + -39] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 882 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -5] = [[ap + -7] + 1];
[ap + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
[ap + -2] = [[ap + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 6], ap++;
jmp rel 845 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 5], ap++;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -23] + 0], ap++;
[ap + -4] = [[ap + -24] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -26] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -23] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -25] + 1], ap++;
[ap + -7] = [[ap + -26] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -23] + 7];
[ap + -5] = [[ap + -23] + 8];
[ap + -4] = [[ap + -23] + 9];
[ap + -6] = [[ap + -23] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -23] + 7) %}
[ap + 0] = [[ap + -23] + 12], ap++;
jmp rel 768 if [ap + -1] != 0;
[ap + 0] = [[ap + -24] + 11], ap++;
[ap + 0] = [[ap + -25] + 13], ap++;
[ap + 0] = [ap + -26] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 718 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 680 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 635 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -23] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 551;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 529 if [ap + -12] != 0;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[ap + -40] + 0];
[fp + -5] = [[ap + -40] + 1];
[ap + 0] = [[ap + -40] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -5] = [[ap + -36] + 1];
[ap + -4] = [[ap + -36] + 2];
[ap + -6] = [[ap + -36] + 3];
[ap + -16] = [[ap + -36] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 6], ap++;
jmp rel 460 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -42] + 7];
[ap + -4] = [[ap + -42] + 8];
[ap + -3] = [[ap + -42] + 9];
[ap + -2] = [[ap + -42] + 10];
[ap + -21] = [[ap + -42] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42] + 7) %}
[ap + 0] = [[ap + -42] + 13], ap++;
jmp rel 433 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -48] + 14];
[ap + -4] = [[ap + -48] + 15];
[ap + -3] = [[ap + -48] + 16];
[ap + -2] = [[ap + -48] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -48] + 14) %}
[ap + 0] = [[ap + -48] + 19], ap++;
jmp rel 399 if [ap + -1] != 0;
[ap + 0] = [[ap + -49] + 18], ap++;
[ap + 0] = [[ap + -50] + 20], ap++;
[ap + 0] = [ap + -51] + 21, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -20] + 0], ap++;
[ap + 3] = [[ap + -21] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -25] + 2];
jmp rel 356 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -20] + 0];
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 323 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 285 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -24] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 208;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 193 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 160 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 131 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 55521;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -55] + 14];
[ap + -2] = [[ap + -55] + 15];
[ap + -6] = [[ap + -55] + 16];
[ap + -5] = [[ap + -55] + 17];
[ap + -4] = [[ap + -55] + 18];
[ap + -3] = [[ap + -55] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -55] + 14) %}
[ap + 0] = [[ap + -55] + 21], ap++;
jmp rel 87 if [ap + -1] != 0;
[ap + 0] = [[ap + -56] + 20], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -189], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 55492;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -77] + 22];
[ap + -2] = [[ap + -77] + 23];
[ap + -6] = [[ap + -77] + 24];
[ap + -5] = [[ap + -77] + 25];
[ap + -4] = [[ap + -77] + 26];
[ap + -3] = [[ap + -77] + 27];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -77] + 22) %}
[ap + 0] = [[ap + -77] + 29], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[ap + -78] + 28], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -84] + 30];
[ap + -5] = [[ap + -84] + 31];
[ap + -4] = [[ap + -84] + 32];
[ap + -3] = [[ap + -84] + 33];
[ap + -2] = [[ap + -84] + 34];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -84] + 30) %}
[ap + 0] = [[ap + -84] + 36], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -85] + 35], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -89] + 37, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -85] + 35], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -89] + 39, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -91] + 37], ap++;
[ap + 0] = [[ap + -92] + 38], ap++;
ret;
ap += 7;
[ap + 0] = [[ap + -85] + 28], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2] + 11130, ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -89] + 32, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -91] + 30], ap++;
[ap + 0] = [[ap + -92] + 31], ap++;
ret;
ap += 29;
[ap + 0] = [[ap + -85] + 20], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2] + 24510, ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -89] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -91] + 22], ap++;
[ap + 0] = [[ap + -92] + 23], ap++;
ret;
ap += 47;
[ap + 0] = [[ap + -81] + 12], ap++;
[ap + 0] = [ap + -1] + 37430, ap++;
[ap + 0] = [ap + -83] + 16, ap++;
[ap + 0] = [[ap + -84] + 14], ap++;
[ap + 0] = [[ap + -85] + 15], ap++;
jmp rel 11;
ap += 54;
[ap + 0] = [[ap + -81] + 5], ap++;
[ap + 0] = [ap + -1] + 48760, ap++;
[ap + 0] = [ap + -83] + 9, ap++;
[ap + 0] = [[ap + -84] + 7], ap++;
[ap + 0] = [[ap + -85] + 8], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 56;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60] + 59340, ap++;
jmp rel 8;
ap += 59;
[ap + 0] = [ap + -71] + 2, ap++;
[ap + 0] = [ap + -64] + 59710, ap++;
call rel 42345;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 62;
call rel 42341;
[ap + 0] = [ap + -81] + 3, ap++;
[ap + 0] = [ap + -76] + 60060, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 82;
[ap + 0] = [[ap + -92] + 4], ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -2] + 62770, ap++;
[ap + 0] = [ap + -95] + 8, ap++;
[ap + 0] = [[ap + -96] + 6], ap++;
[ap + 0] = [[ap + -97] + 7], ap++;
jmp rel 30;
ap += 74;
call rel 42316;
[ap + 0] = [ap + -105] + 3, ap++;
[ap + 0] = [ap + -88] + 71910, ap++;
[ap + 0] = [ap + -90], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 94;
[ap + 0] = [[ap + -143] + 18], ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = [ap + -2] + 74620, ap++;
[ap + 0] = [ap + -146] + 22, ap++;
[ap + 0] = [[ap + -147] + 20], ap++;
[ap + 0] = [[ap + -148] + 21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 101;
[ap + 0] = [[ap + -144] + 12], ap++;
[ap + 0] = [ap + -1] + 85650, ap++;
[ap + 0] = [ap + -146] + 16, ap++;
[ap + 0] = [[ap + -147] + 14], ap++;
[ap + 0] = [[ap + -148] + 15], ap++;
jmp rel 11;
ap += 107;
[ap + 0] = [[ap + -144] + 5], ap++;
[ap + 0] = [ap + -1] + 96890, ap++;
[ap + 0] = [ap + -146] + 9, ap++;
[ap + 0] = [[ap + -147] + 7], ap++;
[ap + 0] = [[ap + -148] + 8], ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 113;
call rel 76611;
[ap + 0] = [ap + -1] + 76610, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 108540, ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -123] + [ap + -2], ap++;
jmp rel 15;
ap += 116;
call rel 76597;
[ap + 0] = [ap + -1] + 76596, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 108910, ap++;
[ap + 0] = [ap + -134] + 2, ap++;
[ap + 0] = [ap + -127] + [ap + -2], ap++;
call rel 42216;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -168], ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 119;
call rel 76573;
[ap + 0] = [ap + -1] + 76572, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 109260, ap++;
call rel 42204;
[ap + 0] = [ap + -144] + 3, ap++;
[ap + 0] = [ap + -139] + [ap + -8], ap++;
[ap + 0] = [ap + -141], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 139;
[ap + 0] = [[ap + -148] + 4], ap++;
call rel 76552;
[ap + 0] = [ap + -1] + 76551, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 111970, ap++;
[ap + 0] = [ap + -149], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -157] + 8, ap++;
[ap + 0] = [[ap + -158] + 6], ap++;
[ap + 0] = [[ap + -159] + 7], ap++;
jmp rel 44;
ap += 130;
call rel 76534;
[ap + 0] = [ap + -1] + 76533, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 121020, ap++;
call rel 42165;
[ap + 0] = [ap + -155] + 3, ap++;
[ap + 0] = [ap + -150] + [ap + -8], ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 150;
[ap + 0] = [[ap + -174] + 11], ap++;
call rel 76508;
[ap + 0] = [ap + -1] + 76507, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 123730, ap++;
[ap + 0] = [ap + -160], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -183] + 15, ap++;
[ap + 0] = [[ap + -184] + 13], ap++;
[ap + 0] = [[ap + -185] + 14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -168], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 166;
[ap + 0] = [[ap + -174] + 5], ap++;
call rel 76482;
[ap + 0] = [ap + -1] + 76481, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 136280, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -183] + 9, ap++;
[ap + 0] = [[ap + -184] + 7], ap++;
[ap + 0] = [[ap + -185] + 8], ap++;
jmp rel 40;
ap += 167;
call rel 76463;
[ap + 0] = [ap + -1] + 76462, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 146870, ap++;
call rel 56816;
[ap + 0] = [ap + -181] + [ap + -7], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 176;
[ap + 0] = [[ap + -213] + 4], ap++;
call rel 76442;
[ap + 0] = [ap + -1] + 76441, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 147980, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -222] + 8, ap++;
[ap + 0] = [[ap + -223] + 6], ap++;
[ap + 0] = [[ap + -224] + 7], ap++;
[ap + 0] = [ap + -194], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 194;
call rel 76416;
[ap + 0] = [ap + -1] + 76415, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160640, ap++;
call rel 41910;
[ap + 0] = [ap + -217] + 3, ap++;
[ap + 0] = [ap + -215] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 197;
call rel 76392;
[ap + 0] = [ap + -1] + 76391, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161320, ap++;
call rel 56781;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212] + [ap + -8], ap++;
[ap + 0] = [ap + -222], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 199;
call rel 76371;
[ap + 0] = [ap + -1] + 76370, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161400, ap++;
call rel 41838;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -220] + [ap + -8], ap++;
[ap + 0] = [ap + -222], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 214;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 76348;
[ap + 0] = [ap + -1] + 76347, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 163460, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 21;
ap += 226;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 76327;
[ap + 0] = [ap + -1] + 76326, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 175140, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 1303 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 752527710561232487180767849553012286753270539769503636205265964428066285613, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 1261 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 1220;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 1185 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -10] + 2];
jmp rel 1144;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -9] + 2];
[fp + -5] = [ap + 0] + [ap + -7], ap++;
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 202;
call rel 76208;
[ap + 0] = [ap + -1] + 76207, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161900, ap++;
call rel 56579;
[ap + 0] = [ap + -217], ap++;
[ap + 0] = [ap + -217] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -238], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 67;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 190;
call rel 76156;
[ap + 0] = [ap + -1] + 76155, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160280, ap++;
[ap + 0] = [ap + -203] + 1, ap++;
[ap + 0] = [ap + -201] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 194;
call rel 76134;
[ap + 0] = [ap + -1] + 76133, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160910, ap++;
[ap + 0] = [ap + -203], ap++;
[ap + 0] = [ap + -203] + [ap + -2], ap++;
call rel 56512;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -238], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -4] = [[ap + -36] + 1];
[ap + -3] = [[ap + -36] + 2];
[ap + -2] = [[ap + -36] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 5], ap++;
jmp rel 985 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 4], ap++;
[ap + 0] = [[ap + -38] + 6], ap++;
[ap + 0] = [ap + -39] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 958 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -5] = [[ap + -7] + 1];
[ap + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
[ap + -2] = [[ap + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 6], ap++;
jmp rel 921 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 5], ap++;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -23] + 0], ap++;
[ap + -4] = [[ap + -24] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -26] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -23] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -25] + 1], ap++;
[ap + -7] = [[ap + -26] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -23] + 7];
[ap + -5] = [[ap + -23] + 8];
[ap + -4] = [[ap + -23] + 9];
[ap + -6] = [[ap + -23] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -23] + 7) %}
[ap + 0] = [[ap + -23] + 12], ap++;
jmp rel 844 if [ap + -1] != 0;
[ap + 0] = [[ap + -24] + 11], ap++;
[ap + 0] = [[ap + -25] + 13], ap++;
[ap + 0] = [ap + -26] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 794 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 756 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 711 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 675;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -22] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 635;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 13;
[ap + -1] = [[ap + -4] + 0];
ap += 1;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -33] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 551;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 529 if [ap + -12] != 0;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[ap + -50] + 0];
[fp + -5] = [[ap + -50] + 1];
[ap + 0] = [[ap + -50] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -46] + 0];
[ap + -5] = [[ap + -46] + 1];
[ap + -4] = [[ap + -46] + 2];
[ap + -6] = [[ap + -46] + 3];
[ap + -16] = [[ap + -46] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -46]) %}
[ap + 0] = [[ap + -46] + 6], ap++;
jmp rel 460 if [ap + -1] != 0;
[ap + 0] = [[ap + -47] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -52] + 7];
[ap + -4] = [[ap + -52] + 8];
[ap + -3] = [[ap + -52] + 9];
[ap + -2] = [[ap + -52] + 10];
[ap + -21] = [[ap + -52] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -52] + 7) %}
[ap + 0] = [[ap + -52] + 13], ap++;
jmp rel 433 if [ap + -1] != 0;
[ap + 0] = [[ap + -53] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -58] + 14];
[ap + -4] = [[ap + -58] + 15];
[ap + -3] = [[ap + -58] + 16];
[ap + -2] = [[ap + -58] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -58] + 14) %}
[ap + 0] = [[ap + -58] + 19], ap++;
jmp rel 399 if [ap + -1] != 0;
[ap + 0] = [[ap + -59] + 18], ap++;
[ap + 0] = [[ap + -60] + 20], ap++;
[ap + 0] = [ap + -61] + 21, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -20] + 0], ap++;
[ap + 3] = [[ap + -21] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -25] + 2];
jmp rel 356 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -20] + 0];
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 323 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 285 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -24] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 208;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 193 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
[ap + -6] = [[ap + -26] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 6], ap++;
jmp rel 160 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -33] + 7];
[ap + -4] = [[ap + -33] + 8];
[ap + -3] = [[ap + -33] + 9];
[ap + -2] = [[ap + -33] + 10];
[ap + -12] = [[ap + -33] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -33] + 7) %}
[ap + 0] = [[ap + -33] + 13], ap++;
jmp rel 131 if [ap + -1] != 0;
[ap + 0] = [[ap + -34] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 54224;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -55] + 14];
[ap + -2] = [[ap + -55] + 15];
[ap + -6] = [[ap + -55] + 16];
[ap + -5] = [[ap + -55] + 17];
[ap + -4] = [[ap + -55] + 18];
[ap + -3] = [[ap + -55] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -55] + 14) %}
[ap + 0] = [[ap + -55] + 21], ap++;
jmp rel 87 if [ap + -1] != 0;
[ap + 0] = [[ap + -56] + 20], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -200], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 54195;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -77] + 22];
[ap + -2] = [[ap + -77] + 23];
[ap + -6] = [[ap + -77] + 24];
[ap + -5] = [[ap + -77] + 25];
[ap + -4] = [[ap + -77] + 26];
[ap + -3] = [[ap + -77] + 27];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -77] + 22) %}
[ap + 0] = [[ap + -77] + 29], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[ap + -78] + 28], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 882083491679563735264551539375234596690986461837360450045455843572485424637, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -84] + 30];
[ap + -5] = [[ap + -84] + 31];
[ap + -4] = [[ap + -84] + 32];
[ap + -3] = [[ap + -84] + 33];
[ap + -2] = [[ap + -84] + 34];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -84] + 30) %}
[ap + 0] = [[ap + -84] + 36], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -85] + 35], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -89] + 37, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -85] + 35], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -89] + 39, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -91] + 37], ap++;
[ap + 0] = [[ap + -92] + 38], ap++;
ret;
ap += 7;
[ap + 0] = [[ap + -85] + 28], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2] + 11130, ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -89] + 32, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -91] + 30], ap++;
[ap + 0] = [[ap + -92] + 31], ap++;
ret;
ap += 29;
[ap + 0] = [[ap + -85] + 20], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2] + 24510, ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -89] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -91] + 22], ap++;
[ap + 0] = [[ap + -92] + 23], ap++;
ret;
ap += 47;
[ap + 0] = [[ap + -81] + 12], ap++;
[ap + 0] = [ap + -1] + 37430, ap++;
[ap + 0] = [ap + -83] + 16, ap++;
[ap + 0] = [[ap + -84] + 14], ap++;
[ap + 0] = [[ap + -85] + 15], ap++;
jmp rel 11;
ap += 54;
[ap + 0] = [[ap + -81] + 5], ap++;
[ap + 0] = [ap + -1] + 48760, ap++;
[ap + 0] = [ap + -83] + 9, ap++;
[ap + 0] = [[ap + -84] + 7], ap++;
[ap + 0] = [[ap + -85] + 8], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 56;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60] + 59340, ap++;
jmp rel 8;
ap += 59;
[ap + 0] = [ap + -71] + 2, ap++;
[ap + 0] = [ap + -64] + 59710, ap++;
call rel 41620;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 62;
call rel 41044;
[ap + 0] = [ap + -81] + 3, ap++;
[ap + 0] = [ap + -76] + 60060, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 82;
[ap + 0] = [[ap + -92] + 4], ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -2] + 62770, ap++;
[ap + 0] = [ap + -95] + 8, ap++;
[ap + 0] = [[ap + -96] + 6], ap++;
[ap + 0] = [[ap + -97] + 7], ap++;
jmp rel 30;
ap += 74;
call rel 41019;
[ap + 0] = [ap + -105] + 3, ap++;
[ap + 0] = [ap + -88] + 71910, ap++;
[ap + 0] = [ap + -90], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 94;
[ap + 0] = [[ap + -153] + 18], ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = [ap + -2] + 74620, ap++;
[ap + 0] = [ap + -156] + 22, ap++;
[ap + 0] = [[ap + -157] + 20], ap++;
[ap + 0] = [[ap + -158] + 21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 101;
[ap + 0] = [[ap + -154] + 12], ap++;
[ap + 0] = [ap + -1] + 85650, ap++;
[ap + 0] = [ap + -156] + 16, ap++;
[ap + 0] = [[ap + -157] + 14], ap++;
[ap + 0] = [[ap + -158] + 15], ap++;
jmp rel 11;
ap += 107;
[ap + 0] = [[ap + -154] + 5], ap++;
[ap + 0] = [ap + -1] + 96890, ap++;
[ap + 0] = [ap + -156] + 9, ap++;
[ap + 0] = [[ap + -157] + 7], ap++;
[ap + 0] = [[ap + -158] + 8], ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 113;
call rel 75314;
[ap + 0] = [ap + -1] + 75313, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 108540, ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -123] + [ap + -2], ap++;
jmp rel 15;
ap += 116;
call rel 75300;
[ap + 0] = [ap + -1] + 75299, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 108910, ap++;
[ap + 0] = [ap + -134] + 2, ap++;
[ap + 0] = [ap + -127] + [ap + -2], ap++;
call rel 41491;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -178], ap++;
[ap + 0] = [ap + -162], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 132;
call rel 75276;
[ap + 0] = [ap + -1] + 75275, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 110970, ap++;
[ap + 0] = [ap + -145] + 1, ap++;
[ap + 0] = [ap + -143] + [ap + -2], ap++;
jmp rel 15;
ap += 138;
call rel 75261;
[ap + 0] = [ap + -1] + 75260, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 111980, ap++;
[ap + 0] = [ap + -156] + 2, ap++;
[ap + 0] = [ap + -149] + [ap + -2], ap++;
call rel 55658;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -178], ap++;
[ap + 0] = [ap + -162], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 129;
call rel 75237;
[ap + 0] = [ap + -1] + 75236, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 110700, ap++;
call rel 40868;
[ap + 0] = [ap + -154] + 3, ap++;
[ap + 0] = [ap + -149] + [ap + -8], ap++;
[ap + 0] = [ap + -151], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 149;
[ap + 0] = [[ap + -158] + 4], ap++;
call rel 75216;
[ap + 0] = [ap + -1] + 75215, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 113410, ap++;
[ap + 0] = [ap + -159], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -167] + 8, ap++;
[ap + 0] = [[ap + -168] + 6], ap++;
[ap + 0] = [[ap + -169] + 7], ap++;
jmp rel 44;
ap += 140;
call rel 75198;
[ap + 0] = [ap + -1] + 75197, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 122460, ap++;
call rel 40829;
[ap + 0] = [ap + -165] + 3, ap++;
[ap + 0] = [ap + -160] + [ap + -8], ap++;
[ap + 0] = [ap + -162], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 160;
[ap + 0] = [[ap + -184] + 11], ap++;
call rel 75172;
[ap + 0] = [ap + -1] + 75171, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 125170, ap++;
[ap + 0] = [ap + -170], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -193] + 15, ap++;
[ap + 0] = [[ap + -194] + 13], ap++;
[ap + 0] = [[ap + -195] + 14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -178], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 176;
[ap + 0] = [[ap + -184] + 5], ap++;
call rel 75146;
[ap + 0] = [ap + -1] + 75145, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 137720, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -193] + 9, ap++;
[ap + 0] = [[ap + -194] + 7], ap++;
[ap + 0] = [[ap + -195] + 8], ap++;
jmp rel 40;
ap += 177;
call rel 75127;
[ap + 0] = [ap + -1] + 75126, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 148310, ap++;
call rel 55480;
[ap + 0] = [ap + -191] + [ap + -7], ap++;
[ap + 0] = [ap + -193], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 20;
ap += 186;
[ap + 0] = [[ap + -223] + 4], ap++;
call rel 75106;
[ap + 0] = [ap + -1] + 75105, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 149420, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -232] + 8, ap++;
[ap + 0] = [[ap + -233] + 6], ap++;
[ap + 0] = [[ap + -234] + 7], ap++;
[ap + 0] = [ap + -204], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 204;
call rel 75080;
[ap + 0] = [ap + -1] + 75079, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 162080, ap++;
call rel 40574;
[ap + 0] = [ap + -227] + 3, ap++;
[ap + 0] = [ap + -225] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -238], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 207;
call rel 75056;
[ap + 0] = [ap + -1] + 75055, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 162760, ap++;
call rel 55463;
[ap + 0] = [ap + -222], ap++;
[ap + 0] = [ap + -222] + [ap + -8], ap++;
[ap + 0] = [ap + -232], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 209;
call rel 75035;
[ap + 0] = [ap + -1] + 75034, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 162840, ap++;
call rel 40502;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -230] + [ap + -8], ap++;
[ap + 0] = [ap + -232], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 224;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 75012;
[ap + 0] = [ap + -1] + 75011, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 164900, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 21;
ap += 236;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 74991;
[ap + 0] = [ap + -1] + 74990, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 176580, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 248 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 215 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 183;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 157 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 583936847901168531744846041173805170834282611706669097317999134304583535803, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 125 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 93;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 583936847901168531744846041173805170834282611706669097317999134304583535803, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
[fp + -3] = [[ap + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 6], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 53481;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -34] + 7];
[ap + -2] = [[ap + -34] + 8];
[ap + -6] = [[ap + -34] + 9];
[ap + -5] = [[ap + -34] + 10];
[ap + -4] = [[ap + -34] + 11];
[ap + -3] = [[ap + -34] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -34] + 7) %}
[ap + 0] = [[ap + -34] + 14], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -35] + 13], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -38] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -35] + 13], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -38] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 15], ap++;
[ap + 0] = [[ap + -41] + 16], ap++;
ret;
ap += 22;
[ap + 0] = [[ap + -35] + 5], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2] + 13280, ap++;
[ap + 0] = [ap + -38] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 7], ap++;
[ap + 0] = [[ap + -41] + 8], ap++;
ret;
ap += 17;
call rel 40256;
[ap + 0] = [ap + -40] + 3, ap++;
[ap + 0] = [ap + -31] + 23130, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 32;
[ap + 0] = [[ap + -47] + 4], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 25190, ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = [[ap + -51] + 6], ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 32;
call rel 55174;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40] + 35490, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 34;
call rel 40213;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -48] + 35570, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 49;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 37630, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 61;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 49310, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 248 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 215 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 183;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 157 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 752527710561232487180767849553012286753270539769503636205265964428066285613, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 125 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 93;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 752527710561232487180767849553012286753270539769503636205265964428066285613, ap++;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
[fp + -3] = [[ap + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 6], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 53210;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -34] + 7];
[ap + -2] = [[ap + -34] + 8];
[ap + -6] = [[ap + -34] + 9];
[ap + -5] = [[ap + -34] + 10];
[ap + -4] = [[ap + -34] + 11];
[ap + -3] = [[ap + -34] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -34] + 7) %}
[ap + 0] = [[ap + -34] + 14], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -35] + 13], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -38] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -35] + 13], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -38] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 15], ap++;
[ap + 0] = [[ap + -41] + 16], ap++;
ret;
ap += 22;
[ap + 0] = [[ap + -35] + 5], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -2] + 13280, ap++;
[ap + 0] = [ap + -38] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 7], ap++;
[ap + 0] = [[ap + -41] + 8], ap++;
ret;
ap += 17;
call rel 39985;
[ap + 0] = [ap + -40] + 3, ap++;
[ap + 0] = [ap + -31] + 23130, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 32;
[ap + 0] = [[ap + -47] + 4], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 25190, ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = [[ap + -51] + 6], ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 32;
call rel 54903;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40] + 35490, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 34;
call rel 39942;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -48] + 35570, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 49;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 37630, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 61;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 49310, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 583936847901168531744846041173805170834282611706669097317999134304583535803, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 39848;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 752527710561232487180767849553012286753270539769503636205265964428066285613, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 39771;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 54596;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 39635;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 39541;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 9230 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202226, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 363;
[fp + -6] = [ap + 0] + 9230, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 320 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 299;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 251 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 223 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 189 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 161 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 44831;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 73807;
[ap + 0] = [ap + -1] + 73806, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 73920, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -26], ap++;
call rel -5262;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 44775;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 44862;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2640, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4250, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4310, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5920, ap++;
call rel 44840;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 6720, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 8030, ap++;
call rel 44829;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 44692;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 69;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 44653;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73630;
[ap + 0] = [ap + -1] + 73629, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 21;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -10] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 110930206544728495286294282378369001838, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -4] + 600, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 44617;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 44606;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 69;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 44568;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73545;
[ap + 0] = [ap + -1] + 73544, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 21;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -10] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1933726787, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -4] + 600, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 44532;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 44521;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 69;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 44483;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73460;
[ap + 0] = [ap + -1] + 73459, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 0 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 21;
[ap + -3] = [ap + 0] + 0, ap++;
[ap + -1] = [[ap + -10] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -4] + 600, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 44447;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 44436;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 212;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 44398;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 73375;
[ap + 0] = [ap + -1] + 73374, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 25680 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 164;
[ap + -3] = [ap + 0] + 25680, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 603278275252936218847294002513349627170936020082667936993356353388973422646, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 57 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 22 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -2] = [[ap + -3] + 0];
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -6] + 2440, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
ret;
call rel 38889;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2910, ap++;
[ap + 0] = [ap + -13] + 8, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [[ap + -15] + 7], ap++;
jmp rel 26;
call rel 38869;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 11970, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 14880, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 44219;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 44208;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 95;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 44121;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 73097;
[ap + 0] = [ap + -1] + 73096, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28290, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 38;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -5478;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 44065;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 44170;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 44033;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5990 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205466, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 233;
[fp + -6] = [ap + 0] + 5990, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 190 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 169;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 121 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 100;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 43896;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 72872;
[ap + 0] = [ap + -1] + 72871, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 28690, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 41;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 337994139936370667767799129369552596157394447336989834104582481799883947719, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -26], ap++;
call rel 51582;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 43835;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 43931;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 3480, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4790, ap++;
call rel 43920;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 43783;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 336;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 293 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 272;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 224 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 196 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 162 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 134 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 43593;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 72569;
[ap + 0] = [ap + -1] + 72568, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 52220, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 80;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -3] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 41 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5] + 5, ap++;
[ap + 0] = [[ap + -5] + 2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -29], ap++;
call rel 51463;
jmp rel 18 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 400, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 20;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 72498;
[ap + 0] = [ap + -1] + 72497, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 41020, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -10] + [ap + -3], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 43493;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 43578;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 43567;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 43430;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 307;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 264 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 243;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 195 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 167 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 133 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 105 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 43240;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 72216;
[ap + 0] = [ap + -1] + 72215, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 171250, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 51;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -6092;
jmp rel 27 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 700, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 43169;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 43254;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 43243;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 43106;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 9130 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202326, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 377;
[fp + -6] = [ap + 0] + 9130, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 334 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 313;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 265 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 244;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 196 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 168 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 134 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 106 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 42867;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71843;
[ap + 0] = [ap + -1] + 71842, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 208080, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 52;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -6257;
jmp rel 27 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 700, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 42795;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 42871;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 42860;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 6620, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7930, ap++;
call rel 42849;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 42712;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 42522;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71498;
[ap + 0] = [ap + -1] + 71497, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 190200, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -6093;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 42465;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 42550;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 42539;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 42402;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7020 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204436, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 293;
[fp + -6] = [ap + 0] + 7020, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 229;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 42212;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 71188;
[ap + 0] = [ap + -1] + 71187, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 191740, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -5143;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 42155;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 42240;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 4510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5820, ap++;
call rel 42229;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 42092;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 42004;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 70981;
[ap + 0] = [ap + -1] + 70980, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 61620 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 61620, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 61620, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -4008;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41956;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 42062;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41926;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 41839;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 70816;
[ap + 0] = [ap + -1] + 70815, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 61620 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 61620, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 61620, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3902;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41791;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 41897;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41761;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 41723;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 70700;
[ap + 0] = [ap + -1] + 70699, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 583936847901168531744846041173805170834282611706669097317999134304583535803, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 36102;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41620;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41609;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 41571;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 70548;
[ap + 0] = [ap + -1] + 70547, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 752527710561232487180767849553012286753270539769503636205265964428066285613, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 35950;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41468;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41457;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 41370;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 70347;
[ap + 0] = [ap + -1] + 70346, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3946;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41322;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 41428;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41292;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 41254;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 70231;
[ap + 0] = [ap + -1] + 70230, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 35633;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41151;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41140;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -13] = [[fp + -12] + 1];
[ap + -3] = [[fp + -12] + 2];
[ap + -2] = [[fp + -12] + 3];
[fp + -11] = [[fp + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12]) %}
[ap + 0] = [[fp + -12] + 6], ap++;
jmp rel 244 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1348305951527947176197996150099996768135568100278228324332296863363671678046, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 7];
[ap + -4] = [[fp + -12] + 8];
[ap + -3] = [[fp + -12] + 9];
[ap + -2] = [[fp + -12] + 10];
[fp + -10] = [[fp + -12] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 7) %}
[ap + 0] = [[fp + -12] + 13], ap++;
jmp rel 216 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1526171809504728374681023080986779835603913378952539665964907005446042711382, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 14];
[ap + -4] = [[fp + -12] + 15];
[ap + -3] = [[fp + -12] + 16];
[ap + -2] = [[fp + -12] + 17];
[fp + -9] = [[fp + -12] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 14) %}
[ap + 0] = [[fp + -12] + 20], ap++;
jmp rel 188 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 21];
[ap + -4] = [[fp + -12] + 22];
[ap + -3] = [[fp + -12] + 23];
[ap + -2] = [[fp + -12] + 24];
[fp + -8] = [[fp + -12] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 21) %}
[ap + 0] = [[fp + -12] + 27], ap++;
jmp rel 160 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 28];
[ap + -4] = [[fp + -12] + 29];
[ap + -3] = [[fp + -12] + 30];
[ap + -2] = [[fp + -12] + 31];
[fp + -7] = [[fp + -12] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 28) %}
[ap + 0] = [[fp + -12] + 34], ap++;
jmp rel 128 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 33], ap++;
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 35];
[ap + -4] = [[fp + -12] + 36];
[ap + -3] = [[fp + -12] + 37];
[ap + -2] = [[fp + -12] + 38];
[fp + -6] = [[fp + -12] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 35) %}
[ap + 0] = [[fp + -12] + 41], ap++;
jmp rel 99 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 42];
[ap + -4] = [[fp + -12] + 43];
[ap + -3] = [[fp + -12] + 44];
[ap + -2] = [[fp + -12] + 45];
[fp + -5] = [[fp + -12] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 42) %}
[ap + 0] = [[fp + -12] + 48], ap++;
jmp rel 67 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 47], ap++;
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 49];
[ap + -4] = [[fp + -12] + 50];
[ap + -3] = [[fp + -12] + 51];
[ap + -2] = [[fp + -12] + 52];
[fp + -4] = [[fp + -12] + 53];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 49) %}
[ap + 0] = [[fp + -12] + 55], ap++;
jmp rel 38 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 54], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 550745618288514420865049528178905533793015440408502280175295526239113481224, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 56];
[ap + -4] = [[fp + -12] + 57];
[ap + -3] = [[fp + -12] + 58];
[ap + -2] = [[fp + -12] + 59];
[fp + -3] = [[fp + -12] + 60];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 56) %}
[ap + 0] = [[fp + -12] + 62], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 61], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 63, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -12] + 61], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 65, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 63], ap++;
[ap + 0] = [[fp + -12] + 64], ap++;
ret;
ap += 2;
[ap + 0] = [[fp + -12] + 54], ap++;
[ap + 0] = [ap + -1] + 10580, ap++;
[ap + 0] = [fp + -12] + 58, ap++;
[ap + 0] = [[fp + -12] + 56], ap++;
[ap + 0] = [[fp + -12] + 57], ap++;
jmp rel 11;
ap += 9;
[ap + 0] = [[fp + -12] + 47], ap++;
[ap + 0] = [ap + -1] + 21910, ap++;
[ap + 0] = [fp + -12] + 51, ap++;
[ap + 0] = [[fp + -12] + 49], ap++;
[ap + 0] = [[fp + -12] + 50], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -12] + 40], ap++;
[ap + 0] = [ap + -1] + 32950, ap++;
[ap + 0] = [fp + -12] + 44, ap++;
[ap + 0] = [[fp + -12] + 42], ap++;
[ap + 0] = [[fp + -12] + 43], ap++;
jmp rel 11;
ap += 22;
[ap + 0] = [[fp + -12] + 33], ap++;
[ap + 0] = [ap + -1] + 44280, ap++;
[ap + 0] = [fp + -12] + 37, ap++;
[ap + 0] = [[fp + -12] + 35], ap++;
[ap + 0] = [[fp + -12] + 36], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 32;
[ap + 0] = [[fp + -12] + 26], ap++;
[ap + 0] = [ap + -1] + 55780, ap++;
[ap + 0] = [fp + -12] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 28], ap++;
[ap + 0] = [[fp + -12] + 29], ap++;
ret;
ap += 38;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = [ap + -1] + 66920, ap++;
[ap + 0] = [fp + -12] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 21], ap++;
[ap + 0] = [[fp + -12] + 22], ap++;
ret;
ap += 44;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [ap + -1] + 78060, ap++;
[ap + 0] = [fp + -12] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 14], ap++;
[ap + 0] = [[fp + -12] + 15], ap++;
ret;
ap += 50;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -1] + 89200, ap++;
[ap + 0] = [fp + -12] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 7], ap++;
[ap + 0] = [[fp + -12] + 8], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 1073 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 259523929711825362140243228515225597705787863985601064547190058713747408810, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -9] = [[fp + -7] + 6];
[ap + -8] = [[fp + -7] + 7];
[ap + -7] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 1024 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -10] + 0], ap++;
[ap + 3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -10] + 2];
jmp rel 972 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -10] + 0];
[ap + 0] = 259523929711825362140243228515225597705787863985601064547190058713747408810, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 930 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 883 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [ap + -19] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 13;
[ap + -1] = [[ap + -13] + 1];
ap += 5;
[ap + 0] = [ap + -18] + 2, ap++;
[ap + 0] = [ap + -10] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 1] = [ap + -12] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 2];
jmp rel 819;
[ap + -1] = [[ap + -18] + 2];
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 795 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 259523929711825362140243228515225597705787863985601064547190058713747408810, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -4] = [[ap + -21] + 1];
[ap + -3] = [[ap + -21] + 2];
[ap + -2] = [[ap + -21] + 3];
[ap + -6] = [[ap + -21] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 6], ap++;
jmp rel 753 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = 259523929711825362140243228515225597705787863985601064547190058713747408810, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -28] + 7];
[ap + -4] = [[ap + -28] + 8];
[ap + -3] = [[ap + -28] + 9];
[ap + -2] = [[ap + -28] + 10];
[ap + -12] = [[ap + -28] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28] + 7) %}
[ap + 0] = [[ap + -28] + 13], ap++;
jmp rel 715 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -34] + 14];
[ap + -4] = [[ap + -34] + 15];
[ap + -3] = [[ap + -34] + 16];
[ap + -2] = [[ap + -34] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -34] + 14) %}
[ap + 0] = [[ap + -34] + 19], ap++;
jmp rel 672 if [ap + -1] != 0;
[ap + 0] = [[ap + -35] + 18], ap++;
[ap + 0] = [[ap + -36] + 20], ap++;
[ap + 0] = [ap + -37] + 21, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -27] + 0], ap++;
[ap + 3] = [[ap + -28] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -32] + 2];
jmp rel 620 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -27] + 0];
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 578 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 531 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 493;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[fp + -5] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -4], ap++;
[fp + -6] = [ap + 1] + [ap + -25], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 449;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 5], ap++;
jmp rel 404 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -21] + 6], ap++;
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 352 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -11] + 0];
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 310 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 263 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 225;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [fp + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -23] = [ap + 1] + [fp + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 183;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -2] = [[ap + -15] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 3], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 2], ap++;
[ap + 0] = [[ap + -17] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -88] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[ap + -88] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -17] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -7] = [[ap + -17] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -31] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [[ap + -24] + 1], ap++;
call rel 49776;
[ap + 0] = [fp + -8] + 6, ap++;
jmp rel 68 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 57 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = [ap + -249], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 50427;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -45] + 0];
[ap + -2] = [[ap + -45] + 1];
[ap + -6] = [[ap + -45] + 2];
[ap + -5] = [[ap + -45] + 3];
[ap + -4] = [[ap + -45] + 4];
[ap + -3] = [[ap + -45] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -45]) %}
[ap + 0] = [[ap + -45] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [ap + -213], ap++;
ret;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 8], ap++;
[ap + 0] = [[ap + -53] + 9], ap++;
ret;
ap += 37;
[ap + 0] = [ap + -38] + 14830, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
jmp rel 8;
ap += 38;
[ap + 0] = [ap + -45] + 15120, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 158;
[ap + 0] = [[ap + -174] + 2], ap++;
call rel 69251;
[ap + 0] = [ap + -1] + 69250, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 123650, ap++;
[ap + 0] = [ap + -170], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -185] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -187] + 4], ap++;
[ap + 0] = [[ap + -188] + 5], ap++;
ret;
ap += 154;
call rel 69229;
[ap + 0] = [ap + -1] + 69228, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 133290, ap++;
[ap + 0] = [ap + -168] + 1, ap++;
[ap + 0] = [ap + -166] + [ap + -2], ap++;
jmp rel 17;
ap += 160;
call rel 69212;
[ap + 0] = [ap + -1] + 69211, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 134300, ap++;
[ap + 0] = [ap + -179] + 2, ap++;
[ap + 0] = [ap + -172] + [ap + -2], ap++;
call rel 50386;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -185], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 151;
call rel 69186;
[ap + 0] = [ap + -1] + 69185, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 133020, ap++;
call rel 34815;
[ap + 0] = [ap + -177] + 3, ap++;
[ap + 0] = [ap + -172] + [ap + -8], ap++;
[ap + 0] = [ap + -174], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 171;
[ap + 0] = [[ap + -181] + 4], ap++;
call rel 69163;
[ap + 0] = [ap + -1] + 69162, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 135730, ap++;
[ap + 0] = [ap + -182], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -191] + 8, ap++;
[ap + 0] = [[ap + -192] + 6], ap++;
[ap + 0] = [[ap + -193] + 7], ap++;
jmp rel 48;
ap += 163;
call rel 69143;
[ap + 0] = [ap + -1] + 69142, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 144870, ap++;
call rel 34772;
[ap + 0] = [ap + -192] + 3, ap++;
[ap + 0] = [ap + -184] + [ap + -8], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 183;
[ap + 0] = [[ap + -203] + 4], ap++;
call rel 69115;
[ap + 0] = [ap + -1] + 69114, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 147580, ap++;
[ap + 0] = [ap + -197], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -213] + 8, ap++;
[ap + 0] = [[ap + -214] + 6], ap++;
[ap + 0] = [[ap + -215] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 186;
call rel 69088;
[ap + 0] = [ap + -1] + 69087, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 158050, ap++;
[ap + 0] = [ap + -202] + 1, ap++;
[ap + 0] = [ap + -198] + [ap + -2], ap++;
jmp rel 17;
ap += 194;
call rel 69071;
[ap + 0] = [ap + -1] + 69070, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 159240, ap++;
[ap + 0] = [ap + -213] + 2, ap++;
[ap + 0] = [ap + -206] + [ap + -2], ap++;
call rel 50254;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -219], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 185;
call rel 69045;
[ap + 0] = [ap + -1] + 69044, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 157960, ap++;
call rel 34674;
[ap + 0] = [ap + -211] + 3, ap++;
[ap + 0] = [ap + -206] + [ap + -8], ap++;
[ap + 0] = [ap + -208], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 205;
[ap + 0] = [[ap + -215] + 4], ap++;
call rel 69022;
[ap + 0] = [ap + -1] + 69021, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160670, ap++;
[ap + 0] = [ap + -216], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -225] + 8, ap++;
[ap + 0] = [[ap + -226] + 6], ap++;
[ap + 0] = [[ap + -227] + 7], ap++;
jmp rel 48;
ap += 197;
call rel 69002;
[ap + 0] = [ap + -1] + 69001, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 169810, ap++;
call rel 34631;
[ap + 0] = [ap + -242] + 3, ap++;
[ap + 0] = [ap + -218] + [ap + -8], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 217;
[ap + 0] = [[ap + -252] + 18], ap++;
call rel 68974;
[ap + 0] = [ap + -1] + 68973, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 172520, ap++;
[ap + 0] = [ap + -247], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -262] + 22, ap++;
[ap + 0] = [[ap + -263] + 20], ap++;
[ap + 0] = [[ap + -264] + 21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 224;
[ap + 0] = [[ap + -253] + 12], ap++;
call rel 68946;
[ap + 0] = [ap + -1] + 68945, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 183550, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -262] + 16, ap++;
[ap + 0] = [[ap + -263] + 14], ap++;
[ap + 0] = [[ap + -264] + 15], ap++;
jmp rel 20;
ap += 231;
[ap + 0] = [[ap + -253] + 5], ap++;
call rel 68926;
[ap + 0] = [ap + -1] + 68925, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 194880, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -262] + 9, ap++;
[ap + 0] = [[ap + -263] + 7], ap++;
[ap + 0] = [[ap + -264] + 8], ap++;
[ap + 0] = [ap + -252], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 233;
call rel 68900;
[ap + 0] = [ap + -1] + 68899, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205460, ap++;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -244] + [ap + -2], ap++;
jmp rel 17;
ap += 236;
call rel 68884;
[ap + 0] = [ap + -1] + 68883, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205830, ap++;
[ap + 0] = [ap + -262] + 3, ap++;
[ap + 0] = [ap + -248] + [ap + -2], ap++;
call rel 34501;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -268], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 234;
call rel 68858;
[ap + 0] = [ap + -1] + 68857, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205450, ap++;
call rel 34487;
[ap + 0] = [ap + -260] + 3, ap++;
[ap + 0] = [ap + -255] + [ap + -8], ap++;
[ap + 0] = [ap + -257], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 254;
[ap + 0] = [[ap + -264] + 4], ap++;
call rel 68835;
[ap + 0] = [ap + -1] + 68834, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 208160, ap++;
[ap + 0] = [ap + -265], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -274] + 8, ap++;
[ap + 0] = [[ap + -275] + 6], ap++;
[ap + 0] = [[ap + -276] + 7], ap++;
jmp rel 48;
ap += 246;
call rel 68815;
[ap + 0] = [ap + -1] + 68814, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 217300, ap++;
call rel 34444;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -267] + [ap + -8], ap++;
[ap + 0] = [ap + -269], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 266;
[ap + 0] = [[fp + -7] + 9], ap++;
call rel 68787;
[ap + 0] = [ap + -1] + 68786, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 220010, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 283;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 68759;
[ap + 0] = [ap + -1] + 68758, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 232040, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
ret;
ap += 7;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -13] + 0];
[fp + -11] = [[fp + -13] + 1];
[ap + 0] = [[fp + -13] + 2], ap++;
[ap + -1] = [[fp + -13] + 3];
[fp + -10] = [[fp + -13] + 4];
[ap + 0] = [[fp + -13] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -15] + 0], ap++;
[ap + -4] = [[fp + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -15] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -15] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -15] + 1], ap++;
[ap + -7] = [[fp + -15] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -15] + 3, ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 49898;
[fp + 1] = [fp + -13] + 6;
jmp rel 379 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 361 if [ap + -11] != 0;
[ap + 0] = [ap + -1], ap++;
[fp + 6] = [ap + -11];
[fp + 2] = [ap + -10];
[fp + 3] = [ap + -9];
[fp + 4] = [ap + -8];
[fp + 5] = [ap + -7];
[fp + 0] = [ap + -3];
jmp rel 8 if [ap + -5] != 0;
ap += 2;
[ap + 0] = [ap + -3] + 80, ap++;
jmp rel 7;
[ap + -5] = [ap + 0] + [fp + -9], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 321 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 7, ap++;
call rel 50842;
jmp rel 23 if [ap + -1] != 0;
call rel 68657;
[ap + 0] = [ap + -1] + 68656, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 154910, ap++;
call rel 50911;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -20] + [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1526171809504728374681023080986779835603913378952539665964907005446042711382, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -26] + 0];
[ap + -4] = [[ap + -26] + 1];
[ap + -3] = [[ap + -26] + 2];
[ap + -2] = [[ap + -26] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -26]) %}
[ap + 0] = [[ap + -26] + 5], ap++;
jmp rel 252 if [ap + -1] != 0;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [ap + -29] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -37] + 0], ap++;
[ap + -4] = [[ap + -38] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -39] + 2];
jmp rel 213;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -36] + 0], ap++;
[ap + -3] = [[ap + -37] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -38] + 2];
[ap + 0] = [ap + -38] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -8], ap++;
call rel 50857;
jmp rel 171 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 23 if [ap + -2] != 0;
call rel 68577;
[ap + 0] = [ap + -1] + 68576, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 124430, ap++;
call rel 50942;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -15] + [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + 1] + 0];
[fp + -11] = [[fp + 1] + 1];
[ap + 0] = [[fp + 1] + 2], ap++;
[ap + -1] = [[fp + 1] + 3];
[fp + -10] = [[fp + 1] + 4];
[ap + 0] = [[fp + 1] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -17] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -7] = [[ap + -17] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 6], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [fp + 0], ap++;
call rel 48937;
[ap + 0] = [fp + 1] + 6, ap++;
jmp rel 72 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 63 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 49584;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -45] + 0];
[ap + -2] = [[ap + -45] + 1];
[ap + -6] = [[ap + -45] + 2];
[ap + -5] = [[ap + -45] + 3];
[ap + -4] = [[ap + -45] + 4];
[ap + -3] = [[ap + -45] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -45]) %}
[ap + 0] = [[ap + -45] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 8], ap++;
[ap + 0] = [[ap + -53] + 9], ap++;
ret;
[ap + 0] = [ap + -1] + 15300, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -8] + 15490, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 68411;
[ap + 0] = [ap + -1] + 68410, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 125330, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + [ap + -2], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
call rel 68392;
[ap + 0] = [ap + -1] + 68391, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 141800, ap++;
call rel 33859;
[ap + 0] = [ap + -52] + 3, ap++;
[ap + 0] = [ap + -21] + [ap + -8], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
[ap + 0] = [[ap + -27] + 4], ap++;
call rel 68371;
[ap + 0] = [ap + -1] + 68370, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 144010, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -37] + 8, ap++;
[ap + 0] = [[ap + -38] + 6], ap++;
[ap + 0] = [[ap + -39] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 68346;
[ap + 0] = [ap + -1] + 68345, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 156010, ap++;
call rel 50720;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -15] + [ap + -8], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 68325;
[ap + 0] = [ap + -1] + 68324, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 157350, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 17;
ap += 1;
call rel 68308;
[ap + 0] = [ap + -1] + 68307, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 157540, ap++;
[ap + 0] = [ap + -21] + [ap + -1], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 49447;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 682 if [ap + -12] != 0;
[ap + 0] = [ap + -14], ap++;
jmp rel 662 if [ap + -12] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 5, ap++;
call rel 50411;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 330;
call rel 68223;
[ap + 0] = [ap + -1] + 68222, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 180940, ap++;
call rel 50606;
[ap + 0] = [ap + -365], ap++;
[ap + 0] = [ap + -345] + [ap + -8], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -366], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
jmp rel 25 if [ap + -12] != 0;
ap += 329;
call rel 68197;
[ap + 0] = [ap + -1] + 68196, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 180750, ap++;
call rel 50562;
[ap + 0] = [ap + -365], ap++;
[ap + 0] = [ap + -344] + [ap + -8], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -366], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 550745618288514420865049528178905533793015440408502280175295526239113481224, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -25] + 0];
[ap + -4] = [[ap + -25] + 1];
[ap + -3] = [[ap + -25] + 2];
[ap + -2] = [[ap + -25] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -25]) %}
[ap + 0] = [[ap + -25] + 5], ap++;
jmp rel 563 if [ap + -1] != 0;
[ap + 0] = [[ap + -26] + 4], ap++;
[ap + 0] = [[ap + -27] + 6], ap++;
[ap + 0] = [ap + -28] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -36] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -38] + 1], ap++;
[ap + -5] = [[ap + -39] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 520 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -33] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -34] + 1];
[ap + 0] = [ap + -34] + 2, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
call rel 37201;
[ap + 0] = [ap + -90], ap++;
jmp rel 479 if [ap + -2] != 0;
[ap + 0] = 10000, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -37], ap++;
[ap + -152] = [ap + 1] + [ap + -34], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -45] + 15];
jmp rel 13;
[ap + -1] = [[ap + -44] + 15];
ap += 1;
[ap + 0] = [ap + -45] + 16, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -45] + 16, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -160] = [ap + 1] + [ap + -42], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 312;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 288 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -151] + 0];
[ap + -4] = [[ap + -151] + 1];
[ap + -3] = [[ap + -151] + 2];
[ap + -2] = [[ap + -151] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -151]) %}
[ap + 0] = [[ap + -151] + 5], ap++;
jmp rel 246 if [ap + -1] != 0;
[ap + 0] = [[ap + -152] + 4], ap++;
[ap + 0] = [[ap + -153] + 6], ap++;
[ap + 0] = [ap + -154] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -19] + 2];
jmp rel 205;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -18] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -183] = [[ap + -1] + 0];
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + -2] = [[ap + -3] + 1];
[ap + -1] = [[ap + -3] + 2];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1329909728320632088402217562277154056711815095720684343816173432540100887380, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 3, ap++;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -6] = [[ap + -16] + 1];
[ap + -17] = [[ap + -16] + 2];
[ap + -5] = [[ap + -16] + 3];
[ap + -4] = [[ap + -16] + 4];
[ap + -3] = [[ap + -16] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 7], ap++;
jmp rel 148 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[ap + -189] + 0];
[fp + -4] = [[ap + -189] + 1];
[ap + 0] = [[ap + -189] + 2], ap++;
[ap + -1] = [[ap + -190] + 3];
[fp + -3] = [[ap + -190] + 4];
[ap + 0] = [[ap + -190] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -30] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -212], ap++;
call rel 48286;
[ap + 0] = [ap + -309] + 6, ap++;
jmp rel 71 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 60 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -319], ap++;
[ap + 0] = [ap + -322], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -210], ap++;
[ap + 0] = [ap + -210], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 48936;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -45] + 0];
[ap + -2] = [[ap + -45] + 1];
[ap + -6] = [[ap + -45] + 2];
[ap + -5] = [[ap + -45] + 3];
[ap + -4] = [[ap + -45] + 4];
[ap + -3] = [[ap + -45] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -45]) %}
[ap + 0] = [[ap + -45] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 8], ap++;
[ap + 0] = [[ap + -53] + 9], ap++;
ret;
ap += 37;
[ap + 0] = [ap + -38] + 14830, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
jmp rel 8;
ap += 38;
[ap + 0] = [ap + -45] + 15120, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 156;
[ap + 0] = [[ap + -173] + 6], ap++;
call rel 67758;
[ap + 0] = [ap + -1] + 67757, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 123470, ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -184] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -186] + 8], ap++;
[ap + 0] = [[ap + -187] + 9], ap++;
ret;
ap += 155;
call rel 67736;
[ap + 0] = [ap + -1] + 67735, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 134080, ap++;
call rel 33203;
[ap + 0] = [ap + -187] + 3, ap++;
[ap + 0] = [ap + -176] + [ap + -8], ap++;
[ap + 0] = [ap + -178], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 170;
[ap + 0] = [[ap + -322] + 4], ap++;
call rel 67713;
[ap + 0] = [ap + -1] + 67712, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 136140, ap++;
[ap + 0] = [ap + -187], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -332] + 8, ap++;
[ap + 0] = [[ap + -333] + 6], ap++;
[ap + 0] = [[ap + -334] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 173;
call rel 67686;
[ap + 0] = [ap + -1] + 67685, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 146710, ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -184] + [ap + -2], ap++;
jmp rel 17;
ap += 176;
call rel 67670;
[ap + 0] = [ap + -1] + 67669, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 147080, ap++;
[ap + 0] = [ap + -195] + 2, ap++;
[ap + 0] = [ap + -188] + [ap + -2], ap++;
call rel 33859;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -338], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 230;
call rel 67644;
[ap + 0] = [ap + -1] + 67643, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 155310, ap++;
call rel 36921;
[ap + 0] = [ap + -248], ap++;
[ap + 0] = [ap + -245] + [ap + -8], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -338], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 308;
call rel 67621;
[ap + 0] = [ap + -1] + 67620, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 167750, ap++;
call rel 50013;
[ap + 0] = [ap + -360] + 3, ap++;
[ap + 0] = [ap + -330] + [ap + -8], ap++;
[ap + 0] = [ap + -332], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 324;
[ap + 0] = [[ap + -350] + 4], ap++;
call rel 67598;
[ap + 0] = [ap + -1] + 67597, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 169900, ap++;
[ap + 0] = [ap + -360], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -360] + 8, ap++;
[ap + 0] = [[ap + -361] + 6], ap++;
[ap + 0] = [[ap + -362] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 339;
call rel 67571;
[ap + 0] = [ap + -1] + 67570, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 182250, ap++;
[ap + 0] = [ap + -347] + [ap + -1], ap++;
[ap + 0] = [ap + -351], ap++;
[ap + 0] = [ap + -351], ap++;
jmp rel 17;
ap += 340;
call rel 67554;
[ap + 0] = [ap + -1] + 67553, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 182540, ap++;
[ap + 0] = [ap + -361] + [ap + -1], ap++;
[ap + 0] = [ap + -351], ap++;
[ap + 0] = [ap + -351], ap++;
[ap + 0] = [ap + -365], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -353], ap++;
[ap + 0] = [ap + -366], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 393 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 351 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -9] + 2];
jmp rel 310;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -9] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 275 if [ap + -3] != 0;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 48632;
[ap + 0] = [fp + -7] + 6, ap++;
jmp rel 201 if [ap + -12] != 0;
[ap + 0] = [ap + -14], ap++;
jmp rel 181 if [ap + -12] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 7, ap++;
call rel 49596;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 150;
call rel 67408;
[ap + 0] = [ap + -1] + 67407, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 122830, ap++;
call rel 49662;
[ap + 0] = [ap + -185], ap++;
[ap + 0] = [ap + -165] + [ap + -8], ap++;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[ap + -9] + 0];
[fp + -5] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + -1] = [[ap + -10] + 3];
[fp + -4] = [[ap + -10] + 4];
[ap + 0] = [[ap + -10] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -29] + 0], ap++;
[ap + -4] = [[ap + -30] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -32] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -29] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -31] + 1], ap++;
[ap + -7] = [[ap + -32] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -32] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -32], ap++;
call rel 47768;
[ap + 0] = [ap + -129] + 6, ap++;
jmp rel 75 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 64 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -143], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 48414;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -45] + 0];
[ap + -2] = [[ap + -45] + 1];
[ap + -6] = [[ap + -45] + 2];
[ap + -5] = [[ap + -45] + 3];
[ap + -4] = [[ap + -45] + 4];
[ap + -3] = [[ap + -45] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -45]) %}
[ap + 0] = [[ap + -45] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -46] + 6], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 8], ap++;
[ap + 0] = [[ap + -53] + 9], ap++;
ret;
ap += 37;
[ap + 0] = [ap + -38] + 14830, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
jmp rel 8;
ap += 38;
[ap + 0] = [ap + -45] + 15120, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 159;
call rel 67237;
[ap + 0] = [ap + -1] + 67236, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 124140, ap++;
[ap + 0] = [ap + -167] + [ap + -1], ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = [ap + -171], ap++;
jmp rel 17;
ap += 160;
call rel 67220;
[ap + 0] = [ap + -1] + 67219, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 124430, ap++;
[ap + 0] = [ap + -181] + [ap + -1], ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = [ap + -171], ap++;
[ap + 0] = [ap + -185], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 344;
call rel 67196;
[ap + 0] = [ap + -1] + 67195, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 240230, ap++;
call rel 49597;
[ap + 0] = [ap + -359], ap++;
[ap + 0] = [ap + -359] + [ap + -8], ap++;
[ap + 0] = [ap + -369], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 346;
call rel 67175;
[ap + 0] = [ap + -1] + 67174, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 240310, ap++;
call rel 32642;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -367] + [ap + -8], ap++;
[ap + 0] = [ap + -369], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 361;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 67152;
[ap + 0] = [ap + -1] + 67151, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 242370, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
jmp rel 21;
ap += 373;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 67131;
[ap + 0] = [ap + -1] + 67130, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 254050, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 48267;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 44 if [ap + -12] != 0;
[ap + 0] = [ap + -14], ap++;
jmp rel 18 if [ap + -12] != 0;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
[ap + 0] = 1535244326476166891633274808768811514549123859525814648129826610839650504361, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 48149;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 23 if [ap + -12] != 0;
[ap + 0] = [ap + -14], ap++;
jmp rel 15 if [ap + -12] != 0;
ap += 3;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -15] + 190, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 835100775334183486745639679421990425780772683925567844505862365064453933415, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 49177;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 32231;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 29181354129173842777986664643016590936338547756389468873462835460113004701, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 48988;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 32042;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 550745618288514420865049528178905533793015440408502280175295526239113481224, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 48835;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 31889;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 48682;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 31736;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 31642;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 18430 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768193026, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 698;
[fp + -6] = [ap + 0] + 18430, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 656 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 635;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 588 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 567;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 520 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 499;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 452 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 431;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 384 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 356 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 322 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 294 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 250 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -13] + 0], ap++;
[ap + 3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -18] + 2];
jmp rel 222 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 188 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 160 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -16] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -18] + 1], ap++;
[ap + -5] = [[ap + -19] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 92 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 36680;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 65657;
[ap + 0] = [ap + -1] + 65656, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 102100 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 102100, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 41;
[ap + -3] = [ap + 0] + 102100, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -121], ap++;
[ap + 0] = [ap + -108], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -24], ap++;
call rel -4480;
[ap + 0] = [ap + -83] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 36624;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 36676;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2170, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3780, ap++;
jmp rel 11;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -8] + 3840, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 5450, ap++;
call rel 36655;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 5510, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7120, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 7180, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 8790, ap++;
call rel 36634;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 9590, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 10900, ap++;
call rel 36624;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 11700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 13010, ap++;
call rel 36614;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 13810, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 15120, ap++;
call rel 36604;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 15920, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 17230, ap++;
call rel 36594;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 36458;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 7820 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768203636, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 321;
[fp + -6] = [ap + 0] + 7820, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 278 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 250 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 216 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 188 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 165;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -11] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 121 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 0], ap++;
[ap + -4] = [[ap + -21] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -22] + 2];
jmp rel 100;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -19] + 0], ap++;
[ap + -3] = [[ap + -20] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -21] + 2];
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 36257;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 65233;
[ap + 0] = [ap + -1] + 65232, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 247470, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 41;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -27], ap++;
call rel -4637;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 36196;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 36283;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 36281;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 4280, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3340, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4950, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 5010, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6620, ap++;
call rel 36258;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 36121;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = 17390 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768194066, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 356;
[fp + -6] = [ap + 0] + 17390, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 313 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 285 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 251 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 223 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 200;
[fp + 3] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[fp + 1] = [ap + -20];
[fp + 2] = [ap + -9];
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 156 if [ap + -2] != 0;
[fp + 0] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -17] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -19] + 1], ap++;
[ap + -5] = [[ap + -20] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 132 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[ap + -14] + 0];
[ap + 0] = [fp + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -15] + 1];
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
call rel 47327;
jmp rel 107 if [ap + -9] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 92 if [ap + -7] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 35906;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 64882;
[ap + 0] = [ap + -1] + 64881, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 278950, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 0];
jmp rel 43;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
call rel -3892;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35843;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -32] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35930;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -9] + 1770, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12] + 2670, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -9] + 10780, ap++;
jmp rel 5;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -6] + 12280, ap++;
call rel 35908;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35906;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 13850, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 12910, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 14520, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 14580, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 16190, ap++;
call rel 35883;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35746;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 223;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 180 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 152 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 90 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 35605;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 64581;
[ap + 0] = [ap + -1] + 64580, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 306480, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 36;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3733;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35549;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 35643;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35506;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 203 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 175 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 141 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 113 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 90;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 35355;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 64331;
[ap + 0] = [ap + -1] + 64330, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 270580, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -3230;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35298;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35403;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 35380;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35243;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 236;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 193 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 165 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 131 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 103 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 35102;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 64078;
[ap + 0] = [ap + -1] + 64077, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 123540, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 49;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3056;
jmp rel 26 if [ap + -10] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 46696;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15] + 3300, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35033;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 35127;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 34990;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 267;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 224 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 196 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 162 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 134 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 34849;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 63825;
[ap + 0] = [ap + -1] + 63824, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 120940, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 80;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3191;
jmp rel 57 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel [ap + -3];
jmp rel 34;
jmp rel 23;
jmp rel 12;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 28;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 19;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 10;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1000, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 34749;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 34843;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 34706;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 34565;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 63542;
[ap + 0] = [ap + -1] + 63541, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3384;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 34516;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 34611;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 34475;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 34335;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 63312;
[ap + 0] = [ap + -1] + 63311, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3425;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 34286;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 34381;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 34245;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 34157;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 63134;
[ap + 0] = [ap + -1] + 63133, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3413;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 34109;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 34215;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 34079;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 33992;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 62969;
[ap + 0] = [ap + -1] + 62968, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3425;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 33944;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 34050;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 33914;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 33876;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 62853;
[ap + 0] = [ap + -1] + 62852, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 28255;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 33773;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 33762;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -10] = [[fp + -9] + 1];
[ap + -3] = [[fp + -9] + 2];
[ap + -2] = [[fp + -9] + 3];
[fp + -8] = [[fp + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 6], ap++;
jmp rel 155 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 7];
[ap + -4] = [[fp + -9] + 8];
[ap + -3] = [[fp + -9] + 9];
[ap + -2] = [[fp + -9] + 10];
[fp + -7] = [[fp + -9] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 7) %}
[ap + 0] = [[fp + -9] + 13], ap++;
jmp rel 127 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 14];
[ap + -4] = [[fp + -9] + 15];
[ap + -3] = [[fp + -9] + 16];
[ap + -2] = [[fp + -9] + 17];
[fp + -6] = [[fp + -9] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 14) %}
[ap + 0] = [[fp + -9] + 20], ap++;
jmp rel 95 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 19], ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 21];
[ap + -4] = [[fp + -9] + 22];
[ap + -3] = [[fp + -9] + 23];
[ap + -2] = [[fp + -9] + 24];
[fp + -5] = [[fp + -9] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 21) %}
[ap + 0] = [[fp + -9] + 27], ap++;
jmp rel 66 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 403807365716931852510979360495474669369490483994409651540023026512438364891, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 28];
[ap + -4] = [[fp + -9] + 29];
[ap + -3] = [[fp + -9] + 30];
[ap + -2] = [[fp + -9] + 31];
[fp + -4] = [[fp + -9] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 28) %}
[ap + 0] = [[fp + -9] + 34], ap++;
jmp rel 38 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 33], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1554135586687059158691464313662966902437295769797289876725410156637463848378, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -9] + 35];
[ap + -4] = [[fp + -9] + 36];
[ap + -3] = [[fp + -9] + 37];
[ap + -2] = [[fp + -9] + 38];
[fp + -3] = [[fp + -9] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 35) %}
[ap + 0] = [[fp + -9] + 41], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -9] + 42, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -9] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -9] + 44, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 42], ap++;
[ap + 0] = [[fp + -9] + 43], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -9] + 33], ap++;
[ap + 0] = [ap + -1] + 11040, ap++;
[ap + 0] = [fp + -9] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 35], ap++;
[ap + 0] = [[fp + -9] + 36], ap++;
ret;
ap += 8;
[ap + 0] = [[fp + -9] + 26], ap++;
[ap + 0] = [ap + -1] + 21720, ap++;
[ap + 0] = [fp + -9] + 30, ap++;
[ap + 0] = [[fp + -9] + 28], ap++;
[ap + 0] = [[fp + -9] + 29], ap++;
jmp rel 11;
ap += 15;
[ap + 0] = [[fp + -9] + 19], ap++;
[ap + 0] = [ap + -1] + 33050, ap++;
[ap + 0] = [fp + -9] + 23, ap++;
[ap + 0] = [[fp + -9] + 21], ap++;
[ap + 0] = [[fp + -9] + 22], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 25;
[ap + 0] = [[fp + -9] + 12], ap++;
[ap + 0] = [ap + -1] + 44550, ap++;
[ap + 0] = [fp + -9] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 14], ap++;
[ap + 0] = [[fp + -9] + 15], ap++;
ret;
ap += 31;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [ap + -1] + 55690, ap++;
[ap + 0] = [fp + -9] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -9] + 7], ap++;
[ap + 0] = [[fp + -9] + 8], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 777 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -2] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 45214;
[ap + 0] = [fp + -7] + 3, ap++;
jmp rel 702 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 682 if [ap + -13] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 656 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -4] = [[ap + -20] + 1];
[ap + -3] = [[ap + -20] + 2];
[ap + -2] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 614 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -28] + 0], ap++;
[ap + 3] = [[ap + -29] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -33] + 2];
jmp rel 562 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -28] + 0];
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -32] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 520 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 473 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 435;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[fp + -4] = [ap + 1] + [ap + -23], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 393;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + -4] = [[ap + -17] + 1];
[ap + -3] = [[ap + -17] + 2];
[ap + -2] = [[ap + -17] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17]) %}
[ap + 0] = [[ap + -17] + 5], ap++;
jmp rel 348 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 4], ap++;
[ap + 0] = [[ap + -19] + 6], ap++;
[ap + 0] = [ap + -20] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -14] + 0], ap++;
[ap + -4] = [[ap + -15] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -16] + 2];
jmp rel 307;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -13] + 0], ap++;
[ap + -3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -15] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -3] = [[ap + -10] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 3], ap++;
jmp rel 266 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 2], ap++;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -19] + 5];
[ap + -5] = [[ap + -19] + 6];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 5) %}
[ap + 0] = [[ap + -19] + 8], ap++;
jmp rel 229 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 7], ap++;
[ap + 0] = [[ap + -21] + 9], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[ap + -66] + 0];
[ap + -248] = [[ap + -66] + 1];
[ap + 0] = [[ap + -66] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -21] + 0], ap++;
[ap + -4] = [[ap + -22] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -24] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -21] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -23] + 1], ap++;
[ap + -7] = [[ap + -24] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -34] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -261], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [[ap + -21] + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 46144;
[ap + 0] = [ap + -197] + 3, ap++;
jmp rel 142 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 124 if [ap + -5] != 0;
[ap + 0] = 892831332077295033575207595541551688973278767908702850266232499306953315355, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -5] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -18] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -7] = [[ap + -18] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -5] = [[ap + -21] + 1];
[ap + -4] = [[ap + -21] + 2];
[ap + -6] = [[ap + -21] + 3];
[ap + -395] = [[ap + -21] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 6], ap++;
jmp rel 59 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 5], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -402], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 46606;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -45] + 7];
[ap + -2] = [[ap + -45] + 8];
[ap + -6] = [[ap + -45] + 9];
[ap + -5] = [[ap + -45] + 10];
[ap + -4] = [[ap + -45] + 11];
[ap + -3] = [[ap + -45] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -45] + 7) %}
[ap + 0] = [[ap + -45] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -46] + 13], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -50] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -46] + 13], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -50] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 15], ap++;
[ap + 0] = [[ap + -53] + 16], ap++;
ret;
ap += 24;
[ap + 0] = [[ap + -46] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 13660, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -50] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
[ap + 0] = [[ap + -53] + 8], ap++;
ret;
ap += 31;
call rel 62105;
[ap + 0] = [ap + -1] + 62104, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25500, ap++;
[ap + 0] = [ap + -38] + [ap + -1], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
jmp rel 15;
ap += 32;
call rel 62090;
[ap + 0] = [ap + -1] + 62089, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25790, ap++;
[ap + 0] = [ap + -45] + [ap + -1], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 169;
[ap + 0] = [[ap + -189] + 7], ap++;
call rel 62067;
[ap + 0] = [ap + -1] + 62066, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 146120, ap++;
[ap + 0] = [ap + -189], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -200] + 11, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -202] + 9], ap++;
[ap + 0] = [[ap + -203] + 10], ap++;
ret;
ap += 178;
[ap + 0] = [[ap + -189] + 2], ap++;
call rel 62044;
[ap + 0] = [ap + -1] + 62043, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 157230, ap++;
[ap + 0] = [ap + -189], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -200] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -202] + 4], ap++;
[ap + 0] = [[ap + -203] + 5], ap++;
ret;
ap += 171;
call rel 62022;
[ap + 0] = [ap + -1] + 62021, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 166600, ap++;
call rel 27489;
[ap + 0] = [ap + -200] + 3, ap++;
[ap + 0] = [ap + -192] + [ap + -8], ap++;
[ap + 0] = [ap + -194], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 186;
[ap + 0] = [[ap + -204] + 4], ap++;
call rel 61999;
[ap + 0] = [ap + -1] + 61998, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 168660, ap++;
[ap + 0] = [ap + -200], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -214] + 8, ap++;
[ap + 0] = [[ap + -215] + 6], ap++;
[ap + 0] = [[ap + -216] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 189;
call rel 61972;
[ap + 0] = [ap + -1] + 61971, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 179130, ap++;
[ap + 0] = [ap + -203] + 1, ap++;
[ap + 0] = [ap + -201] + [ap + -2], ap++;
jmp rel 17;
ap += 195;
call rel 61955;
[ap + 0] = [ap + -1] + 61954, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 180140, ap++;
[ap + 0] = [ap + -214] + 2, ap++;
[ap + 0] = [ap + -207] + [ap + -2], ap++;
call rel 46482;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 186;
call rel 61929;
[ap + 0] = [ap + -1] + 61928, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 178860, ap++;
call rel 27558;
[ap + 0] = [ap + -212] + 3, ap++;
[ap + 0] = [ap + -207] + [ap + -8], ap++;
[ap + 0] = [ap + -209], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 206;
[ap + 0] = [[ap + -216] + 4], ap++;
call rel 61906;
[ap + 0] = [ap + -1] + 61905, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 181570, ap++;
[ap + 0] = [ap + -217], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -226] + 8, ap++;
[ap + 0] = [[ap + -227] + 6], ap++;
[ap + 0] = [[ap + -228] + 7], ap++;
jmp rel 48;
ap += 198;
call rel 61886;
[ap + 0] = [ap + -1] + 61885, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 190710, ap++;
call rel 27515;
[ap + 0] = [ap + -244] + 3, ap++;
[ap + 0] = [ap + -219] + [ap + -8], ap++;
[ap + 0] = [ap + -221], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 218;
[ap + 0] = [[ap + -239] + 4], ap++;
call rel 61858;
[ap + 0] = [ap + -1] + 61857, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 193420, ap++;
[ap + 0] = [ap + -249], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -249] + 8, ap++;
[ap + 0] = [[ap + -250] + 6], ap++;
[ap + 0] = [[ap + -251] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 223;
call rel 61831;
[ap + 0] = [ap + -1] + 61830, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 204270, ap++;
call rel 46370;
[ap + 0] = [ap + -254], ap++;
[ap + 0] = [ap + -238] + [ap + -8], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -255], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 227;
call rel 61808;
[ap + 0] = [ap + -1] + 61807, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 204730, ap++;
[ap + 0] = [ap + -235] + [ap + -1], ap++;
[ap + 0] = [ap + -239], ap++;
[ap + 0] = [ap + -239], ap++;
jmp rel 17;
ap += 228;
call rel 61791;
[ap + 0] = [ap + -1] + 61790, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205020, ap++;
[ap + 0] = [ap + -250] + [ap + -1], ap++;
[ap + 0] = [ap + -239], ap++;
[ap + 0] = [ap + -239], ap++;
[ap + 0] = [ap + -254], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -241], ap++;
[ap + 0] = [ap + -255], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 415;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 61766;
[ap + 0] = [ap + -1] + 61765, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 331430, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 670 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 628 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 587;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 552 if [ap + -3] != 0;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 44359;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 481 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 461 if [ap + -13] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 435 if [ap + -9] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -2] = [[ap + -18] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 3], ap++;
jmp rel 404 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 2], ap++;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[ap + -10] + 0];
[fp + -3] = [[ap + -10] + 1];
[ap + 0] = [[ap + -10] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -30] + 0], ap++;
[ap + -4] = [[ap + -31] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -33] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -30] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -32] + 1], ap++;
[ap + -7] = [[ap + -33] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -33] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -33] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [[ap + -21] + 1], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -33], ap++;
call rel 45474;
[ap + 0] = [ap + -141] + 3, ap++;
jmp rel 320 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 302 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[ap + -3] = [[ap + -11] + 2];
[ap + -2] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 262 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 221 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -19] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = 873477173449744760621369809601123387760648482369539306629498776106913580960, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -6] = [[ap + -14] + 1];
[ap + 0] = [[ap + -14] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -26] + 2], ap++;
[ap + -4] = [[ap + -27] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -29] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -26] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -28] + 3], ap++;
[ap + -7] = [[ap + -29] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = [ap + -32] + 5, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -5] = [[ap + -18] + 1];
[ap + -4] = [[ap + -18] + 2];
[ap + -6] = [[ap + -18] + 3];
[fp + -3] = [[ap + -18] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 6], ap++;
jmp rel 150 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -21] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -24] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -25] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 121;
[ap + 1] = [ap + -25] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -5] = [[ap + -10] + 1];
[ap + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
[ap + -6] = [[ap + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 6], ap++;
jmp rel 86 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -14] + 7];
[ap + -2] = [[ap + -14] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14] + 7) %}
[ap + 0] = [[ap + -14] + 10], ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 9], ap++;
[ap + 0] = [[ap + -16] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -9] + 1], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 45847;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -40] + 12];
[ap + -2] = [[ap + -40] + 13];
[ap + -6] = [[ap + -40] + 14];
[ap + -5] = [[ap + -40] + 15];
[ap + -4] = [[ap + -40] + 16];
[ap + -3] = [[ap + -40] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -40] + 12) %}
[ap + 0] = [[ap + -40] + 19], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -41] + 18], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -45] + 20, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -41] + 18], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -45] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -47] + 20], ap++;
[ap + 0] = [[ap + -48] + 21], ap++;
ret;
ap += 26;
[ap + 0] = [[ap + -41] + 9], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 13840, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -45] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -47] + 11], ap++;
[ap + 0] = [[ap + -48] + 12], ap++;
ret;
ap += 30;
[ap + 0] = [[ap + -41] + 5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 24500, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -45] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -47] + 7], ap++;
[ap + 0] = [[ap + -48] + 8], ap++;
ret;
ap += 31;
call rel 27597;
[ap + 0] = [ap + -47] + 1, ap++;
[ap + 0] = [ap + -42] + 34990, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 43;
[ap + 0] = [[ap + -62] + 5], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -2] + 36440, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -66] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -68] + 7], ap++;
[ap + 0] = [[ap + -69] + 8], ap++;
ret;
ap += 37;
call rel 61303;
[ap + 0] = [ap + -1] + 61302, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 46840, ap++;
call rel 27569;
[ap + 0] = [ap + -74] + 3, ap++;
[ap + 0] = [ap + -58] + [ap + -8], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 53;
[ap + 0] = [[ap + -65] + 4], ap++;
call rel 61282;
[ap + 0] = [ap + -1] + 61281, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 48990, ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -74] + 8, ap++;
[ap + 0] = [[ap + -75] + 6], ap++;
[ap + 0] = [[ap + -76] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 61;
call rel 61257;
[ap + 0] = [ap + -1] + 61256, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 60110, ap++;
[ap + 0] = [ap + -68] + [ap + -1], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -72], ap++;
jmp rel 15;
ap += 62;
call rel 61242;
[ap + 0] = [ap + -1] + 61241, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 60400, ap++;
[ap + 0] = [ap + -75] + [ap + -1], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 199;
[ap + 0] = [[ap + -218] + 2], ap++;
call rel 61219;
[ap + 0] = [ap + -1] + 61218, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 180730, ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [ap + -229] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -231] + 4], ap++;
[ap + 0] = [[ap + -232] + 5], ap++;
ret;
ap += 197;
call rel 61197;
[ap + 0] = [ap + -1] + 61196, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 190750, ap++;
call rel 45736;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -212] + [ap + -8], ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [ap + -229], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 201;
call rel 61174;
[ap + 0] = [ap + -1] + 61173, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 191210, ap++;
[ap + 0] = [ap + -209] + [ap + -1], ap++;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [ap + -213], ap++;
jmp rel 17;
ap += 202;
call rel 61157;
[ap + 0] = [ap + -1] + 61156, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 191500, ap++;
[ap + 0] = [ap + -224] + [ap + -1], ap++;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [ap + -229], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 376;
call rel 61133;
[ap + 0] = [ap + -1] + 61132, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 316540, ap++;
call rel 45681;
[ap + 0] = [ap + -391], ap++;
[ap + 0] = [ap + -391] + [ap + -8], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 378;
call rel 61112;
[ap + 0] = [ap + -1] + 61111, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 316620, ap++;
call rel 26579;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -399] + [ap + -8], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 393;
[ap + 0] = [[fp + -4] + 9], ap++;
call rel 61089;
[ap + 0] = [ap + -1] + 61088, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 318680, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 21;
ap += 405;
[ap + 0] = [[fp + -4] + 2], ap++;
call rel 61068;
[ap + 0] = [ap + -1] + 61067, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 330360, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 398 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 356 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 315;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 280 if [ap + -3] != 0;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 43656;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 211 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 193 if [ap + -13] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 23 if [ap + -9] != 0;
ap += 152;
call rel 60927;
[ap + 0] = [ap + -1] + 60926, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 143480, ap++;
call rel 45486;
[ap + 0] = [ap + -182], ap++;
[ap + 0] = [ap + -166] + [ap + -8], ap++;
[ap + 0] = [ap + -169], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[ap + -4] + 0];
[fp + -3] = [[ap + -4] + 1];
[ap + 0] = [[ap + -4] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -24] + 0], ap++;
[ap + -4] = [[ap + -25] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -27] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -24] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -26] + 1], ap++;
[ap + -7] = [[ap + -27] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -27] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -27], ap++;
call rel 44762;
[ap + 0] = [ap + -135] + 3, ap++;
jmp rel 96 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 85 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -2] = [[ap + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 3], ap++;
jmp rel 63 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -9] + 1], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 45263;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -35] + 5];
[ap + -2] = [[ap + -35] + 6];
[ap + -6] = [[ap + -35] + 7];
[ap + -5] = [[ap + -35] + 8];
[ap + -4] = [[ap + -35] + 9];
[ap + -3] = [[ap + -35] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -35] + 5) %}
[ap + 0] = [[ap + -35] + 12], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -36] + 11], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -40] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -36] + 11], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -40] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 13], ap++;
[ap + 0] = [[ap + -43] + 14], ap++;
ret;
ap += 26;
[ap + 0] = [[ap + -36] + 2], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -2] + 13840, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -40] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -42] + 4], ap++;
[ap + 0] = [[ap + -43] + 5], ap++;
ret;
ap += 27;
[ap + 0] = [ap + -28] + 24130, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
jmp rel 8;
ap += 28;
[ap + 0] = [ap + -35] + 24420, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 156;
call rel 60739;
[ap + 0] = [ap + -1] + 60738, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 143940, ap++;
[ap + 0] = [ap + -163] + [ap + -1], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -167], ap++;
jmp rel 15;
ap += 157;
call rel 60724;
[ap + 0] = [ap + -1] + 60723, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 144230, ap++;
[ap + 0] = [ap + -178] + [ap + -1], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -182], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -169], ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 330;
call rel 60702;
[ap + 0] = [ap + -1] + 60701, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 269180, ap++;
call rel 45250;
[ap + 0] = [ap + -345], ap++;
[ap + 0] = [ap + -345] + [ap + -8], ap++;
[ap + 0] = [ap + -355], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 332;
call rel 60681;
[ap + 0] = [ap + -1] + 60680, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 269260, ap++;
call rel 26148;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -353] + [ap + -8], ap++;
[ap + 0] = [ap + -355], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 347;
[ap + 0] = [[fp + -4] + 9], ap++;
call rel 60658;
[ap + 0] = [ap + -1] + 60657, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 271320, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 21;
ap += 359;
[ap + 0] = [[fp + -4] + 2], ap++;
call rel 60637;
[ap + 0] = [ap + -1] + 60636, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 283000, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 919 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -2] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 43275;
[ap + 0] = [fp + -7] + 3, ap++;
jmp rel 844 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 824 if [ap + -13] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 25 if [ap + -9] != 0;
ap += 483;
call rel 60546;
[ap + 0] = [ap + -1] + 60545, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 363130, ap++;
call rel 45112;
[ap + 0] = [ap + -514], ap++;
[ap + 0] = [ap + -498] + [ap + -8], ap++;
[ap + 0] = [ap + -501], ap++;
[ap + 0] = [ap + -515], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 380399219957990785808227865262557561983086966506409870698903802235701193624, ap++;
[ap + -1] = [[ap + -4] + 0];
[fp + -5] = [[ap + -4] + 1];
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + -1] = [[ap + -5] + 3];
[fp + -4] = [[ap + -5] + 4];
[ap + 0] = [[ap + -5] + 5], ap++;
[ap + -1] = [[ap + -6] + 6];
[ap + -188] = [[ap + -6] + 7];
[ap + 0] = [[ap + -6] + 8], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -26] + 0], ap++;
[ap + -4] = [[ap + -27] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -29] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -26] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -28] + 1], ap++;
[ap + -7] = [[ap + -29] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 45063;
[ap + 0] = [ap + -98] + 9, ap++;
jmp rel 721 if [ap + -8] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 701 if [ap + -8] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 675 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -2] = [[ap + -13] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 3], ap++;
jmp rel 644 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 2], ap++;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 380399219957990785808227865262557561983086966506409870698903802235701193624, ap++;
[ap + -1] = [[ap + -10] + 0];
[fp + -5] = [[ap + -10] + 1];
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + -1] = [[ap + -11] + 3];
[fp + -4] = [[ap + -11] + 4];
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + -1] = [[ap + -12] + 6];
[ap + -292] = [[ap + -12] + 7];
[ap + 0] = [[ap + -12] + 8], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -27] + 0], ap++;
[ap + -4] = [[ap + -28] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -30] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -27] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -29] + 1], ap++;
[ap + -7] = [[ap + -30] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -30] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -307], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -21] + 1], ap++;
call rel 45403;
[ap + 0] = [ap + -70] + 9, ap++;
jmp rel 558 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 538 if [ap + -5] != 0;
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -5] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[fp + -4] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 6, ap++;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -22] + 0];
[ap + -5] = [[ap + -22] + 1];
[ap + -4] = [[ap + -22] + 2];
[ap + -6] = [[ap + -22] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22]) %}
[ap + 0] = [[ap + -22] + 5], ap++;
jmp rel 457 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 4], ap++;
[ap + 0] = [[ap + -24] + 6], ap++;
[ap + 0] = [ap + -25] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 414 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -7] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -8] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 373;
[ap + 1] = [ap + -8] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[ap + -16] + 0];
[fp + -5] = [[ap + -16] + 1];
[ap + 0] = [[ap + -16] + 2], ap++;
[ap + -1] = [[ap + -17] + 3];
[fp + -4] = [[ap + -17] + 4];
[ap + 0] = [[ap + -17] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -21] + 3], ap++;
[ap + -4] = [[ap + -22] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -24] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -21] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -23] + 4], ap++;
[ap + -7] = [[ap + -24] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -27] + 6, ap++;
[ap + 0] = [ap + -27] + 6, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -5] = [[ap + -24] + 1];
[ap + -4] = [[ap + -24] + 2];
[ap + -6] = [[ap + -24] + 3];
[ap + -16] = [[ap + -24] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 6], ap++;
jmp rel 292 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -27] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [ap + -221] + [ap + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 13;
[ap + -1] = [[ap + -10] + 0];
ap += 5;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -10] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -230], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 1] = [ap + -225] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 1];
jmp rel 228;
[ap + -1] = [[ap + -15] + 1];
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 204 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -2] = [[ap + -16] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 3], ap++;
jmp rel 173 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 2], ap++;
[ap + 0] = [[ap + -18] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[ap + -27] + 0];
[ap + -418] = [[ap + -27] + 1];
[ap + 0] = [[ap + -27] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -31] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [[ap + -21] + 1], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -259], ap++;
call rel 44041;
[ap + 0] = [ap + -158] + 3, ap++;
jmp rel 88 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 68 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -558], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 44555;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -29] + 0];
[ap + -2] = [[ap + -29] + 1];
[ap + -6] = [[ap + -29] + 2];
[ap + -5] = [[ap + -29] + 3];
[ap + -4] = [[ap + -29] + 4];
[ap + -3] = [[ap + -29] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29]) %}
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -34] + 8, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 45273;
ret;
ap += 99;
[ap + 0] = [[ap + -129] + 6], ap++;
call rel 60080;
[ap + 0] = [ap + -1] + 60079, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 54480, ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -140] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -142] + 8], ap++;
[ap + 0] = [[ap + -143] + 9], ap++;
ret;
ap += 120;
call rel 60058;
[ap + 0] = [ap + -1] + 60057, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 67870, ap++;
[ap + 0] = [ap + -128] + [ap + -1], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -132], ap++;
jmp rel 17;
ap += 121;
call rel 60041;
[ap + 0] = [ap + -1] + 60040, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 68160, ap++;
[ap + 0] = [ap + -135] + [ap + -1], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 259;
[ap + 0] = [[ap + -276] + 2], ap++;
call rel 60016;
[ap + 0] = [ap + -1] + 60015, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 188580, ap++;
[ap + 0] = [ap + -274], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -287] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -289] + 4], ap++;
[ap + 0] = [[ap + -290] + 5], ap++;
ret;
ap += 255;
call rel 59994;
[ap + 0] = [ap + -1] + 59993, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 198320, ap++;
[ap + 0] = [ap + -266], ap++;
[ap + 0] = [ap + -266] + [ap + -2], ap++;
jmp rel 17;
ap += 258;
call rel 59978;
[ap + 0] = [ap + -1] + 59977, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 198690, ap++;
[ap + 0] = [ap + -281] + 2, ap++;
[ap + 0] = [ap + -270] + [ap + -2], ap++;
call rel 25595;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -287], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 278;
[ap + 0] = [[ap + -303] + 5], ap++;
call rel 59951;
[ap + 0] = [ap + -1] + 59950, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 201130, ap++;
[ap + 0] = [ap + -289], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -314] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -316] + 7], ap++;
[ap + 0] = [[ap + -317] + 8], ap++;
ret;
ap += 289;
call rel 59929;
[ap + 0] = [ap + -1] + 59928, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 213430, ap++;
call rel 26184;
[ap + 0] = [ap + -316] + 3, ap++;
[ap + 0] = [ap + -307] + [ap + -8], ap++;
[ap + 0] = [ap + -319], ap++;
[ap + 0] = [ap + -314], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 284;
call rel 59905;
[ap + 0] = [ap + -1] + 59904, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 212980, ap++;
call rel 26169;
[ap + 0] = [ap + -311] + 3, ap++;
[ap + 0] = [ap + -306] + [ap + -8], ap++;
[ap + 0] = [ap + -308], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 300;
[ap + 0] = [[ap + -323] + 4], ap++;
call rel 59882;
[ap + 0] = [ap + -1] + 59881, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 215130, ap++;
[ap + 0] = [ap + -311], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -333] + 8, ap++;
[ap + 0] = [[ap + -334] + 6], ap++;
[ap + 0] = [[ap + -335] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -319], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 319;
call rel 59855;
[ap + 0] = [ap + -1] + 59854, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 228150, ap++;
[ap + 0] = [ap + -327] + [ap + -1], ap++;
[ap + 0] = [ap + -331], ap++;
[ap + 0] = [ap + -331], ap++;
jmp rel 17;
ap += 320;
call rel 59838;
[ap + 0] = [ap + -1] + 59837, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 7, ap++;
[ap + 0] = [ap + -1] + 228440, ap++;
[ap + 0] = [ap + -334] + [ap + -1], ap++;
[ap + 0] = [ap + -331], ap++;
[ap + 0] = [ap + -331], ap++;
[ap + 0] = [ap + -338], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -333], ap++;
[ap + 0] = [ap + -339], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 387;
[ap + 0] = [[ap + -401] + 2], ap++;
call rel 59813;
[ap + 0] = [ap + -1] + 59812, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 288850, ap++;
[ap + 0] = [ap + -411], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -403], ap++;
[ap + 0] = [ap + -412] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -414] + 4], ap++;
[ap + 0] = [[ap + -415] + 5], ap++;
ret;
ap += 385;
call rel 59791;
[ap + 0] = [ap + -1] + 59790, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 298870, ap++;
call rel 45182;
[ap + 0] = [ap + -411], ap++;
[ap + 0] = [ap + -400] + [ap + -8], ap++;
[ap + 0] = [ap + -403], ap++;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 389;
call rel 59768;
[ap + 0] = [ap + -1] + 59767, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 299330, ap++;
[ap + 0] = [ap + -397] + [ap + -1], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -401], ap++;
jmp rel 17;
ap += 390;
call rel 59751;
[ap + 0] = [ap + -1] + 59750, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 299620, ap++;
[ap + 0] = [ap + -407] + [ap + -1], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -401], ap++;
[ap + 0] = [ap + -411], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -403], ap++;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 487;
call rel 59727;
[ap + 0] = [ap + -1] + 59726, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 363590, ap++;
[ap + 0] = [ap + -495] + [ap + -1], ap++;
[ap + 0] = [ap + -499], ap++;
[ap + 0] = [ap + -499], ap++;
jmp rel 17;
ap += 488;
call rel 59710;
[ap + 0] = [ap + -1] + 59709, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 13, ap++;
[ap + 0] = [ap + -1] + 363880, ap++;
[ap + 0] = [ap + -510] + [ap + -1], ap++;
[ap + 0] = [ap + -499], ap++;
[ap + 0] = [ap + -499], ap++;
[ap + 0] = [ap + -514], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -501], ap++;
[ap + 0] = [ap + -515], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 675;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 59685;
[ap + 0] = [ap + -1] + 59684, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 490290, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -11] = [[fp + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 3], ap++;
jmp rel 1008 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -9] + 5];
[ap + -9] = [[fp + -9] + 6];
[ap + -8] = [[fp + -9] + 7];
[ap + -7] = [[fp + -9] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9] + 5) %}
[ap + 0] = [[fp + -9] + 10], ap++;
jmp rel 966 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 9], ap++;
[ap + 0] = [[fp + -9] + 11], ap++;
[ap + 0] = [fp + -9] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -12] + 0], ap++;
[ap + -4] = [[fp + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -12] + 2];
jmp rel 925;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -12] + 0], ap++;
[ap + -3] = [[fp + -12] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -12] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 890 if [ap + -3] != 0;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -8] = [[fp + -10] + 1];
[ap + 0] = [[fp + -10] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 42278;
[ap + 0] = [fp + -10] + 3, ap++;
jmp rel 821 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 803 if [ap + -13] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 23 if [ap + -9] != 0;
ap += 356;
call rel 59549;
[ap + 0] = [ap + -1] + 59548, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 194430, ap++;
call rel 44108;
[ap + 0] = [ap + -386], ap++;
[ap + 0] = [ap + -370] + [ap + -8], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -387], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1554135586687059158691464313662966902437295769797289876725410156637463848378, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 0];
[ap + -4] = [[ap + -20] + 1];
[ap + -3] = [[ap + -20] + 2];
[ap + -2] = [[ap + -20] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20]) %}
[ap + 0] = [[ap + -20] + 5], ap++;
jmp rel 739 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 4], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -31] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -33] + 1], ap++;
[ap + -5] = [[ap + -34] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 698 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -28] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -29] + 1];
[ap + 0] = [ap + -29] + 2, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
call rel 28555;
[ap + 0] = [ap + -90], ap++;
jmp rel 659 if [ap + -2] != 0;
[ap + 0] = 10000, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -37], ap++;
[ap + -34] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -45] + 15];
jmp rel 43;
[ap + -1] = [[ap + -44] + 15];
[ap + 0] = [ap + -44] + 16, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -38] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 4;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 530, ap++;
jmp rel 18;
[ap + 0] = [ap + -2], ap++;
[ap + -41] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 1;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5] + 90, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 15;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 6;
[ap + 0] = [ap + -51] + 16, ap++;
[ap + 0] = [ap + -11] + 910, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + -159] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 1;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -167] = [ap + 1] + [ap + -9], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 437;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 415 if [ap + -12] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -173] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -174] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 382;
[ap + 1] = [ap + -174] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -9] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -170] + 0];
[ap + -5] = [[ap + -170] + 1];
[ap + -4] = [[ap + -170] + 2];
[ap + -3] = [[ap + -170] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -170]) %}
[ap + 0] = [[ap + -170] + 5], ap++;
jmp rel 336 if [ap + -1] != 0;
[ap + 0] = [[ap + -171] + 4], ap++;
[ap + 0] = [[ap + -172] + 6], ap++;
[ap + 0] = [ap + -173] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 286 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 246 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 201 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + -32] = [ap + 1] + [ap + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 42;
[ap + -1] = [[ap + -13] + 1];
[ap + 0] = [ap + -13] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -36] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 4;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7] + 530, ap++;
jmp rel 18;
[ap + 0] = [ap + -2], ap++;
[ap + -39] = [ap + 1] + [ap + -25], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 12;
[ap + -1] = [[ap + -6] + 0];
ap += 1;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5] + 90, ap++;
[ap + 0] = [ap + -218], ap++;
jmp rel 15;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 6;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -13] + 910, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[ap + -214] + 0];
[fp + -8] = [[ap + -214] + 1];
[ap + 0] = [[ap + -214] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = [ap + -62], ap++;
call rel 42962;
[ap + 0] = [ap + -345] + 3, ap++;
jmp rel 67 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 56 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -203], ap++;
[ap + 0] = [ap + -203], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel 43478;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -29] + 0];
[ap + -2] = [[ap + -29] + 1];
[ap + -6] = [[ap + -29] + 2];
[ap + -5] = [[ap + -29] + 3];
[ap + -4] = [[ap + -29] + 4];
[ap + -3] = [[ap + -29] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29]) %}
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -34] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -34] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -36] + 8], ap++;
[ap + 0] = [[ap + -37] + 9], ap++;
ret;
ap += 21;
[ap + 0] = [ap + -22] + 13290, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
jmp rel 8;
ap += 22;
[ap + 0] = [ap + -29] + 13580, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 146;
call rel 58968;
[ap + 0] = [ap + -1] + 58967, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 132640, ap++;
call rel 24599;
[ap + 0] = [ap + -171] + 3, ap++;
[ap + 0] = [ap + -166] + [ap + -8], ap++;
[ap + 0] = [ap + -168], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 166;
[ap + 0] = [[ap + -176] + 4], ap++;
call rel 58947;
[ap + 0] = [ap + -1] + 58946, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 135350, ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -185] + 8, ap++;
[ap + 0] = [[ap + -186] + 6], ap++;
[ap + 0] = [[ap + -187] + 7], ap++;
jmp rel 44;
ap += 158;
call rel 58929;
[ap + 0] = [ap + -1] + 58928, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 144490, ap++;
call rel 24560;
[ap + 0] = [ap + -183] + 3, ap++;
[ap + 0] = [ap + -178] + [ap + -8], ap++;
[ap + 0] = [ap + -180], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 178;
[ap + 0] = [[ap + -349] + 4], ap++;
call rel 58903;
[ap + 0] = [ap + -1] + 58902, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 147200, ap++;
[ap + 0] = [ap + -188], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -358] + 8, ap++;
[ap + 0] = [[ap + -359] + 6], ap++;
[ap + 0] = [[ap + -360] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 184;
call rel 58878;
[ap + 0] = [ap + -1] + 58877, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 158040, ap++;
call rel 25135;
[ap + 0] = [ap + -205] + 1, ap++;
[ap + 0] = [ap + -201] + [ap + -8], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -364], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 187;
call rel 58856;
[ap + 0] = [ap + -1] + 58855, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 158480, ap++;
[ap + 0] = [ap + -197], ap++;
[ap + 0] = [ap + -197] + [ap + -2], ap++;
jmp rel 15;
ap += 190;
call rel 58842;
[ap + 0] = [ap + -1] + 58841, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 158850, ap++;
[ap + 0] = [ap + -208] + 2, ap++;
[ap + 0] = [ap + -201] + [ap + -2], ap++;
call rel 25033;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -364], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 257;
call rel 58818;
[ap + 0] = [ap + -1] + 58817, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 168990, ap++;
call rel 28097;
[ap + 0] = [ap + -274], ap++;
[ap + 0] = [ap + -271] + [ap + -8], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -364], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 335;
call rel 58797;
[ap + 0] = [ap + -1] + 58796, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 181430, ap++;
call rel 41191;
[ap + 0] = [ap + -381] + 3, ap++;
[ap + 0] = [ap + -356] + [ap + -8], ap++;
[ap + 0] = [ap + -358], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 351;
[ap + 0] = [[ap + -372] + 4], ap++;
call rel 58776;
[ap + 0] = [ap + -1] + 58775, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 183580, ap++;
[ap + 0] = [ap + -381], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -381] + 8, ap++;
[ap + 0] = [[ap + -382] + 6], ap++;
[ap + 0] = [[ap + -383] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 360;
call rel 58751;
[ap + 0] = [ap + -1] + 58750, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 194890, ap++;
[ap + 0] = [ap + -367] + [ap + -1], ap++;
[ap + 0] = [ap + -371], ap++;
[ap + 0] = [ap + -371], ap++;
jmp rel 15;
ap += 361;
call rel 58736;
[ap + 0] = [ap + -1] + 58735, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 195180, ap++;
[ap + 0] = [ap + -382] + [ap + -1], ap++;
[ap + 0] = [ap + -371], ap++;
[ap + 0] = [ap + -371], ap++;
[ap + 0] = [ap + -386], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -373], ap++;
[ap + 0] = [ap + -387], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 534;
call rel 58714;
[ap + 0] = [ap + -1] + 58713, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 320130, ap++;
call rel 43262;
[ap + 0] = [ap + -549], ap++;
[ap + 0] = [ap + -549] + [ap + -8], ap++;
[ap + 0] = [ap + -559], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 536;
call rel 58693;
[ap + 0] = [ap + -1] + 58692, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 320210, ap++;
call rel 24160;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = [ap + -557] + [ap + -8], ap++;
[ap + 0] = [ap + -559], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 551;
[ap + 0] = [[fp + -9] + 9], ap++;
call rel 58670;
[ap + 0] = [ap + -1] + 58669, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 322270, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9] + 13, ap++;
[ap + 0] = [[fp + -9] + 11], ap++;
[ap + 0] = [[fp + -9] + 12], ap++;
jmp rel 21;
ap += 563;
[ap + 0] = [[fp + -9] + 2], ap++;
call rel 58649;
[ap + 0] = [ap + -1] + 58648, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 333950, ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 41298;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 47 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 19 if [ap + -13] != 0;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
ret;
[ap + 0] = 892831332077295033575207595541551688973278767908702850266232499306953315355, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -7] = [[fp + -7] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -5] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
ap += 7;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 23891;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
ap += 11;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 24609;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 198 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -5] = [[fp + -7] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 157 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [ap + -3], ap++;
[fp + -3] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 2];
jmp rel 25;
[ap + -1] = [[fp + -7] + 2];
ap += 20;
call rel 58259;
[ap + 0] = [ap + -1] + 58258, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 13520, ap++;
call rel 43661;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -36] + [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 873477173449744760621369809601123387760648482369539306629498776106913580960, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -3] = [[fp + -5] + 1];
[ap + 0] = [[fp + -5] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 3], ap++;
[ap + -4] = [[fp + -7] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -7] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -7] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -7] + 4], ap++;
[ap + -7] = [[fp + -7] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -22] + 0];
[ap + -5] = [[ap + -22] + 1];
[ap + -4] = [[ap + -22] + 2];
[ap + -6] = [[ap + -22] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -22]) %}
[ap + 0] = [[ap + -22] + 5], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[ap + -23] + 4], ap++;
[ap + 0] = [[ap + -24] + 6], ap++;
[ap + 0] = [ap + -25] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
ap += 7;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -21], ap++;
ret;
call rel 23625;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 15;
[ap + 0] = [[ap + -38] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -42] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -44] + 6], ap++;
[ap + 0] = [[ap + -45] + 7], ap++;
ret;
ap += 13;
call rel 58120;
[ap + 0] = [ap + -1] + 58119, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 12790, ap++;
call rel 24386;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -34] + [ap + -8], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 29;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 58099;
[ap + 0] = [ap + -1] + 58098, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 14940, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -5] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 11;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -22], ap++;
ret;
call rel 24257;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 380399219957990785808227865262557561983086966506409870698903802235701193624, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 43367;
jmp rel 26 if [ap + -6] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
ret;
ap += 4;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 460, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -5] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 63 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 43343;
jmp rel 37 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + -55] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 12;
[ap + -1] = [[ap + -9] + 0];
ap += 1;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
jmp rel 8;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 7;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13] + 810, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 40;
call rel 24046;
[ap + 0] = [ap + -60] + 3, ap++;
[ap + 0] = [ap + -55] + 25560, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 56;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -2] + 27710, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 1073125937719508961925760685231866153887807627577997752104216590339871899700, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 42164;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 23071;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 154 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 121 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 89;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 65 if [ap + -3] != 0;
[ap + 0] = 10000, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 42;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 403807365716931852510979360495474669369490483994409651540023026512438364891, ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -5] = [[ap + -19] + 1];
[ap + -4] = [[ap + -19] + 2];
[ap + -3] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 43148;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41987;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10570, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 22894;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10550, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12610, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 24290, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 154 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 121 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 89;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 65 if [ap + -3] != 0;
[ap + 0] = 10000, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 65536 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 42;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1554135586687059158691464313662966902437295769797289876725410156637463848378, ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -5] = [[ap + -19] + 1];
[ap + -4] = [[ap + -19] + 2];
[ap + -3] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 42980;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 41810;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10570, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 22717;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10550, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12610, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 24290, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 41657;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 22564;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 22470;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 12710 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768198746, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 494;
[fp + -6] = [ap + 0] + 12710, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 452 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 431;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 384 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 363;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 316 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 288 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 254 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 226 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 182 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -16] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -18] + 1], ap++;
[ap + -5] = [[ap + -19] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 158 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -14] + 1];
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 113 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 89 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 27660;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 56637;
[ap + 0] = [ap + -1] + 56636, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 68100 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 68100, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 38;
[ap + -3] = [ap + 0] + 68100, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -6119;
[ap + 0] = [ap + -61] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27607;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 27677;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -9] + 2440, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 3950, ap++;
call rel 27667;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4010, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5620, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 5680, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7290, ap++;
call rel 27646;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 8090, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 9400, ap++;
call rel 27636;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 10200, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 11510, ap++;
call rel 27626;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 27490;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 223;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -16] + 0], ap++;
[ap + 3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -21] + 2];
jmp rel 153 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -16] + 0];
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 91 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 27340;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 56316;
[ap + 0] = [ap + -1] + 56315, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 347880, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -6264;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27283;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 27368;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27366;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 5110, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27228;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3880 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207576, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 158;
[fp + -6] = [ap + 0] + 3880, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 94;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 27140;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 56116;
[ap + 0] = [ap + -1] + 56115, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 347010, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 35;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -24], ap++;
call rel -5657;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27085;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 27190;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27053;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3880 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207576, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 158;
[fp + -6] = [ap + 0] + 3880, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 115 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 94;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 26965;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 55941;
[ap + 0] = [ap + -1] + 55940, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 299190, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 35;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -24], ap++;
call rel -5129;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 26910;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 27015;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 26878;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 203 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 175 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 141 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 113 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 90;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 26727;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 55703;
[ap + 0] = [ap + -1] + 55702, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 14, ap++;
[ap + 0] = [ap + -1] + 509340, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -4938;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 26670;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 26775;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 26752;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 26615;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 10960 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768200496, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 453;
[fp + -6] = [ap + 0] + 10960, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 410 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 389;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 341 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 313 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 279 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 251 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 206 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -13] + 0], ap++;
[ap + 3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -18] + 2];
jmp rel 178 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 144 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 116 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 93;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 26311;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 55287;
[ap + 0] = [ap + -1] + 55286, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 352680, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 40;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -75], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -4410;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 26251;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 26338;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 26315;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4370, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5980, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 6040, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7650, ap++;
call rel 26293;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 8450, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 9760, ap++;
call rel 26282;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 26145;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3780 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207676, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 221;
[fp + -6] = [ap + 0] + 3780, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 178 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 157;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 26057;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 55033;
[ap + 0] = [ap + -1] + 55032, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 130280, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 100;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 392600295047854482474940799143253665992455419056977086961295656238618925340, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -20] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -4] = [[ap + -19] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -21] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -20] + 2], ap++;
[ap + -7] = [[ap + -21] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 37688;
[ap + 0] = [fp + -8] + 3, ap++;
jmp rel 36 if [ap + -13] != 0;
[ap + 0] = [ap + -15], ap++;
jmp rel 27 if [ap + -13] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -12], ap++;
call rel 40675;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1] + 2800, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -16] + 2990, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25939;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1270, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2580, ap++;
call rel 26044;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25907;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 2270 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209186, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 199;
[fp + -6] = [ap + 0] + 2270, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 176;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 25858;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 54834;
[ap + 0] = [ap + -1] + 54833, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 14620, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 125;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = 892831332077295033575207595541551688973278767908702850266232499306953315355, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -12] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -23] + 1], ap++;
[ap + -4] = [[ap + -24] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -26] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -23] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -25] + 2], ap++;
[ap + -7] = [[ap + -26] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -29] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -9] + 1300, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 20200;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 15;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 1960, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25715;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25829;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1870, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25691;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 25652;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 54629;
[ap + 0] = [ap + -1] + 54628, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13110 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13110, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -10] + 2, ap++;
[ap + 0] = [ap + -5] + 1770, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 20828;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 25549;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 25538;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 159;
[fp + -6] = [ap + 0] + 3510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 116 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 92 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 25450;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1370, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 54426;
[ap + 0] = [ap + -1] + 54425, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 28230, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -4] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 37;
[ap + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3910;
jmp rel 15 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -2] = [[ap + -1] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 200, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25395;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2310, ap++;
call rel 25500;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25363;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 315;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 272 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 244 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 210 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 182 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 25222;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 54198;
[ap + 0] = [ap + -1] + 54197, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 15020, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 128;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -28] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[ap + -18] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -20] + 1], ap++;
[ap + -4] = [[ap + -21] + 2], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -23] + 3];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -20] + 1], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -22] + 2], ap++;
[ap + -7] = [[ap + -23] + 3];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -26] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -6] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 23 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -6] + 1770, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 20356;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 16;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 2050, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25074;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 25168;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 25031;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 7220 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204236, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 325;
[fp + -6] = [ap + 0] + 7220, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 282 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 254 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 220 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 192 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -16] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 147 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -17] + 2];
jmp rel 126;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -14] + 0], ap++;
[ap + -3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -16] + 2];
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 24839;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 53815;
[ap + 0] = [ap + -1] + 53814, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 67440, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 67;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 380399219957990785808227865262557561983086966506409870698903802235701193624, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -27], ap++;
call rel 39203;
jmp rel 41 if [ap + -6] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24752;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -8] + 1370, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 2680, ap++;
call rel 24848;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2740, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4350, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4410, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6020, ap++;
call rel 24826;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24689;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 237;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 194 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 166 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 132 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 104 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 24548;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 53524;
[ap + 0] = [ap + -1] + 53523, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 43280, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 50;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -4412;
jmp rel 27 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 700, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24478;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 24572;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 24435;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 24294;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53271;
[ap + 0] = [ap + -1] + 53270, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -4495;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 24245;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 24340;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 24204;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 24116;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 53093;
[ap + 0] = [ap + -1] + 53092, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 36280 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 36280, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 36280, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -4483;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 24068;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 24174;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 24038;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 23950;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52927;
[ap + 0] = [ap + -1] + 52926, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 36280 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 36280, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 36280, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -4472;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 23902;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 24008;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 23872;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 23785;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52762;
[ap + 0] = [ap + -1] + 52761, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -4460;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 23737;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 23843;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 23707;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 23669;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 52646;
[ap + 0] = [ap + -1] + 52645, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 18048;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 23566;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 23555;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -13] = [[fp + -12] + 1];
[ap + -3] = [[fp + -12] + 2];
[ap + -2] = [[fp + -12] + 3];
[fp + -11] = [[fp + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12]) %}
[ap + 0] = [[fp + -12] + 6], ap++;
jmp rel 274 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 7];
[ap + -4] = [[fp + -12] + 8];
[ap + -3] = [[fp + -12] + 9];
[ap + -2] = [[fp + -12] + 10];
[fp + -10] = [[fp + -12] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 7) %}
[ap + 0] = [[fp + -12] + 13], ap++;
jmp rel 246 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 14];
[ap + -4] = [[fp + -12] + 15];
[ap + -3] = [[fp + -12] + 16];
[ap + -2] = [[fp + -12] + 17];
[fp + -9] = [[fp + -12] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 14) %}
[ap + 0] = [[fp + -12] + 20], ap++;
jmp rel 218 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1342288578147268091783907997261518164414589296086458792118970316167112971824, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 21];
[ap + -4] = [[fp + -12] + 22];
[ap + -3] = [[fp + -12] + 23];
[ap + -2] = [[fp + -12] + 24];
[fp + -8] = [[fp + -12] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 21) %}
[ap + 0] = [[fp + -12] + 27], ap++;
jmp rel 190 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 370781410766583664642632835469823025020813098254530403602707061266181576577, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 28];
[ap + -4] = [[fp + -12] + 29];
[ap + -3] = [[fp + -12] + 30];
[ap + -2] = [[fp + -12] + 31];
[fp + -7] = [[fp + -12] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 28) %}
[ap + 0] = [[fp + -12] + 34], ap++;
jmp rel 162 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 33], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 35];
[ap + -4] = [[fp + -12] + 36];
[ap + -3] = [[fp + -12] + 37];
[ap + -2] = [[fp + -12] + 38];
[fp + -6] = [[fp + -12] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 35) %}
[ap + 0] = [[fp + -12] + 41], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 40], ap++;
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 42];
[ap + -4] = [[fp + -12] + 43];
[ap + -3] = [[fp + -12] + 44];
[ap + -2] = [[fp + -12] + 45];
[fp + -5] = [[fp + -12] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 42) %}
[ap + 0] = [[fp + -12] + 48], ap++;
jmp rel 101 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 47], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 49];
[ap + -4] = [[fp + -12] + 50];
[ap + -3] = [[fp + -12] + 51];
[ap + -2] = [[fp + -12] + 52];
[fp + -4] = [[fp + -12] + 53];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 49) %}
[ap + 0] = [[fp + -12] + 55], ap++;
jmp rel 69 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 54], ap++;
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 56];
[ap + -4] = [[fp + -12] + 57];
[ap + -3] = [[fp + -12] + 58];
[ap + -2] = [[fp + -12] + 59];
[fp + -3] = [[fp + -12] + 60];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 56) %}
[ap + 0] = [[fp + -12] + 62], ap++;
jmp rel 40 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 61], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 652990154330776325813328174927284492907298542132604841720088255812724192736, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 63];
[ap + -5] = [[fp + -12] + 64];
[ap + -4] = [[fp + -12] + 65];
[ap + -3] = [[fp + -12] + 66];
[ap + -2] = [[fp + -12] + 67];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 63) %}
[ap + 0] = [[fp + -12] + 69], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 68], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 70, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -12] + 68], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 72, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 70], ap++;
[ap + 0] = [[fp + -12] + 71], ap++;
ret;
ap += 3;
[ap + 0] = [[fp + -12] + 61], ap++;
[ap + 0] = [ap + -1] + 10670, ap++;
[ap + 0] = [fp + -12] + 65, ap++;
[ap + 0] = [[fp + -12] + 63], ap++;
[ap + 0] = [[fp + -12] + 64], ap++;
jmp rel 11;
ap += 10;
[ap + 0] = [[fp + -12] + 54], ap++;
[ap + 0] = [ap + -1] + 22000, ap++;
[ap + 0] = [fp + -12] + 58, ap++;
[ap + 0] = [[fp + -12] + 56], ap++;
[ap + 0] = [[fp + -12] + 57], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 16;
[ap + 0] = [[fp + -12] + 47], ap++;
[ap + 0] = [ap + -1] + 33040, ap++;
[ap + 0] = [fp + -12] + 51, ap++;
[ap + 0] = [[fp + -12] + 49], ap++;
[ap + 0] = [[fp + -12] + 50], ap++;
jmp rel 11;
ap += 23;
[ap + 0] = [[fp + -12] + 40], ap++;
[ap + 0] = [ap + -1] + 44370, ap++;
[ap + 0] = [fp + -12] + 44, ap++;
[ap + 0] = [[fp + -12] + 42], ap++;
[ap + 0] = [[fp + -12] + 43], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 33;
[ap + 0] = [[fp + -12] + 33], ap++;
[ap + 0] = [ap + -1] + 55870, ap++;
[ap + 0] = [fp + -12] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 35], ap++;
[ap + 0] = [[fp + -12] + 36], ap++;
ret;
ap += 39;
[ap + 0] = [[fp + -12] + 26], ap++;
[ap + 0] = [ap + -1] + 67010, ap++;
[ap + 0] = [fp + -12] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 28], ap++;
[ap + 0] = [[fp + -12] + 29], ap++;
ret;
ap += 45;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = [ap + -1] + 78150, ap++;
[ap + 0] = [fp + -12] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 21], ap++;
[ap + 0] = [[fp + -12] + 22], ap++;
ret;
ap += 51;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [ap + -1] + 89290, ap++;
[ap + 0] = [fp + -12] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 14], ap++;
[ap + 0] = [[fp + -12] + 15], ap++;
ret;
ap += 57;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -1] + 100430, ap++;
[ap + 0] = [fp + -12] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 7], ap++;
[ap + 0] = [[fp + -12] + 8], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 1603 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 572589864753097185921218816822617766796583417866143734766737304392929006600, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 5];
[ap + -9] = [[fp + -6] + 6];
[ap + -8] = [[fp + -6] + 7];
[ap + -7] = [[fp + -6] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 5) %}
[ap + 0] = [[fp + -6] + 10], ap++;
jmp rel 1554 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [fp + -6] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -9] + 0], ap++;
[ap + 3] = [[fp + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -9] + 2];
jmp rel 1502 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -9] + 0];
[ap + 0] = 572589864753097185921218816822617766796583417866143734766737304392929006600, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 1460 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1413 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [ap + -19] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 13;
[ap + -1] = [[ap + -13] + 1];
ap += 5;
[ap + 0] = [ap + -18] + 2, ap++;
[ap + 0] = [ap + -10] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 1] = [ap + -12] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 2];
jmp rel 1349;
[ap + -1] = [[ap + -18] + 2];
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 1325 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 572589864753097185921218816822617766796583417866143734766737304392929006600, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -4] = [[ap + -21] + 1];
[ap + -3] = [[ap + -21] + 2];
[ap + -2] = [[ap + -21] + 3];
[ap + -6] = [[ap + -21] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 6], ap++;
jmp rel 1283 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = 572589864753097185921218816822617766796583417866143734766737304392929006600, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -28] + 7];
[ap + -4] = [[ap + -28] + 8];
[ap + -3] = [[ap + -28] + 9];
[ap + -2] = [[ap + -28] + 10];
[ap + -12] = [[ap + -28] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28] + 7) %}
[ap + 0] = [[ap + -28] + 13], ap++;
jmp rel 1245 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -34] + 14];
[ap + -4] = [[ap + -34] + 15];
[ap + -3] = [[ap + -34] + 16];
[ap + -2] = [[ap + -34] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -34] + 14) %}
[ap + 0] = [[ap + -34] + 19], ap++;
jmp rel 1202 if [ap + -1] != 0;
[ap + 0] = [[ap + -35] + 18], ap++;
[ap + 0] = [[ap + -36] + 20], ap++;
[ap + 0] = [ap + -37] + 21, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -27] + 0], ap++;
[ap + 3] = [[ap + -28] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -32] + 2];
jmp rel 1150 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -27] + 0];
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 1108 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1061 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[fp + -4] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 1023;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
[fp + -4] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -4], ap++;
[fp + -5] = [ap + 1] + [ap + -25], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 979;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 5], ap++;
jmp rel 934 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -21] + 6], ap++;
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 882 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -11] + 0];
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 840 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 793 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 755;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -23] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 713;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 370781410766583664642632835469823025020813098254530403602707061266181576577, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + -4] = [[ap + -17] + 1];
[ap + -3] = [[ap + -17] + 2];
[ap + -2] = [[ap + -17] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17]) %}
[ap + 0] = [[ap + -17] + 5], ap++;
jmp rel 668 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 4], ap++;
[ap + 0] = [[ap + -19] + 6], ap++;
[ap + 0] = [ap + -20] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 625 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -11] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
call rel 20819;
[ap + 0] = [ap + -90], ap++;
jmp rel 584 if [ap + -2] != 0;
[ap + 0] = 10000, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = [ap + -37], ap++;
[ap + 1] = [fp + -4] + [ap + -34], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -45] + 15];
jmp rel 13;
[ap + -1] = [[ap + -44] + 15];
ap += 1;
[ap + 0] = [ap + -45] + 16, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -45] + 16, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [fp + -5] + [ap + -42], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 417;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 393 if [ap + -12] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 1] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 67;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -7] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -10], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 202;
call rel 51561;
[ap + 0] = [ap + -1] + 51560, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 170560, ap++;
[ap + 0] = [ap + -215] + 1, ap++;
[ap + 0] = [ap + -213] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 206;
call rel 51539;
[ap + 0] = [ap + -1] + 51538, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 171190, ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [ap + -215] + [ap + -2], ap++;
call rel 37277;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -377], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -161] + 0];
[ap + -2] = [[ap + -161] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -161]) %}
[ap + 0] = [[ap + -161] + 3], ap++;
jmp rel 281 if [ap + -1] != 0;
[ap + 0] = [[ap + -162] + 2], ap++;
[ap + 0] = [[ap + -163] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1342288578147268091783907997261518164414589296086458792118970316167112971824, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -172] + 5];
[ap + -7] = [[ap + -172] + 6];
[ap + -6] = [[ap + -172] + 7];
[ap + -5] = [[ap + -172] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -172] + 5) %}
[ap + 0] = [[ap + -172] + 10], ap++;
jmp rel 233 if [ap + -1] != 0;
[ap + 0] = [[ap + -173] + 9], ap++;
[ap + 0] = [[ap + -174] + 11], ap++;
[ap + 0] = [ap + -175] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -23] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -25] + 1], ap++;
[ap + -5] = [[ap + -26] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 190 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -20] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -21] + 1];
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -6]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -25] + 2];
jmp rel 151;
[ap + 1] = [ap + -12] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[ap + -25] + 2];
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -272] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[ap + -272] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -32] + 3], ap++;
[ap + -4] = [[ap + -33] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -35] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -32] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -34] + 4], ap++;
[ap + -7] = [[ap + -35] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -35] + 6, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -320], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -108], ap++;
[ap + 0] = [ap + -108], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel 37144;
[ap + 0] = [fp + -7] + 6, ap++;
jmp rel 68 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 57 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -381], ap++;
[ap + 0] = [ap + -381], ap++;
[ap + 0] = [ap + -459], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -247], ap++;
[ap + 0] = [ap + -247], ap++;
[ap + 0] = [ap + -161], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 38115;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -47] + 0];
[ap + -2] = [[ap + -47] + 1];
[ap + -6] = [[ap + -47] + 2];
[ap + -5] = [[ap + -47] + 3];
[ap + -4] = [[ap + -47] + 4];
[ap + -3] = [[ap + -47] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -47]) %}
[ap + 0] = [[ap + -47] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -48] + 6], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -52] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -425], ap++;
[ap + 0] = [ap + -425], ap++;
ret;
[ap + 0] = [[ap + -48] + 6], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -52] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -54] + 8], ap++;
[ap + 0] = [[ap + -55] + 9], ap++;
ret;
ap += 39;
[ap + 0] = [ap + -40] + 15110, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44], ap++;
jmp rel 8;
ap += 40;
[ap + 0] = [ap + -47] + 15400, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 178;
call rel 51296;
[ap + 0] = [ap + -1] + 51295, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 146890, ap++;
call rel 16934;
[ap + 0] = [ap + -216] + 3, ap++;
[ap + 0] = [ap + -196] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -202], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 172;
call rel 51272;
[ap + 0] = [ap + -1] + 51271, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 146350, ap++;
call rel 16919;
[ap + 0] = [ap + -211] + 3, ap++;
[ap + 0] = [ap + -194] + [ap + -8], ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 188;
[ap + 0] = [[ap + -361] + 9], ap++;
call rel 51249;
[ap + 0] = [ap + -1] + 51248, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 148500, ap++;
[ap + 0] = [ap + -211], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -371] + 13, ap++;
[ap + 0] = [[ap + -372] + 11], ap++;
[ap + 0] = [[ap + -373] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 204;
[ap + 0] = [[ap + -366] + 2], ap++;
call rel 51221;
[ap + 0] = [ap + -1] + 51220, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160440, ap++;
[ap + 0] = [ap + -216], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -377] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -379] + 4], ap++;
[ap + 0] = [[ap + -380] + 5], ap++;
ret;
ap += 212;
call rel 51199;
[ap + 0] = [ap + -1] + 51198, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 171900, ap++;
[ap + 0] = [ap + -223], ap++;
[ap + 0] = [ap + -223] + [ap + -2], ap++;
jmp rel 17;
ap += 215;
call rel 51183;
[ap + 0] = [ap + -1] + 51182, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 172270, ap++;
[ap + 0] = [ap + -234] + 2, ap++;
[ap + 0] = [ap + -227] + [ap + -2], ap++;
call rel 16800;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -377], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 269;
call rel 51157;
[ap + 0] = [ap + -1] + 51156, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 180500, ap++;
call rel 20434;
[ap + 0] = [ap + -287], ap++;
[ap + 0] = [ap + -284] + [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -377], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 347;
call rel 51134;
[ap + 0] = [ap + -1] + 51133, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 192940, ap++;
call rel 33526;
[ap + 0] = [ap + -377] + 3, ap++;
[ap + 0] = [ap + -369] + [ap + -8], ap++;
[ap + 0] = [ap + -371], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 363;
[ap + 0] = [[ap + -381] + 4], ap++;
call rel 51111;
[ap + 0] = [ap + -1] + 51110, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 195090, ap++;
[ap + 0] = [ap + -377], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -391] + 8, ap++;
[ap + 0] = [[ap + -392] + 6], ap++;
[ap + 0] = [[ap + -393] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 366;
call rel 51084;
[ap + 0] = [ap + -1] + 51083, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205560, ap++;
[ap + 0] = [ap + -380] + 1, ap++;
[ap + 0] = [ap + -378] + [ap + -2], ap++;
jmp rel 17;
ap += 372;
call rel 51067;
[ap + 0] = [ap + -1] + 51066, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 206570, ap++;
[ap + 0] = [ap + -391] + 2, ap++;
[ap + 0] = [ap + -384] + [ap + -2], ap++;
call rel 37924;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -397], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 363;
call rel 51041;
[ap + 0] = [ap + -1] + 51040, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205290, ap++;
call rel 16670;
[ap + 0] = [ap + -389] + 3, ap++;
[ap + 0] = [ap + -384] + [ap + -8], ap++;
[ap + 0] = [ap + -386], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 383;
[ap + 0] = [[ap + -393] + 4], ap++;
call rel 51018;
[ap + 0] = [ap + -1] + 51017, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 208000, ap++;
[ap + 0] = [ap + -394], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -403] + 8, ap++;
[ap + 0] = [[ap + -404] + 6], ap++;
[ap + 0] = [[ap + -405] + 7], ap++;
jmp rel 48;
ap += 375;
call rel 50998;
[ap + 0] = [ap + -1] + 50997, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 217140, ap++;
call rel 16627;
[ap + 0] = [ap + -404] + 3, ap++;
[ap + 0] = [ap + -396] + [ap + -8], ap++;
[ap + 0] = [ap + -398], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 395;
[ap + 0] = [[ap + -415] + 4], ap++;
call rel 50970;
[ap + 0] = [ap + -1] + 50969, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 219850, ap++;
[ap + 0] = [ap + -409], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -425] + 8, ap++;
[ap + 0] = [[ap + -426] + 6], ap++;
[ap + 0] = [[ap + -427] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 398;
call rel 50943;
[ap + 0] = [ap + -1] + 50942, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 230320, ap++;
[ap + 0] = [ap + -414] + 1, ap++;
[ap + 0] = [ap + -410] + [ap + -2], ap++;
jmp rel 17;
ap += 406;
call rel 50926;
[ap + 0] = [ap + -1] + 50925, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 231510, ap++;
[ap + 0] = [ap + -425] + 2, ap++;
[ap + 0] = [ap + -418] + [ap + -2], ap++;
call rel 37783;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -431], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 397;
call rel 50900;
[ap + 0] = [ap + -1] + 50899, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 230230, ap++;
call rel 16529;
[ap + 0] = [ap + -423] + 3, ap++;
[ap + 0] = [ap + -418] + [ap + -8], ap++;
[ap + 0] = [ap + -420], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 417;
[ap + 0] = [[ap + -427] + 4], ap++;
call rel 50877;
[ap + 0] = [ap + -1] + 50876, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 232940, ap++;
[ap + 0] = [ap + -428], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -437] + 8, ap++;
[ap + 0] = [[ap + -438] + 6], ap++;
[ap + 0] = [[ap + -439] + 7], ap++;
jmp rel 48;
ap += 409;
call rel 50857;
[ap + 0] = [ap + -1] + 50856, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 242080, ap++;
call rel 16486;
[ap + 0] = [ap + -454] + 3, ap++;
[ap + 0] = [ap + -430] + [ap + -8], ap++;
[ap + 0] = [ap + -432], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 429;
[ap + 0] = [[ap + -464] + 18], ap++;
call rel 50829;
[ap + 0] = [ap + -1] + 50828, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 244790, ap++;
[ap + 0] = [ap + -459], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -474] + 22, ap++;
[ap + 0] = [[ap + -475] + 20], ap++;
[ap + 0] = [[ap + -476] + 21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 436;
[ap + 0] = [[ap + -465] + 12], ap++;
call rel 50801;
[ap + 0] = [ap + -1] + 50800, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 255820, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -474] + 16, ap++;
[ap + 0] = [[ap + -475] + 14], ap++;
[ap + 0] = [[ap + -476] + 15], ap++;
jmp rel 20;
ap += 443;
[ap + 0] = [[ap + -465] + 5], ap++;
call rel 50781;
[ap + 0] = [ap + -1] + 50780, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 267150, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -474] + 9, ap++;
[ap + 0] = [[ap + -475] + 7], ap++;
[ap + 0] = [[ap + -476] + 8], ap++;
[ap + 0] = [ap + -464], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 445;
call rel 50755;
[ap + 0] = [ap + -1] + 50754, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 277730, ap++;
[ap + 0] = [ap + -456], ap++;
[ap + 0] = [ap + -456] + [ap + -2], ap++;
jmp rel 17;
ap += 448;
call rel 50739;
[ap + 0] = [ap + -1] + 50738, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 278100, ap++;
[ap + 0] = [ap + -474] + 3, ap++;
[ap + 0] = [ap + -460] + [ap + -2], ap++;
call rel 16356;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -480], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 446;
call rel 50713;
[ap + 0] = [ap + -1] + 50712, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 277720, ap++;
call rel 16342;
[ap + 0] = [ap + -472] + 3, ap++;
[ap + 0] = [ap + -467] + [ap + -8], ap++;
[ap + 0] = [ap + -469], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 466;
[ap + 0] = [[ap + -476] + 4], ap++;
call rel 50690;
[ap + 0] = [ap + -1] + 50689, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 280430, ap++;
[ap + 0] = [ap + -477], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -486] + 8, ap++;
[ap + 0] = [[ap + -487] + 6], ap++;
[ap + 0] = [[ap + -488] + 7], ap++;
jmp rel 48;
ap += 458;
call rel 50670;
[ap + 0] = [ap + -1] + 50669, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 289570, ap++;
call rel 16299;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -479] + [ap + -8], ap++;
[ap + 0] = [ap + -481], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 478;
[ap + 0] = [[fp + -6] + 9], ap++;
call rel 50642;
[ap + 0] = [ap + -1] + 50641, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 292280, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -6] + 13, ap++;
[ap + 0] = [[fp + -6] + 11], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 495;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 50614;
[ap + 0] = [ap + -1] + 50613, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 304310, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 3], ap++;
jmp rel 618 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -6] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 37419;
[ap + 0] = [[ap + -214] + 0], ap++;
[ap + 0] = [[ap + -215] + 1], ap++;
[ap + 0] = [[ap + -216] + 2], ap++;
[ap + 0] = [[ap + -217] + 3], ap++;
[ap + 0] = [[ap + -218] + 4], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
jmp rel 536 if [ap + -19] != 0;
[ap + 0] = [ap + -21], ap++;
jmp rel 516 if [ap + -19] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 13, ap++;
call rel 38707;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 717;
call rel 50516;
[ap + 0] = [ap + -1] + 50515, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 525860, ap++;
call rel 38941;
[ap + 0] = [ap + -759], ap++;
[ap + 0] = [ap + -732] + [ap + -8], ap++;
[ap + 0] = [ap + -740], ap++;
[ap + 0] = [ap + -760], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 652990154330776325813328174927284492907298542132604841720088255812724192736, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -31] + 0];
[ap + -4] = [[ap + -31] + 1];
[ap + -3] = [[ap + -31] + 2];
[ap + -2] = [[ap + -31] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -31]) %}
[ap + 0] = [[ap + -31] + 5], ap++;
jmp rel 448 if [ap + -1] != 0;
[ap + 0] = [[ap + -32] + 4], ap++;
[ap + 0] = [[ap + -33] + 6], ap++;
[ap + 0] = [ap + -34] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 404 if [ap + -1] != 0;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 13, ap++;
call rel 38641;
[ap + 0] = [ap + -9], ap++;
jmp rel 20 if [ap + -2] != 0;
ap += 142;
call rel 50450;
[ap + 0] = [ap + -1] + 50449, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 131950, ap++;
[ap + 0] = [ap + -197], ap++;
[ap + 0] = [ap + -151] + [ap + -2], ap++;
[ap + 0] = [ap + -178], ap++;
[ap + 0] = [ap + -164], ap++;
jmp rel 71;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[ap + -28] + 0];
[fp + -5] = [[ap + -28] + 1];
[ap + 0] = [[ap + -28] + 2], ap++;
[ap + -1] = [[ap + -29] + 3];
[fp + -4] = [[ap + -29] + 4];
[ap + 0] = [[ap + -29] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -55] + 0], ap++;
[ap + -4] = [[ap + -56] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -58] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -55] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -57] + 1], ap++;
[ap + -7] = [[ap + -58] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -58] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 11, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -58], ap++;
call rel 36137;
[ap + 0] = [ap + -174] + 6, ap++;
jmp rel 292 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 272 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -4] + 0];
[ap + -6] = [[ap + -4] + 1];
[ap + -3] = [[ap + -4] + 2];
[ap + -2] = [[ap + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -4]) %}
[ap + 0] = [[ap + -4] + 5], ap++;
jmp rel 227 if [ap + -1] != 0;
[ap + 0] = [[ap + -5] + 4], ap++;
[ap + 0] = [[ap + -6] + 6], ap++;
[ap + 0] = [ap + -7] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -18] + 2];
jmp rel 186;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -3] = [[ap + -16] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -17] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -5] = [[ap + -1] + 0];
[fp + -4] = [[ap + -1] + 1];
[fp + -3] = [[ap + -1] + 2];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1570862312720967193333784822276682676294734273097133954619165910069425349750, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 3, ap++;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -6] = [[ap + -14] + 1];
[ap + -15] = [[ap + -14] + 2];
[ap + -5] = [[ap + -14] + 3];
[ap + -4] = [[ap + -14] + 4];
[ap + -3] = [[ap + -14] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 7], ap++;
jmp rel 131 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 6], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 37034;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -56] + 10];
[ap + -2] = [[ap + -56] + 11];
[ap + -6] = [[ap + -56] + 12];
[ap + -5] = [[ap + -56] + 13];
[ap + -4] = [[ap + -56] + 14];
[ap + -3] = [[ap + -56] + 15];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -56] + 10) %}
[ap + 0] = [[ap + -56] + 17], ap++;
jmp rel 69 if [ap + -1] != 0;
[ap + 0] = [[ap + -57] + 16], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -59] + 18, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 38699;
jmp rel 37 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 456;
call rel 50246;
[ap + 0] = [ap + -1] + 50245, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 326680, ap++;
[ap + 0] = [ap + -540], ap++;
[ap + 0] = [ap + -465] + [ap + -2], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -471], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 38741;
ret;
ap += 457;
call rel 50214;
[ap + 0] = [ap + -1] + 50213, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 326870, ap++;
[ap + 0] = [ap + -540], ap++;
[ap + 0] = [ap + -470] + [ap + -2], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -471], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -471], ap++;
[ap + 0] = [ap + -471], ap++;
ret;
ap += 487;
[ap + 0] = [[ap + -544] + 16], ap++;
call rel 50192;
[ap + 0] = [ap + -1] + 50191, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 340880, ap++;
[ap + 0] = [ap + -540], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -555] + 20, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -557] + 18], ap++;
[ap + 0] = [[ap + -558] + 19], ap++;
ret;
ap += 529;
[ap + 0] = [[ap + -544] + 6], ap++;
call rel 50169;
[ap + 0] = [ap + -1] + 50168, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 356460, ap++;
[ap + 0] = [ap + -540], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -555] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -557] + 8], ap++;
[ap + 0] = [[ap + -558] + 9], ap++;
ret;
ap += 526;
call rel 50147;
[ap + 0] = [ap + -1] + 50146, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 366890, ap++;
call rel 15614;
[ap + 0] = [ap + -557] + 3, ap++;
[ap + 0] = [ap + -547] + [ap + -8], ap++;
[ap + 0] = [ap + -549], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 541;
[ap + 0] = [[ap + -546] + 4], ap++;
call rel 50124;
[ap + 0] = [ap + -1] + 50123, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 368950, ap++;
[ap + 0] = [ap + -557], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -556] + 8, ap++;
[ap + 0] = [[ap + -557] + 6], ap++;
[ap + 0] = [[ap + -558] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -562], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 552;
call rel 50097;
[ap + 0] = [ap + -1] + 50096, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 380340, ap++;
[ap + 0] = [ap + -560] + [ap + -1], ap++;
[ap + 0] = [ap + -564], ap++;
[ap + 0] = [ap + -564], ap++;
jmp rel 17;
ap += 553;
call rel 50080;
[ap + 0] = [ap + -1] + 50079, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 380630, ap++;
[ap + 0] = [ap + -567] + [ap + -1], ap++;
[ap + 0] = [ap + -564], ap++;
[ap + 0] = [ap + -564], ap++;
[ap + 0] = [ap + -571], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -566], ap++;
[ap + 0] = [ap + -572], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 704;
call rel 50056;
[ap + 0] = [ap + -1] + 50055, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 513890, ap++;
call rel 39080;
[ap + 0] = [ap + -759], ap++;
[ap + 0] = [ap + -722] + [ap + -8], ap++;
[ap + 0] = [ap + -740], ap++;
[ap + 0] = [ap + -726], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 717;
[ap + 0] = [[ap + -749] + 4], ap++;
call rel 50032;
[ap + 0] = [ap + -1] + 50031, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 515460, ap++;
[ap + 0] = [ap + -759], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -740], ap++;
[ap + 0] = [ap + -760] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -762] + 6], ap++;
[ap + 0] = [[ap + -763] + 7], ap++;
ret;
ap += 726;
call rel 50010;
[ap + 0] = [ap + -1] + 50009, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 527170, ap++;
[ap + 0] = [ap + -734] + [ap + -1], ap++;
[ap + 0] = [ap + -743], ap++;
[ap + 0] = [ap + -743], ap++;
jmp rel 17;
ap += 727;
call rel 49993;
[ap + 0] = [ap + -1] + 49992, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 527460, ap++;
[ap + 0] = [ap + -755] + [ap + -1], ap++;
[ap + 0] = [ap + -743], ap++;
[ap + 0] = [ap + -743], ap++;
[ap + 0] = [ap + -759], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -740], ap++;
[ap + 0] = [ap + -760], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 950;
[ap + 0] = [[fp + -6] + 2], ap++;
call rel 49968;
[ap + 0] = [ap + -1] + 49967, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 668610, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -5] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 36783;
[ap + 0] = [fp + -7] + 6, ap++;
jmp rel 366 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 346 if [ap + -14] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 9, ap++;
call rel 38076;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 207;
call rel 49885;
[ap + 0] = [ap + -1] + 49884, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 171020, ap++;
call rel 38310;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -222] + [ap + -8], ap++;
[ap + 0] = [ap + -230], ap++;
[ap + 0] = [ap + -245], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 1] = [ap + -18] + [ap + -15], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -28] + 0];
jmp rel 13;
[ap + -1] = [[ap + -27] + 0];
ap += 1;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -26] + [ap + -23], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 11;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
jmp rel 17;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 234;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 212 if [ap + -10] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -41] + 0];
[ap + -2] = [[ap + -41] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -41]) %}
[ap + 0] = [[ap + -41] + 3], ap++;
jmp rel 181 if [ap + -1] != 0;
[ap + 0] = [[ap + -42] + 2], ap++;
[ap + 0] = [[ap + -43] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[ap + -32] + 0];
[fp + -5] = [[ap + -32] + 1];
[ap + 0] = [[ap + -32] + 2], ap++;
[ap + -1] = [[ap + -33] + 3];
[fp + -4] = [[ap + -33] + 4];
[ap + 0] = [[ap + -33] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 0], ap++;
[ap + -4] = [[ap + -16] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -18] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -15] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -7] = [[ap + -18] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -57] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [[ap + -25] + 1], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 35494;
[ap + 0] = [ap + -178] + 6, ap++;
jmp rel 100 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 89 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -2] = [[ap + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 3], ap++;
jmp rel 67 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -12] + 1], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 36449;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -53] + 5];
[ap + -2] = [[ap + -53] + 6];
[ap + -6] = [[ap + -53] + 7];
[ap + -5] = [[ap + -53] + 8];
[ap + -4] = [[ap + -53] + 9];
[ap + -3] = [[ap + -53] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -53] + 5) %}
[ap + 0] = [[ap + -53] + 12], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -54] + 11], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -58] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -54] + 11], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -58] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -60] + 13], ap++;
[ap + 0] = [[ap + -61] + 14], ap++;
ret;
ap += 44;
[ap + 0] = [[ap + -54] + 2], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2] + 15660, ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -58] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -60] + 4], ap++;
[ap + 0] = [[ap + -61] + 5], ap++;
ret;
ap += 45;
[ap + 0] = [ap + -46] + 25950, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -50], ap++;
jmp rel 8;
ap += 46;
[ap + 0] = [ap + -53] + 26240, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 192;
[ap + 0] = [[ap + -234] + 2], ap++;
call rel 49613;
[ap + 0] = [ap + -1] + 49612, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 158650, ap++;
[ap + 0] = [ap + -205], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -230], ap++;
[ap + 0] = [ap + -245] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -247] + 4], ap++;
[ap + 0] = [[ap + -248] + 5], ap++;
ret;
ap += 188;
call rel 49591;
[ap + 0] = [ap + -1] + 49590, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 168390, ap++;
[ap + 0] = [ap + -197], ap++;
[ap + 0] = [ap + -197] + [ap + -2], ap++;
jmp rel 17;
ap += 189;
call rel 49575;
[ap + 0] = [ap + -1] + 49574, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 168580, ap++;
[ap + 0] = [ap + -208] + 2, ap++;
[ap + 0] = [ap + -201] + [ap + -2], ap++;
call rel 15192;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -230], ap++;
[ap + 0] = [ap + -245], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 216;
call rel 49549;
[ap + 0] = [ap + -1] + 49548, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 172330, ap++;
[ap + 0] = [ap + -224] + [ap + -1], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -228], ap++;
jmp rel 17;
ap += 217;
call rel 49532;
[ap + 0] = [ap + -1] + 49531, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 172620, ap++;
[ap + 0] = [ap + -240] + [ap + -1], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -230], ap++;
[ap + 0] = [ap + -245], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 36345;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 291 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 271 if [ap + -14] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 7, ap++;
call rel 37638;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 197;
call rel 49447;
[ap + 0] = [ap + -1] + 49446, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 149520, ap++;
call rel 37872;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = [ap + -212] + [ap + -8], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -235], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[ap + -9] + 0];
[fp + -4] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + -1] = [[ap + -10] + 3];
[fp + -3] = [[ap + -10] + 4];
[ap + 0] = [[ap + -10] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -31] + 0], ap++;
[ap + -4] = [[ap + -32] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -34] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -31] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -33] + 1], ap++;
[ap + -7] = [[ap + -34] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -34] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
call rel 35129;
[ap + 0] = [ap + -155] + 6, ap++;
jmp rel 163 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 152 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 1] = [ap + -167] + [ap + -164], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 13;
[ap + -1] = [[ap + -12] + 0];
ap += 1;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -175] + [ap + -172], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 78;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 63 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 36031;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -66] + 0];
[ap + -2] = [[ap + -66] + 1];
[ap + -6] = [[ap + -66] + 2];
[ap + -5] = [[ap + -66] + 3];
[ap + -4] = [[ap + -66] + 4];
[ap + -3] = [[ap + -66] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -66]) %}
[ap + 0] = [[ap + -66] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -67] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -71] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -67] + 6], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -71] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -73] + 8], ap++;
[ap + 0] = [[ap + -74] + 9], ap++;
ret;
ap += 34;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -38] + 14560, ap++;
jmp rel 8;
ap += 37;
[ap + 0] = [ap + -49] + 2, ap++;
[ap + 0] = [ap + -42] + 14930, ap++;
call rel 14852;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 58;
[ap + 0] = [ap + -59] + 17640, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
jmp rel 8;
ap += 59;
[ap + 0] = [ap + -66] + 17930, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 206;
call rel 49186;
[ap + 0] = [ap + -1] + 49185, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 150830, ap++;
[ap + 0] = [ap + -214] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
jmp rel 17;
ap += 207;
call rel 49169;
[ap + 0] = [ap + -1] + 49168, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 151120, ap++;
[ap + 0] = [ap + -230] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -235], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 35982;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 254 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 243 if [ap + -14] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -2] = [[ap + -18] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 3], ap++;
jmp rel 221 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 2], ap++;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + -19] = [ap + 0] + [ap + -1], ap++;
[ap + 0] = [ap + -23] + 5, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 198 if [ap + -3] != 0;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 11, ap++;
call rel 37258;
[ap + 0] = [ap + -6], ap++;
jmp rel 16 if [ap + -2] != 0;
ap += 61;
call rel 37502;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -69] + 48460, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -2] = [[ap + -10] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 3], ap++;
jmp rel 154 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 2], ap++;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 1], ap++;
[ap + 0] = [ap + -15] + 5, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + -3] = [ap + 1] + [ap + -31], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -45] + 0];
jmp rel 124;
[ap + -1] = [[ap + -44] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 652990154330776325813328174927284492907298542132604841720088255812724192736, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -48] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -6] = [[ap + -10] + 1];
[ap + -5] = [[ap + -10] + 2];
[ap + -4] = [[ap + -10] + 3];
[ap + -3] = [[ap + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 6], ap++;
jmp rel 90 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -14] + 7];
[ap + -2] = [[ap + -14] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14] + 7) %}
[ap + 0] = [[ap + -14] + 10], ap++;
jmp rel 67 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 9], ap++;
[ap + 0] = [[ap + -16] + 11], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [[ap + -12] + 1], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 35734;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -58] + 12];
[ap + -2] = [[ap + -58] + 13];
[ap + -6] = [[ap + -58] + 14];
[ap + -5] = [[ap + -58] + 15];
[ap + -4] = [[ap + -58] + 16];
[ap + -3] = [[ap + -58] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -58] + 12) %}
[ap + 0] = [[ap + -58] + 19], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -59] + 18], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -63] + 20, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -59] + 18], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -63] + 22, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -65] + 20], ap++;
[ap + 0] = [[ap + -66] + 21], ap++;
ret;
ap += 44;
[ap + 0] = [[ap + -59] + 9], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 15660, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -63] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -65] + 11], ap++;
[ap + 0] = [[ap + -66] + 12], ap++;
ret;
ap += 48;
[ap + 0] = [[ap + -59] + 5], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 26320, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -63] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -65] + 7], ap++;
[ap + 0] = [[ap + -66] + 8], ap++;
ret;
ap += 49;
call rel 37951;
[ap + 0] = [ap + -100] + 1, ap++;
[ap + 0] = [ap + -60] + 36810, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 63;
[ap + 0] = [[ap + -74] + 2], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -2] + 38440, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -78] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -80] + 4], ap++;
[ap + 0] = [[ap + -81] + 5], ap++;
ret;
ap += 67;
call rel 37931;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -75] + 49500, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 78;
[ap + 0] = [[ap + -97] + 2], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -2] + 50690, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -101] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -103] + 4], ap++;
[ap + 0] = [[ap + -104] + 5], ap++;
ret;
ap += 79;
[ap + 0] = [ap + -80] + 60980, ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -84], ap++;
jmp rel 8;
ap += 80;
[ap + 0] = [ap + -96] + 61270, ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 35665;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 50 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 20 if [ap + -14] != 0;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 35537;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 23 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 15 if [ap + -14] != 0;
ap += 3;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -17] + 190, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1342288578147268091783907997261518164414589296086458792118970316167112971824, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 37577;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 13981;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 370781410766583664642632835469823025020813098254530403602707061266181576577, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 37424;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 13828;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 1586593070185845788394047526854715202091538485552050972485703512987635190332, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 37235;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 13639;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 166 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 133 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 101;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 75 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[ap + -3] = [[ap + -14] + 2];
[ap + -2] = [[ap + -14] + 3];
[fp + -4] = [[ap + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 6], ap++;
jmp rel 43 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = 1433663810191126520302628817700541799823831199959946188032287373853564015194, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 7];
[ap + -4] = [[ap + -21] + 8];
[ap + -3] = [[ap + -21] + 9];
[ap + -2] = [[ap + -21] + 10];
[fp + -3] = [[ap + -21] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21] + 7) %}
[ap + 0] = [[ap + -21] + 13], ap++;
jmp rel 17 if [ap + -1] != 0;
ap += 4;
[ap + 0] = [[ap + -26] + 12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 360, ap++;
[ap + 0] = [ap + -29] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -22] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -24] + 16, ap++;
[ap + 0] = [[ap + -25] + 14], ap++;
[ap + 0] = [[ap + -26] + 15], ap++;
jmp rel 11;
ap += 7;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -1] + 11230, ap++;
[ap + 0] = [ap + -24] + 9, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 6;
call rel 37046;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 21540, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 8;
call rel 13450;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -22] + 21620, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 23;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 23680, ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 12;
ap += 35;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 35360, ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 652990154330776325813328174927284492907298542132604841720088255812724192736, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 36893;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 13297;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 36740;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 13144;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 13050;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 17960 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768193496, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 697;
[fp + -6] = [ap + 0] + 17960, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 655 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 634;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 587 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 566;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 519 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 498;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 451 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 427 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 382 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 358 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 313 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 285 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 251 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 223 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -10] = [ap + 0] + [ap + -11], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 9;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 179 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -13] + 0], ap++;
[ap + 3] = [[ap + -14] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -18] + 2];
jmp rel 151 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 117 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 89 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 18089;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 47066;
[ap + 0] = [ap + -1] + 47065, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 113400 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 113400, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 41;
[ap + -3] = [ap + 0] + 113400, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -117], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -23], ap++;
call rel -5486;
[ap + 0] = [ap + -90] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 18033;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 18074;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3470, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5080, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 5140, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 6750, ap++;
call rel 18053;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 7080, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 8590, ap++;
call rel 18043;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 8920, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 10430, ap++;
call rel 18033;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 11230, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 12540, ap++;
call rel 18023;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 13340, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 14650, ap++;
call rel 18013;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 15450, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 16760, ap++;
call rel 18003;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 17867;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 249;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 206 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 178 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 144 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 116 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 93;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 17717;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 46693;
[ap + 0] = [ap + -1] + 46692, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 321760, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 40;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -5561;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17657;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17762;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 17739;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17602;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 203 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 175 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 141 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 113 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 90;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 17451;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 46427;
[ap + 0] = [ap + -1] + 46426, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 690410, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -4196;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17394;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17499;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 17476;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17339;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 5510 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205946, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 246;
[fp + -6] = [ap + 0] + 5510, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 203 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 175 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 141 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 113 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 90;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 17188;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 46164;
[ap + 0] = [ap + -1] + 46163, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 319270, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 0];
jmp rel 37;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
call rel -3813;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17131;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17236;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1030, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2640, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4310, ap++;
call rel 17213;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 17076;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 223;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 180 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 152 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 90 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 16935;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 45911;
[ap + 0] = [ap + -1] + 45910, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 297570, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 36;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3627;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 16879;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 16973;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 16836;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 223;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 180 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 152 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 90 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 16695;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 45671;
[ap + 0] = [ap + -1] + 45670, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 205750, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 36;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3504;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 16639;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 16733;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 16596;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 238;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 195 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 167 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 133 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 105 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 16455;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 45431;
[ap + 0] = [ap + -1] + 45430, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 147980, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 51;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3427;
jmp rel 28 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 34454;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17] + 3700, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 16384;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 16478;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 16341;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 300;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 257 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 229 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 195 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 167 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 16200;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 45176;
[ap + 0] = [ap + -1] + 45175, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 144780, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 113;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3554;
jmp rel 90 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
jmp rel [ap + -3];
jmp rel 67;
jmp rel 56;
jmp rel 45;
jmp rel 34;
jmp rel 23;
jmp rel 12;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 55;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 46;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 37;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 28;
[ap + 0] = 4, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 19;
[ap + 0] = 5, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 10;
[ap + 0] = 6, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -2] + 100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1000, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 16067;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 16161;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 16024;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 15935;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 44912;
[ap + 0] = [ap + -1] + 44911, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3727;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15887;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 15993;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15857;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 15769;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 44746;
[ap + 0] = [ap + -1] + 44745, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3740;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15721;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 15827;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15691;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 15551;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 44528;
[ap + 0] = [ap + -1] + 44527, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3806;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15502;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 15597;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15461;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4610 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206846, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 214;
[fp + -6] = [ap + 0] + 4610, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 172 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 144 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 110 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 82 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 15321;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 44298;
[ap + 0] = [ap + -1] + 44297, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 47510 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 34;
[ap + -3] = [ap + 0] + 47510, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3847;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15272;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 130, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 1740, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1800, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3410, ap++;
call rel 15367;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15231;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 2470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 115;
[fp + -6] = [ap + 0] + 2470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 93;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 7 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 15172;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -10] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 44149;
[ap + 0] = [ap + -1] + 44148, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35860 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35860, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 35;
[ap + -3] = [ap + 0] + 35860, ap++;
[ap + -1] = [[ap + -17] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + -4] = [ap + 0] + [ap + -13], ap++;
call rel -3808;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15122;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15237;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2070, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 15100;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 15013;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 43990;
[ap + 0] = [ap + -1] + 43989, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3812;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 14965;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 15071;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 14935;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 14897;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 43874;
[ap + 0] = [ap + -1] + 43873, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 9276;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 14794;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 14783;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -11] = [[fp + -10] + 1];
[ap + -3] = [[fp + -10] + 2];
[ap + -2] = [[fp + -10] + 3];
[fp + -9] = [[fp + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 6], ap++;
jmp rel 208 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 7];
[ap + -4] = [[fp + -10] + 8];
[ap + -3] = [[fp + -10] + 9];
[ap + -2] = [[fp + -10] + 10];
[fp + -8] = [[fp + -10] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 7) %}
[ap + 0] = [[fp + -10] + 13], ap++;
jmp rel 180 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 14];
[ap + -4] = [[fp + -10] + 15];
[ap + -3] = [[fp + -10] + 16];
[ap + -2] = [[fp + -10] + 17];
[fp + -7] = [[fp + -10] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 14) %}
[ap + 0] = [[fp + -10] + 20], ap++;
jmp rel 152 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 23464229998776571929713078215531096477380508348102882741883228885676337849, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 21];
[ap + -4] = [[fp + -10] + 22];
[ap + -3] = [[fp + -10] + 23];
[ap + -2] = [[fp + -10] + 24];
[fp + -6] = [[fp + -10] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 21) %}
[ap + 0] = [[fp + -10] + 27], ap++;
jmp rel 124 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 26], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1550153947432118614972336932050404137597350876889446769137856290847321999817, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 28];
[ap + -4] = [[fp + -10] + 29];
[ap + -3] = [[fp + -10] + 30];
[ap + -2] = [[fp + -10] + 31];
[fp + -5] = [[fp + -10] + 32];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 28) %}
[ap + 0] = [[fp + -10] + 34], ap++;
jmp rel 96 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 33], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 507418635482677637483397576806434119548236899667705150952610177267809022874, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 35];
[ap + -4] = [[fp + -10] + 36];
[ap + -3] = [[fp + -10] + 37];
[ap + -2] = [[fp + -10] + 38];
[fp + -4] = [[fp + -10] + 39];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 35) %}
[ap + 0] = [[fp + -10] + 41], ap++;
jmp rel 68 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 40], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 225944429010177989116390628639330560010267272214511598873246645831273610465, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 42];
[ap + -4] = [[fp + -10] + 43];
[ap + -3] = [[fp + -10] + 44];
[ap + -2] = [[fp + -10] + 45];
[fp + -3] = [[fp + -10] + 46];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 42) %}
[ap + 0] = [[fp + -10] + 48], ap++;
jmp rel 40 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 47], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 49];
[ap + -5] = [[fp + -10] + 50];
[ap + -4] = [[fp + -10] + 51];
[ap + -3] = [[fp + -10] + 52];
[ap + -2] = [[fp + -10] + 53];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 49) %}
[ap + 0] = [[fp + -10] + 55], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 54], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -10] + 56, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -10] + 54], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -10] + 58, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 56], ap++;
[ap + 0] = [[fp + -10] + 57], ap++;
ret;
ap += 7;
[ap + 0] = [[fp + -10] + 47], ap++;
[ap + 0] = [ap + -1] + 11130, ap++;
[ap + 0] = [fp + -10] + 51, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 49], ap++;
[ap + 0] = [[fp + -10] + 50], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -10] + 40], ap++;
[ap + 0] = [ap + -1] + 22270, ap++;
[ap + 0] = [fp + -10] + 44, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 42], ap++;
[ap + 0] = [[fp + -10] + 43], ap++;
ret;
ap += 19;
[ap + 0] = [[fp + -10] + 33], ap++;
[ap + 0] = [ap + -1] + 33410, ap++;
[ap + 0] = [fp + -10] + 37, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 35], ap++;
[ap + 0] = [[fp + -10] + 36], ap++;
ret;
ap += 25;
[ap + 0] = [[fp + -10] + 26], ap++;
[ap + 0] = [ap + -1] + 44550, ap++;
[ap + 0] = [fp + -10] + 30, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 28], ap++;
[ap + 0] = [[fp + -10] + 29], ap++;
ret;
ap += 31;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = [ap + -1] + 55690, ap++;
[ap + 0] = [fp + -10] + 23, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 21], ap++;
[ap + 0] = [[fp + -10] + 22], ap++;
ret;
ap += 37;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [ap + -1] + 66830, ap++;
[ap + 0] = [fp + -10] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 14], ap++;
[ap + 0] = [[fp + -10] + 15], ap++;
ret;
ap += 43;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -1] + 77970, ap++;
[ap + 0] = [fp + -10] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 7], ap++;
[ap + 0] = [[fp + -10] + 8], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -10] = [[fp + -8] + 1];
[ap + -3] = [[fp + -8] + 2];
[ap + -2] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 970 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [fp + -8] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 926 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -2] = [[ap + -8] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 3], ap++;
jmp rel 895 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 206363308816097409428170780341577425038733339660856129085969422683500834636, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -20] + 5];
[ap + -9] = [[ap + -20] + 6];
[ap + -8] = [[ap + -20] + 7];
[ap + -7] = [[ap + -20] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -20] + 5) %}
[ap + 0] = [[ap + -20] + 10], ap++;
jmp rel 846 if [ap + -1] != 0;
[ap + 0] = [[ap + -21] + 9], ap++;
[ap + 0] = [[ap + -22] + 11], ap++;
[ap + 0] = [ap + -23] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -11] + 0], ap++;
[ap + 3] = [[fp + -11] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -11] + 2];
jmp rel 794 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -11] + 0];
[ap + 0] = 206363308816097409428170780341577425038733339660856129085969422683500834636, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 752 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 705 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 1] = [ap + -19] + [ap + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 13;
[ap + -1] = [[ap + -13] + 1];
ap += 5;
[ap + 0] = [ap + -18] + 2, ap++;
[ap + 0] = [ap + -10] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 1] = [ap + -12] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -19] + 2];
jmp rel 641;
[ap + -1] = [[ap + -18] + 2];
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 617 if [ap + -12] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 206363308816097409428170780341577425038733339660856129085969422683500834636, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -21] + 0];
[ap + -4] = [[ap + -21] + 1];
[ap + -3] = [[ap + -21] + 2];
[ap + -2] = [[ap + -21] + 3];
[ap + -6] = [[ap + -21] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -21]) %}
[ap + 0] = [[ap + -21] + 6], ap++;
jmp rel 575 if [ap + -1] != 0;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = 206363308816097409428170780341577425038733339660856129085969422683500834636, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -28] + 7];
[ap + -4] = [[ap + -28] + 8];
[ap + -3] = [[ap + -28] + 9];
[ap + -2] = [[ap + -28] + 10];
[ap + -12] = [[ap + -28] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28] + 7) %}
[ap + 0] = [[ap + -28] + 13], ap++;
jmp rel 537 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 12], ap++;
[ap + 0] = [ap + -30] + 14, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 25 if [fp + -3] != 0;
ap += 583;
call rel 43298;
[ap + 0] = [ap + -1] + 43297, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 343780, ap++;
call rel 32442;
[ap + 0] = [ap + -615], ap++;
[ap + 0] = [ap + -598] + [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -601], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 338848771485754487023316366942841454065546216233146595373033587723465544758, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -6] + 0];
[ap + -4] = [[ap + -6] + 1];
[ap + -3] = [[ap + -6] + 2];
[ap + -2] = [[ap + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -6]) %}
[ap + 0] = [[ap + -6] + 5], ap++;
jmp rel 466 if [ap + -1] != 0;
[ap + 0] = [[ap + -7] + 4], ap++;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [ap + -9] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -32] + 0], ap++;
[ap + -4] = [[ap + -33] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -34] + 2];
jmp rel 425;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -31] + 0], ap++;
[ap + -3] = [[ap + -32] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -33] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -7] = [[ap + -1] + 0];
[fp + -6] = [[ap + -1] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1529611236075625274563534897156030821272487408536186087410180751257675023606, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = [ap + -38] + 3, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -6] = [[ap + -14] + 1];
[ap + -15] = [[ap + -14] + 2];
[ap + -5] = [[ap + -14] + 3];
[ap + -4] = [[ap + -14] + 4];
[ap + -3] = [[ap + -14] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 7], ap++;
jmp rel 366 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
[ap + 0] = [[ap + -18] + 9], ap++;
call rel 32372;
[ap + 0] = [ap + -128] + 10, ap++;
[ap + 0] = [ap + -114], ap++;
jmp rel 334 if [ap + -14] != 0;
[ap + -13] = [ap + 0] + [ap + -188], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 307 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -9] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 25;
ap += 442;
call rel 43189;
[ap + 0] = [ap + -1] + 43188, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 303430, ap++;
call rel 33146;
[ap + 0] = [ap + -476], ap++;
[ap + 0] = [ap + -458] + [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -464], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -2] = [[ap + -8] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 3], ap++;
jmp rel 246 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + -165] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + -1] = [[fp + -9] + 3];
[ap + -165] = [[fp + -9] + 4];
[ap + 0] = [[fp + -9] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -34] + 0], ap++;
[ap + -4] = [[ap + -35] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -37] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -34] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -36] + 1], ap++;
[ap + -7] = [[ap + -37] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -37] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -24] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -213], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 7, ap++;
[ap + 0] = [[ap + -24] + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 33075;
[ap + 0] = [fp + -9] + 6, ap++;
jmp rel 155 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 135 if [ap + -5] != 0;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + -324] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[ap + -324] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 34072;
[ap + 0] = [ap + -239] + 6, ap++;
jmp rel 70 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 59 if [ap + -14] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -564], ap++;
[ap + 0] = [ap + -564], ap++;
[ap + 0] = 13, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -603], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -430], ap++;
[ap + 0] = [ap + -430], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -16], ap++;
call rel 35318;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -65] + 0];
[ap + -2] = [[ap + -65] + 1];
[ap + -6] = [[ap + -65] + 2];
[ap + -5] = [[ap + -65] + 3];
[ap + -4] = [[ap + -65] + 4];
[ap + -3] = [[ap + -65] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -65]) %}
[ap + 0] = [[ap + -65] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[ap + -66] + 6], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -70] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = [ap + -54], ap++;
ret;
[ap + 0] = [[ap + -66] + 6], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -70] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -72] + 8], ap++;
[ap + 0] = [[ap + -73] + 9], ap++;
ret;
ap += 48;
[ap + 0] = [ap + -49] + 16220, ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -53], ap++;
jmp rel 8;
ap += 49;
[ap + 0] = [ap + -65] + 16510, ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 280;
call rel 42955;
[ap + 0] = [ap + -1] + 42954, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 158610, ap++;
[ap + 0] = [ap + -288] + [ap + -1], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -292], ap++;
jmp rel 17;
ap += 281;
call rel 42938;
[ap + 0] = [ap + -1] + 42937, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 158900, ap++;
[ap + 0] = [ap + -295] + [ap + -1], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -292], ap++;
[ap + 0] = [ap + -299], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -294], ap++;
[ap + 0] = [ap + -300], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 444;
[ap + 0] = [[ap + -453] + 2], ap++;
call rel 42913;
[ap + 0] = [ap + -1] + 42912, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 293310, ap++;
[ap + 0] = [ap + -476], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -464] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -466] + 4], ap++;
[ap + 0] = [[ap + -467] + 5], ap++;
ret;
ap += 444;
call rel 42891;
[ap + 0] = [ap + -1] + 42890, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 303710, ap++;
call rel 31933;
[ap + 0] = [ap + -476], ap++;
[ap + 0] = [ap + -459] + [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -464], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 441;
call rel 42868;
[ap + 0] = [ap + -1] + 42867, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 303440, ap++;
call rel 35289;
[ap + 0] = [ap + -471], ap++;
[ap + 0] = [ap + -456] + [ap + -8], ap++;
[ap + 0] = [ap + -458], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 561;
[ap + 0] = [[ap + -576] + 6], ap++;
call rel 42846;
[ap + 0] = [ap + -1] + 42845, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 320090, ap++;
[ap + 0] = [ap + -572], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -586] + 10, ap++;
[ap + 0] = [[ap + -587] + 8], ap++;
[ap + 0] = [[ap + -588] + 9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 563;
call rel 42819;
[ap + 0] = [ap + -1] + 42818, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 330870, ap++;
call rel 8286;
[ap + 0] = [ap + -610] + 3, ap++;
[ap + 0] = [ap + -584] + [ap + -8], ap++;
[ap + 0] = [ap + -586], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 578;
[ap + 0] = [[ap + -585] + 4], ap++;
call rel 42796;
[ap + 0] = [ap + -1] + 42795, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 332930, ap++;
[ap + 0] = [ap + -610], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -595] + 8, ap++;
[ap + 0] = [[ap + -596] + 6], ap++;
[ap + 0] = [[ap + -597] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 587;
[ap + 0] = [[ap + -616] + 12], ap++;
call rel 42768;
[ap + 0] = [ap + -1] + 42767, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 344240, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -625] + 16, ap++;
[ap + 0] = [[ap + -626] + 14], ap++;
[ap + 0] = [[ap + -627] + 15], ap++;
jmp rel 20;
ap += 594;
[ap + 0] = [[ap + -616] + 5], ap++;
call rel 42748;
[ap + 0] = [ap + -1] + 42747, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 355570, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -625] + 9, ap++;
[ap + 0] = [[ap + -626] + 7], ap++;
[ap + 0] = [[ap + -627] + 8], ap++;
[ap + 0] = [ap + -615], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 596;
call rel 42722;
[ap + 0] = [ap + -1] + 42721, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 366150, ap++;
[ap + 0] = [ap + -607], ap++;
[ap + 0] = [ap + -607] + [ap + -2], ap++;
jmp rel 17;
ap += 599;
call rel 42706;
[ap + 0] = [ap + -1] + 42705, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 366520, ap++;
[ap + 0] = [ap + -625] + 3, ap++;
[ap + 0] = [ap + -611] + [ap + -2], ap++;
call rel 8323;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -631], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 597;
call rel 42680;
[ap + 0] = [ap + -1] + 42679, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 366140, ap++;
call rel 8309;
[ap + 0] = [ap + -623] + 3, ap++;
[ap + 0] = [ap + -618] + [ap + -8], ap++;
[ap + 0] = [ap + -620], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 617;
[ap + 0] = [[ap + -627] + 4], ap++;
call rel 42657;
[ap + 0] = [ap + -1] + 42656, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 368850, ap++;
[ap + 0] = [ap + -628], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -637] + 8, ap++;
[ap + 0] = [[ap + -638] + 6], ap++;
[ap + 0] = [[ap + -639] + 7], ap++;
jmp rel 48;
ap += 609;
call rel 42637;
[ap + 0] = [ap + -1] + 42636, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 377990, ap++;
call rel 8266;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -630] + [ap + -8], ap++;
[ap + 0] = [ap + -632], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 629;
[ap + 0] = [[ap + -650] + 9], ap++;
call rel 42609;
[ap + 0] = [ap + -1] + 42608, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 380700, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -660] + 13, ap++;
[ap + 0] = [[ap + -661] + 11], ap++;
[ap + 0] = [[ap + -662] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 646;
[ap + 0] = [[ap + -655] + 2], ap++;
call rel 42581;
[ap + 0] = [ap + -1] + 42580, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 392730, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -666] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -668] + 4], ap++;
[ap + 0] = [[ap + -669] + 5], ap++;
ret;
ap += 644;
call rel 42559;
[ap + 0] = [ap + -1] + 42558, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 402750, ap++;
call rel 34989;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -662] + [ap + -8], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [ap + -666], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 657;
[ap + 0] = [[fp + -8] + 4], ap++;
call rel 42535;
[ap + 0] = [ap + -1] + 42534, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 404320, ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 3], ap++;
jmp rel 618 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 2], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 23464229998776571929713078215531096477380508348102882741883228885676337849, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 5];
[ap + -9] = [[fp + -5] + 6];
[ap + -8] = [[fp + -5] + 7];
[ap + -7] = [[fp + -5] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 5) %}
[ap + 0] = [[fp + -5] + 10], ap++;
jmp rel 576 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 9], ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -5] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -8] + 2];
jmp rel 535;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -8] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 500 if [ap + -3] != 0;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 33436;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 426 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 406 if [ap + -14] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 7, ap++;
call rel 34847;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 227;
call rel 42391;
[ap + 0] = [ap + -1] + 42390, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 183950, ap++;
call rel 34913;
[ap + 0] = [ap + -264], ap++;
[ap + 0] = [ap + -242] + [ap + -8], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -265], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -2] = [[ap + -24] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 3], ap++;
jmp rel 344 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 2], ap++;
[ap + 0] = [[ap + -26] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1550153947432118614972336932050404137597350876889446769137856290847321999817, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -35] + 5];
[ap + -7] = [[ap + -35] + 6];
[ap + -6] = [[ap + -35] + 7];
[ap + -5] = [[ap + -35] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -35] + 5) %}
[ap + 0] = [[ap + -35] + 10], ap++;
jmp rel 296 if [ap + -1] != 0;
[ap + 0] = [[ap + -36] + 9], ap++;
[ap + 0] = [[ap + -37] + 11], ap++;
[ap + 0] = [ap + -38] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -46] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -48] + 1], ap++;
[ap + -5] = [[ap + -49] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 253 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -43] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -44] + 1];
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -32] + memory[ap + -6]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -33] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -48] + 2];
jmp rel 214;
[ap + 1] = [ap + -33] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[ap + -48] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -52] + 3];
jmp rel 177;
[ap + -1] = [[ap + -51] + 3];
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -36] + 0];
[fp + -4] = [[ap + -36] + 1];
[ap + 0] = [[ap + -36] + 2], ap++;
[ap + -1] = [[ap + -37] + 3];
[fp + -3] = [[ap + -37] + 4];
[ap + 0] = [[ap + -37] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -58] + 4], ap++;
[ap + -4] = [[ap + -59] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -61] + 6];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -58] + 4], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -60] + 5], ap++;
[ap + -7] = [[ap + -61] + 6];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -61] + 7, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -61], ap++;
call rel 32212;
[ap + 0] = [ap + -192] + 6, ap++;
jmp rel 99 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 88 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -2] = [[ap + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 3], ap++;
jmp rel 66 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [[ap + -11] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[ap + -11] + 2], ap++;
[ap + 0] = [ap + -192], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 34495;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -59] + 5];
[ap + -2] = [[ap + -59] + 6];
[ap + -6] = [[ap + -59] + 7];
[ap + -5] = [[ap + -59] + 8];
[ap + -4] = [[ap + -59] + 9];
[ap + -3] = [[ap + -59] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -59] + 5) %}
[ap + 0] = [[ap + -59] + 12], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -60] + 11], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -64] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -60] + 11], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -64] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -66] + 13], ap++;
[ap + 0] = [[ap + -67] + 14], ap++;
ret;
ap += 50;
[ap + 0] = [[ap + -60] + 2], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -2] + 16500, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -64] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -66] + 4], ap++;
[ap + 0] = [[ap + -67] + 5], ap++;
ret;
ap += 51;
[ap + 0] = [ap + -52] + 26790, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -56], ap++;
jmp rel 8;
ap += 52;
[ap + 0] = [ap + -59] + 27080, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 199;
call rel 42116;
[ap + 0] = [ap + -1] + 42115, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 159850, ap++;
call rel 34647;
[ap + 0] = [ap + -264] + 4, ap++;
[ap + 0] = [ap + -217] + [ap + -8], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -227], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 203;
call rel 42092;
[ap + 0] = [ap + -1] + 42091, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160380, ap++;
call rel 7730;
[ap + 0] = [ap + -264] + 3, ap++;
[ap + 0] = [ap + -221] + [ap + -8], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -227], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 197;
call rel 42068;
[ap + 0] = [ap + -1] + 42067, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 159840, ap++;
call rel 7715;
[ap + 0] = [ap + -259] + 3, ap++;
[ap + 0] = [ap + -219] + [ap + -8], ap++;
[ap + 0] = [ap + -221], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 213;
[ap + 0] = [[ap + -249] + 9], ap++;
call rel 42045;
[ap + 0] = [ap + -1] + 42044, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161990, ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -259] + 13, ap++;
[ap + 0] = [[ap + -260] + 11], ap++;
[ap + 0] = [[ap + -261] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 229;
[ap + 0] = [[ap + -254] + 2], ap++;
call rel 42017;
[ap + 0] = [ap + -1] + 42016, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 173930, ap++;
[ap + 0] = [ap + -264], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -265] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -267] + 4], ap++;
[ap + 0] = [[ap + -268] + 5], ap++;
ret;
ap += 236;
call rel 41995;
[ap + 0] = [ap + -1] + 41994, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 185260, ap++;
[ap + 0] = [ap + -244] + [ap + -1], ap++;
[ap + 0] = [ap + -248], ap++;
[ap + 0] = [ap + -248], ap++;
jmp rel 17;
ap += 237;
call rel 41978;
[ap + 0] = [ap + -1] + 41977, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 185550, ap++;
[ap + 0] = [ap + -260] + [ap + -1], ap++;
[ap + 0] = [ap + -248], ap++;
[ap + 0] = [ap + -248], ap++;
[ap + 0] = [ap + -264], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -265], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 467;
call rel 41954;
[ap + 0] = [ap + -1] + 41953, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 327460, ap++;
call rel 34494;
[ap + 0] = [ap + -482], ap++;
[ap + 0] = [ap + -482] + [ap + -8], ap++;
[ap + 0] = [ap + -492], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 469;
call rel 41933;
[ap + 0] = [ap + -1] + 41932, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 327540, ap++;
call rel 7400;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -490] + [ap + -8], ap++;
[ap + 0] = [ap + -492], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 484;
[ap + 0] = [[fp + -5] + 9], ap++;
call rel 41910;
[ap + 0] = [ap + -1] + 41909, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 329600, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 13, ap++;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 21;
ap += 496;
[ap + 0] = [[fp + -5] + 2], ap++;
call rel 41889;
[ap + 0] = [ap + -1] + 41888, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 341280, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -5] + 6, ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 32846;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 493 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 473 if [ap + -14] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 5, ap++;
call rel 34257;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 237;
call rel 41801;
[ap + 0] = [ap + -1] + 41800, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 185460, ap++;
call rel 34350;
[ap + 0] = [ap + -274], ap++;
[ap + 0] = [ap + -252] + [ap + -8], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -275], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -2] = [[ap + -24] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 3], ap++;
jmp rel 411 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 2], ap++;
[ap + 0] = [[ap + -26] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1550153947432118614972336932050404137597350876889446769137856290847321999817, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -35] + 5];
[ap + -7] = [[ap + -35] + 6];
[ap + -6] = [[ap + -35] + 7];
[ap + -5] = [[ap + -35] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -35] + 5) %}
[ap + 0] = [[ap + -35] + 10], ap++;
jmp rel 363 if [ap + -1] != 0;
[ap + 0] = [[ap + -36] + 9], ap++;
[ap + 0] = [[ap + -37] + 11], ap++;
[ap + 0] = [ap + -38] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -46] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -48] + 1], ap++;
[ap + -5] = [[ap + -49] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 320 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -43] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -44] + 1];
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -32] + memory[ap + -6]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -33] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -48] + 2];
jmp rel 281;
[ap + 1] = [ap + -33] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[ap + -48] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -52] + 3];
jmp rel 244;
[ap + -1] = [[ap + -51] + 3];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 388253903139234225618769643346690607942933606413880706287599320192885608818, ap++;
[ap + 0] = [ap + -54] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -5] = [[ap + -16] + 1];
[ap + -4] = [[ap + -16] + 2];
[ap + -3] = [[ap + -16] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 5], ap++;
jmp rel 199 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 4], ap++;
[ap + 0] = [[ap + -18] + 6], ap++;
[ap + 0] = [ap + -19] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 158;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -51] + 0];
[fp + -4] = [[ap + -51] + 1];
[ap + 0] = [[ap + -51] + 2], ap++;
[ap + -1] = [[ap + -52] + 3];
[fp + -3] = [[ap + -52] + 4];
[ap + 0] = [[ap + -52] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -19] + 3], ap++;
[ap + -4] = [[ap + -20] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -22] + 5];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -19] + 3], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -21] + 4], ap++;
[ap + -7] = [[ap + -22] + 5];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -22] + 6, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [ap + -76], ap++;
call rel 31579;
[ap + 0] = [ap + -207] + 6, ap++;
jmp rel 73 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 62 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -228], ap++;
[ap + 0] = [ap + -226], ap++;
[ap + 0] = [ap + -226], ap++;
[ap + 0] = [ap + -202], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 33874;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -54] + 0];
[ap + -2] = [[ap + -54] + 1];
[ap + -6] = [[ap + -54] + 2];
[ap + -5] = [[ap + -54] + 3];
[ap + -4] = [[ap + -54] + 4];
[ap + -3] = [[ap + -54] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -54]) %}
[ap + 0] = [[ap + -54] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -55] + 6], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -55] + 6], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -61] + 8], ap++;
[ap + 0] = [[ap + -62] + 9], ap++;
ret;
ap += 46;
[ap + 0] = [ap + -47] + 16040, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 8;
ap += 47;
[ap + 0] = [ap + -54] + 16330, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 189;
call rel 41509;
[ap + 0] = [ap + -1] + 41508, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 148550, ap++;
call rel 6976;
[ap + 0] = [ap + -215] + 3, ap++;
[ap + 0] = [ap + -210] + [ap + -8], ap++;
[ap + 0] = [ap + -212], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 204;
[ap + 0] = [[ap + -221] + 4], ap++;
call rel 41486;
[ap + 0] = [ap + -1] + 41485, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 150610, ap++;
[ap + 0] = [ap + -215], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -231] + 8, ap++;
[ap + 0] = [[ap + -232] + 6], ap++;
[ap + 0] = [[ap + -233] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 209;
call rel 41459;
[ap + 0] = [ap + -1] + 41458, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161360, ap++;
call rel 33990;
[ap + 0] = [ap + -274] + 4, ap++;
[ap + 0] = [ap + -227] + [ap + -8], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 213;
call rel 41435;
[ap + 0] = [ap + -1] + 41434, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161890, ap++;
call rel 7073;
[ap + 0] = [ap + -274] + 3, ap++;
[ap + 0] = [ap + -231] + [ap + -8], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -237], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 207;
call rel 41411;
[ap + 0] = [ap + -1] + 41410, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 161350, ap++;
call rel 7058;
[ap + 0] = [ap + -269] + 3, ap++;
[ap + 0] = [ap + -229] + [ap + -8], ap++;
[ap + 0] = [ap + -231], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 223;
[ap + 0] = [[ap + -259] + 9], ap++;
call rel 41388;
[ap + 0] = [ap + -1] + 41387, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 163500, ap++;
[ap + 0] = [ap + -269], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -269] + 13, ap++;
[ap + 0] = [[ap + -270] + 11], ap++;
[ap + 0] = [[ap + -271] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 239;
[ap + 0] = [[ap + -264] + 2], ap++;
call rel 41360;
[ap + 0] = [ap + -1] + 41359, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 175440, ap++;
[ap + 0] = [ap + -274], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -275] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -277] + 4], ap++;
[ap + 0] = [[ap + -278] + 5], ap++;
ret;
ap += 246;
call rel 41338;
[ap + 0] = [ap + -1] + 41337, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 186770, ap++;
[ap + 0] = [ap + -254] + [ap + -1], ap++;
[ap + 0] = [ap + -258], ap++;
[ap + 0] = [ap + -258], ap++;
jmp rel 17;
ap += 247;
call rel 41321;
[ap + 0] = [ap + -1] + 41320, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 187060, ap++;
[ap + 0] = [ap + -270] + [ap + -1], ap++;
[ap + 0] = [ap + -258], ap++;
[ap + 0] = [ap + -258], ap++;
[ap + 0] = [ap + -274], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -260], ap++;
[ap + 0] = [ap + -275], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 344 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[fp + -5] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -10] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -7] = [[fp + -10] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -7] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 32271;
[ap + 0] = [[ap + -238] + 0], ap++;
[ap + 0] = [[ap + -239] + 1], ap++;
[ap + 0] = [[ap + -240] + 2], ap++;
[ap + 0] = [[ap + -241] + 3], ap++;
[ap + 0] = [[ap + -242] + 4], ap++;
[ap + 0] = [fp + -8] + 6, ap++;
jmp rel 262 if [ap + -19] != 0;
[ap + 0] = [ap + -21], ap++;
jmp rel 242 if [ap + -19] != 0;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 7, ap++;
call rel 33677;
[ap + 0] = [ap + -6], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 153;
call rel 41221;
[ap + 0] = [ap + -1] + 41220, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 123130, ap++;
call rel 33770;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = [ap + -168] + [ap + -8], ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
jmp rel 25 if [fp + -3] != 0;
ap += 152;
call rel 41195;
[ap + 0] = [ap + -1] + 41194, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 122940, ap++;
call rel 30339;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = [ap + -167] + [ap + -8], ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -30] + 0];
[ap + -2] = [[ap + -30] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -30]) %}
[ap + 0] = [[ap + -30] + 3], ap++;
jmp rel 154 if [ap + -1] != 0;
[ap + 0] = [[ap + -31] + 2], ap++;
[ap + 0] = [[ap + -32] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 1012635714697471519253023535212382154581791834426931108059169889742058836701, ap++;
[ap + -1] = [[ap + -16] + 0];
[fp + -6] = [[ap + -16] + 1];
[ap + 0] = [[ap + -16] + 2], ap++;
[ap + -1] = [[ap + -17] + 3];
[fp + -5] = [[ap + -17] + 4];
[ap + 0] = [[ap + -17] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -43] + 0], ap++;
[ap + -4] = [[ap + -44] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -46] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -43] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -45] + 1], ap++;
[ap + -7] = [[ap + -46] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -46] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -46] + 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [[ap + -22] + 1], ap++;
[ap + 0] = 0, ap++;
call rel 33676;
[ap + 0] = [ap + -123] + 6, ap++;
jmp rel 75 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 64 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -138], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 33377;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -54] + 0];
[ap + -2] = [[ap + -54] + 1];
[ap + -6] = [[ap + -54] + 2];
[ap + -5] = [[ap + -54] + 3];
[ap + -4] = [[ap + -54] + 4];
[ap + -3] = [[ap + -54] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -54]) %}
[ap + 0] = [[ap + -54] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -55] + 6], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -55] + 6], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -61] + 8], ap++;
[ap + 0] = [[ap + -62] + 9], ap++;
ret;
ap += 46;
[ap + 0] = [ap + -47] + 16040, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 8;
ap += 47;
[ap + 0] = [ap + -54] + 16330, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 154;
[ap + 0] = [[ap + -185] + 2], ap++;
call rel 41011;
[ap + 0] = [ap + -1] + 41010, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 112920, ap++;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -196] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -198] + 4], ap++;
[ap + 0] = [[ap + -199] + 5], ap++;
ret;
ap += 162;
call rel 40989;
[ap + 0] = [ap + -1] + 40988, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 124440, ap++;
[ap + 0] = [ap + -170] + [ap + -1], ap++;
[ap + 0] = [ap + -179], ap++;
[ap + 0] = [ap + -179], ap++;
jmp rel 17;
ap += 163;
call rel 40972;
[ap + 0] = [ap + -1] + 40971, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 124730, ap++;
[ap + 0] = [ap + -191] + [ap + -1], ap++;
[ap + 0] = [ap + -179], ap++;
[ap + 0] = [ap + -179], ap++;
[ap + 0] = [ap + -195], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -196], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 410;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 40947;
[ap + 0] = [ap + -1] + 40946, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 268370, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -7] + 0];
[fp + -9] = [[fp + -7] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 3], ap++;
jmp rel 1242 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 23464229998776571929713078215531096477380508348102882741883228885676337849, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 5];
[ap + -9] = [[fp + -7] + 6];
[ap + -8] = [[fp + -7] + 7];
[ap + -7] = [[fp + -7] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 5) %}
[ap + 0] = [[fp + -7] + 10], ap++;
jmp rel 1200 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 9], ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [fp + -7] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 1159;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 1124 if [ap + -3] != 0;
[ap + 0] = 1012635714697471519253023535212382154581791834426931108059169889742058836701, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[fp + -5] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 33942;
[ap + 0] = [fp + -8] + 6, ap++;
jmp rel 1050 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 1030 if [ap + -11] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 5, ap++;
jmp rel [ap + -7];
jmp rel 83;
jmp rel 42;
[ap + 0] = [ap + -2] + 200, ap++;
jmp rel [ap + -2];
jmp rel 22;
jmp rel 5;
[ap + 0] = [ap + -1], ap++;
jmp rel 118;
ap += 824;
call rel 40793;
[ap + 0] = [ap + -1] + 40792, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568260, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
jmp rel 91;
ap += 824;
call rel 40778;
[ap + 0] = [ap + -1] + 40777, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568260, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
jmp rel 76;
[ap + 0] = [ap + -2], ap++;
jmp rel [ap + -2];
jmp rel 22;
jmp rel 17;
ap += 824;
call rel 40757;
[ap + 0] = [ap + -1] + 40756, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568460, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
jmp rel 55;
[ap + 0] = [ap + -1], ap++;
jmp rel 64;
ap += 824;
call rel 40739;
[ap + 0] = [ap + -1] + 40738, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568360, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
jmp rel 37;
[ap + 0] = [ap + -2] + 100, ap++;
jmp rel [ap + -2];
jmp rel 43;
jmp rel 17;
ap += 824;
call rel 40717;
[ap + 0] = [ap + -1] + 40716, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568360, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
jmp rel 15;
ap += 824;
call rel 40702;
[ap + 0] = [ap + -1] + 40701, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 568360, ap++;
[ap + 0] = [ap + -832] + [ap + -1], ap++;
call rel 34610;
[ap + 0] = [ap + -856], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -857], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -18] + 0];
[ap + -2] = [[ap + -18] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -18]) %}
[ap + 0] = [[ap + -18] + 3], ap++;
jmp rel 866 if [ap + -1] != 0;
[ap + 0] = [[ap + -19] + 2], ap++;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 507418635482677637483397576806434119548236899667705150952610177267809022874, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -29] + 5];
[ap + -7] = [[ap + -29] + 6];
[ap + -6] = [[ap + -29] + 7];
[ap + -5] = [[ap + -29] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29] + 5) %}
[ap + 0] = [[ap + -29] + 10], ap++;
jmp rel 818 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 9], ap++;
[ap + 0] = [[ap + -31] + 11], ap++;
[ap + 0] = [ap + -32] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -40] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -42] + 1], ap++;
[ap + -5] = [[ap + -43] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 775 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -37] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -38] + 1];
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -28] + memory[ap + -6]) % PRIME < 18446744073709551616 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -29] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 18446744073709551616, ap++;
[ap + -1] = [[ap + -42] + 2];
jmp rel 736;
[ap + 1] = [ap + -29] + [ap + -7], ap++;
[ap + -1] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -2] = [[ap + -42] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -46] + 3];
jmp rel 699;
[ap + -1] = [[ap + -45] + 3];
[ap + 0] = 1012635714697471519253023535212382154581791834426931108059169889742058836701, ap++;
[ap + -1] = [[ap + -33] + 0];
[fp + -6] = [[ap + -33] + 1];
[ap + 0] = [[ap + -33] + 2], ap++;
[ap + -1] = [[ap + -34] + 3];
[fp + -5] = [[ap + -34] + 4];
[ap + 0] = [[ap + -34] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -52] + 4], ap++;
[ap + -4] = [[ap + -53] + 5], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -55] + 6];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -52] + 4], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -54] + 5], ap++;
[ap + -7] = [[ap + -55] + 6];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -55] + 7, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -39], ap++;
call rel 33117;
[ap + 0] = [ap + -140] + 6, ap++;
jmp rel 615 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 595 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 202 if [fp + -3] != 0;
ap += 238;
call rel 40535;
[ap + 0] = [ap + -1] + 40534, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 143230, ap++;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -249] + 0];
[fp + -6] = [[ap + -249] + 1];
[ap + 0] = [[ap + -249] + 2], ap++;
[ap + -1] = [[ap + -250] + 3];
[fp + -5] = [[ap + -250] + 4];
[ap + 0] = [[ap + -250] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -262] + 0], ap++;
[ap + -4] = [[ap + -263] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -265] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -262] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -264] + 1], ap++;
[ap + -7] = [[ap + -265] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -265] + 3, ap++;
[ap + 0] = [ap + -257] + [ap + -12], ap++;
[ap + 0] = [ap + -265], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 31507;
[ap + 0] = [ap + -485] + 6, ap++;
jmp rel 116 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 96 if [ap + -14] != 0;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -6] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[fp + -5] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -25] + 0], ap++;
[ap + -4] = [[ap + -26] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -28] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -25] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -27] + 1], ap++;
[ap + -7] = [[ap + -28] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
call rel 30392;
[ap + 0] = [ap + -159] + 6, ap++;
jmp rel 19 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 8 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -10], ap++;
jmp rel 267;
ap += 54;
[ap + 0] = [ap + -55] + 27160, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59], ap++;
jmp rel 8;
ap += 55;
[ap + 0] = [ap + -62] + 27450, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 206;
call rel 40376;
[ap + 0] = [ap + -1] + 40375, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160680, ap++;
[ap + 0] = [ap + -214] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
jmp rel 17;
ap += 207;
call rel 40359;
[ap + 0] = [ap + -1] + 40358, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160970, ap++;
[ap + 0] = [ap + -230] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -235], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -4] + 0];
[fp + -6] = [[ap + -4] + 1];
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + -1] = [[ap + -5] + 3];
[fp + -5] = [[ap + -5] + 4];
[ap + 0] = [[ap + -5] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -20] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -17] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -19] + 1], ap++;
[ap + -7] = [[ap + -20] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 31319;
[ap + 0] = [ap + -240] + 6, ap++;
jmp rel 318 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 298 if [ap + -14] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 7, ap++;
call rel 32730;
[ap + 0] = [ap + -6], ap++;
jmp rel 20 if [ap + -2] != 0;
ap += 391;
call rel 40274;
[ap + 0] = [ap + -1] + 40273, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 276340, ap++;
[ap + 0] = [ap + -422], ap++;
[ap + 0] = [ap + -400] + [ap + -2], ap++;
[ap + 0] = [ap + -408], ap++;
[ap + 0] = [ap + -423], ap++;
jmp rel 124;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -9] + 0];
[fp + -6] = [[ap + -9] + 1];
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + -1] = [[ap + -10] + 3];
[fp + -5] = [[ap + -10] + 4];
[ap + 0] = [[ap + -10] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -31] + 0], ap++;
[ap + -4] = [[ap + -32] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -34] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -31] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -33] + 1], ap++;
[ap + -7] = [[ap + -34] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -34] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 31240;
[ap + 0] = [ap + -245] + 6, ap++;
jmp rel 198 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 178 if [ap + -14] != 0;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -6] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[fp + -5] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -25] + 0], ap++;
[ap + -4] = [[ap + -26] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -28] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -25] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -27] + 1], ap++;
[ap + -7] = [[ap + -28] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
call rel 30125;
[ap + 0] = [ap + -159] + 6, ap++;
jmp rel 101 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 90 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -4] = [[ap + -2] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -2]) %}
[ap + 0] = [[ap + -2] + 3], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[ap + -10] + 2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -790], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 32406;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -52] + 5];
[ap + -2] = [[ap + -52] + 6];
[ap + -6] = [[ap + -52] + 7];
[ap + -5] = [[ap + -52] + 8];
[ap + -4] = [[ap + -52] + 9];
[ap + -3] = [[ap + -52] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -52] + 5) %}
[ap + 0] = [[ap + -52] + 12], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -53] + 11], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57] + 13, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -53] + 11], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 13], ap++;
[ap + 0] = [[ap + -60] + 14], ap++;
ret;
ap += 50;
[ap + 0] = [[ap + -53] + 2], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -2] + 16500, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -59] + 4], ap++;
[ap + 0] = [[ap + -60] + 5], ap++;
ret;
ap += 54;
[ap + 0] = [ap + -55] + 27060, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59], ap++;
jmp rel 8;
ap += 55;
[ap + 0] = [ap + -62] + 27350, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 206;
call rel 40027;
[ap + 0] = [ap + -1] + 40026, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160580, ap++;
[ap + 0] = [ap + -214] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
jmp rel 17;
ap += 207;
call rel 40010;
[ap + 0] = [ap + -1] + 40009, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 160870, ap++;
[ap + 0] = [ap + -230] + [ap + -1], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -218], ap++;
[ap + 0] = [ap + -234], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -220], ap++;
[ap + 0] = [ap + -235], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 451;
call rel 39986;
[ap + 0] = [ap + -1] + 39985, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 304640, ap++;
[ap + 0] = [ap + -459] + [ap + -1], ap++;
[ap + 0] = [ap + -463], ap++;
[ap + 0] = [ap + -463], ap++;
jmp rel 17;
ap += 452;
call rel 39969;
[ap + 0] = [ap + -1] + 39968, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 304930, ap++;
[ap + 0] = [ap + -475] + [ap + -1], ap++;
[ap + 0] = [ap + -463], ap++;
[ap + 0] = [ap + -463], ap++;
[ap + 0] = [ap + -479], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -465], ap++;
[ap + 0] = [ap + -480], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 691;
call rel 39945;
[ap + 0] = [ap + -1] + 39944, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 447850, ap++;
[ap + 0] = [ap + -699] + [ap + -1], ap++;
[ap + 0] = [ap + -703], ap++;
[ap + 0] = [ap + -703], ap++;
jmp rel 17;
ap += 692;
call rel 39928;
[ap + 0] = [ap + -1] + 39927, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 6, ap++;
[ap + 0] = [ap + -1] + 448140, ap++;
[ap + 0] = [ap + -706] + [ap + -1], ap++;
[ap + 0] = [ap + -703], ap++;
[ap + 0] = [ap + -703], ap++;
[ap + 0] = [ap + -710], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -705], ap++;
[ap + 0] = [ap + -711], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 797;
call rel 39904;
[ap + 0] = [ap + -1] + 39903, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 544350, ap++;
call rel 32435;
[ap + 0] = [ap + -856] + 4, ap++;
[ap + 0] = [ap + -815] + [ap + -8], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -825], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 801;
call rel 39880;
[ap + 0] = [ap + -1] + 39879, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 544880, ap++;
call rel 5518;
[ap + 0] = [ap + -856] + 3, ap++;
[ap + 0] = [ap + -819] + [ap + -8], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -825], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 795;
call rel 39856;
[ap + 0] = [ap + -1] + 39855, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 544340, ap++;
call rel 5503;
[ap + 0] = [ap + -851] + 3, ap++;
[ap + 0] = [ap + -817] + [ap + -8], ap++;
[ap + 0] = [ap + -819], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 811;
[ap + 0] = [[ap + -841] + 9], ap++;
call rel 39833;
[ap + 0] = [ap + -1] + 39832, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 546490, ap++;
[ap + 0] = [ap + -851], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -851] + 13, ap++;
[ap + 0] = [[ap + -852] + 11], ap++;
[ap + 0] = [[ap + -853] + 12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 827;
[ap + 0] = [[ap + -846] + 2], ap++;
call rel 39805;
[ap + 0] = [ap + -1] + 39804, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 558430, ap++;
[ap + 0] = [ap + -856], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -857] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -859] + 4], ap++;
[ap + 0] = [[ap + -860] + 5], ap++;
ret;
ap += 831;
call rel 39783;
[ap + 0] = [ap + -1] + 39782, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 569490, ap++;
[ap + 0] = [ap + -839] + [ap + -1], ap++;
[ap + 0] = [ap + -843], ap++;
[ap + 0] = [ap + -843], ap++;
jmp rel 17;
ap += 832;
call rel 39766;
[ap + 0] = [ap + -1] + 39765, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 8, ap++;
[ap + 0] = [ap + -1] + 569780, ap++;
[ap + 0] = [ap + -852] + [ap + -1], ap++;
[ap + 0] = [ap + -843], ap++;
[ap + 0] = [ap + -843], ap++;
[ap + 0] = [ap + -856], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -845], ap++;
[ap + 0] = [ap + -857], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 994;
call rel 39742;
[ap + 0] = [ap + -1] + 39741, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 672420, ap++;
call rel 32282;
[ap + 0] = [ap + -1009], ap++;
[ap + 0] = [ap + -1009] + [ap + -8], ap++;
[ap + 0] = [ap + -1019], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 64;
ap += 996;
call rel 39721;
[ap + 0] = [ap + -1] + 39720, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 672500, ap++;
call rel 5188;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -1017] + [ap + -8], ap++;
[ap + 0] = [ap + -1019], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 1011;
[ap + 0] = [[fp + -7] + 9], ap++;
call rel 39698;
[ap + 0] = [ap + -1] + 39697, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 674560, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 13, ap++;
[ap + 0] = [[fp + -7] + 11], ap++;
[ap + 0] = [[fp + -7] + 12], ap++;
jmp rel 21;
ap += 1023;
[ap + 0] = [[fp + -7] + 2], ap++;
call rel 39677;
[ap + 0] = [ap + -1] + 39676, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 686240, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 238 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 205 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 173;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 147 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -5] = [[ap + -15] + 1];
[ap + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
[ap + -2] = [[ap + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 6], ap++;
jmp rel 117 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -2] = [[ap + -19] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 10], ap++;
jmp rel 95 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [[ap + -21] + 11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -29] + 12];
[ap + -7] = [[ap + -29] + 13];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29] + 12) %}
[ap + 0] = [[ap + -29] + 15], ap++;
jmp rel 67 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 14], ap++;
[ap + 0] = [[ap + -31] + 16], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [[ap + -12] + 1], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 31823;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -80] + 17];
[ap + -2] = [[ap + -80] + 18];
[ap + -6] = [[ap + -80] + 19];
[ap + -5] = [[ap + -80] + 20];
[ap + -4] = [[ap + -80] + 21];
[ap + -3] = [[ap + -80] + 22];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -80] + 17) %}
[ap + 0] = [[ap + -80] + 24], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -81] + 23], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -84] + 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -81] + 23], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -84] + 27, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 25], ap++;
[ap + 0] = [[ap + -87] + 26], ap++;
ret;
ap += 51;
[ap + 0] = [[ap + -81] + 14], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 16590, ap++;
[ap + 0] = [ap + -84] + 18, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 16], ap++;
[ap + 0] = [[ap + -87] + 17], ap++;
ret;
ap += 61;
[ap + 0] = [[ap + -81] + 9], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 27790, ap++;
[ap + 0] = [ap + -84] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 11], ap++;
[ap + 0] = [[ap + -87] + 12], ap++;
ret;
ap += 65;
[ap + 0] = [[ap + -81] + 5], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 38450, ap++;
[ap + 0] = [ap + -84] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 7], ap++;
[ap + 0] = [[ap + -87] + 8], ap++;
ret;
ap += 61;
call rel 33372;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -69] + 48490, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 63;
call rel 4909;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -77] + 48570, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 78;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 50630, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 90;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 62310, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 3], ap++;
jmp rel 238 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 5];
[ap + -9] = [[fp + -3] + 6];
[ap + -8] = [[fp + -3] + 7];
[ap + -7] = [[fp + -3] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3] + 5) %}
[ap + 0] = [[fp + -3] + 10], ap++;
jmp rel 205 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [fp + -3] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 173;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 147 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -5] = [[ap + -15] + 1];
[ap + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
[ap + -2] = [[ap + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 6], ap++;
jmp rel 117 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -19] + 7];
[ap + -2] = [[ap + -19] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19] + 7) %}
[ap + 0] = [[ap + -19] + 10], ap++;
jmp rel 95 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [[ap + -21] + 11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [[ap + -6] + 4], ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -29] + 12];
[ap + -7] = [[ap + -29] + 13];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29] + 12) %}
[ap + 0] = [[ap + -29] + 15], ap++;
jmp rel 67 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 14], ap++;
[ap + 0] = [[ap + -31] + 16], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [[ap + -12] + 1], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel 31562;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -80] + 17];
[ap + -2] = [[ap + -80] + 18];
[ap + -6] = [[ap + -80] + 19];
[ap + -5] = [[ap + -80] + 20];
[ap + -4] = [[ap + -80] + 21];
[ap + -3] = [[ap + -80] + 22];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -80] + 17) %}
[ap + 0] = [[ap + -80] + 24], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -81] + 23], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -84] + 25, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -81] + 23], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -84] + 27, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 25], ap++;
[ap + 0] = [[ap + -87] + 26], ap++;
ret;
ap += 51;
[ap + 0] = [[ap + -81] + 14], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 16590, ap++;
[ap + 0] = [ap + -84] + 18, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 16], ap++;
[ap + 0] = [[ap + -87] + 17], ap++;
ret;
ap += 61;
[ap + 0] = [[ap + -81] + 9], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 27790, ap++;
[ap + 0] = [ap + -84] + 13, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 11], ap++;
[ap + 0] = [[ap + -87] + 12], ap++;
ret;
ap += 65;
[ap + 0] = [[ap + -81] + 5], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 38450, ap++;
[ap + 0] = [ap + -84] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -86] + 7], ap++;
[ap + 0] = [[ap + -87] + 8], ap++;
ret;
ap += 61;
call rel 33111;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -69] + 48490, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 63;
call rel 4648;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -77] + 48570, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 78;
[ap + 0] = [[fp + -3] + 9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 50630, ap++;
[ap + 0] = [fp + -3] + 13, ap++;
[ap + 0] = [[fp + -3] + 11], ap++;
[ap + 0] = [[fp + -3] + 12], ap++;
jmp rel 12;
ap += 90;
[ap + 0] = [[fp + -3] + 2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 62310, ap++;
[ap + 0] = [fp + -3] + 6, ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 395303308062052736781051614546263052519305588900017010987003482351744550060, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 30112;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 50 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 20 if [ap + -14] != 0;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = 1012635714697471519253023535212382154581791834426931108059169889742058836701, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel 32078;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 41 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 17 if [ap + -11] != 0;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 28 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
ret;
ap += 6;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [ap + -1] + 640, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1550153947432118614972336932050404137597350876889446769137856290847321999817, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 32666;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 4203;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 507418635482677637483397576806434119548236899667705150952610177267809022874, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 32513;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 4050;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 23464229998776571929713078215531096477380508348102882741883228885676337849, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 32360;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 3897;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 3], ap++;
jmp rel 130 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 5];
[ap + -9] = [[fp + -4] + 6];
[ap + -8] = [[fp + -4] + 7];
[ap + -7] = [[fp + -4] + 8];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 5) %}
[ap + 0] = [[fp + -4] + 10], ap++;
jmp rel 97 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 12, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 65;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + -14] = [ap + 0] + [ap + -8], ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 41 if [ap + -3] != 0;
ap += 5;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -19] + 0];
[ap + -4] = [[ap + -19] + 1];
[ap + -3] = [[ap + -19] + 2];
[ap + -2] = [[ap + -19] + 3];
[fp + -3] = [[ap + -19] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -19]) %}
[ap + 0] = [[ap + -19] + 6], ap++;
jmp rel 14 if [ap + -1] != 0;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -20] + 5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -23] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
ret;
call rel 32207;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 10050, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 37;
ap += 2;
call rel 3744;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -16] + 10030, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 17;
[ap + 0] = [[fp + -4] + 9], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 12090, ap++;
[ap + 0] = [fp + -4] + 13, ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 12;
ap += 29;
[ap + 0] = [[fp + -4] + 2], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -2] + 23770, ap++;
[ap + 0] = [fp + -4] + 6, ap++;
[ap + 0] = [[fp + -4] + 4], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 23;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
ap += 7;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14] + 730, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -20], ap++;
ret;
call rel 3650;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 15;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 1860, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
ret;
ret;
%{ memory[ap + 0] = 15430 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768196026, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 566;
[fp + -6] = [ap + 0] + 15430, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 524 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 503;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 456 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 435;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 388 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 367;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -17] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 320 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 299;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 252 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 228 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 183 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 159 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 114 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 90 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 8796;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 37773;
[ap + 0] = [ap + -1] + 37772, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 90600 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 90600, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 39;
[ap + -3] = [ap + 0] + 90600, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -22], ap++;
call rel -6005;
[ap + 0] = [ap + -74] + 1, ap++;
jmp rel 12 if [ap + -4] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -7] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 8742;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 8794;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 2440, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3950, ap++;
call rel 8784;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 4280, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5790, ap++;
call rel 8774;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 6590, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7900, ap++;
call rel 8764;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 8700, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 10010, ap++;
call rel 8754;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 10810, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 12120, ap++;
call rel 8744;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 12920, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 14230, ap++;
call rel 8734;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 8598;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 8720 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768202736, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 292;
[fp + -6] = [ap + 0] + 8720, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 249 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 221 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 187 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 159 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
call rel 31389;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -20], ap++;
jmp rel 135 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 117;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -11] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 95;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 8431;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 37407;
[ap + 0] = [ap + -1] + 37406, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 423990, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 0];
jmp rel 42;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -6143;
jmp rel 16 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -3] = [[ap + -1] + 0];
[ap + -2] = [[ap + -1] + 1];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 300, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 8369;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -32] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 8456;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -11] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 8453;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -10] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 8450;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 4240, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5850, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 5910, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 7520, ap++;
call rel 8427;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 8290;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 223;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 180 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 152 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 90 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 8149;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 37125;
[ap + 0] = [ap + -1] + 37124, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 358940, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 36;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -5418;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 8093;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 8187;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 8050;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 223;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 180 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 152 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 90 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 7909;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 36885;
[ap + 0] = [ap + -1] + 36884, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 336640, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 36;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -5007;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 7853;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 7947;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 7810;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 6110 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205346, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 269;
[fp + -6] = [ap + 0] + 6110, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 226 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 198 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 164 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 136 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 113;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 91;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 7649;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 36625;
[ap + 0] = [ap + -1] + 36624, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 284870, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -24] + 0];
jmp rel 38;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -23] + 0];
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -19], ap++;
call rel -4704;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 7591;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 7687;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 1970, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 7684;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 1630, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3240, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3300, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 4910, ap++;
call rel 7661;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 7524;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 6710 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768204746, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 284;
[fp + -6] = [ap + 0] + 6710, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 241 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 213 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 179 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 151 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 128;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -13] + 0], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 106;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 7 if [ap + -6] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 7350;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -11] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 36326;
[ap + 0] = [ap + -1] + 36325, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 10, ap++;
[ap + 0] = [ap + -1] + 709470, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -28] + 0];
jmp rel 40;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -27] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + -8] = [ap + 0] + [ap + -20], ap++;
call rel -4633;
jmp rel 13 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 100, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 7290;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -35] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 7386;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -11] + 2570, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 7383;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 3170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2230, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3840, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 3900, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5510, ap++;
call rel 7360;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 7223;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 7184;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 36161;
[ap + 0] = [ap + -1] + 36160, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 74810 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 74810, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 74810, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -3513;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 7137;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 7126;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 80;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 7088;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 36065;
[ap + 0] = [ap + -1] + 36064, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 74810 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 74810, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 32;
[ap + -3] = [ap + 0] + 74810, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel -3348;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 7041;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 7030;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 238;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 195 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 167 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 133 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 105 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 6890;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35866;
[ap + 0] = [ap + -1] + 35865, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 151310, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 51;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3292;
jmp rel 28 if [ap + -12] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
call rel 29835;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17] + 4300, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6819;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 6913;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6776;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 4910 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768206546, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 235;
[fp + -6] = [ap + 0] + 4910, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 192 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 164 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 130 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = memory[ap + -2] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -3], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -11] + 0], ap++;
[ap + 3] = [[ap + -12] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -6] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -16] + 2];
jmp rel 102 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 14;
call rel 6635;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 1470, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 35611;
[ap + 0] = [ap + -1] + 35610, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 109860, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[ap + -5] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 48;
[ap + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -21], ap++;
call rel -3419;
jmp rel 25 if [ap + -9] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 29673;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + 3100, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6567;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 430, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2040, ap++;
jmp rel 11;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = [ap + -8] + 2100, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3710, ap++;
call rel 6661;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6524;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 122;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 6485;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 35462;
[ap + 0] = [ap + -1] + 35461, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 11800 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 74;
[ap + -3] = [ap + 0] + 11800, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1217027676424847395653183185976178237519816466466816364519120618517501720052, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 44 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -3], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -5] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10] + 1, ap++;
ret;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 1500, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
call rel 6396;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 6385;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 6297;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 35274;
[ap + 0] = [ap + -1] + 35273, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3587;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 6249;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 6355;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 6219;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 150;
[fp + -6] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 108 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -14] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -16] + 1], ap++;
[ap + -5] = [[ap + -17] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 84 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -11] + 0];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 6131;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 35108;
[ap + 0] = [ap + -1] + 35107, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -17], ap++;
call rel -3600;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 6083;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -9] + 600, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2110, ap++;
call rel 6189;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 6053;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 5966;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 34943;
[ap + 0] = [ap + -1] + 34942, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3612;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 5918;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 6024;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 5888;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3580 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768207876, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 149;
[fp + -6] = [ap + 0] + 3580, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 107 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 4] = memory[ap + -2] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -3] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -13] + 0], ap++;
[ap + -4] = [[ap + -14] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -15] + 2];
jmp rel 86;
%{
(value, scalar) = (memory[ap + -3], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -12] + 0], ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -11] = [ap + 0] + [ap + -12], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 5801;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 34778;
[ap + 0] = [ap + -1] + 34777, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 35760 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 33;
[ap + -3] = [ap + 0] + 35760, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -20], ap++;
call rel -3624;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 100, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 5753;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -8] + 1070, ap++;
jmp rel 5;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 2380, ap++;
call rel 5859;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 5723;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 1470 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768209986, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 136;
[fp + -6] = [ap + 0] + 1470, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 13;
call rel 5685;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 1170, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 34662;
[ap + 0] = [ap + -1] + 34661, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -2] + 0], ap++;
%{ memory[ap + 0] = 13010 <= memory[ap + -2] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 88;
[ap + -3] = [ap + 0] + 13010, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1015500398948978605284530768271424158663964892192039972889799747543465927384, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 24;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -9] = [[ap + -1] + 0];
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = [ap + -8] + 1300, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
call rel 64;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 10;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 2210, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 5582;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 5571;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 22610715435904354515383121033992889788782, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1629273753787506768452800773325105661516873381390996170084, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1791405437119615412195600990871197662127112784418493316458246663923044, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 24860744534111126227753980461782209377609661023612532, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1629273753787506768451445706888548985317034942615575948396, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 28356853423116116984908809580994559823444, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1629273753787506768451445706888548985317034942585310963557, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1797457979346250507469519283013591639424763671398156948307, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6821744638738647269205140993062218398647620, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 28689118660985771173488966331637788001604, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39878429859757942499084499860145094553463, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39878429859761676908720221312622923640695, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504327651875780457110017927835511, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 27334677690423819155950385565997457190735654662660361113775207283, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7021320231821291044714540815144243927572303583417685064, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 389667306031054589738505090297814264154276775236, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39879774624079483812136948410799859986295, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 476442828812030857794232422692155113556837216824, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155801121779312277930962096923588980599, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7269940625183577871052929410204041567614516, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 24860744534111126227855471040361060579246392903099748, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 28689118660985769950173747617152286082372, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
jmp rel [fp + -15];
jmp rel 420;
jmp rel 401;
jmp rel 385;
jmp rel 366;
jmp rel 348;
jmp rel 327;
jmp rel 306;
jmp rel 290;
jmp rel 274;
jmp rel 256;
jmp rel 239;
jmp rel 219;
jmp rel 199;
jmp rel 183;
jmp rel 157;
jmp rel 131;
jmp rel 110;
jmp rel 93;
jmp rel 76;
jmp rel 58;
jmp rel 38;
jmp rel 20;
ap += 14;
[ap + 0] = 185631648373696323871340269898181234959081722756420907532523577380688256667, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
ap += 14;
[ap + 0] = 1544756353317322932673626875543168107257951708597883652855811865510188352072, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 332179921243453210910181790182371334627364009827963852850444881716283197812, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
ap += 14;
[ap + 0] = 256167118440094046821422616871389217062972566117066273954849299624054663972, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 110176422068912368951175687763211024469103148474926073160045984479243854746, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 14;
[ap + 0] = 1143647299005641943641733294995775301136213150954621985344004025495856196058, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
[ap + 0] = 606811659813332433876493709172014493172264375712319669538606486437773289584, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 28304;
ret;
ap += 11;
[ap + 0] = 190773906925287750196538318962624868873430287618843366205028428522570561231, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
jmp rel 6 if [fp + -7] != 0;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
ap += 11;
[ap + 0] = 738202505548583149816369230699028017101894900214234226707701330593341528402, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
jmp rel 6 if [fp + -7] != 0;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
ap += 14;
[ap + 0] = 509549417648223859179470485411643110789099628436608877343164389163677637013, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 1292979561833029574796327779110771202287188457640898120197905642986914234271, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -5] + 3];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 14;
[ap + 0] = 1478569932705727695504493912006258875844633255791368125622845521322936433475, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -5] + 3];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 14;
[ap + 0] = 1079222603748390298961485120868356417917366390363843845796079532295983441108, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 370242577458668682545045119996190494682028311340263200323079561980133513667, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 14;
[ap + 0] = 823354103138492443550337668272372529756545148011696078766241514015439886545, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 571837779136638583489149421761533963043622681780631393029629127699002090734, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 2;
[ap + 0] = 1045715880609419845361721046141127838983216130882220638251643168253061799614, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 28142;
ret;
ap += 2;
[ap + 0] = 177415692359335050281089268357525463489778336800510443642864830944212901112, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 28136;
ret;
ap += 14;
[ap + 0] = 1262397277580125158297115993097959359115007855544927245423395050773677172270, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 1797473026234742600537044323972234128126205723586967788645398692823621948890, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
ap += 14;
[ap + 0] = 747944307223701158051948489521850568214978073655586988493564843574909799147, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -5] + 2];
[fp + -7] = [[fp + -5] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ap += 14;
[ap + 0] = 237531181166614391735835869534478576765821025939656167411112512718357403807, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -5] + 2];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -5] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 818163111691184786247891435065258861251808695222617628922840361114764290349, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 417094080969601732726293725067099871685695861477543860596340, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 97440392307930487957305509231198161220, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6997677488748497703986118947247873651958503727051149676726415680868, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 92117944572295576258520850704714908996, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 28689118660985784471803185376607912543556, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1486822392393958861651043958476372, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6385853550292532458817216907475373977325140, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1634778508874888309457207528313984858381571412, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 117798134488020114677022806644012779399038948386088489395244628, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39879774624085075084607933104993585622903, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 107136844357624680248190157979490358555992834656340, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1634778508874888309451143767997594582458127176, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 24944740430830204917310739752351518774088, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1634778508874888309457188711196676171014033236, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6385853550292532458831604497822467826074969, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 112908681242816713646052454527835273432250324632900, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7269940625183576940180048306939577043858226, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1634778508874888309443937676559708042592341588, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 894 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 847;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 798 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 751;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 697 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 639 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 610;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 581 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 543 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 499;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 455 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 406 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 361;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 317 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 268 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 223;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 174 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 116 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -13] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 89;
[ap + 1] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[fp + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 60 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 25 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -119], ap++;
[ap + 0] = [ap + -106], ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -32], ap++;
ret;
call rel -1074;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 15;
[ap + 0] = [[ap + -28] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -31] + 8, ap++;
[ap + 0] = [[ap + -32] + 6], ap++;
[ap + 0] = [[ap + -33] + 7], ap++;
jmp rel 58;
ap += 15;
call rel 2264;
[ap + 0] = [ap + -34] + 2, ap++;
[ap + 0] = [ap + -26] + 12360, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 15;
call rel -1111;
[ap + 0] = [ap + -34] + 3, ap++;
[ap + 0] = [ap + -29] + 12190, ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 30;
[ap + 0] = [[ap + -44] + 4], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 14350, ap++;
[ap + 0] = [ap + -47] + 8, ap++;
[ap + 0] = [[ap + -48] + 6], ap++;
[ap + 0] = [[ap + -49] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 35;
call rel 2186;
[ap + 0] = [ap + -55] + 3, ap++;
[ap + 0] = [ap + -46] + 25100, ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 35;
call rel -1186;
[ap + 0] = [ap + -55] + 3, ap++;
[ap + 0] = [ap + -50] + 25200, ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 51;
[ap + 0] = [[ap + -65] + 4], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -2] + 27250, ap++;
[ap + 0] = [ap + -68] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -77] + 6], ap++;
[ap + 0] = [[ap + -78] + 7], ap++;
ret;
ap += 51;
call rel 2103;
[ap + 0] = [ap + -71] + 3, ap++;
[ap + 0] = [ap + -62] + 37550, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 51;
call rel -1269;
[ap + 0] = [ap + -71] + 3, ap++;
[ap + 0] = [ap + -66] + 37650, ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 67;
[ap + 0] = [[ap + -81] + 4], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = [ap + -2] + 39700, ap++;
[ap + 0] = [ap + -84] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -93] + 6], ap++;
[ap + 0] = [[ap + -94] + 7], ap++;
ret;
ap += 67;
call rel 2020;
[ap + 0] = [ap + -87] + 2, ap++;
[ap + 0] = [ap + -78] + 50000, ap++;
[ap + 0] = [ap + -84], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 63;
call rel -1370;
[ap + 0] = [ap + -82] + 3, ap++;
[ap + 0] = [ap + -77] + 49270, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 78;
[ap + 0] = [[ap + -92] + 4], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -2] + 51430, ap++;
[ap + 0] = [ap + -95] + 8, ap++;
[ap + 0] = [[ap + -96] + 6], ap++;
[ap + 0] = [[ap + -97] + 7], ap++;
jmp rel 58;
ap += 78;
call rel 1967;
[ap + 0] = [ap + -98] + 2, ap++;
[ap + 0] = [ap + -89] + 61730, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 79;
call rel -1408;
[ap + 0] = [ap + -98] + 3, ap++;
[ap + 0] = [ap + -93] + 61650, ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 94;
[ap + 0] = [[ap + -106] + 4], ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [ap + -2] + 63810, ap++;
[ap + 0] = [ap + -109] + 8, ap++;
[ap + 0] = [[ap + -110] + 6], ap++;
[ap + 0] = [[ap + -111] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 98;
call rel -1635;
[ap + 0] = [ap + -117] + 3, ap++;
[ap + 0] = [ap + -112] + 74470, ap++;
[ap + 0] = [ap + -114], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 113;
[ap + 0] = [[ap + -125] + 4], ap++;
[ap + 0] = [ap + -117], ap++;
[ap + 0] = [ap + -2] + 76430, ap++;
[ap + 0] = [ap + -128] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -137] + 6], ap++;
[ap + 0] = [[ap + -138] + 7], ap++;
ret;
ap += 112;
call rel -1690;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -126] + 86640, ap++;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 127;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 88600, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel -972;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 1208 if [ap + -11] != 0;
[ap + 0] = [ap + -13], ap++;
jmp rel 1188 if [ap + -11] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -9], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 60;
[ap + -1] = [[ap + -19] + 0];
[ap + 0] = [ap + -19] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -13] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -16], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 465;
call rel 32696;
[ap + 0] = [ap + -1] + 32695, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 221130, ap++;
[ap + 0] = [ap + -478] + 1, ap++;
[ap + 0] = [ap + -476] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 26;
ap += 469;
call rel 32674;
[ap + 0] = [ap + -1] + 32673, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 221760, ap++;
[ap + 0] = [ap + -478], ap++;
[ap + 0] = [ap + -478] + [ap + -2], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = [ap + -498], ap++;
jmp rel 714;
ap += 6;
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -27] + 0];
[ap + -2] = [[ap + -27] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -27]) %}
[ap + 0] = [[ap + -27] + 3], ap++;
jmp rel 1083 if [ap + -1] != 0;
[ap + 0] = [[ap + -28] + 2], ap++;
[ap + 0] = [[ap + -29] + 4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -32] + 5, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [[ap + -4] + 1], ap++;
[ap + -4] = [ap + 1] + [ap + -27], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 11;
[ap + -1] = [[ap + -13] + 0];
ap += 1;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -33], ap++;
jmp rel 7;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -6] + 10, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + -1] = [ap + 1] + [ap + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 22;
[ap + -1] = [[ap + -5] + 0];
ap += 324;
call rel 32603;
[ap + 0] = [ap + -1] + 32602, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 110630, ap++;
[ap + 0] = [ap + -336] + 1, ap++;
[ap + 0] = [ap + -336] + [ap + -2], ap++;
[ap + 0] = [ap + -365], ap++;
[ap + 0] = [ap + -345], ap++;
jmp rel 574;
[ap + 0] = [ap + -5], ap++;
[ap + -11] = [ap + 1] + [ap + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 1];
jmp rel 991;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1255235991522866093190400328027936434203587216166838216390545567461445183904, ap++;
[ap + -1] = [[ap + -37] + 0];
[fp + -3] = [[ap + -37] + 1];
[ap + 0] = [[ap + -37] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -15] + 2], ap++;
[ap + -4] = [[ap + -16] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -18] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -15] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -17] + 3], ap++;
[ap + -7] = [[ap + -18] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -47] + 3, ap++;
[ap + 0] = [ap + -21] + 5, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -29] + 0];
[ap + -5] = [[ap + -29] + 1];
[ap + -4] = [[ap + -29] + 2];
[ap + -6] = [[ap + -29] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -29]) %}
[ap + 0] = [[ap + -29] + 5], ap++;
jmp rel 912 if [ap + -1] != 0;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [[ap + -31] + 6], ap++;
[ap + 0] = [ap + -32] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 860 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 820 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 773 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 1521;
[ap + 0] = [ap + -89], ap++;
jmp rel 736 if [ap + -2] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = 0, ap++;
call rel 1510;
[ap + 0] = [ap + -88], ap++;
jmp rel 702 if [ap + -2] != 0;
[ap + 0] = 1000000, ap++;
[ap + 0] = 0, ap++;
%{
dividend = memory[ap + -6] + memory[ap + -5] * 2**128
divisor = memory[ap + -2] + memory[ap + -1] * 2**128
quotient, remainder = divmod(dividend, divisor)
memory[ap + 0] = quotient & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 1] = quotient >> 128
memory[ap + 2] = remainder & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
memory[ap + 3] = remainder >> 128
%}
[ap + 0] = [[ap + -7] + 0], ap++;
[ap + 0] = [[ap + -8] + 1], ap++;
[ap + 0] = [[ap + -9] + 2], ap++;
[ap + 0] = [[ap + -10] + 3], ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
jmp rel 8 if [ap + -1] != 0, ap++;
[ap + -8] = [ap + -1] + [ap + -4], ap++;
[ap + -2] = [ap + -1] + 1;
[ap + -1] = [[ap + -14] + 4];
jmp rel 5;
ap += 1;
[ap + -3] = [[ap + -14] + 4];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -7] * memory[ap + -9], 2**128) %}
[ap + 2] = [ap + 0] + [ap + -5], ap++;
[ap + 1] = [ap + 2] + [ap + -14], ap++;
[ap + 1] = [ap + 2] * 340282366920938463463374607431768211456, ap++;
[ap + 1] = [ap + 1] * [ap + 1], ap++;
jmp rel 12 if [ap + -10] != 0, ap++;
%{ memory[ap + 2] = memory[ap + -12] < memory[ap + -13] %}
jmp rel 6 if [ap + 2] != 0, ap++;
[ap + -1] = [ap + -14], ap++;
[ap + -1] = [ap + -14], ap++;
jmp rel 16;
[ap + -1] = [ap + -13], ap++;
[ap + -1] = [ap + -15], ap++;
jmp rel 12;
[ap + -13] = 0, ap++;
%{ memory[ap + 1] = memory[ap + -12] < memory[ap + -15] %}
jmp rel 6 if [ap + 1] != 0, ap++;
[ap + -2] = [ap + -16], ap++;
[ap + -2] = [ap + -14];
jmp rel 4;
[ap + -2] = [ap + -13], ap++;
[ap + -2] = [ap + -17];
[ap + 0] = [ap + -3] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -23] + 5];
[ap + 0] = [ap + -4] * [ap + -3], ap++;
[ap + 0] = [ap + -6] + [ap + -9], ap++;
[ap + 0] = [ap + -1] + [ap + -15], ap++;
[ap + -24] = [ap + -1] + [ap + -3];
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[ap + -19], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -27] + 6], ap++;
[ap + -2] = [[ap + -28] + 7], ap++;
[ap + -2] = [[ap + -29] + 8];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[ap + -23] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [ap + -25], ap++;
[ap + 0] = [ap + -4] * [ap + -26], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[ap + -33] + 9], ap++;
[ap + -1] = [[ap + -34] + 10], ap++;
[ap + -3] = [[ap + -35] + 11];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -24]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[ap + -39] + 12], ap++;
[ap + -3] = [[ap + -40] + 13], ap++;
[ap + -27] = [[ap + -41] + 14];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -27];
[ap + -26] = [ap + -9] + [ap + -4];
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + -2] = [ap + 1] + [ap + -35], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -46] + 15];
jmp rel 60;
[ap + -1] = [[ap + -45] + 15];
[ap + 0] = [ap + -45] + 16, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [ap + -39] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [ap + -42], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 67;
call rel 32317;
[ap + 0] = [ap + -1] + 32316, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 50710, ap++;
[ap + 0] = [ap + -80] + 1, ap++;
[ap + 0] = [ap + -78] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 26;
ap += 71;
call rel 32295;
[ap + 0] = [ap + -1] + 32294, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 51340, ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = [ap + -80] + [ap + -2], ap++;
[ap + 0] = [ap + -318], ap++;
[ap + 0] = [ap + -302], ap++;
jmp rel 267;
ap += 6;
[ap + 0] = [ap + -52] + 16, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 289265142035346446792964224515421021597899183432205077896626966918004183212, ap++;
[ap + -1] = [[ap + -246] + 0];
[fp + -4] = [[ap + -246] + 1];
[ap + 0] = [[ap + -246] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -255] + 3, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -241] + 0];
[ap + -14] = [[ap + -241] + 1];
[ap + -4] = [[ap + -241] + 2];
[ap + -5] = [[ap + -241] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -241]) %}
[ap + 0] = [[ap + -241] + 5], ap++;
jmp rel 466 if [ap + -1] != 0;
[ap + 0] = [[ap + -242] + 4], ap++;
[ap + 0] = [[ap + -243] + 6], ap++;
[ap + 0] = [ap + -244] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 414 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 374 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 327 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [ap + -77], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -23] + [ap + -85], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 241;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 217 if [ap + -12] != 0;
[ap + 0] = 289265142035346446792964224515421021597899183432205077896626966918004183212, ap++;
[ap + -1] = [[ap + -40] + 0];
[fp + -4] = [[ap + -40] + 1];
[ap + 0] = [[ap + -40] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -5] = [[ap + -36] + 1];
[ap + -4] = [[ap + -36] + 2];
[ap + -6] = [[ap + -36] + 3];
[ap + -16] = [[ap + -36] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 6], ap++;
jmp rel 139 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -42] + 7];
[ap + -4] = [[ap + -42] + 8];
[ap + -3] = [[ap + -42] + 9];
[ap + -2] = [[ap + -42] + 10];
[ap + -21] = [[ap + -42] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42] + 7) %}
[ap + 0] = [[ap + -42] + 13], ap++;
jmp rel 103 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 12], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -47] + 14, ap++;
[ap + 0] = 1461362951491806605134634415796051310520437344207690786134661621786590217274, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -4] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[fp + -3] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -364], ap++;
[ap + 0] = [ap + -390], ap++;
[ap + 0] = [ap + -390], ap++;
call rel 462;
[ap + 0] = [ap + -114] + 6, ap++;
jmp rel 24 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 16 if [ap + -5] != 0;
ap += 3;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -8] + 190, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 110;
[ap + 0] = [[ap + -153] + 12], ap++;
call rel 31916;
[ap + 0] = [ap + -1] + 31915, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 96660, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -162] + 16, ap++;
[ap + 0] = [[ap + -163] + 14], ap++;
[ap + 0] = [[ap + -164] + 15], ap++;
jmp rel 20;
ap += 116;
[ap + 0] = [[ap + -153] + 5], ap++;
call rel 31896;
[ap + 0] = [ap + -1] + 31895, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 107900, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -162] + 9, ap++;
[ap + 0] = [[ap + -163] + 7], ap++;
[ap + 0] = [[ap + -164] + 8], ap++;
[ap + 0] = [ap + -131], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 128;
call rel 31870;
[ap + 0] = [ap + -1] + 31869, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 120090, ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -139] + [ap + -2], ap++;
jmp rel 17;
ap += 131;
call rel 31854;
[ap + 0] = [ap + -1] + 31853, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 120460, ap++;
[ap + 0] = [ap + -150] + 2, ap++;
[ap + 0] = [ap + -143] + [ap + -2], ap++;
call rel -2529;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -168], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 134;
call rel 31828;
[ap + 0] = [ap + -1] + 31827, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 120810, ap++;
call rel -2543;
[ap + 0] = [ap + -160] + 3, ap++;
[ap + 0] = [ap + -155] + [ap + -8], ap++;
[ap + 0] = [ap + -157], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 154;
[ap + 0] = [[ap + -163] + 4], ap++;
call rel 31805;
[ap + 0] = [ap + -1] + 31804, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 123520, ap++;
[ap + 0] = [ap + -165], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -173] + 8, ap++;
[ap + 0] = [[ap + -174] + 6], ap++;
[ap + 0] = [[ap + -175] + 7], ap++;
jmp rel 48;
ap += 145;
call rel 31785;
[ap + 0] = [ap + -1] + 31784, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 132570, ap++;
call rel -2586;
[ap + 0] = [ap + -171] + 3, ap++;
[ap + 0] = [ap + -166] + [ap + -8], ap++;
[ap + 0] = [ap + -168], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 165;
[ap + 0] = [[ap + -407] + 4], ap++;
call rel 31757;
[ap + 0] = [ap + -1] + 31756, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 135280, ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -417] + 8, ap++;
[ap + 0] = [[ap + -418] + 6], ap++;
[ap + 0] = [[ap + -419] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 228;
call rel 31730;
[ap + 0] = [ap + -1] + 31729, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 155250, ap++;
call rel 1007;
[ap + 0] = [ap + -246], ap++;
[ap + 0] = [ap + -243] + [ap + -8], ap++;
[ap + 0] = [ap + -439], ap++;
[ap + 0] = [ap + -423], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 316;
call rel 31707;
[ap + 0] = [ap + -1] + 31706, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 168860, ap++;
call rel 984;
[ap + 0] = [ap + -334], ap++;
[ap + 0] = [ap + -331] + [ap + -8], ap++;
[ap + 0] = [ap + -439], ap++;
[ap + 0] = [ap + -423], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 389;
call rel 31684;
[ap + 0] = [ap + -1] + 31683, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 180380, ap++;
call rel -2687;
[ap + 0] = [ap + -415] + 3, ap++;
[ap + 0] = [ap + -410] + [ap + -8], ap++;
[ap + 0] = [ap + -412], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 409;
[ap + 0] = [[ap + -418] + 4], ap++;
call rel 31661;
[ap + 0] = [ap + -1] + 31660, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 183090, ap++;
[ap + 0] = [ap + -420], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -428] + 8, ap++;
[ap + 0] = [[ap + -429] + 6], ap++;
[ap + 0] = [[ap + -430] + 7], ap++;
jmp rel 48;
ap += 400;
call rel 31641;
[ap + 0] = [ap + -1] + 31640, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 192140, ap++;
call rel -2730;
[ap + 0] = [ap + -426] + 3, ap++;
[ap + 0] = [ap + -421] + [ap + -8], ap++;
[ap + 0] = [ap + -423], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 420;
[ap + 0] = [[ap + -450] + 4], ap++;
call rel 31613;
[ap + 0] = [ap + -1] + 31612, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 194850, ap++;
[ap + 0] = [ap + -431], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -460] + 8, ap++;
[ap + 0] = [[ap + -461] + 6], ap++;
[ap + 0] = [[ap + -462] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -439], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 434;
call rel 31586;
[ap + 0] = [ap + -1] + 31585, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 207120, ap++;
call rel 25763;
[ap + 0] = [ap + -457] + 2, ap++;
[ap + 0] = [ap + -452] + [ap + -8], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = [ap + -466], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 459;
[ap + 0] = [[ap + -487] + 2], ap++;
call rel 31561;
[ap + 0] = [ap + -1] + 31560, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 210290, ap++;
[ap + 0] = [ap + -471], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = [ap + -498] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -500] + 4], ap++;
[ap + 0] = [[ap + -501] + 5], ap++;
ret;
ap += 472;
call rel 31539;
[ap + 0] = [ap + -1] + 31538, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 222300, ap++;
[ap + 0] = [ap + -480] + [ap + -1], ap++;
[ap + 0] = [ap + -484], ap++;
[ap + 0] = [ap + -484], ap++;
jmp rel 17;
ap += 473;
call rel 31522;
[ap + 0] = [ap + -1] + 31521, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 5, ap++;
[ap + 0] = [ap + -1] + 222590, ap++;
[ap + 0] = [ap + -493] + [ap + -1], ap++;
[ap + 0] = [ap + -484], ap++;
[ap + 0] = [ap + -484], ap++;
[ap + 0] = [ap + -497], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -486], ap++;
[ap + 0] = [ap + -498], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 0];
[fp + -14] = [[fp + -13] + 1];
[fp + -12] = [[fp + -13] + 2];
[fp + -11] = [[fp + -13] + 3];
[fp + -10] = [[fp + -13] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13]) %}
[ap + 0] = [[fp + -13] + 6], ap++;
jmp rel 397 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 7];
[ap + -3] = [[fp + -13] + 8];
[fp + -12] = [[fp + -13] + 9];
[ap + -2] = [[fp + -13] + 10];
[fp + -9] = [[fp + -13] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 7) %}
[ap + 0] = [[fp + -13] + 13], ap++;
jmp rel 368 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 14];
[ap + -3] = [[fp + -13] + 15];
[fp + -12] = [[fp + -13] + 16];
[ap + -2] = [[fp + -13] + 17];
[fp + -8] = [[fp + -13] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 14) %}
[ap + 0] = [[fp + -13] + 20], ap++;
jmp rel 334 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 19], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -13] + 21, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -15] + 0];
jmp rel 302;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -15] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -7] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 272 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 240;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 207 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 177;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 144 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 114;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 76 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 19 if [ap + -1] != 0;
ap += 5;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 450, ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = [[ap + -14] + 7], ap++;
[ap + 0] = [[ap + -15] + 8], ap++;
jmp rel 28;
ap += 5;
call rel 271;
[ap + 0] = [ap + -21] + 1, ap++;
[ap + 0] = [ap + -16] + 10850, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11850, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [[ap + -27] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 17;
call rel 235;
[ap + 0] = [ap + -33] + 1, ap++;
[ap + 0] = [ap + -28] + 22700, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 29;
[ap + 0] = [[ap + -39] + 5], ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -2] + 24150, ap++;
[ap + 0] = [ap + -42] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -45] + 7], ap++;
[ap + 0] = [[ap + -46] + 8], ap++;
ret;
ap += 29;
call rel 204;
[ap + 0] = [ap + -45] + 1, ap++;
[ap + 0] = [ap + -40] + 34550, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 41;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -2] + 36000, ap++;
[ap + 0] = [ap + -54] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -57] + 7], ap++;
[ap + 0] = [[ap + -58] + 8], ap++;
ret;
ap += 41;
call rel 173;
[ap + 0] = [ap + -58] + 1, ap++;
[ap + 0] = [ap + -52] + 46400, ap++;
[ap + 0] = [ap + -54], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 49;
[ap + 0] = [[ap + -59] + 5], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -2] + 47390, ap++;
[ap + 0] = [ap + -62] + 9, ap++;
[ap + 0] = [[ap + -63] + 7], ap++;
[ap + 0] = [[ap + -64] + 8], ap++;
jmp rel 28;
ap += 54;
call rel 145;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = [ap + -65] + 58340, ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 62;
[ap + 0] = [[fp + -13] + 19], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -2] + 59430, ap++;
[ap + 0] = [fp + -13] + 23, ap++;
[ap + 0] = [[fp + -13] + 21], ap++;
[ap + 0] = [[fp + -13] + 22], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 72;
[ap + 0] = [[fp + -13] + 12], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -2] + 70930, ap++;
[ap + 0] = [fp + -13] + 16, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 14], ap++;
[ap + 0] = [[fp + -13] + 15], ap++;
ret;
ap += 77;
[ap + 0] = [[fp + -13] + 5], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -2] + 81980, ap++;
[ap + 0] = [fp + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 7], ap++;
[ap + 0] = [[fp + -13] + 8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1746372433662256061367306211266439538167861070, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 117798134488020114677022806644013095979210496916174808341106260, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 447071342657430793269083037582199378555019873349, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1905615774976699324455159350543849120358098276, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 117999861104695822859711732616285470157828704223776683027952499, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 117999861104695822859711732616285470157828722670520756737504115, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 117999861104695822859711732616285470157828741117264830447055731, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 23295304362228757663148557582248907731827, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 123402430884485655515200901184833414831730680934437, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 608642104203229548495787928534675319, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637577033762547024924559723616865330297005363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637577033762547024924559723616865330297005362, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637577033762547024924559723616865330297005361, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29070815763905116526789462059119708693870, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1489367635952064142571965531909748, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 447779483574033806769344671639587496414540033636, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 432527867364027999415738756932138597, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -6] * memory[fp + -4], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -6], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 0], ap++;
[ap + -2] = [[fp + -7] + 1], ap++;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -6] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -4], ap++;
[ap + 0] = [ap + -4] * [fp + -4], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 3], ap++;
[ap + -1] = [[fp + -7] + 4], ap++;
[ap + -3] = [[fp + -7] + 5];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 6], ap++;
[ap + -3] = [[fp + -7] + 7], ap++;
[ap + -16] = [[fp + -7] + 8];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -6] * memory[fp + -3], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -6], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 9], ap++;
[ap + -2] = [[fp + -7] + 10], ap++;
[ap + -2] = [[fp + -7] + 11];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -6] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -3], ap++;
[ap + 0] = [ap + -4] * [fp + -3], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 12], ap++;
[ap + -1] = [[fp + -7] + 13], ap++;
[ap + -3] = [[fp + -7] + 14];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 15], ap++;
[ap + -3] = [[fp + -7] + 16], ap++;
[ap + -16] = [[fp + -7] + 17];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[fp + -5] * memory[fp + -4], 2**128) %}
ap += 2;
%{ (memory[ap + 1], memory[ap + 0]) = divmod(memory[fp + -5], 18446744073709551616) %}
[ap + 2] = [ap + 0] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 18], ap++;
[ap + -2] = [[fp + -7] + 19], ap++;
[ap + -2] = [[fp + -7] + 20];
[ap + 0] = [ap + -2] * 18446744073709551616, ap++;
[fp + -5] = [ap + -1] + [ap + -4];
[ap + 0] = [ap + -4] * [fp + -4], ap++;
[ap + 0] = [ap + -4] * [fp + -4], ap++;
%{ (memory[ap + 0], memory[ap + 1]) = divmod(memory[ap + -1], 18446744073709551616) %}
[ap + 2] = [ap + 1] + 340282366920938463444927863358058659840, ap++;
[ap + 1] = [[fp + -7] + 21], ap++;
[ap + -1] = [[fp + -7] + 22], ap++;
[ap + -3] = [[fp + -7] + 23];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + -5] = [ap + -1] + [ap + -3];
[ap + 0] = [ap + -3] * 18446744073709551616, ap++;
[ap + 3] = [ap + -7] + [ap + -1], ap++;
%{ (memory[ap + -1], memory[ap + -13]) = divmod(memory[ap + 2], 340282366920938463463374607431768211456) %}
[ap + 0] = [ap + -1] + 340282366920938463426481119284349108224, ap++;
[ap + -1] = [[fp + -7] + 24], ap++;
[ap + -3] = [[fp + -7] + 25], ap++;
[ap + -16] = [[fp + -7] + 26];
[ap + -2] = [ap + -4] * 340282366920938463463374607431768211456;
[ap + -1] = [ap + -2] + [ap + -16];
[ap + -17] = [ap + -9] + [ap + -4];
[ap + 1] = [ap + -51] + [ap + -33], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 27];
jmp rel 78;
[ap + -1] = [[fp + -7] + 27];
[ap + 0] = [fp + -7] + 28, ap++;
jmp rel 63 if [ap + -37] != 0;
jmp rel 6 if [ap + -20] != 0;
[ap + 0] = 1, ap++;
jmp rel 4;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 46 if [ap + -1] != 0;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 11;
[ap + -1] = [[ap + -7] + 0];
ap += 5;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 25;
[ap + 0] = 0, ap++;
[ap + -1] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 11;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = 1, ap++;
jmp rel 11;
ap += 8;
jmp rel 4;
ap += 11;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 9;
ap += 13;
[ap + 0] = [fp + -7] + 28, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -2] + [ap + -35], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 11;
[ap + -1] = [[ap + -5] + 0];
ap += 1;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -6], ap++;
jmp rel 7;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 39879774624083218221772669863277689073527, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 110930490496575599150170734222081291576, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 33093981696742888459394583355467854629472475252818554839778029172, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 2141464762053902672825230137190642572033580561670733936173406278218853, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 107320248484662281825775945094234547610330776040307, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 21786529752975859366048130920, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -5] = [[fp + -7] + 0];
[fp + -4] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[fp + -3] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
[ap + -4] = [[fp + -6] + 2];
[ap + -5] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 127 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 88;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -5] = [[ap + -12] + 1];
[ap + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 52 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 16;
[ap + 0] = [ap + -25] + 2, ap++;
[ap + 0] = [ap + -20] + 1710, ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -27], ap++;
ret;
call rel -178;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 16;
[ap + 0] = [[ap + -29] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -32] + 8, ap++;
[ap + 0] = [[ap + -33] + 6], ap++;
[ap + 0] = [[ap + -34] + 7], ap++;
jmp rel 32;
ap += 16;
call rel -4021;
[ap + 0] = [ap + -35] + 3, ap++;
[ap + 0] = [ap + -30] + 12350, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 31;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -2] + 14310, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 1;
%{ memory[ap + 0] = 35470 <= memory[fp + -10] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -10] + 340282366920938463463374607431768175986, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 383;
[fp + -10] = [ap + 0] + 35470, ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + 0] = [ap + -1], ap++;
[fp + -8] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 1];
jmp rel 14;
[ap + -1] = [[fp + -11] + 1];
[ap + 0] = [fp + -11] + 2, ap++;
[ap + 0] = [ap + -4] + 35800, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -8], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -8] * 4, ap++;
%{ memory[ap + 0] = memory[ap + -1] < memory[ap + -2] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[fp + -11] + 2];
jmp rel 335;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -11] + 2];
[ap + 0] = [fp + -4] + [ap + -4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [[ap + -2] + 0], ap++;
[ap + 0] = [[ap + -3] + 1], ap++;
[ap + 0] = [[ap + -4] + 2], ap++;
[ap + 0] = [[ap + -5] + 3], ap++;
[ap + 0] = [ap + -12], ap++;
%{ memory[ap + 4] = memory[ap + -5] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -6] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 3], ap++;
[ap + -4] = [[fp + -11] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -11] + 5];
jmp rel 295;
%{
(value, scalar) = (memory[ap + -6], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -7] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -11] + 3], ap++;
[ap + -3] = [[fp + -11] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -11] + 5];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + -3] = [[fp + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 3], ap++;
jmp rel 264 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9] + 5, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
%{ memory[ap + 4] = memory[ap + -8] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -9] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -19] + 2];
jmp rel 224;
%{
(value, scalar) = (memory[ap + -9], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -10] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -18] + 2];
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 7 if [ap + -31] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -33] = [ap + 0] + [ap + -11], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 0, ap++;
jmp rel 128 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 118 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -2] = [[ap + -24] + 1];
[ap + -19] = [[ap + -24] + 2];
[ap + -40] = [[ap + -24] + 3];
[ap + -39] = [[ap + -24] + 4];
[ap + -38] = [[ap + -24] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 7], ap++;
jmp rel 42 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 6], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [[ap + -27] + 9], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[fp + 0] = [ap + -36] + 10;
call rel 24480;
jmp rel 13 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
jmp rel 25;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 4750, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[ap + -25] + 6], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2] + 3260, ap++;
[ap + 0] = [ap + -28] + 10, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 81306391191310799456716100, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -4] = [[fp + -5] + 0];
[ap + -3] = [[fp + -5] + 1];
[ap + -2] = [[fp + -5] + 2];
[ap + -1] = [[fp + -5] + 3];
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
%{ memory[ap + 0] = (memory[fp + -8] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -17] + 0];
jmp rel 19;
[ap + 1] = [fp + -8] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -17] + 0];
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -254;
ret;
call rel -3527;
[ap + 0] = [ap + -23] + 1, ap++;
[ap + 0] = [ap + -23] + 1580, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1] + 14760, ap++;
jmp rel 6;
ap += 3;
[ap + 0] = [ap + -5] + 15130, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 7021320231821291044807617973815110679519488947832046420, ap++;
[ap + -4] = [[fp + -5] + 0];
[ap + -3] = [[fp + -5] + 1];
[ap + -2] = [[fp + -5] + 2];
[ap + -1] = [[fp + -5] + 3];
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
%{ memory[ap + 0] = (memory[fp + -8] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -22] + 0];
jmp rel 19;
[ap + 1] = [fp + -8] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -22] + 0];
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -318;
ret;
call rel -3591;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -19] + 1580, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel -4366;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -19] + 19710, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 22420, ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
ret;
call rel 24412;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = [ap + -14] + 32320, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 7215;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -12] + 34130, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 1096;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 441494501910143233453980066810362074960550052697, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = 31200 <= memory[fp + -10] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -10] + 340282366920938463463374607431768180256, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 337;
[fp + -10] = [ap + 0] + 31200, ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + 0] = [ap + -1], ap++;
[fp + -8] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 1];
jmp rel 14;
[ap + -1] = [[fp + -11] + 1];
[ap + 0] = [fp + -11] + 2, ap++;
[ap + 0] = [ap + -4] + 31530, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -8], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -8] * 4, ap++;
%{ memory[ap + 0] = memory[ap + -1] < memory[ap + -2] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[fp + -11] + 2];
jmp rel 289;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -11] + 2];
[ap + 0] = [fp + -4] + [ap + -4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 3], ap++;
[ap + 0] = [ap + -11], ap++;
%{ memory[ap + 4] = memory[ap + -5] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -6] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 3], ap++;
[ap + -4] = [[fp + -11] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -11] + 5];
jmp rel 251;
%{
(value, scalar) = (memory[ap + -6], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -7] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -11] + 3], ap++;
[ap + -3] = [[fp + -11] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -11] + 5];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + -3] = [[fp + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 3], ap++;
jmp rel 220 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9] + 5, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
%{ memory[ap + 4] = memory[ap + -8] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -9] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -19] + 2];
jmp rel 180;
%{
(value, scalar) = (memory[ap + -9], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -10] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -18] + 2];
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 7 if [ap + -31] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -33] = [ap + 0] + [ap + -11], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 0, ap++;
jmp rel 92 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 82 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -2] = [[ap + -24] + 1];
[ap + -19] = [[ap + -24] + 2];
[ap + -40] = [[ap + -24] + 3];
[ap + -39] = [[ap + -24] + 4];
[ap + -38] = [[ap + -24] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 6], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [[ap + -27] + 9], ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -29] + 10, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
jmp rel 16;
ap += 1;
[ap + 0] = [[ap + -26] + 6], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -1] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -2] + 90, ap++;
[ap + 0] = [ap + -29] + 10, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -8] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -24] + 0];
jmp rel 19;
[ap + 1] = [fp + -8] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -24] + 0];
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -214;
ret;
call rel -3899;
[ap + 0] = [ap + -30] + 1, ap++;
[ap + 0] = [ap + -15] + 1470, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1] + 11300, ap++;
jmp rel 6;
ap += 3;
[ap + 0] = [ap + -5] + 11670, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -1] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
%{ memory[ap + 0] = (memory[fp + -8] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 19;
[ap + 1] = [fp + -8] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -270;
ret;
call rel -3955;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -15] + 1470, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel -4730;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -19] + 15540, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 18250, ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
ret;
call rel 24048;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = [ap + -14] + 28150, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6851;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -12] + 29860, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 732;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 31200 <= memory[fp + -10] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -10] + 340282366920938463463374607431768180256, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 337;
[fp + -10] = [ap + 0] + 31200, ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + 0] = [ap + -1], ap++;
[fp + -8] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 1];
jmp rel 14;
[ap + -1] = [[fp + -11] + 1];
[ap + 0] = [fp + -11] + 2, ap++;
[ap + 0] = [ap + -4] + 31530, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -8], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -8] * 4, ap++;
%{ memory[ap + 0] = memory[ap + -1] < memory[ap + -2] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[fp + -11] + 2];
jmp rel 289;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -11] + 2];
[ap + 0] = [fp + -4] + [ap + -4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 3], ap++;
[ap + 0] = [ap + -11], ap++;
%{ memory[ap + 4] = memory[ap + -5] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -6] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 3], ap++;
[ap + -4] = [[fp + -11] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -11] + 5];
jmp rel 251;
%{
(value, scalar) = (memory[ap + -6], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -7] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -11] + 3], ap++;
[ap + -3] = [[fp + -11] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -11] + 5];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + -3] = [[fp + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 3], ap++;
jmp rel 220 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9] + 5, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
%{ memory[ap + 4] = memory[ap + -8] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -9] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -19] + 2];
jmp rel 180;
%{
(value, scalar) = (memory[ap + -9], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -10] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -18] + 2];
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 7 if [ap + -31] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -33] = [ap + 0] + [ap + -11], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 0, ap++;
jmp rel 92 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 82 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -2] = [[ap + -24] + 1];
[ap + -19] = [[ap + -24] + 2];
[ap + -40] = [[ap + -24] + 3];
[ap + -39] = [[ap + -24] + 4];
[ap + -38] = [[ap + -24] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 6], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [[ap + -27] + 9], ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -29] + 10, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
jmp rel 16;
ap += 1;
[ap + 0] = [[ap + -26] + 6], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -1] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -2] + 90, ap++;
[ap + 0] = [ap + -29] + 10, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -8] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -24] + 0];
jmp rel 19;
[ap + 1] = [fp + -8] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -24] + 0];
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -214;
ret;
call rel -4254;
[ap + 0] = [ap + -30] + 1, ap++;
[ap + 0] = [ap + -15] + 1470, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1] + 11300, ap++;
jmp rel 6;
ap += 3;
[ap + 0] = [ap + -5] + 11670, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -1] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
%{ memory[ap + 0] = (memory[fp + -8] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 19;
[ap + 1] = [fp + -8] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -270;
ret;
call rel -4310;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -15] + 1470, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel -5085;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -19] + 15540, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 18250, ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
ret;
call rel 23693;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = [ap + -14] + 28150, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6496;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -12] + 29860, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 377;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = 31200 <= memory[fp + -10] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -10] + 340282366920938463463374607431768180256, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 337;
[fp + -10] = [ap + 0] + 31200, ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + 0] = [ap + -1], ap++;
[fp + -8] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 1];
jmp rel 14;
[ap + -1] = [[fp + -11] + 1];
[ap + 0] = [fp + -11] + 2, ap++;
[ap + 0] = [ap + -4] + 31530, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -8], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -8] * 4, ap++;
%{ memory[ap + 0] = memory[ap + -1] < memory[ap + -2] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
[ap + -1] = [[fp + -11] + 2];
jmp rel 289;
[ap + 0] = [ap + -2] + 1, ap++;
[ap + -4] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -11] + 2];
[ap + 0] = [fp + -4] + [ap + -4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -2] + 1], ap++;
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + 0] = [[ap + -4] + 3], ap++;
[ap + 0] = [ap + -11], ap++;
%{ memory[ap + 4] = memory[ap + -5] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -6] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -11] + 3], ap++;
[ap + -4] = [[fp + -11] + 4], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -11] + 5];
jmp rel 251;
%{
(value, scalar) = (memory[ap + -6], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -7] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -11] + 3], ap++;
[ap + -3] = [[fp + -11] + 4], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -11] + 5];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + -3] = [[fp + -9] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -9]) %}
[ap + 0] = [[fp + -9] + 3], ap++;
jmp rel 220 if [ap + -1] != 0;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9] + 5, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -4] + 0], ap++;
[ap + 0] = [[ap + -5] + 1], ap++;
[ap + 0] = [[ap + -6] + 2], ap++;
[ap + 0] = [[ap + -7] + 3], ap++;
[ap + 0] = [[ap + -8] + 4], ap++;
%{ memory[ap + 4] = memory[ap + -8] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -9] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -19] + 2];
jmp rel 180;
%{
(value, scalar) = (memory[ap + -9], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -10] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -18] + 2];
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 7 if [ap + -31] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + -33] = [ap + 0] + [ap + -11], ap++;
jmp rel 7 if [ap + -1] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 0, ap++;
jmp rel 92 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 82 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -24] + 0];
[ap + -2] = [[ap + -24] + 1];
[ap + -19] = [[ap + -24] + 2];
[ap + -40] = [[ap + -24] + 3];
[ap + -39] = [[ap + -24] + 4];
[ap + -38] = [[ap + -24] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -24]) %}
[ap + 0] = [[ap + -24] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -25] + 6], ap++;
[ap + 0] = [[ap + -26] + 8], ap++;
[ap + 0] = [[ap + -27] + 9], ap++;
[ap + -2] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -29] + 10, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
jmp rel 16;
ap += 1;
[ap + 0] = [[ap + -26] + 6], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -1] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -2] + 90, ap++;
[ap + 0] = [ap + -29] + 10, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -8] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -24] + 0];
jmp rel 19;
[ap + 1] = [fp + -8] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -24] + 0];
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -214;
ret;
call rel -4609;
[ap + 0] = [ap + -30] + 1, ap++;
[ap + 0] = [ap + -15] + 1470, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [ap + -1] + 11300, ap++;
jmp rel 6;
ap += 3;
[ap + 0] = [ap + -5] + 11670, ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -1] = [[fp + -5] + 0];
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
%{ memory[ap + 0] = (memory[fp + -8] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 19;
[ap + 1] = [fp + -8] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -270;
ret;
call rel -4665;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -15] + 1470, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel -5440;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -19] + 15540, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = [[fp + -9] + 2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 18250, ap++;
[ap + 0] = [fp + -9] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -9] + 4], ap++;
[ap + 0] = [[fp + -9] + 5], ap++;
ret;
call rel 23338;
[ap + 0] = [fp + -11] + 6, ap++;
[ap + 0] = [ap + -14] + 28150, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 6141;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = [ap + -12] + 29860, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 22;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 124351606139963026378564014760732969027641213285770151247615703089022185780, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 124351606139963026378564014760732969027641213285770151247615703089022185779, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 124351606139963026378564014760732969027641213285770151247615703089022185778, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 124351606139963026378564014760732969027641213285770151247615703089022185777, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 124351606139963026378564014760732969027641213285770151247615703089022185776, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492921, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492920, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492919, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492918, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492917, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492916, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492915, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 376;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 345;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 314;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 267 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 244 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -5] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 193 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 170 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 96 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 45 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -14] + 3, ap++;
jmp rel 5;
ap += 8;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 9;
[ap + 0] = [ap + -23] + 3, ap++;
jmp rel 5;
ap += 17;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 18;
[ap + 0] = [ap + -32] + 3, ap++;
jmp rel 5;
ap += 26;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 27;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 5;
ap += 35;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 43;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 47;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 51;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -12] = [[fp + -3] + 0];
[fp + -11] = [[fp + -3] + 1];
[fp + -10] = [[fp + -3] + 2];
[fp + -9] = [[fp + -3] + 3];
[fp + -8] = [[fp + -3] + 4];
[fp + -7] = [[fp + -3] + 5];
[fp + -6] = [[fp + -3] + 6];
[fp + -5] = [[fp + -3] + 7];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
ret;
[fp + -12] = [[fp + -3] + 0];
[fp + -11] = [[fp + -3] + 1];
[fp + -10] = [[fp + -3] + 2];
[fp + -9] = [[fp + -3] + 3];
[fp + -8] = [[fp + -3] + 4];
[fp + -7] = [[fp + -3] + 5];
[fp + -6] = [[fp + -3] + 6];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
jmp rel 6 if [fp + -5] != 0;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = 10040 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768201416, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 77;
[fp + -8] = [ap + 0] + 10040, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 10540, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 22695;
jmp rel 35 if [ap + -8] != 0;
[ap + 0] = [ap + -9], ap++;
jmp rel 18 if [ap + -6] != 0;
[ap + -5] = [[fp + -4] + 0];
[ap + -4] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 4, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -51;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2] + 2470, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + 2670, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -653;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 6;
%{ memory[ap + 0] = 5740 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768205716, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 73;
[fp + -7] = [ap + 0] + 5740, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 54;
[fp + 4] = [fp + -6] + 4;
[fp + 5] = [fp + -5];
[fp + 0] = [[fp + -6] + 0];
[fp + 1] = [[fp + -6] + 1];
[fp + 2] = [[fp + -6] + 2];
[fp + 3] = [[fp + -6] + 3];
[ap + 0] = [ap + -2], ap++;
jmp rel 7 if [fp + 0] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + 2] = [ap + 0] + [fp + 1], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel 22743;
jmp rel 13 if [ap + -3] != 0;
[fp + 3] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
call rel -61;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2230, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 6040, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -749;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 4840 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768206616, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 56;
[fp + -7] = [ap + 0] + 4840, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 37;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[fp + 0] = [fp + -6] + 2;
[fp + 1] = [fp + -5];
call rel 22668;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -44;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2090, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 5140, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -822;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 27086565855670123880368450303589862103600491821230196, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = 1840 <= memory[fp + -5] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + 340282366920938463463374607431768209616, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 50;
[fp + -5] = [ap + 0] + 1840, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 10 if [fp + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2340, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 12;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] * 256, ap++;
[ap + 0] = [ap + -4], ap++;
call rel -41;
ret;
call rel 979;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 870, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
call rel -896;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 116335914511053438230451110484119729132151894677147593865126763, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 0];
[fp + -13] = [[fp + -12] + 1];
[fp + -11] = [[fp + -12] + 2];
[fp + -10] = [[fp + -12] + 3];
[fp + -9] = [[fp + -12] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12]) %}
[ap + 0] = [[fp + -12] + 6], ap++;
jmp rel 323 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 7];
[ap + -3] = [[fp + -12] + 8];
[fp + -11] = [[fp + -12] + 9];
[ap + -2] = [[fp + -12] + 10];
[fp + -8] = [[fp + -12] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 7) %}
[ap + 0] = [[fp + -12] + 13], ap++;
jmp rel 294 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -10] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -12] + 14];
[ap + -3] = [[fp + -12] + 15];
[fp + -11] = [[fp + -12] + 16];
[ap + -2] = [[fp + -12] + 17];
[fp + -7] = [[fp + -12] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -12] + 14) %}
[ap + 0] = [[fp + -12] + 20], ap++;
jmp rel 265 if [ap + -1] != 0;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -12] + 21, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -14] + 0];
jmp rel 233;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -14] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
[ap + 0] = [fp + -14] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -11] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 200 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 170;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -11] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 137 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 107;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -11] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -10] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -11] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel -3129;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
ret;
ap += 12;
call rel -3160;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22150, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 24;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 23600, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 7], ap++;
[ap + 0] = [[ap + -41] + 8], ap++;
ret;
ap += 24;
call rel -3191;
[ap + 0] = [ap + -40] + 1, ap++;
[ap + 0] = [ap + -35] + 34000, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -46] + 5], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 35450, ap++;
[ap + 0] = [ap + -49] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
[ap + 0] = [[ap + -53] + 8], ap++;
ret;
ap += 36;
call rel -3222;
[ap + 0] = [fp + -14] + 1, ap++;
[ap + 0] = [ap + -47] + 45850, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 49;
[ap + 0] = [[fp + -12] + 19], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -2] + 47390, ap++;
[ap + 0] = [fp + -12] + 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 21], ap++;
[ap + 0] = [[fp + -12] + 22], ap++;
ret;
ap += 54;
[ap + 0] = [[fp + -12] + 12], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -2] + 58440, ap++;
[ap + 0] = [fp + -12] + 16, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 14], ap++;
[ap + 0] = [[fp + -12] + 15], ap++;
ret;
ap += 59;
[ap + 0] = [[fp + -12] + 5], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [ap + -2] + 69490, ap++;
[ap + 0] = [fp + -12] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -12] + 7], ap++;
[ap + 0] = [[fp + -12] + 8], ap++;
ret;
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = 599592904689416933554469854219060499615563828422097690148720749202860515921, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -6] = [[fp + -4] + 1];
[ap + -3] = [[fp + -4] + 2];
[ap + -2] = [[fp + -4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 5], ap++;
jmp rel 536 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 4], ap++;
[fp + 0] = [[fp + -4] + 6];
[ap + 0] = [fp + -4] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -5] = [[fp + -7] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 497 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[fp + -7] + 0];
[ap + 0] = [fp + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [ap + -3], ap++;
[fp + 0] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -7] + 2];
jmp rel 18;
[ap + -1] = [[fp + -7] + 2];
call rel 27666;
[ap + 0] = [ap + -1] + 27665, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 57040, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -10] + [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -16], ap++;
jmp rel 155;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 163567562514348492070331390455692180584235264620730029616953355796637619313, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -5] = [[ap + -13] + 1];
[ap + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 426 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 387 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + -7] = [ap + 1] + [fp + 0], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 14;
[ap + -1] = [[ap + -13] + 2];
ap += 16;
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = [ap + -21] + 12350, ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = 0, ap++;
jmp rel 60;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 163567562514348492070331390455692180584235264620730029616953355796637619313, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -5] = [[ap + -14] + 1];
[ap + -4] = [[ap + -14] + 2];
[ap + -3] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 318 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 279 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -3], ap++;
[fp + 0] = [ap + 1] + [ap + -6], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 2];
jmp rel 244;
[ap + -1] = [[ap + -12] + 2];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
call rel 22048;
jmp rel 207 if [ap + -4] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 21 if [ap + -4] != 0;
call rel 27510;
[ap + 0] = [ap + -1] + 27509, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 27050, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[fp + 0] = [ap + 1] + [ap + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 156;
[ap + -1] = [[ap + -12] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -17] + 1];
jmp rel 124;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -17] + 1];
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[ap + -16] + 0];
[fp + -3] = [[ap + -16] + 1];
[ap + 0] = [[ap + -16] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -23] + 2], ap++;
[ap + -4] = [[ap + -24] + 3], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -26] + 4];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -23] + 2], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -25] + 3], ap++;
[ap + -7] = [[ap + -26] + 4];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [ap + -29] + 5, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -28] + 0];
[ap + -5] = [[ap + -28] + 1];
[ap + -4] = [[ap + -28] + 2];
[ap + -6] = [[ap + -28] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -28]) %}
[ap + 0] = [[ap + -28] + 5], ap++;
jmp rel 58 if [ap + -1] != 0;
[ap + 0] = [[ap + -29] + 4], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [[ap + -37] + 6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
call rel 253;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -51] + 7];
[ap + -2] = [[ap + -51] + 8];
[ap + -6] = [[ap + -51] + 9];
[ap + -5] = [[ap + -51] + 10];
[ap + -4] = [[ap + -51] + 11];
[ap + -3] = [[ap + -51] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -51] + 7) %}
[ap + 0] = [[ap + -51] + 14], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -52] + 13], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -56] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -52] + 13], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -56] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -58] + 15], ap++;
[ap + 0] = [[ap + -59] + 16], ap++;
ret;
[ap + 0] = [[ap + -29] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 13700, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -35] + 6], ap++;
[ap + 0] = [[ap + -36] + 7], ap++;
ret;
call rel 27348;
[ap + 0] = [ap + -1] + 27347, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25110, ap++;
call rel -6395;
[ap + 0] = [ap + -29] + 2, ap++;
[ap + 0] = [ap + -17] + [ap + -8], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27328;
[ap + 0] = [ap + -1] + 27327, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 25680, ap++;
call rel 205;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -17] + [ap + -8], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27308;
[ap + 0] = [ap + -1] + 27307, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 27250, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
call rel 27291;
[ap + 0] = [ap + -1] + 27290, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 30720, ap++;
call rel 168;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -17] + [ap + -8], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27271;
[ap + 0] = [ap + -1] + 27270, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 30120, ap++;
call rel -6463;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [ap + -21] + [ap + -8], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 17;
[ap + 0] = [[ap + -15] + 4], ap++;
call rel 27252;
[ap + 0] = [ap + -1] + 27251, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 32430, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -24] + 8, ap++;
[ap + 0] = [[ap + -25] + 6], ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27229;
[ap + 0] = [ap + -1] + 27228, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 42930, ap++;
call rel -6505;
[ap + 0] = [ap + -26] + 3, ap++;
[ap + 0] = [ap + -21] + [ap + -8], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 17;
[ap + 0] = [[ap + -14] + 4], ap++;
call rel 27210;
[ap + 0] = [ap + -1] + 27209, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 45240, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -23] + 8, ap++;
[ap + 0] = [[ap + -24] + 6], ap++;
[ap + 0] = [[ap + -25] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel 27187;
[ap + 0] = [ap + -1] + 27186, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 55640, ap++;
call rel -6547;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -21] + [ap + -8], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 17;
[ap + 0] = [[fp + -4] + 4], ap++;
call rel 27168;
[ap + 0] = [ap + -1] + 27167, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 57940, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -4] + 8, ap++;
[ap + 0] = [[fp + -4] + 6], ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
jmp rel 17 if [fp + -12] != 0;
[ap + 0] = 1091630965046171586881802890498973834564654876687718157299625186377995250378, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -5] + 2];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
[ap + 0] = 258665617756453083421532627773985901625276693713295895594790335784429025765, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -5] + 2];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 105806897873711421407607220097391632185840668734579, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 24635088134955480091293739753535555070318, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 630 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[fp + -4] = [[fp + -5] + 9];
[ap + -3] = [[fp + -5] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 591 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 14];
[ap + -4] = [[fp + -5] + 15];
[fp + -4] = [[fp + -5] + 16];
[ap + -3] = [[fp + -5] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 14) %}
[ap + 0] = [[fp + -5] + 19], ap++;
jmp rel 552 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 18], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -5] + 21, ap++;
[ap + 0] = [[fp + -5] + 20], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 509;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -7] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 467 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 420 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 377;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 335 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 288 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 245;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 203 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 156 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 113;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 71 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 27 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 11;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -27], ap++;
ret;
call rel -6920;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -41] + 6], ap++;
[ap + 0] = [[ap + -42] + 7], ap++;
ret;
ap += 16;
call rel -4243;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -27] + 12250, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 16;
call rel -6996;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -31] + 12350, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 32;
[ap + 0] = [[ap + -46] + 4], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -2] + 14400, ap++;
[ap + 0] = [ap + -49] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -57] + 6], ap++;
[ap + 0] = [[ap + -58] + 7], ap++;
ret;
ap += 32;
call rel -4320;
[ap + 0] = [ap + -52] + 3, ap++;
[ap + 0] = [ap + -43] + 24700, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 32;
call rel -7073;
[ap + 0] = [ap + -52] + 3, ap++;
[ap + 0] = [ap + -47] + 24800, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 48;
[ap + 0] = [[ap + -62] + 4], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 26850, ap++;
[ap + 0] = [ap + -65] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -73] + 6], ap++;
[ap + 0] = [[ap + -74] + 7], ap++;
ret;
ap += 48;
call rel -4397;
[ap + 0] = [ap + -68] + 3, ap++;
[ap + 0] = [ap + -59] + 37150, ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 48;
call rel -7150;
[ap + 0] = [ap + -68] + 3, ap++;
[ap + 0] = [ap + -63] + 37250, ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 64;
[ap + 0] = [[ap + -75] + 4], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2] + 39300, ap++;
[ap + 0] = [ap + -78] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -86] + 6], ap++;
[ap + 0] = [[ap + -87] + 7], ap++;
ret;
ap += 64;
call rel -4474;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -75] + 49600, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 78;
[ap + 0] = [[fp + -5] + 18], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 51230, ap++;
[ap + 0] = [fp + -5] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 20], ap++;
[ap + 0] = [[fp + -5] + 21], ap++;
ret;
ap += 84;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 62270, ap++;
[ap + 0] = [fp + -5] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
ret;
ap += 90;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 73310, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 376;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 345;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 314;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 267 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 244 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -5] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 193 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 170 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 119 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 96 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 45 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 5;
[ap + 0] = [ap + -14] + 2, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
ret;
[ap + 0] = [ap + -14] + 3, ap++;
jmp rel 5;
ap += 8;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 9;
[ap + 0] = [ap + -23] + 3, ap++;
jmp rel 5;
ap += 17;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 18;
[ap + 0] = [ap + -32] + 3, ap++;
jmp rel 5;
ap += 26;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 27;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 5;
ap += 35;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 43;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 47;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 51;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -11] = [[fp + -3] + 0];
[fp + -10] = [[fp + -3] + 1];
[fp + -9] = [[fp + -3] + 2];
[fp + -8] = [[fp + -3] + 3];
[fp + -7] = [[fp + -3] + 4];
[fp + -6] = [[fp + -3] + 5];
[fp + -5] = [[fp + -3] + 6];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -11] = [[fp + -10] + 1];
[fp + -9] = [[fp + -10] + 2];
[fp + -8] = [[fp + -10] + 3];
[fp + -7] = [[fp + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 6], ap++;
jmp rel 378 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 7];
[ap + -3] = [[fp + -10] + 8];
[fp + -9] = [[fp + -10] + 9];
[ap + -2] = [[fp + -10] + 10];
[fp + -6] = [[fp + -10] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 7) %}
[ap + 0] = [[fp + -10] + 13], ap++;
jmp rel 349 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 14];
[ap + -3] = [[fp + -10] + 15];
[fp + -9] = [[fp + -10] + 16];
[ap + -2] = [[fp + -10] + 17];
[fp + -5] = [[fp + -10] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 14) %}
[ap + 0] = [[fp + -10] + 20], ap++;
jmp rel 320 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -10] + 21, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -12] + 0];
jmp rel 288;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -9] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 255 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 225;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel [fp + -3];
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -8] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -9] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 15;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
ap += 11;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -16] + 1090, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 125;
call rel -5125;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 132;
ap += 13;
[ap + 0] = [[ap + -25] + 5], ap++;
[ap + 0] = [ap + -1] + 1440, ap++;
[ap + 0] = [ap + -27] + 9, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
jmp rel 140;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -9] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 15;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
ap += 11;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -16] + 1090, ap++;
[ap + 0] = [ap + -18], ap++;
jmp rel 63;
call rel -5187;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 70;
ap += 13;
[ap + 0] = [[ap + -25] + 5], ap++;
[ap + 0] = [ap + -1] + 1440, ap++;
[ap + 0] = [ap + -27] + 9, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
jmp rel 78;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -8] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -9] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 22;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
ap += 11;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -16] + 1090, ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -5257;
[ap + 0] = [ap + -20] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 13;
[ap + 0] = [[ap + -25] + 5], ap++;
[ap + 0] = [ap + -1] + 1440, ap++;
[ap + 0] = [ap + -27] + 9, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 19;
call rel -5296;
[ap + 0] = [ap + -35] + 1, ap++;
[ap + 0] = [ap + -30] + 12680, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 31;
[ap + 0] = [[ap + -41] + 5], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -2] + 14130, ap++;
[ap + 0] = [ap + -44] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -47] + 7], ap++;
[ap + 0] = [[ap + -48] + 8], ap++;
ret;
ap += 31;
call rel -5327;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [ap + -42] + 24530, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 44;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 26070, ap++;
[ap + 0] = [fp + -10] + 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 21], ap++;
[ap + 0] = [[fp + -10] + 22], ap++;
ret;
ap += 49;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 37120, ap++;
[ap + 0] = [fp + -10] + 16, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 14], ap++;
[ap + 0] = [[fp + -10] + 15], ap++;
ret;
ap += 54;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 48170, ap++;
[ap + 0] = [fp + -10] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 7], ap++;
[ap + 0] = [[fp + -10] + 8], ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 301 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[fp + -4] = [[fp + -5] + 9];
[ap + -3] = [[fp + -5] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 12], ap++;
jmp rel 266 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -5] = [[fp + -7] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 223 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -4] = [[ap + -8] + 1];
[fp + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 182 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -12] + 0];
jmp rel 143;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 105 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 68;
[ap + 1] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 20453;
jmp rel 34 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 15 if [ap + -4] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = [ap + -76], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 90, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 32;
call rel -5567;
[ap + 0] = [ap + -49] + 1, ap++;
[ap + 0] = [ap + -43] + 13950, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 45;
[ap + 0] = [[ap + -56] + 4], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 15490, ap++;
[ap + 0] = [ap + -59] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -65] + 6], ap++;
[ap + 0] = [[ap + -66] + 7], ap++;
ret;
ap += 45;
call rel -5610;
[ap + 0] = [ap + -63] + 1, ap++;
[ap + 0] = [ap + -56] + 25790, ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 59;
[ap + 0] = [[ap + -68] + 4], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -2] + 27420, ap++;
[ap + 0] = [ap + -71] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -77] + 6], ap++;
[ap + 0] = [[ap + -78] + 7], ap++;
ret;
ap += 54;
call rel 7748;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -69] + 37200, ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 70;
[ap + 0] = [[fp + -5] + 11], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 39250, ap++;
[ap + 0] = [fp + -5] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 13], ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
ret;
ap += 76;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 50290, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
jmp rel [fp + -10];
jmp rel 77;
jmp rel 60;
jmp rel 43;
[ap + 0] = 111698146311908863407302100342874275240829328563168086149856131455453417691, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
jmp rel [fp + -8];
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[fp + -7] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
ret;
ap += 5;
[ap + 0] = 597737395777531629504371423546799756666196605557268572372978689465546875361, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 5;
[ap + 0] = 131425480171470489600231791378472292480259385557796368323212843128885728653, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 5;
[ap + 0] = 1212934109753348009330449067077061170718298436515212340890559178244957703708, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 378672512937229864572034320078749610255816943982, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1788230383078796420818472737903545775115950619686282354238021065532772, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 418503298271971407217644423124313440639884150868, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 107136844357624680247797127742571420176744025378387, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 107136844357624680247716972319824244744498872667982, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 24944740430830204917383880443356793359696, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1486822392393958861658706078550100, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -11] = [[fp + -3] + 0];
[fp + -9] = [ap + 0] + [fp + -10], ap++;
[ap + -1] = [ap + 0] * 5, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel 20280;
jmp rel 35 if [ap + -3] != 0;
[fp + -7] = [ap + 0] + [fp + -8], ap++;
[ap + -1] = [ap + 0] * 3, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 1008;
jmp rel 12 if [ap + -3] != 0;
[fp + -6] = [[ap + -1] + 0];
[fp + -5] = [[ap + -1] + 1];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 200, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3190, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 3;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 379 if [ap + -2] != 0;
[fp + 2] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[fp + 2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -6] + 1], ap++;
[ap + -5] = [[fp + -6] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 355 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 2] = [[fp + -6] + 0];
[ap + 0] = [fp + 2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 295 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 20231;
jmp rel 258 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 248 if [ap + -4] != 0;
[fp + 0] = [ap + -3];
[fp + 1] = [ap + -2];
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 194 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel 927;
jmp rel 157 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 147 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 97 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 73 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -19] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -15] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 18 if [ap + -2] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -31], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -9] + 330, ap++;
jmp rel 7;
ap += 9;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -15] + 1650, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 2340, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 31;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 3040, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -6] + 5710, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 6790, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 31;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 7490, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 10160, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -9] + 10890, ap++;
jmp rel 7;
ap += 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -14] + 12210, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -11] = [[fp + -3] + 0];
[fp + -10] = [[fp + -3] + 1];
[fp + -9] = [[fp + -3] + 2];
[fp + -8] = [[fp + -3] + 3];
[fp + -7] = [[fp + -3] + 4];
[fp + -6] = [[fp + -3] + 5];
[fp + -5] = [[fp + -3] + 6];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 371 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 348 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -5] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 313;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 282;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 8;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 235 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -19] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -21] + 1], ap++;
[ap + -5] = [[ap + -22] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 212 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -16] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -17] + 1];
[ap + 0] = [ap + -17] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 161 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 138 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 87 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 64 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -12] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 15 if [ap + -2] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [ap + -15] + 3, ap++;
jmp rel 5;
ap += 9;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 10;
[ap + 0] = [ap + -24] + 3, ap++;
jmp rel 5;
ap += 18;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 19;
[ap + 0] = [ap + -41] + 3, ap++;
jmp rel 5;
ap += 27;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 35;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 39;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 36;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 5;
ap += 44;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 3410 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208046, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 106;
[fp + -8] = [ap + 0] + 3410, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 3910, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 46 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 22 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -12] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -13] + 1];
[ap + -4] = [[fp + -4] + 0];
[ap + 0] = [ap + -13] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -86;
ret;
[ap + 0] = [ap + -18] + 3, ap++;
[ap + 0] = [ap + -9] + 1400, ap++;
jmp rel 7;
ap += 9;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [ap + -15] + 2720, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -4869;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5040 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768206416, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 58;
[fp + -7] = [ap + 0] + 5040, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 39;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -3] = [[fp + -3] + 0];
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[fp + 0] = [fp + -6] + 3;
[fp + 1] = [fp + -5];
call rel 19400;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -46;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2090, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 5340, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -4950;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = 10480 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768200976, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 76;
[fp + -8] = [ap + 0] + 10480, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 10980, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 19379;
jmp rel 34 if [ap + -7] != 0;
[ap + 0] = [ap + -8], ap++;
jmp rel 17 if [ap + -5] != 0;
[ap + -4] = [[fp + -4] + 0];
[ap + -3] = [[fp + -4] + 1];
[ap + -2] = [[fp + -4] + 2];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 3, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -50;
ret;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 2370, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 2570, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -5041;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 12247868912570024929994369972085044880615269779114182434815966989419180676, ap++;
[ap + 0] = 3652501241, ap++;
[ap + 0] = 10628944869218562084050143519444549580389464591454674019345556079, ap++;
[ap + 0] = 2100000000000000, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 25187, ap++;
[ap + 0] = 118034699, ap++;
[ap + 0] = 969166842145694355898879064562217049827305169495536240246191507779, ap++;
[ap + 0] = 2100000000000000, ap++;
[ap + 0] = 111, ap++;
[ap + 0] = 196, ap++;
[ap + 0] = 29794, ap++;
[ap + 0] = 4206867930, ap++;
[ap + 0] = 8154142684220187899712437956956085183, ap++;
[ap + 0] = 2100000000000000, ap++;
[ap + 0] = 111, ap++;
[ap + 0] = 196, ap++;
[ap + 0] = 1650684532, ap++;
call rel 19447;
jmp rel 23 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 15 if [ap + -4] != 0;
ap += 3;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5] + 270, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -7] + 190, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 85;
[fp + -8] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -6] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 66;
[ap + 0] = [ap + -2], ap++;
[fp + -4] = [ap + 0] + [fp + -5], ap++;
%{ memory[ap + 0] = memory[fp + -6] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -6] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 47;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -5] + [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[fp + -6] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 19;
[ap + 1] = [fp + -6] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -15] + 1];
[ap + 0] = [fp + -7] * 31, ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3] + [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -57;
ret;
call rel -9955;
[ap + 0] = [ap + -21] + 2, ap++;
[ap + 0] = [ap + -12] + 1370, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
call rel 895;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 2340, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 3610, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
ret;
call rel -5229;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155801121783046687566683549401418067831, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 20041;
jmp rel 346 if [ap + -8] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 298 if [ap + -8] != 0;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 6, ap++;
call rel 20343;
jmp rel 242 if [ap + -8] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 194 if [ap + -8] != 0;
[ap + 0] = 6, ap++;
[ap + 0] = 6, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -18] + 0];
jmp rel 133;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -18] + 0];
[ap + 0] = [ap + -18] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 20312;
jmp rel 73 if [ap + -8] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 28 if [ap + -8] != 0;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12] + 90, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -24], ap++;
ret;
ap += 110;
call rel -7440;
[ap + 0] = [ap + -134] + 1, ap++;
[ap + 0] = [ap + -121] + 75210, ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
ret;
ap += 122;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -124] + 76660, ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -146], ap++;
ret;
ap += 123;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -134] + 76850, ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -146], ap++;
[ap + 0] = [ap + -146], ap++;
ret;
ap += 238;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -240] + 152710, ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -262], ap++;
[ap + 0] = [ap + -262], ap++;
ret;
ap += 239;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = [ap + -250] + 152900, ap++;
[ap + 0] = [ap + -250], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -262], ap++;
[ap + 0] = [ap + -262], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1479189527628697013555596416924715405286402414, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
jmp rel [fp + -9];
jmp rel 40;
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 32;
[ap + 0] = 1, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 2, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 3, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 4, ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel [fp + -8];
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -7] = [[ap + -1] + 0];
[fp + -6] = [[ap + -1] + 1];
[fp + -5] = [[ap + -1] + 2];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 3, ap++;
ret;
[fp + -12] = [[fp + -3] + 0];
[fp + -10] = [ap + 0] + [fp + -11], ap++;
[ap + -1] = [ap + 0] * 7, ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
call rel 20257;
jmp rel 36 if [ap + -3] != 0;
[fp + -8] = [ap + 0] + [fp + -9], ap++;
[ap + -1] = [ap + 0] * 3, ap++;
[ap + -1] = [[ap + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 1, ap++;
call rel 20315;
jmp rel 13 if [ap + -3] != 0;
[fp + -7] = [[ap + -1] + 0];
[fp + -6] = [[ap + -1] + 1];
[fp + -5] = [[ap + -1] + 2];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 300, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3290, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = 9780 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768201676, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 107;
[fp + -7] = [ap + 0] + 9780, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -4] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 87;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
%{ memory[ap + 0] = memory[fp + -4] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 68;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -6] + [fp + -4], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [fp + -3] * 3652501241, ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -2] + 12345, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -4], ap++;
call rel 20315;
[ap + 0] = [ap + -52], ap++;
jmp rel 38 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -4] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 16;
[ap + 1] = [fp + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -12], ap++;
call rel -71;
ret;
call rel -10624;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 1170, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -2] + 2640, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel 218;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 8710, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 9980, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
call rel -5906;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = 2140 <= memory[fp + -5] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + 340282366920938463463374607431768209316, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 59;
[fp + -5] = [ap + 0] + 2140, ap++;
[ap + -1] = [[fp + -6] + 0];
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + 2, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 39;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 17;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] * 1103515245, ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -3] + 12345, ap++;
[ap + 0] = [ap + -5], ap++;
call rel -42;
ret;
call rel -10717;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1070, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 2440, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -5980;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1608844544860142481837018615352855255414252849117202134821270416523209316980, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -5] = [[ap + -3] + 1];
[fp + -4] = [[ap + -2] + 0];
[fp + -3] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -6] = [[fp + -7] + 1];
[ap + -5] = [[fp + -7] + 2];
[ap + -4] = [[fp + -7] + 3];
[ap + -3] = [[fp + -7] + 4];
[ap + -2] = [[fp + -7] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 7], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -7] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
[ap + 0] = [[fp + -7] + 9], ap++;
ret;
%{ memory[ap + 0] = 4460 <= memory[fp + -5] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + 340282366920938463463374607431768206996, ap++;
[ap + -1] = [[fp + -6] + 0];
jmp rel 52;
[fp + -5] = [ap + 0] + 4460, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + -3] = [ap + 0] + 1, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 31;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 20222;
jmp rel 9 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
call rel -38;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 1770, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 4660, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -6095;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1637570914057682275393755530660268060279989363, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
ap += 4;
%{ memory[ap + 0] = 11690 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768199766, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 241;
[fp + -8] = [ap + 0] + 11690, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -7] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 220;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -7] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 199;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -10] + 1], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -13] + 2], ap++;
[ap + -1] = [[ap + -14] + 3], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -16] + 4, ap++;
jmp rel 67 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 2] = [ap + -1];
[fp + 3] = [ap + -1];
[fp + 3] = [ap + 0] + [fp + 2], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 9 if [ap + -2] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 2], ap++;
[ap + 0] = [fp + 3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel -392;
jmp rel 26 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 3] = [ap + 0] + [fp + 2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel -282;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 66;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3690, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 6360, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 0] = [ap + -1];
[fp + 1] = [ap + -1];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -4] + 100, ap++;
jmp rel 9 if [ap + -2] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel -458;
jmp rel 72 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel -348;
jmp rel 53 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -4] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -7] + 1], ap++;
[ap + -1] = [[ap + -8] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -13] + 3];
jmp rel 17;
[ap + 1] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -13] + 3];
[ap + 0] = [ap + -13] + 4, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -189;
ret;
call rel -11062;
[ap + 0] = [ap + -19] + 4, ap++;
[ap + 0] = [ap + -19] + 1410, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3590, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 6260, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -235;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 10620, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 11890, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -6362;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 25234980565865011805353781783412366906373418087442798, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = 2670 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768208786, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 73;
[fp + -8] = [ap + 0] + 2670, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 3170, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [ap + -1], ap++;
[fp + -6] = [ap + 0] + [fp + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -7] + 0], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 15 if [ap + -2] != 0;
[ap + -1] = [[fp + -4] + 0];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -61;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -6] + 2170, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
call rel -6461;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 6530 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768204926, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 148;
[fp + -8] = [ap + 0] + 6530, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -7] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 127;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -7] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 106;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -10] + 1], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -13] + 2], ap++;
[ap + -1] = [[ap + -14] + 3], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -16] + 4, ap++;
[ap + 0] = [[ap + -9] + 0], ap++;
jmp rel 20 if [ap + -4] != 0;
[ap + 0] = [fp + -5] * 31, ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 3652501241, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 14755, ap++;
jmp rel 19;
[ap + 0] = [ap + -1] * 31, ap++;
[ap + 0] = [ap + -1] + [fp + -5], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 3652501241, ap++;
[ap + 0] = [ap + -10] + 100, ap++;
[ap + 0] = [ap + -2] + 14755, ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -12] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -15] + 1], ap++;
[ap + -1] = [[ap + -16] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -21] + 3];
jmp rel 17;
[ap + 1] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -21] + 3];
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -115;
ret;
call rel -11351;
[ap + 0] = [ap + -27] + 4, ap++;
[ap + 0] = [ap + -19] + 1270, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -503;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 5460, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 6730, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -6630;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
jmp rel 29 if [fp + -11] != 0;
[ap + 0] = 988809392353264044728913149602568232240779489514424630921821057413447938795, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
jmp rel 6 if [fp + -7] != 0;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
ap += 5;
[ap + 0] = 952018701043150395890767918113897069886306297516309605547277037138257541672, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = 6530 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768204926, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 148;
[fp + -8] = [ap + 0] + 6530, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -7] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 127;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -7] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 106;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -10] + 1], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -13] + 2], ap++;
[ap + -1] = [[ap + -14] + 3], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -16] + 4, ap++;
[ap + 0] = [[ap + -9] + 0], ap++;
jmp rel 20 if [ap + -4] != 0;
[ap + 0] = [fp + -5] * 31, ap++;
[ap + 0] = [ap + -1] + [ap + -2], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 3652501241, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -2] + 14755, ap++;
jmp rel 19;
[ap + 0] = [ap + -1] * 31, ap++;
[ap + 0] = [ap + -1] + [fp + -5], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -1] + 12345, ap++;
[ap + 0] = [ap + -1] * 3652501241, ap++;
[ap + 0] = [ap + -10] + 100, ap++;
[ap + 0] = [ap + -2] + 14755, ap++;
[ap + 0] = 2, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -6], memory[ap + -1]) %}
[ap + 4] = [[ap + -12] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -15] + 1], ap++;
[ap + -1] = [[ap + -16] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -6] = [ap + -3] + [ap + -1];
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -21] + 3];
jmp rel 17;
[ap + 1] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -21] + 3];
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -115;
ret;
call rel -11559;
[ap + 0] = [ap + -27] + 4, ap++;
[ap + 0] = [ap + -19] + 1270, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -711;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 5460, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 6730, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -6838;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 85;
[fp + -7] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -5] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 65;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -5] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 46;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[fp + -5] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 18;
[ap + 1] = [fp + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -15] + 1];
[ap + 0] = [fp + -6] * 31, ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3] + [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -57;
ret;
call rel -11666;
[ap + 0] = [ap + -21] + 2, ap++;
[ap + 0] = [ap + -12] + 1270, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
call rel -816;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 2240, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 3510, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
call rel -6940;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = 3310 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768208146, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 85;
[fp + -7] = [ap + 0] + 3310, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -5] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 65;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -5] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -5] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 46;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[ap + -3] + 0], ap++;
%{ memory[ap + 0] = (memory[fp + -5] + memory[ap + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -15] + 1];
jmp rel 18;
[ap + 1] = [fp + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -15] + 1];
[ap + 0] = [fp + -6] * 31, ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3] + [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -57;
ret;
call rel -11766;
[ap + 0] = [ap + -21] + 2, ap++;
[ap + 0] = [ap + -12] + 1270, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
call rel -916;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 2240, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 3510, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
call rel -7040;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1689804936085334570088724006005102, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 218;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[fp + 1] = [[fp + -4] + 0];
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 188;
[fp + 0] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 136 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel -730;
jmp rel 103 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 93 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 47 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -19] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -4] + 770, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 7;
ap += 9;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -15] + 1320, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 2010, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 27;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2710, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6] + 5380, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -3] + 6970, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 7560, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 291 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 268 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[fp + -5] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [fp + -5] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 221 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 198 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 151 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 128 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 81 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 58 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -12] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 13 if [ap + -2] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [ap + -15] + 3, ap++;
jmp rel 5;
ap += 9;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 10;
[ap + 0] = [ap + -24] + 3, ap++;
jmp rel 5;
ap += 18;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 19;
[ap + 0] = [ap + -33] + 3, ap++;
jmp rel 5;
ap += 27;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 28;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 5;
ap += 36;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -11];
jmp rel 76;
jmp rel 62;
jmp rel 47;
jmp rel 32;
jmp rel 16;
[ap + 0] = 271746229759260285552388728919865295615886751538523744128730118297934206697, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 544914742286571513055574265148471203182105283038408585630116262969508767999, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 1495344490136071460114920061035658809061971367051424659723723519153313545494, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 1024563328638579707993086273191065972481083806754239734289449612694885885764, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 1377123315299276875035905829299713115370384616991444407108739037956089497892, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[ap + 0] = 608669811081919783384962035579130584034007275000671735200529992509830593976, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
[fp + -5] = [[fp + -7] + 0];
[fp + -4] = [[fp + -7] + 1];
[ap + 0] = [[fp + -7] + 2], ap++;
[ap + -1] = [[fp + -7] + 3];
[fp + -3] = [[fp + -7] + 4];
[ap + 0] = [[fp + -7] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -9] + 0], ap++;
[ap + -4] = [[fp + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -9] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -9] + 1], ap++;
[ap + -7] = [[fp + -9] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7] + 6, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -8] = [[fp + -6] + 1];
[ap + -4] = [[fp + -6] + 2];
[ap + -5] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 129 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 84 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 53 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 18 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
ap += 16;
[ap + 0] = [ap + -24] + 1, ap++;
[ap + 0] = [ap + -19] + 2080, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -26], ap++;
ret;
call rel -13236;
[ap + 0] = [ap + -19] + 3, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 15;
[ap + 0] = [[ap + -24] + 4], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -2] + 2060, ap++;
[ap + 0] = [ap + -27] + 8, ap++;
[ap + 0] = [[ap + -28] + 6], ap++;
[ap + 0] = [[ap + -29] + 7], ap++;
jmp rel 32;
ap += 11;
call rel -13260;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11660, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13820, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 218;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[fp + -6] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -9], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 34;
call rel 21032;
[ap + 0] = [ap + -1] + 21031, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 36470, ap++;
call rel 1403;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -49] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[fp + -5] = [ap + 0] + [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 32;
call rel 21005;
[ap + 0] = [ap + -1] + 21004, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 36190, ap++;
call rel 1376;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -47] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 337994139936370667767799129369552596157394447336989834104582481799883947719, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[fp + -5] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 6, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -5] = [[fp + -7] + 1];
[ap + -4] = [[fp + -7] + 2];
[ap + -6] = [[fp + -7] + 3];
[fp + -4] = [[fp + -7] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 6], ap++;
jmp rel 82 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -7] + 7];
[ap + -4] = [[fp + -7] + 8];
[ap + -3] = [[fp + -7] + 9];
[ap + -2] = [[fp + -7] + 10];
[fp + -3] = [[fp + -7] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 7) %}
[ap + 0] = [[fp + -7] + 13], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 9, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel -450;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[fp + -7] + 14];
[ap + -2] = [[fp + -7] + 15];
[ap + -6] = [[fp + -7] + 16];
[ap + -5] = [[fp + -7] + 17];
[ap + -4] = [[fp + -7] + 18];
[ap + -3] = [[fp + -7] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7] + 14) %}
[ap + 0] = [[fp + -7] + 21], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 20], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [fp + -7] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[fp + -7] + 20], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [fp + -7] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -7] + 22], ap++;
[ap + 0] = [[fp + -7] + 23], ap++;
ret;
ap += 18;
[ap + 0] = [[fp + -7] + 12], ap++;
[ap + 0] = [ap + -1] + 12820, ap++;
[ap + 0] = [fp + -7] + 16, ap++;
[ap + 0] = [[fp + -7] + 14], ap++;
[ap + 0] = [[fp + -7] + 15], ap++;
jmp rel 11;
ap += 24;
[ap + 0] = [[fp + -7] + 5], ap++;
[ap + 0] = [ap + -1] + 24060, ap++;
[ap + 0] = [fp + -7] + 9, ap++;
[ap + 0] = [[fp + -7] + 7], ap++;
[ap + 0] = [[fp + -7] + 8], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 36;
call rel 20830;
[ap + 0] = [ap + -1] + 20829, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 36650, ap++;
call rel -13676;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -9] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -10] + 2];
jmp rel 1133;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -10] + 2];
[fp + -6] = [ap + 0] + [ap + -6], ap++;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -9], ap++;
jmp rel 25 if [ap + -3] != 0;
ap += 177;
call rel 20776;
[ap + 0] = [ap + -1] + 20775, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 117970, ap++;
call rel 1147;
[ap + 0] = [ap + -192], ap++;
[ap + 0] = [ap + -192] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[fp + -5] = [ap + 0] + [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 25 if [ap + -2] != 0;
ap += 175;
call rel 20749;
[ap + 0] = [ap + -1] + 20748, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 117690, ap++;
call rel 1120;
[ap + 0] = [ap + -192], ap++;
[ap + 0] = [ap + -190] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 67;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 36 if [fp + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + -2] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 20;
[ap + -1] = [[ap + -6] + 0];
ap += 163;
call rel 20697;
[ap + 0] = [ap + -1] + 20696, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 116070, ap++;
[ap + 0] = [ap + -176] + 1, ap++;
[ap + 0] = [ap + -174] + [ap + -2], ap++;
jmp rel 21;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 33;
ap += 167;
call rel 20675;
[ap + 0] = [ap + -1] + 20674, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 116700, ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -176] + [ap + -2], ap++;
call rel 1053;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 6;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = [ap + -11] + 810, ap++;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[fp + -8] + 0];
[fp + -6] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -11] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -7] = [[ap + -11] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -13] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + -14] = [[fp + -7] + 1];
[ap + -4] = [[fp + -7] + 2];
[ap + -5] = [[fp + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -7]) %}
[ap + 0] = [[fp + -7] + 5], ap++;
jmp rel 910 if [ap + -1] != 0;
[ap + 0] = [[fp + -7] + 4], ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [fp + -7] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 858 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 818 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 771 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + -5] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 733;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -9] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 9;
ap += 3;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 340, ap++;
jmp rel 15;
[ap + 0] = [ap + -2], ap++;
[ap + -22] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 691;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -15] = [ap + 1] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 13;
[ap + -1] = [[ap + -4] + 0];
ap += 1;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + -33] = [ap + 1] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 605;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 581 if [ap + -12] != 0;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[ap + -50] + 0];
[fp + -6] = [[ap + -50] + 1];
[ap + 0] = [[ap + -50] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -46] + 0];
[ap + -5] = [[ap + -46] + 1];
[ap + -4] = [[ap + -46] + 2];
[ap + -6] = [[ap + -46] + 3];
[ap + -16] = [[ap + -46] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -46]) %}
[ap + 0] = [[ap + -46] + 6], ap++;
jmp rel 503 if [ap + -1] != 0;
[ap + 0] = [[ap + -47] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -52] + 7];
[ap + -4] = [[ap + -52] + 8];
[ap + -3] = [[ap + -52] + 9];
[ap + -2] = [[ap + -52] + 10];
[ap + -21] = [[ap + -52] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -52] + 7) %}
[ap + 0] = [[ap + -52] + 13], ap++;
jmp rel 467 if [ap + -1] != 0;
[ap + 0] = [[ap + -53] + 12], ap++;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[ap + -12] + 0];
[fp + -5] = [[ap + -12] + 1];
[ap + 0] = [[ap + -12] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -16] + 0], ap++;
[ap + -4] = [[ap + -17] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -19] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -18] + 1], ap++;
[ap + -7] = [[ap + -19] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -68] + 14];
[ap + -5] = [[ap + -68] + 15];
[ap + -4] = [[ap + -68] + 16];
[ap + -6] = [[ap + -68] + 17];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -68] + 14) %}
[ap + 0] = [[ap + -68] + 19], ap++;
jmp rel 390 if [ap + -1] != 0;
[ap + 0] = [[ap + -69] + 18], ap++;
[ap + 0] = [[ap + -70] + 20], ap++;
[ap + 0] = [ap + -71] + 21, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 340 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -5] = [[ap + -8] + 1];
[ap + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 302 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -10] + 6], ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 257 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 1] = [ap + -5] + [fp + -3], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 13;
[ap + -1] = [[ap + -11] + 1];
ap += 1;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 9;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -5] + 10, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 1] = [ap + -23] + [fp + -4], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 13;
[ap + -1] = [[ap + -6] + 0];
ap += 5;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11] + 520, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 19;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 340282366920938463463374607431768211456 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -12] + 1];
jmp rel 173;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 151 if [ap + -12] != 0;
[ap + 0] = 1065622543624526936256554561967983185612257046533136611876836524258158810564, ap++;
[ap + -1] = [[ap + -40] + 0];
[fp + -5] = [[ap + -40] + 1];
[ap + 0] = [[ap + -40] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -50] + 3, ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -36] + 0];
[ap + -5] = [[ap + -36] + 1];
[ap + -4] = [[ap + -36] + 2];
[ap + -6] = [[ap + -36] + 3];
[ap + -16] = [[ap + -36] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -36]) %}
[ap + 0] = [[ap + -36] + 6], ap++;
jmp rel 82 if [ap + -1] != 0;
[ap + 0] = [[ap + -37] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -42] + 7];
[ap + -4] = [[ap + -42] + 8];
[ap + -3] = [[ap + -42] + 9];
[ap + -2] = [[ap + -42] + 10];
[ap + -21] = [[ap + -42] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -42] + 7) %}
[ap + 0] = [[ap + -42] + 13], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[ap + -43] + 12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -9], ap++;
call rel -1263;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -64] + 14];
[ap + -2] = [[ap + -64] + 15];
[ap + -6] = [[ap + -64] + 16];
[ap + -5] = [[ap + -64] + 17];
[ap + -4] = [[ap + -64] + 18];
[ap + -3] = [[ap + -64] + 19];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -64] + 14) %}
[ap + 0] = [[ap + -64] + 21], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -65] + 20], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -69] + 22, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -65] + 20], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -69] + 24, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -71] + 22], ap++;
[ap + 0] = [[ap + -72] + 23], ap++;
ret;
ap += 18;
[ap + 0] = [[ap + -61] + 12], ap++;
[ap + 0] = [ap + -1] + 12820, ap++;
[ap + 0] = [ap + -63] + 16, ap++;
[ap + 0] = [[ap + -64] + 14], ap++;
[ap + 0] = [[ap + -65] + 15], ap++;
jmp rel 11;
ap += 24;
[ap + 0] = [[ap + -61] + 5], ap++;
[ap + 0] = [ap + -1] + 24060, ap++;
[ap + 0] = [ap + -63] + 9, ap++;
[ap + 0] = [[ap + -64] + 7], ap++;
[ap + 0] = [[ap + -65] + 8], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 30;
call rel 20017;
[ap + 0] = [ap + -1] + 20016, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 35710, ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40] + [ap + -2], ap++;
jmp rel 15;
ap += 33;
call rel 20003;
[ap + 0] = [ap + -1] + 20002, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 36080, ap++;
[ap + 0] = [ap + -51] + 2, ap++;
[ap + 0] = [ap + -44] + [ap + -2], ap++;
call rel -14378;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -85], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 36;
call rel 19979;
[ap + 0] = [ap + -1] + 19978, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 36430, ap++;
call rel -14390;
[ap + 0] = [ap + -61] + 3, ap++;
[ap + 0] = [ap + -56] + [ap + -8], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 39;
ap += 56;
[ap + 0] = [[ap + -65] + 4], ap++;
call rel 19958;
[ap + 0] = [ap + -1] + 19957, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 39140, ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -74] + 8, ap++;
[ap + 0] = [[ap + -75] + 6], ap++;
[ap + 0] = [[ap + -76] + 7], ap++;
jmp rel 44;
ap += 47;
call rel 19940;
[ap + 0] = [ap + -1] + 19939, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 48190, ap++;
call rel -14429;
[ap + 0] = [ap + -72] + 3, ap++;
[ap + 0] = [ap + -67] + [ap + -8], ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 19;
ap += 67;
[ap + 0] = [[ap + -136] + 18], ap++;
call rel 19914;
[ap + 0] = [ap + -1] + 19913, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 50900, ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -145] + 22, ap++;
[ap + 0] = [[ap + -146] + 20], ap++;
[ap + 0] = [[ap + -147] + 21], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -85], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 83;
[ap + 0] = [[ap + -136] + 12], ap++;
call rel 19888;
[ap + 0] = [ap + -1] + 19887, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 63450, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -145] + 16, ap++;
[ap + 0] = [[ap + -146] + 14], ap++;
[ap + 0] = [[ap + -147] + 15], ap++;
jmp rel 20;
ap += 89;
[ap + 0] = [[ap + -136] + 5], ap++;
call rel 19868;
[ap + 0] = [ap + -1] + 19867, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 74690, ap++;
[ap + 0] = [ap + -8] + [ap + -1], ap++;
[ap + 0] = [ap + -145] + 9, ap++;
[ap + 0] = [[ap + -146] + 7], ap++;
[ap + 0] = [[ap + -147] + 8], ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 101;
call rel 19842;
[ap + 0] = [ap + -1] + 19841, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 86880, ap++;
[ap + 0] = [ap + -112], ap++;
[ap + 0] = [ap + -112] + [ap + -2], ap++;
jmp rel 17;
ap += 104;
call rel 19826;
[ap + 0] = [ap + -1] + 19825, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 87250, ap++;
[ap + 0] = [ap + -123] + 2, ap++;
[ap + 0] = [ap + -116] + [ap + -2], ap++;
call rel -13985;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -151], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 120;
call rel 19800;
[ap + 0] = [ap + -1] + 19799, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 89310, ap++;
[ap + 0] = [ap + -134] + 1, ap++;
[ap + 0] = [ap + -132] + [ap + -2], ap++;
jmp rel 17;
ap += 126;
call rel 19783;
[ap + 0] = [ap + -1] + 19782, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 90320, ap++;
[ap + 0] = [ap + -145] + 2, ap++;
[ap + 0] = [ap + -138] + [ap + -2], ap++;
call rel 178;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -151], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 117;
call rel 19757;
[ap + 0] = [ap + -1] + 19756, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 89040, ap++;
call rel -14614;
[ap + 0] = [ap + -143] + 3, ap++;
[ap + 0] = [ap + -138] + [ap + -8], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 43;
ap += 137;
[ap + 0] = [[ap + -146] + 4], ap++;
call rel 19734;
[ap + 0] = [ap + -1] + 19733, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 91750, ap++;
[ap + 0] = [ap + -148], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -156] + 8, ap++;
[ap + 0] = [[ap + -157] + 6], ap++;
[ap + 0] = [[ap + -158] + 7], ap++;
jmp rel 48;
ap += 128;
call rel 19714;
[ap + 0] = [ap + -1] + 19713, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 100800, ap++;
call rel -14657;
[ap + 0] = [ap + -154] + 3, ap++;
[ap + 0] = [ap + -149] + [ap + -8], ap++;
[ap + 0] = [ap + -151], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 21;
ap += 148;
[ap + 0] = [[fp + -7] + 4], ap++;
call rel 19686;
[ap + 0] = [ap + -1] + 19685, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 103510, ap++;
[ap + 0] = [ap + -159], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -7] + 8, ap++;
[ap + 0] = [[fp + -7] + 6], ap++;
[ap + 0] = [[fp + -7] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -167], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 179;
call rel 19659;
[ap + 0] = [ap + -1] + 19658, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 4, ap++;
[ap + 0] = [ap + -1] + 118150, ap++;
call rel -14847;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -9] + [ap + -8], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 11039628381574106287832077254720460316281782279698735979, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 12138199771866670695640507122425990273591735515230663625743660901221, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 10040483522583698695742465227681721351500659, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 658013128136044933637489775836549388923915562612, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 153205620156611556915582253396128982386, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 185214229917399150018928636511627048852412956470463832410448741, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 153205620156611556915582241353107400050, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 598459453736763894201493125705066862, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -14] + 0];
[fp + -15] = [[fp + -14] + 1];
[fp + -13] = [[fp + -14] + 2];
[fp + -12] = [[fp + -14] + 3];
[fp + -11] = [[fp + -14] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -14]) %}
[ap + 0] = [[fp + -14] + 6], ap++;
jmp rel 656 if [ap + -1] != 0;
[ap + 0] = [[fp + -14] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -14] + 7];
[ap + -3] = [[fp + -14] + 8];
[fp + -13] = [[fp + -14] + 9];
[ap + -2] = [[fp + -14] + 10];
[fp + -10] = [[fp + -14] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -14] + 7) %}
[ap + 0] = [[fp + -14] + 13], ap++;
jmp rel 623 if [ap + -1] != 0;
[ap + 0] = [[fp + -14] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -14] + 14];
[ap + -3] = [[fp + -14] + 15];
[fp + -13] = [[fp + -14] + 16];
[ap + -2] = [[fp + -14] + 17];
[fp + -9] = [[fp + -14] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -14] + 14) %}
[ap + 0] = [[fp + -14] + 20], ap++;
jmp rel 598 if [ap + -1] != 0;
[ap + 0] = [[fp + -14] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -14] + 21];
[ap + -3] = [[fp + -14] + 22];
[fp + -13] = [[fp + -14] + 23];
[ap + -2] = [[fp + -14] + 24];
[fp + -8] = [[fp + -14] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -14] + 21) %}
[ap + 0] = [[fp + -14] + 27], ap++;
jmp rel 569 if [ap + -1] != 0;
[ap + 0] = [[fp + -14] + 26], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -14] + 28, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -16] + 0];
jmp rel 537;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -16] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -12] + [ap + -2], ap++;
[ap + 0] = [fp + -16] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -13] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -7] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 504 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 474;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -12] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -13] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 441 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 411;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -12] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -13] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 378 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 348;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel [fp + -4];
jmp rel 193;
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -12] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -13] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 187;
ap += 2;
call rel -11653;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -13] + 10650, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 253;
ap += 15;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -1] + 12190, ap++;
[ap + 0] = [ap + -29] + 9, ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
[ap + 0] = [[ap + -31] + 8], ap++;
jmp rel 261;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -13] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 125;
ap += 2;
call rel -11715;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -13] + 10650, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 191;
ap += 15;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -1] + 12190, ap++;
[ap + 0] = [ap + -29] + 9, ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
[ap + 0] = [[ap + -31] + 8], ap++;
jmp rel 199;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -12] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -13] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 63;
ap += 2;
call rel -11777;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -13] + 10650, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 129;
ap += 15;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -1] + 12190, ap++;
[ap + 0] = [ap + -29] + 9, ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
[ap + 0] = [[ap + -31] + 8], ap++;
jmp rel 137;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -12] + [ap + -4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -13] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 113 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 78;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -19] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 46;
[ap + 1] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -12] + [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -13] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel -11890;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -13] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 2;
call rel -11906;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = [ap + -13] + 10650, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 15;
[ap + 0] = [[ap + -27] + 5], ap++;
[ap + 0] = [ap + -1] + 12190, ap++;
[ap + 0] = [ap + -29] + 9, ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
[ap + 0] = [[ap + -31] + 8], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 21;
call rel -11946;
[ap + 0] = [ap + -37] + 1, ap++;
[ap + 0] = [ap + -32] + 23430, ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 33;
[ap + 0] = [[ap + -43] + 5], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -2] + 24880, ap++;
[ap + 0] = [ap + -46] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -49] + 7], ap++;
[ap + 0] = [[ap + -50] + 8], ap++;
ret;
ap += 33;
call rel -11977;
[ap + 0] = [ap + -49] + 1, ap++;
[ap + 0] = [ap + -44] + 35280, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 45;
[ap + 0] = [[ap + -55] + 5], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 36730, ap++;
[ap + 0] = [ap + -58] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -61] + 7], ap++;
[ap + 0] = [[ap + -62] + 8], ap++;
ret;
ap += 45;
call rel -12008;
[ap + 0] = [ap + -61] + 1, ap++;
[ap + 0] = [ap + -56] + 47130, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 57;
[ap + 0] = [[ap + -67] + 5], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -2] + 48580, ap++;
[ap + 0] = [ap + -70] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -73] + 7], ap++;
[ap + 0] = [[ap + -74] + 8], ap++;
ret;
ap += 57;
call rel -12039;
[ap + 0] = [fp + -16] + 1, ap++;
[ap + 0] = [ap + -68] + 58980, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 70;
[ap + 0] = [[fp + -14] + 26], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [ap + -2] + 60520, ap++;
[ap + 0] = [fp + -14] + 30, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -14] + 28], ap++;
[ap + 0] = [[fp + -14] + 29], ap++;
ret;
ap += 71;
[ap + 0] = [[fp + -14] + 19], ap++;
[ap + 0] = [ap + -1] + 71110, ap++;
[ap + 0] = [fp + -14] + 23, ap++;
[ap + 0] = [[fp + -14] + 21], ap++;
[ap + 0] = [[fp + -14] + 22], ap++;
jmp rel 11;
ap += 76;
[ap + 0] = [[fp + -14] + 12], ap++;
[ap + 0] = [ap + -1] + 82260, ap++;
[ap + 0] = [fp + -14] + 16, ap++;
[ap + 0] = [[fp + -14] + 14], ap++;
[ap + 0] = [[fp + -14] + 15], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 85;
[ap + 0] = [[fp + -14] + 5], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [ap + -2] + 93670, ap++;
[ap + 0] = [fp + -14] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -14] + 7], ap++;
[ap + 0] = [[fp + -14] + 8], ap++;
ret;
jmp rel [fp + -15];
jmp rel 58;
jmp rel 38;
jmp rel 21;
[ap + 0] = 480980096152129666760236097399191395560663640307128160512633360588208196700, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 16479;
ret;
ap += 14;
[ap + 0] = 79629530307499767974402486524634597691335667662363045715024161428584374869, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -9] = [[fp + -5] + 1];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 14;
[ap + 0] = 1288147017790903004093628983427727504433832220618792097782809605079763782910, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
ap += 14;
[ap + 0] = 1641204406088898563287720492974135054511277880740023862506662708501359245154, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6551058959469984134320361281674212942343054011646963316, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7202965500183391065739474659279725755700646600738645446824977329780, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 940 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 891;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 835 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 775 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 746 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 708 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 662 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -12] + 0];
jmp rel 615;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 569 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 520;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
%{ memory[ap + 0] = (memory[ap + -17] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -18] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -17] + 3];
jmp rel 471;
[ap + 1] = [ap + -18] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -17] + 3];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -19] + 4, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -16] + 0];
[ap + -4] = [[ap + -16] + 1];
[fp + -4] = [[ap + -16] + 2];
[ap + -3] = [[ap + -16] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -16]) %}
[ap + 0] = [[ap + -16] + 5], ap++;
jmp rel 425 if [ap + -1] != 0;
[ap + 0] = [[ap + -17] + 4], ap++;
[ap + 0] = [[ap + -18] + 6], ap++;
[ap + 0] = [ap + -19] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 374 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 327;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 281 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 236;
[ap + 1] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 16122;
jmp rel 194 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 164 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[ap + -43] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 123;
[ap + 1] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -4] = [[ap + -15] + 1];
[fp + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 5], ap++;
jmp rel 77 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 4], ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 29 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 11;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -162], ap++;
[ap + 0] = [ap + -149], ap++;
[ap + 0] = [ap + -140], ap++;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = [ap + -118], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -83], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -29], ap++;
ret;
call rel -15935;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -32] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -35] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [[ap + -46] + 7], ap++;
ret;
ap += 16;
call rel -12649;
[ap + 0] = [ap + -35] + 1, ap++;
[ap + 0] = [ap + -27] + 12250, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 27;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -29] + 13610, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
ret;
ap += 28;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -35] + 13800, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -42], ap++;
ret;
ap += 61;
call rel -12733;
[ap + 0] = [ap + -78] + 1, ap++;
[ap + 0] = [ap + -72] + 27940, ap++;
[ap + 0] = [ap + -75], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 74;
[ap + 0] = [[ap + -88] + 4], ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -2] + 29480, ap++;
[ap + 0] = [ap + -91] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -101] + 6], ap++;
[ap + 0] = [[ap + -102] + 7], ap++;
ret;
ap += 74;
call rel -12792;
[ap + 0] = [ap + -94] + 3, ap++;
[ap + 0] = [ap + -85] + 39780, ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 74;
call rel -15549;
[ap + 0] = [ap + -94] + 3, ap++;
[ap + 0] = [ap + -89] + 39880, ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 90;
[ap + 0] = [[ap + -107] + 4], ap++;
[ap + 0] = [ap + -94], ap++;
[ap + 0] = [ap + -2] + 41930, ap++;
[ap + 0] = [ap + -110] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -120] + 6], ap++;
[ap + 0] = [[ap + -121] + 7], ap++;
ret;
ap += 90;
call rel -12881;
[ap + 0] = [ap + -113] + 4, ap++;
[ap + 0] = [ap + -101] + 52230, ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 94;
call rel -16435;
[ap + 0] = [ap + -113] + 3, ap++;
[ap + 0] = [ap + -108] + 52760, ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 109;
[ap + 0] = [[ap + -120] + 4], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -2] + 54720, ap++;
[ap + 0] = [ap + -123] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -133] + 6], ap++;
[ap + 0] = [[ap + -134] + 7], ap++;
ret;
ap += 109;
call rel -12970;
[ap + 0] = [ap + -127] + 1, ap++;
[ap + 0] = [ap + -120] + 65020, ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 123;
[ap + 0] = [[ap + -131] + 4], ap++;
[ap + 0] = [ap + -127], ap++;
[ap + 0] = [ap + -2] + 66650, ap++;
[ap + 0] = [ap + -134] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -144] + 6], ap++;
[ap + 0] = [[ap + -145] + 7], ap++;
ret;
ap += 113;
call rel -16391;
[ap + 0] = [ap + -132] + 3, ap++;
[ap + 0] = [ap + -127] + 75510, ap++;
[ap + 0] = [ap + -129], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 128;
[ap + 0] = [[ap + -136] + 4], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -2] + 77670, ap++;
[ap + 0] = [ap + -139] + 8, ap++;
[ap + 0] = [[ap + -140] + 6], ap++;
[ap + 0] = [[ap + -141] + 7], ap++;
jmp rel 47;
ap += 123;
call rel -16416;
[ap + 0] = [ap + -142] + 3, ap++;
[ap + 0] = [ap + -137] + 87180, ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 138;
[ap + 0] = [[ap + -150] + 4], ap++;
[ap + 0] = [ap + -142], ap++;
[ap + 0] = [ap + -2] + 89340, ap++;
[ap + 0] = [ap + -153] + 8, ap++;
[ap + 0] = [[ap + -154] + 6], ap++;
[ap + 0] = [[ap + -155] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 142;
call rel -16647;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -156] + 100000, ap++;
[ap + 0] = [ap + -158], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
ap += 157;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 101960, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
jmp rel [fp + -4];
jmp rel 63;
jmp rel 42;
jmp rel 21;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 109908531191763169338062989482604822258595819875065434299655524, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -8] = [[ap + -1] + 0];
[fp + -7] = [[ap + -1] + 1];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [[ap + -2] + 2];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 3, ap++;
call rel 12196;
jmp rel 78 if [ap + -3] != 0;
[fp + -4] = [[ap + -1] + 0];
[fp + -3] = [[ap + -1] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 109138120487751959668969574629513358330860621822210092206051517822642870896, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -10] + 0];
[ap + -5] = [[fp + -10] + 1];
[fp + -9] = [[fp + -10] + 2];
[ap + -4] = [[fp + -10] + 3];
[ap + -3] = [[fp + -10] + 4];
[ap + -2] = [[fp + -10] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 7], ap++;
jmp rel 48 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 6], ap++;
[ap + 0] = [[fp + -10] + 8], ap++;
[ap + 0] = [[fp + -10] + 9], ap++;
[ap + 0] = [fp + -10] + 10, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 27;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + 0] = [ap + -3] + 100, ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
ret;
call rel 10086;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [[fp + -10] + 6], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2] + 1400, ap++;
[ap + 0] = [fp + -10] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 8], ap++;
[ap + 0] = [[fp + -10] + 9], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 13000, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 25590074060429625524688911256539894306027619241389926, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6551058959469984134320259154732780015876736366905881715, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5958153414640022796739197267245631605665380, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7269940625183576326045731942707956293120310, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5958153414640022796739197267245609945753966, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 218;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[fp + 1] = [[fp + -4] + 0];
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 188;
[fp + 0] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 136 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel -5070;
jmp rel 103 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 93 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 47 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -19] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -4] + 770, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 7;
ap += 9;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -15] + 1320, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 2010, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 27;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2710, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6] + 5380, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -3] + 6970, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 7560, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -13] = [[fp + -3] + 0];
[fp + -12] = [[fp + -3] + 1];
[fp + -11] = [[fp + -3] + 2];
[fp + -10] = [[fp + -3] + 3];
[fp + -9] = [[fp + -3] + 4];
[fp + -8] = [[fp + -3] + 5];
[fp + -7] = [[fp + -3] + 6];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
jmp rel [fp + -6];
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -5] = [[ap + -1] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 1153 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 1102;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 1049 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -17] + 7];
[ap + -4] = [[ap + -17] + 8];
[fp + -4] = [[ap + -17] + 9];
[ap + -3] = [[ap + -17] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -17] + 7) %}
[ap + 0] = [[ap + -17] + 12], ap++;
jmp rel 999 if [ap + -1] != 0;
[ap + 0] = [[ap + -18] + 11], ap++;
[ap + 0] = [[ap + -19] + 13], ap++;
[ap + 0] = [ap + -20] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -14] + 0], ap++;
[ap + 3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -19] + 2];
jmp rel 937 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -14] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -20] + 1];
jmp rel 908;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -20] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -22] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 879 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 841 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 793;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 745 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -20], ap++;
jmp rel 7 if [ap + -5] != 0;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -3] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -15] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -16] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -15] + 0];
jmp rel 685;
[ap + 1] = [ap + -16] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -15] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -17] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -4] = [[ap + -14] + 1];
[fp + -4] = [[ap + -14] + 2];
[ap + -3] = [[ap + -14] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 5], ap++;
jmp rel 637 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 4], ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 584 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 535;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 487 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 434 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 385;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 332 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 270 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -13] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 243;
[ap + 1] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[fp + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 214 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 176 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -28] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -29] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 130;
[ap + 1] = [ap + -29] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[fp + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 82 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 32 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 10;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1070, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -137], ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -99], ap++;
[ap + -10] = [ap + 0] + [ap + -98], ap++;
[ap + 0] = [ap + -88], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -30], ap++;
ret;
call rel -16939;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -29] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -32] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [[ap + -44] + 7], ap++;
ret;
ap += 16;
call rel -14274;
[ap + 0] = [ap + -35] + 2, ap++;
[ap + 0] = [ap + -27] + 12250, ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 11;
call rel -17668;
[ap + 0] = [ap + -30] + 3, ap++;
[ap + 0] = [ap + -25] + 11430, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 26;
[ap + 0] = [[ap + -39] + 4], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -2] + 13590, ap++;
[ap + 0] = [ap + -42] + 8, ap++;
[ap + 0] = [[ap + -43] + 6], ap++;
[ap + 0] = [[ap + -44] + 7], ap++;
jmp rel 62;
ap += 26;
call rel -14331;
[ap + 0] = [ap + -45] + 2, ap++;
[ap + 0] = [ap + -37] + 23890, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 26;
call rel -17706;
[ap + 0] = [ap + -45] + 3, ap++;
[ap + 0] = [ap + -40] + 23720, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 41;
[ap + 0] = [[ap + -55] + 4], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -2] + 25880, ap++;
[ap + 0] = [ap + -58] + 8, ap++;
[ap + 0] = [[ap + -59] + 6], ap++;
[ap + 0] = [[ap + -60] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 46;
call rel -14417;
[ap + 0] = [ap + -66] + 3, ap++;
[ap + 0] = [ap + -57] + 36630, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 46;
call rel -17793;
[ap + 0] = [ap + -66] + 3, ap++;
[ap + 0] = [ap + -61] + 36730, ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 62;
[ap + 0] = [[ap + -76] + 4], ap++;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -2] + 38780, ap++;
[ap + 0] = [ap + -79] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -90] + 6], ap++;
[ap + 0] = [[ap + -91] + 7], ap++;
ret;
ap += 62;
call rel -14512;
[ap + 0] = [ap + -82] + 3, ap++;
[ap + 0] = [ap + -73] + 49080, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 62;
call rel -17888;
[ap + 0] = [ap + -82] + 3, ap++;
[ap + 0] = [ap + -77] + 49180, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 78;
[ap + 0] = [[ap + -93] + 4], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -2] + 51230, ap++;
[ap + 0] = [ap + -96] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -107] + 6], ap++;
[ap + 0] = [[ap + -108] + 7], ap++;
ret;
ap += 78;
call rel -14607;
[ap + 0] = [ap + -99] + 1, ap++;
[ap + 0] = [ap + -91] + 61530, ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 95;
[ap + 0] = [[ap + -109] + 4], ap++;
[ap + 0] = [ap + -99], ap++;
[ap + 0] = [ap + -2] + 63630, ap++;
[ap + 0] = [ap + -112] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -123] + 6], ap++;
[ap + 0] = [[ap + -124] + 7], ap++;
ret;
ap += 95;
call rel -14670;
[ap + 0] = [ap + -115] + 2, ap++;
[ap + 0] = [ap + -106] + 73930, ap++;
[ap + 0] = [ap + -112], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 91;
call rel -18064;
[ap + 0] = [ap + -110] + 3, ap++;
[ap + 0] = [ap + -105] + 73200, ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 106;
[ap + 0] = [[ap + -120] + 4], ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = [ap + -2] + 75360, ap++;
[ap + 0] = [ap + -123] + 8, ap++;
[ap + 0] = [[ap + -124] + 6], ap++;
[ap + 0] = [[ap + -125] + 7], ap++;
jmp rel 62;
ap += 106;
call rel -14727;
[ap + 0] = [ap + -132] + 2, ap++;
[ap + 0] = [ap + -117] + 85660, ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 107;
call rel -18102;
[ap + 0] = [ap + -132] + 3, ap++;
[ap + 0] = [ap + -121] + 85580, ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 122;
[ap + 0] = [[ap + -140] + 11], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -2] + 87740, ap++;
[ap + 0] = [ap + -143] + 15, ap++;
[ap + 0] = [[ap + -144] + 13], ap++;
[ap + 0] = [[ap + -145] + 14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 133;
[ap + 0] = [[ap + -145] + 4], ap++;
[ap + 0] = [ap + -137], ap++;
[ap + 0] = [ap + -2] + 99230, ap++;
[ap + 0] = [ap + -148] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -159] + 6], ap++;
[ap + 0] = [[ap + -160] + 7], ap++;
ret;
ap += 132;
call rel -18368;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -146] + 109440, ap++;
[ap + 0] = [ap + -148], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
ap += 147;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 111400, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -15] + 0];
[fp + -16] = [[fp + -15] + 1];
[fp + -14] = [[fp + -15] + 2];
[fp + -13] = [[fp + -15] + 3];
[fp + -12] = [[fp + -15] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -15]) %}
[ap + 0] = [[fp + -15] + 6], ap++;
jmp rel 518 if [ap + -1] != 0;
[ap + 0] = [[fp + -15] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -15] + 7];
[ap + -3] = [[fp + -15] + 8];
[fp + -14] = [[fp + -15] + 9];
[ap + -2] = [[fp + -15] + 10];
[fp + -11] = [[fp + -15] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -15] + 7) %}
[ap + 0] = [[fp + -15] + 13], ap++;
jmp rel 489 if [ap + -1] != 0;
[ap + 0] = [[fp + -15] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -13] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -15] + 14];
[ap + -3] = [[fp + -15] + 15];
[fp + -14] = [[fp + -15] + 16];
[ap + -2] = [[fp + -15] + 17];
[fp + -10] = [[fp + -15] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -15] + 14) %}
[ap + 0] = [[fp + -15] + 20], ap++;
jmp rel 455 if [ap + -1] != 0;
[ap + 0] = [[fp + -15] + 19], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -15] + 21, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -17] + 0];
jmp rel 423;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -17] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [fp + -17] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -9] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 393 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 361;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -8] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 328 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 298;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -7] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 265 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 235;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 202 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 172;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 134 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 104;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -22] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -23] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -23] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -13] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -14] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel -15197;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 7;
[ap + 0] = [[ap + -17] + 5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -2] + 11200, ap++;
[ap + 0] = [ap + -20] + 9, ap++;
[ap + 0] = [[ap + -21] + 7], ap++;
[ap + 0] = [[ap + -22] + 8], ap++;
jmp rel 28;
ap += 12;
call rel -15225;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22150, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 19;
[ap + 0] = [[ap + -29] + 5], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -2] + 23150, ap++;
[ap + 0] = [ap + -32] + 9, ap++;
[ap + 0] = [[ap + -33] + 7], ap++;
[ap + 0] = [[ap + -34] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 24;
call rel -15261;
[ap + 0] = [ap + -40] + 1, ap++;
[ap + 0] = [ap + -35] + 34000, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 36;
[ap + 0] = [[ap + -46] + 5], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 35450, ap++;
[ap + 0] = [ap + -49] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
[ap + 0] = [[ap + -53] + 8], ap++;
ret;
ap += 36;
call rel -15292;
[ap + 0] = [ap + -52] + 1, ap++;
[ap + 0] = [ap + -47] + 45850, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 48;
[ap + 0] = [[ap + -58] + 5], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 47300, ap++;
[ap + 0] = [ap + -61] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -64] + 7], ap++;
[ap + 0] = [[ap + -65] + 8], ap++;
ret;
ap += 48;
call rel -15323;
[ap + 0] = [ap + -64] + 1, ap++;
[ap + 0] = [ap + -59] + 57700, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 60;
[ap + 0] = [[ap + -70] + 5], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -2] + 59150, ap++;
[ap + 0] = [ap + -73] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -76] + 7], ap++;
[ap + 0] = [[ap + -77] + 8], ap++;
ret;
ap += 60;
call rel -15354;
[ap + 0] = [ap + -77] + 1, ap++;
[ap + 0] = [ap + -71] + 69550, ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 68;
[ap + 0] = [[ap + -78] + 5], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -2] + 70540, ap++;
[ap + 0] = [ap + -81] + 9, ap++;
[ap + 0] = [[ap + -82] + 7], ap++;
[ap + 0] = [[ap + -83] + 8], ap++;
jmp rel 28;
ap += 73;
call rel -15382;
[ap + 0] = [fp + -17] + 1, ap++;
[ap + 0] = [ap + -84] + 81490, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 81;
[ap + 0] = [[fp + -15] + 19], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [ap + -2] + 82580, ap++;
[ap + 0] = [fp + -15] + 23, ap++;
[ap + 0] = [[fp + -15] + 21], ap++;
[ap + 0] = [[fp + -15] + 22], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 91;
[ap + 0] = [[fp + -15] + 12], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [ap + -2] + 94080, ap++;
[ap + 0] = [fp + -15] + 16, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -15] + 14], ap++;
[ap + 0] = [[fp + -15] + 15], ap++;
ret;
ap += 96;
[ap + 0] = [[fp + -15] + 5], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [ap + -2] + 105130, ap++;
[ap + 0] = [fp + -15] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -15] + 7], ap++;
[ap + 0] = [[fp + -15] + 8], ap++;
ret;
jmp rel [fp + -13];
jmp rel 78;
jmp rel 62;
jmp rel 44;
jmp rel 30;
jmp rel 16;
[ap + 0] = 370242577458668682545045119996190494682028311340263200323079561980133513667, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
[ap + 0] = 429818349554338566495067474764254361714247349111439606614249586489517433437, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = 981091654700264506537564150529111462688929157948966999320884741938802189658, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = 1551606342435656187459620412714848484679274663429404088114513552336284468182, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -12] = [[fp + -5] + 1];
[fp + -11] = [[fp + -5] + 2];
[fp + -10] = [[fp + -5] + 3];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
[ap + 0] = 1524957347993580362782972313714593590833763121067343414496233623101384695409, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -5] + 3];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
[ap + 0] = 100496441654634573157473344853726243145076371777105830457225443166473794816, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 32679328859932284685484343273296638558422352102053617774699179620, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1947839788194434922068377765916212200355044790868141896819, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1771549967265341294540465269006524149069080942, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1771549967265341294540465269006524170728992356, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 453516791619927371402359108865670182157507196517, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 383 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 0], ap++;
[ap + 3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 2];
jmp rel 331 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 302 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 264 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 226 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 185;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 142 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -12] + 0];
jmp rel 103;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 65 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 25 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 11;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -69], ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -25], ap++;
ret;
call rel -19140;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -27] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -30] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -36] + 6], ap++;
[ap + 0] = [[ap + -37] + 7], ap++;
ret;
ap += 16;
call rel -15838;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -27] + 12250, ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 30;
[ap + 0] = [[ap + -42] + 4], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -2] + 13880, ap++;
[ap + 0] = [ap + -45] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -51] + 6], ap++;
[ap + 0] = [[ap + -52] + 7], ap++;
ret;
ap += 29;
call rel -19405;
[ap + 0] = [ap + -48] + 3, ap++;
[ap + 0] = [ap + -43] + 24090, ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 44;
[ap + 0] = [[ap + -52] + 4], ap++;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -2] + 26050, ap++;
[ap + 0] = [ap + -55] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -61] + 6], ap++;
[ap + 0] = [[ap + -62] + 7], ap++;
ret;
ap += 34;
call rel -19286;
[ap + 0] = [ap + -53] + 3, ap++;
[ap + 0] = [ap + -48] + 34910, ap++;
[ap + 0] = [ap + -50], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 49;
[ap + 0] = [[ap + -57] + 4], ap++;
[ap + 0] = [ap + -53], ap++;
[ap + 0] = [ap + -2] + 37070, ap++;
[ap + 0] = [ap + -60] + 8, ap++;
[ap + 0] = [[ap + -61] + 6], ap++;
[ap + 0] = [[ap + -62] + 7], ap++;
jmp rel 39;
ap += 44;
call rel -19311;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -58] + 46580, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
ap += 59;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 48740, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 0];
[fp + -11] = [[fp + -10] + 1];
[fp + -9] = [[fp + -10] + 2];
[fp + -8] = [[fp + -10] + 3];
[fp + -7] = [[fp + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10]) %}
[ap + 0] = [[fp + -10] + 6], ap++;
jmp rel 159 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 7];
[ap + -3] = [[fp + -10] + 8];
[fp + -9] = [[fp + -10] + 9];
[ap + -2] = [[fp + -10] + 10];
[fp + -6] = [[fp + -10] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 7) %}
[ap + 0] = [[fp + -10] + 13], ap++;
jmp rel 134 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 14];
[ap + -3] = [[fp + -10] + 15];
[fp + -9] = [[fp + -10] + 16];
[ap + -2] = [[fp + -10] + 17];
[fp + -5] = [[fp + -10] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 14) %}
[ap + 0] = [[fp + -10] + 20], ap++;
jmp rel 105 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -10] + 21];
[ap + -3] = [[fp + -10] + 22];
[fp + -9] = [[fp + -10] + 23];
[ap + -2] = [[fp + -10] + 24];
[fp + -4] = [[fp + -10] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -10] + 21) %}
[ap + 0] = [[fp + -10] + 27], ap++;
jmp rel 76 if [ap + -1] != 0;
[ap + 0] = [[fp + -10] + 26], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -10] + 28, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -12] + 0];
jmp rel 46;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -8] + [ap + -2], ap++;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -9] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel -16112;
[ap + 0] = [fp + -12] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 13;
[ap + 0] = [[fp + -10] + 26], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 11840, ap++;
[ap + 0] = [fp + -10] + 30, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 28], ap++;
[ap + 0] = [[fp + -10] + 29], ap++;
ret;
ap += 18;
[ap + 0] = [[fp + -10] + 19], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -2] + 22890, ap++;
[ap + 0] = [fp + -10] + 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -10] + 21], ap++;
[ap + 0] = [[fp + -10] + 22], ap++;
ret;
ap += 19;
[ap + 0] = [[fp + -10] + 12], ap++;
[ap + 0] = [ap + -1] + 33480, ap++;
[ap + 0] = [fp + -10] + 16, ap++;
[ap + 0] = [[fp + -10] + 14], ap++;
[ap + 0] = [[fp + -10] + 15], ap++;
jmp rel 11;
ap += 24;
[ap + 0] = [[fp + -10] + 5], ap++;
[ap + 0] = [ap + -1] + 44630, ap++;
[ap + 0] = [fp + -10] + 9, ap++;
[ap + 0] = [[fp + -10] + 7], ap++;
[ap + 0] = [[fp + -10] + 8], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 1012145541007632596549820943640586334986020887666892310094110554818458802035, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6] + 6, ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -5] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 145 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 111 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 248;
jmp rel 85 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + -55] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 61;
[ap + -1] = [[ap + -9] + 0];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -11], ap++;
call rel -855;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -30] + 1, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -30] + 0];
[ap + -3] = [[ap + -30] + 1];
[ap + -7] = [[ap + -30] + 2];
[ap + -6] = [[ap + -30] + 3];
[ap + -5] = [[ap + -30] + 4];
[ap + -4] = [[ap + -30] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -30]) %}
[ap + 0] = [[ap + -30] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -31] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -35] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -31] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -35] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -37] + 8], ap++;
[ap + 0] = [[ap + -38] + 9], ap++;
ret;
ap += 24;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -29] + 13560, ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 28;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = [ap + -34] + 14190, ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -35], ap++;
[ap + 0] = [ap + -35], ap++;
ret;
ap += 61;
call rel -19097;
[ap + 0] = [ap + -81] + 3, ap++;
[ap + 0] = [ap + -76] + 38940, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 77;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -2] + 41090, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1947839788194434922068377765916212200355044806196846290276, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5817842327937750556956116149624, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -6] = [[fp + -8] + 0];
[fp + -5] = [[fp + -8] + 1];
[ap + 0] = [[fp + -8] + 2], ap++;
[ap + -1] = [[fp + -8] + 3];
[fp + -4] = [[fp + -8] + 4];
[ap + 0] = [[fp + -8] + 5], ap++;
[ap + -1] = [[fp + -8] + 6];
[fp + -3] = [[fp + -8] + 7];
[ap + 0] = [[fp + -8] + 8], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -10] + 0], ap++;
[ap + -4] = [[fp + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -10] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -10] + 1], ap++;
[ap + -7] = [[fp + -10] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel -879;
[ap + 0] = [fp + -8] + 9, ap++;
jmp rel 32 if [ap + -8] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 14 if [ap + -8] != 0;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12] + 90, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1611151426568084651779594097106442817920859282877862904177374214148749871818, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 160 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -5] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -5] + 1], ap++;
[ap + -5] = [[fp + -5] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 126 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -5] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -5] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 403807365716931852510979360495474669369490483994409651540023026512438364891, ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -5] = [[ap + -9] + 1];
[ap + -4] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 5], ap++;
jmp rel 86 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 4], ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 65536 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 65536, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961158008831, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 55 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768145920, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 6;
[ap + 0] = [ap + -23] * [ap + -11], ap++;
[ap + 0] = [ap + -10] + 230, ap++;
%{ memory[ap + 0] = memory[ap + -2] < 4294967296 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -19] + 2];
jmp rel 25;
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -19] + 2];
[ap + 0] = 10000, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -5], memory[ap + -1]) %}
[ap + 4] = [[ap + -20] + 3], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -23] + 4], ap++;
[ap + -1] = [[ap + -24] + 5], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -10] = [ap + -3] + [ap + -1];
[ap + 0] = [ap + -25] + 6, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
ret;
call rel -20042;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -10] + 210, ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -3246;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 16;
[ap + 0] = [[ap + -26] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 2050, ap++;
[ap + 0] = [ap + -29] + 8, ap++;
[ap + 0] = [[ap + -30] + 6], ap++;
[ap + 0] = [[ap + -31] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 12;
call rel -19404;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -27] + 11820, ap++;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 28;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -2] + 13970, ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1947839788194434922068377928335178510969695615032644236653, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 30207964442802130652109113413655141757161980122037063303934601061, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -14] = [[fp + -3] + 0];
[fp + -13] = [[fp + -3] + 1];
[fp + -12] = [[fp + -3] + 2];
[fp + -11] = [[fp + -3] + 3];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
jmp rel 6 if [fp + -10] != 0;
[ap + 0] = 0, ap++;
jmp rel 4;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + -9] = [[ap + -2] + 1];
[fp + -8] = [[ap + -2] + 2];
[fp + -7] = [[ap + -2] + 3];
[fp + -6] = [[ap + -2] + 4];
[fp + -5] = [[ap + -2] + 5];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 6, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8466698336946495152679820938685440523890257735238333907862903743333, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 0];
[fp + -17] = [[fp + -16] + 1];
[fp + -15] = [[fp + -16] + 2];
[fp + -14] = [[fp + -16] + 3];
[fp + -13] = [[fp + -16] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16]) %}
[ap + 0] = [[fp + -16] + 6], ap++;
jmp rel 976 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 7];
[ap + -3] = [[fp + -16] + 8];
[fp + -15] = [[fp + -16] + 9];
[ap + -2] = [[fp + -16] + 10];
[fp + -12] = [[fp + -16] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 7) %}
[ap + 0] = [[fp + -16] + 13], ap++;
jmp rel 943 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 14];
[ap + -3] = [[fp + -16] + 15];
[fp + -15] = [[fp + -16] + 16];
[ap + -2] = [[fp + -16] + 17];
[fp + -11] = [[fp + -16] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 14) %}
[ap + 0] = [[fp + -16] + 20], ap++;
jmp rel 918 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 21];
[ap + -3] = [[fp + -16] + 22];
[fp + -15] = [[fp + -16] + 23];
[ap + -2] = [[fp + -16] + 24];
[fp + -10] = [[fp + -16] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 21) %}
[ap + 0] = [[fp + -16] + 27], ap++;
jmp rel 889 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 26], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -16] + 28, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -18] + 0];
jmp rel 857;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -18] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [fp + -18] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -9] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 819 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 789;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -8] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 759 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -22] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -23] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 729;
[ap + 1] = [ap + -23] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -7] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 696 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 666;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel [fp + -6];
jmp rel 385;
jmp rel 321;
jmp rel 257;
jmp rel 193;
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 373;
ap += 26;
call rel -16983;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 565;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 573;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 311;
ap += 26;
call rel -17045;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 503;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 511;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 249;
ap += 26;
call rel -17107;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 441;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 449;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 187;
ap += 26;
call rel -17169;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 379;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 387;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 4, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 125;
ap += 26;
call rel -17231;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 317;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 325;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 5, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 63;
ap += 26;
call rel -17293;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 255;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 263;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 6, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 239 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 204;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -19] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 170;
[ap + 1] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 137 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 107;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel -17470;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
ret;
ap += 12;
call rel -17501;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22150, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 24;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 23600, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 7], ap++;
[ap + 0] = [[ap + -41] + 8], ap++;
ret;
ap += 24;
call rel -17532;
[ap + 0] = [ap + -37] + 1, ap++;
[ap + 0] = [ap + -37] + 34000, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
call rel -17548;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 45;
call rel -17588;
[ap + 0] = [ap + -61] + 1, ap++;
[ap + 0] = [ap + -56] + 47130, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 57;
[ap + 0] = [[ap + -67] + 5], ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -2] + 48580, ap++;
[ap + 0] = [ap + -70] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -73] + 7], ap++;
[ap + 0] = [[ap + -74] + 8], ap++;
ret;
ap += 57;
call rel -17619;
[ap + 0] = [ap + -73] + 1, ap++;
[ap + 0] = [ap + -68] + 58980, ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 64;
[ap + 0] = [[ap + -74] + 5], ap++;
[ap + 0] = [ap + -68], ap++;
[ap + 0] = [ap + -2] + 59880, ap++;
[ap + 0] = [ap + -77] + 9, ap++;
[ap + 0] = [[ap + -78] + 7], ap++;
[ap + 0] = [[ap + -79] + 8], ap++;
jmp rel 28;
ap += 69;
call rel -17647;
[ap + 0] = [ap + -85] + 1, ap++;
[ap + 0] = [ap + -80] + 70830, ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 76;
[ap + 0] = [[ap + -86] + 5], ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = [ap + -2] + 71830, ap++;
[ap + 0] = [ap + -89] + 9, ap++;
[ap + 0] = [[ap + -90] + 7], ap++;
[ap + 0] = [[ap + -91] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 81;
call rel -17683;
[ap + 0] = [fp + -18] + 1, ap++;
[ap + 0] = [ap + -92] + 82680, ap++;
[ap + 0] = [ap + -94], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 94;
[ap + 0] = [[fp + -16] + 26], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -2] + 84220, ap++;
[ap + 0] = [fp + -16] + 30, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -16] + 28], ap++;
[ap + 0] = [[fp + -16] + 29], ap++;
ret;
ap += 95;
[ap + 0] = [[fp + -16] + 19], ap++;
[ap + 0] = [ap + -1] + 94810, ap++;
[ap + 0] = [fp + -16] + 23, ap++;
[ap + 0] = [[fp + -16] + 21], ap++;
[ap + 0] = [[fp + -16] + 22], ap++;
jmp rel 11;
ap += 100;
[ap + 0] = [[fp + -16] + 12], ap++;
[ap + 0] = [ap + -1] + 105960, ap++;
[ap + 0] = [fp + -16] + 16, ap++;
[ap + 0] = [[fp + -16] + 14], ap++;
[ap + 0] = [[fp + -16] + 15], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 109;
[ap + 0] = [[fp + -16] + 5], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -2] + 117370, ap++;
[ap + 0] = [fp + -16] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -16] + 7], ap++;
[ap + 0] = [[fp + -16] + 8], ap++;
ret;
jmp rel [fp + -16];
jmp rel 95;
jmp rel 76;
jmp rel 58;
jmp rel 40;
jmp rel 22;
[ap + 0] = 1161421884907165684534722683959634395527710082395067253614003966574012122326, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 11094;
ret;
ap += 15;
[ap + 0] = 1524957347993580362782972313714593590833763121067343414496233623101384695409, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -5] + 3];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
ap += 15;
[ap + 0] = 100496441654634573157473344853726243145076371777105830457225443166473794816, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 15;
[ap + 0] = 522360422089498844460372820427454763610214638166678315907573452224372440002, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 15;
[ap + 0] = 567973069892247199858674982226281251448771553086565275180494235891264391140, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -5] + 2];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 15;
[ap + 0] = 1164085952833259089211697452575449254046721108963196566204858881276624768985, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 30079754995947265970385662090878901931371247240048244, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 1265 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 1212;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 1152 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1088 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 1059 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1021 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 971 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -11] + 7, ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -12] + 0];
jmp rel 920;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 865 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 801 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -13] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 774;
[ap + 1] = [ap + -14] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[fp + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 745 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 707 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -28] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -29] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 659;
[ap + 1] = [ap + -29] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[fp + -4] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 5], ap++;
jmp rel 609 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 4], ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 554 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 503;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 10688;
jmp rel 457 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 423 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[ap + -49] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -50] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 378;
[ap + 1] = [ap + -50] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -4] = [[ap + -15] + 1];
[fp + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 5], ap++;
jmp rel 328 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 4], ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 273 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 222;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 172 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 119 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 70;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 23 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -182], ap++;
[ap + 0] = [ap + -169], ap++;
[ap + 0] = [ap + -160], ap++;
[ap + 0] = [ap + -148], ap++;
[ap + 0] = [ap + -138], ap++;
[ap + 0] = [ap + -124], ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [[ap + -30] + 6], ap++;
ret;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
ret;
call rel -18403;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -11] + 10300, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
call rel -21779;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15] + 10400, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 12350, ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [[ap + -46] + 7], ap++;
ret;
ap += 16;
call rel -18502;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -27] + 22650, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 16;
call rel -21880;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -31] + 22750, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 32;
[ap + 0] = [[ap + -48] + 4], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -2] + 24800, ap++;
[ap + 0] = [ap + -51] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -63] + 6], ap++;
[ap + 0] = [[ap + -64] + 7], ap++;
ret;
ap += 32;
call rel -18603;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -43] + 35100, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 43;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -45] + 36460, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60], ap++;
ret;
ap += 44;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51] + 36650, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60], ap++;
ret;
ap += 83;
call rel -18699;
[ap + 0] = [ap + -103] + 3, ap++;
[ap + 0] = [ap + -94] + 51630, ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 83;
call rel -22077;
[ap + 0] = [ap + -103] + 3, ap++;
[ap + 0] = [ap + -98] + 51730, ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 99;
[ap + 0] = [[ap + -112] + 4], ap++;
[ap + 0] = [ap + -103], ap++;
[ap + 0] = [ap + -2] + 53780, ap++;
[ap + 0] = [ap + -115] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -127] + 6], ap++;
[ap + 0] = [[ap + -128] + 7], ap++;
ret;
ap += 99;
call rel -18800;
[ap + 0] = [ap + -118] + 2, ap++;
[ap + 0] = [ap + -110] + 64080, ap++;
[ap + 0] = [ap + -115], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 94;
call rel -22196;
[ap + 0] = [ap + -113] + 3, ap++;
[ap + 0] = [ap + -108] + 63260, ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 109;
[ap + 0] = [[ap + -122] + 4], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -2] + 65420, ap++;
[ap + 0] = [ap + -125] + 8, ap++;
[ap + 0] = [[ap + -126] + 6], ap++;
[ap + 0] = [[ap + -127] + 7], ap++;
jmp rel 64;
ap += 109;
call rel -18859;
[ap + 0] = [ap + -128] + 2, ap++;
[ap + 0] = [ap + -120] + 75720, ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 109;
call rel -22234;
[ap + 0] = [ap + -128] + 3, ap++;
[ap + 0] = [ap + -123] + 75550, ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 124;
[ap + 0] = [[ap + -135] + 4], ap++;
[ap + 0] = [ap + -128], ap++;
[ap + 0] = [ap + -2] + 77710, ap++;
[ap + 0] = [ap + -138] + 8, ap++;
[ap + 0] = [[ap + -139] + 6], ap++;
[ap + 0] = [[ap + -140] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 129;
call rel -18949;
[ap + 0] = [ap + -147] + 1, ap++;
[ap + 0] = [ap + -140] + 88460, ap++;
[ap + 0] = [ap + -143], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 143;
[ap + 0] = [[ap + -151] + 4], ap++;
[ap + 0] = [ap + -147], ap++;
[ap + 0] = [ap + -2] + 90090, ap++;
[ap + 0] = [ap + -154] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -166] + 6], ap++;
[ap + 0] = [[ap + -167] + 7], ap++;
ret;
ap += 133;
call rel -22378;
[ap + 0] = [ap + -152] + 3, ap++;
[ap + 0] = [ap + -147] + 98950, ap++;
[ap + 0] = [ap + -149], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 148;
[ap + 0] = [[ap + -156] + 4], ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -2] + 101110, ap++;
[ap + 0] = [ap + -159] + 8, ap++;
[ap + 0] = [[ap + -160] + 6], ap++;
[ap + 0] = [[ap + -161] + 7], ap++;
jmp rel 51;
ap += 143;
call rel -22403;
[ap + 0] = [ap + -162] + 3, ap++;
[ap + 0] = [ap + -157] + 110620, ap++;
[ap + 0] = [ap + -159], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 158;
[ap + 0] = [[ap + -170] + 4], ap++;
[ap + 0] = [ap + -162], ap++;
[ap + 0] = [ap + -2] + 112780, ap++;
[ap + 0] = [ap + -173] + 8, ap++;
[ap + 0] = [[ap + -174] + 6], ap++;
[ap + 0] = [[ap + -175] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 162;
call rel -22642;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -176] + 123440, ap++;
[ap + 0] = [ap + -178], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 177;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 125400, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
jmp rel [fp + -4];
jmp rel 216;
jmp rel 180;
jmp rel 144;
jmp rel 108;
jmp rel 72;
jmp rel 36;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 30;
jmp rel 25;
jmp rel 20;
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 30079754995947265970385662090878901931391068279174515, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -4] = [[ap + -1] + 0];
[fp + -3] = [[ap + -1] + 1];
[ap + 0] = 128670892847731096876195745459382156113904995915174282626924791624613405295, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -4] = [[fp + -6] + 3];
[ap + -3] = [[fp + -6] + 4];
[ap + -2] = [[fp + -6] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 7], ap++;
jmp rel 48 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
[ap + 0] = [fp + -6] + 10, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 27;
ap += 1;
[ap + 0] = [[ap + -6] + 0], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + -5] = [ap + 0] + [ap + -6], ap++;
ret;
call rel 3931;
[ap + 0] = [ap + -8] + 10, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 11;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [ap + -1] + 1200, ap++;
[ap + 0] = [fp + -6] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
[ap + 0] = [[fp + -6] + 9], ap++;
ret;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -4] = [[fp + -6] + 1];
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -1] = [[fp + -6] + 3];
[fp + -3] = [[fp + -6] + 4];
[ap + 0] = [[fp + -6] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -8] + 0], ap++;
[ap + -4] = [[fp + -8] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[fp + -8] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[fp + -8] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[fp + -8] + 1], ap++;
[ap + -7] = [[fp + -8] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel -1687;
[ap + 0] = [fp + -6] + 6, ap++;
jmp rel 440 if [ap + -14] != 0;
[ap + 0] = [ap + -16], ap++;
jmp rel 420 if [ap + -14] != 0;
[ap + 0] = 1614968787426919450493934142527915414786785585051158667258536002655136270126, ap++;
[ap + -1] = [[ap + -3] + 0];
[fp + -4] = [[ap + -3] + 1];
[ap + 0] = [[ap + -3] + 2], ap++;
[ap + -1] = [[ap + -4] + 3];
[fp + -3] = [[ap + -4] + 4];
[ap + 0] = [[ap + -4] + 5], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -25] + 0], ap++;
[ap + -4] = [[ap + -26] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -28] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -25] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -27] + 1], ap++;
[ap + -7] = [[ap + -28] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = 9, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
call rel -2872;
[ap + 0] = [ap + -149] + 6, ap++;
jmp rel 343 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 332 if [ap + -5] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1682279477315315320569864468677598137072759204449471099976072895174002801814, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[ap + -3] = [[ap + -11] + 2];
[ap + -2] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 299 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -22] + 0], ap++;
[ap + -4] = [[ap + -23] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -24] + 2];
jmp rel 267;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -21] + 0], ap++;
[ap + -3] = [[ap + -22] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -23] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -4] = [[ap + -1] + 0];
[fp + -3] = [[ap + -1] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1558888491607572900297085498811328433870345751010628723758273609506997715944, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 2, ap++;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -14] + 0];
[ap + -6] = [[ap + -14] + 1];
[ap + -15] = [[ap + -14] + 2];
[ap + -5] = [[ap + -14] + 3];
[ap + -4] = [[ap + -14] + 4];
[ap + -3] = [[ap + -14] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14]) %}
[ap + 0] = [[ap + -14] + 7], ap++;
jmp rel 217 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [[ap + -16] + 8], ap++;
[ap + 0] = [[ap + -17] + 9], ap++;
[ap + 0] = [ap + -18] + 10, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 192;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 166 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -12] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -13] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 975685559645786312946592976135617904278793537816092122519633166081268738026, ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -12] + 0];
[ap + -4] = [[ap + -12] + 1];
[ap + -31] = [[ap + -12] + 2];
[ap + -3] = [[ap + -12] + 3];
[ap + -5] = [[ap + -12] + 4];
[ap + -5] = [[ap + -12] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -12]) %}
[ap + 0] = [[ap + -12] + 7], ap++;
jmp rel 123 if [ap + -1] != 0;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [[ap + -14] + 8], ap++;
[ap + 0] = [[ap + -15] + 9], ap++;
[ap + 0] = [ap + -16] + 10, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -3] = [ap + 0] + [ap + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 98;
[ap + 0] = [[ap + -5] + 0], ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -15] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -17] + 1], ap++;
[ap + -5] = [[ap + -18] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 72 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -12] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -13] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -14], ap++;
call rel -2058;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -52] + 2, ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -48] + 0];
[ap + -3] = [[ap + -48] + 1];
[ap + -7] = [[ap + -48] + 2];
[ap + -6] = [[ap + -48] + 3];
[ap + -5] = [[ap + -48] + 4];
[ap + -4] = [[ap + -48] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -48]) %}
[ap + 0] = [[ap + -48] + 7], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -49] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -53] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -49] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -53] + 10, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
[ap + 0] = [[ap + -56] + 9], ap++;
ret;
ap += 25;
[ap + 0] = [ap + -43] + 3, ap++;
[ap + 0] = [ap + -34] + 13480, ap++;
jmp rel 7;
ap += 34;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -37] + 14800, ap++;
call rel 3562;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 47;
[ap + 0] = [[ap + -60] + 6], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -2] + 16370, ap++;
[ap + 0] = [ap + -63] + 10, ap++;
[ap + 0] = [[ap + -64] + 8], ap++;
[ap + 0] = [[ap + -65] + 9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 41;
[ap + 0] = [ap + -59] + 3, ap++;
[ap + 0] = [ap + -50] + 26060, ap++;
jmp rel 7;
ap += 50;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -53] + 27380, ap++;
call rel 3521;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -63], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 63;
[ap + 0] = [[ap + -78] + 6], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -2] + 28950, ap++;
[ap + 0] = [ap + -81] + 10, ap++;
[ap + 0] = [[ap + -82] + 8], ap++;
[ap + 0] = [[ap + -83] + 9], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 65;
call rel -23463;
[ap + 0] = [ap + -95] + 3, ap++;
[ap + 0] = [ap + -79] + 39730, ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 12;
ap += 80;
[ap + 0] = [[ap + -92] + 4], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -2] + 41790, ap++;
[ap + 0] = [ap + -95] + 8, ap++;
[ap + 0] = [[ap + -96] + 6], ap++;
[ap + 0] = [[ap + -97] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 88;
[ap + 0] = [ap + -89] + 52910, ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -93], ap++;
jmp rel 8;
ap += 89;
[ap + 0] = [ap + -96] + 53200, ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = [ap + -100], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 230;
call rel 11005;
[ap + 0] = [ap + -1] + 11004, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 185060, ap++;
[ap + 0] = [ap + -238] + [ap + -1], ap++;
[ap + 0] = [ap + -242], ap++;
[ap + 0] = [ap + -242], ap++;
jmp rel 17;
ap += 231;
call rel 10988;
[ap + 0] = [ap + -1] + 10987, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 185350, ap++;
[ap + 0] = [ap + -254] + [ap + -1], ap++;
[ap + 0] = [ap + -242], ap++;
[ap + 0] = [ap + -242], ap++;
[ap + 0] = [ap + -258], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -244], ap++;
[ap + 0] = [ap + -259], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 30079754995947265970304447983584668075990570626933861, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8466698336946495152742507805328298621807841810373315186091759920484, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 447786778914225891416418376047947191489317987698, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 27357377799441806901529300984709551843694, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -15] = [[fp + -3] + 0];
[fp + -14] = [[fp + -3] + 1];
[fp + -13] = [[fp + -3] + 2];
[fp + -12] = [[fp + -3] + 3];
[fp + -11] = [[fp + -3] + 4];
[fp + -10] = [[fp + -3] + 5];
[fp + -9] = [[fp + -3] + 6];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
jmp rel [fp + -8];
jmp rel 60;
jmp rel 50;
jmp rel 40;
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 48;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 40;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 32;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 4, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 5, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 6, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -7] = [[ap + -1] + 0];
[fp + -6] = [[ap + -1] + 1];
[fp + -5] = [[ap + -1] + 2];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 3, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1872388116391579689807509434374778377146229379287883072657558273418085, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 755 if [ap + -2] != 0;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 735;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [fp + -5] + 3, ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 8;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 674 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 647 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 8;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 614 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 587 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 547;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [[ap + -12] + 0], ap++;
[ap + -4] = [ap + 0] + [ap + -5], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 8;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 490 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -14] + 0], ap++;
[ap + 3] = [[ap + -15] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -19] + 2];
jmp rel 463 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
jmp rel 8;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 430 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = memory[ap + -1] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -5] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 403 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
jmp rel 8;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 345 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -13] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -15] + 1], ap++;
[ap + -5] = [[ap + -16] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 322 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -11] + 1];
[ap + 0] = [ap + -11] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 263 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 240 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 181 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 158 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 99 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 76 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -12] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 19 if [ap + -2] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -15], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 1;
[ap + 0] = [ap + -15] + 3, ap++;
jmp rel 5;
ap += 9;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 10;
[ap + 0] = [ap + -24] + 3, ap++;
jmp rel 5;
ap += 18;
[ap + 0] = [ap + -24], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 19;
[ap + 0] = [ap + -33] + 3, ap++;
jmp rel 5;
ap += 27;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 28;
[ap + 0] = [ap + -44] + 3, ap++;
jmp rel 5;
ap += 36;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 39;
[ap + 0] = [ap + -52] + 3, ap++;
jmp rel 5;
ap += 46;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51], ap++;
jmp rel 13;
ap += 47;
[ap + 0] = [ap + -66] + 3, ap++;
jmp rel 5;
ap += 54;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = [ap + -59], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 64;
[ap + 0] = [ap + -66], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 61;
[ap + 0] = [ap + -74] + 3, ap++;
jmp rel 5;
ap += 68;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -73], ap++;
[ap + 0] = [ap + -73], ap++;
jmp rel 13;
ap += 69;
[ap + 0] = [ap + -82] + 3, ap++;
jmp rel 5;
ap += 76;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = [ap + -81], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 81;
[ap + 0] = [fp + -5] + 3, ap++;
jmp rel 5;
ap += 87;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 460936957440218058047455772526769177894613881956331714540915, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 0];
[fp + -17] = [[fp + -16] + 1];
[fp + -15] = [[fp + -16] + 2];
[fp + -14] = [[fp + -16] + 3];
[fp + -13] = [[fp + -16] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16]) %}
[ap + 0] = [[fp + -16] + 6], ap++;
jmp rel 1027 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 7];
[ap + -3] = [[fp + -16] + 8];
[fp + -15] = [[fp + -16] + 9];
[ap + -2] = [[fp + -16] + 10];
[fp + -12] = [[fp + -16] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 7) %}
[ap + 0] = [[fp + -16] + 13], ap++;
jmp rel 994 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 14];
[ap + -3] = [[fp + -16] + 15];
[fp + -15] = [[fp + -16] + 16];
[ap + -2] = [[fp + -16] + 17];
[fp + -11] = [[fp + -16] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 14) %}
[ap + 0] = [[fp + -16] + 20], ap++;
jmp rel 969 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -16] + 21];
[ap + -3] = [[fp + -16] + 22];
[fp + -15] = [[fp + -16] + 23];
[ap + -2] = [[fp + -16] + 24];
[fp + -10] = [[fp + -16] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -16] + 21) %}
[ap + 0] = [[fp + -16] + 27], ap++;
jmp rel 935 if [ap + -1] != 0;
[ap + 0] = [[fp + -16] + 26], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -16] + 28, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -18] + 0];
jmp rel 903;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -18] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [fp + -18] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -9] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 873 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 841;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -8] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 808 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 778;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel [fp + -7];
jmp rel 193;
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 187;
ap += 47;
call rel -21164;
[ap + 0] = [ap + -67] + 1, ap++;
[ap + 0] = [ap + -58] + 47480, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 683;
ap += 60;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -1] + 49020, ap++;
[ap + 0] = [ap + -74] + 9, ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
[ap + 0] = [[ap + -76] + 8], ap++;
jmp rel 691;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 125;
ap += 47;
call rel -21226;
[ap + 0] = [ap + -67] + 1, ap++;
[ap + 0] = [ap + -58] + 47480, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 621;
ap += 60;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -1] + 49020, ap++;
[ap + 0] = [ap + -74] + 9, ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
[ap + 0] = [[ap + -76] + 8], ap++;
jmp rel 629;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 63;
ap += 47;
call rel -21288;
[ap + 0] = [ap + -67] + 1, ap++;
[ap + 0] = [ap + -58] + 47480, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 559;
ap += 60;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -1] + 49020, ap++;
[ap + 0] = [ap + -74] + 9, ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
[ap + 0] = [[ap + -76] + 8], ap++;
jmp rel 567;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 543 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 508;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -19] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 474;
[ap + 1] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel [fp + -6];
jmp rel 193;
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 187;
ap += 26;
call rel -21412;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 379;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 387;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 125;
ap += 26;
call rel -21474;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 317;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 325;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 63;
ap += 26;
call rel -21536;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 255;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
jmp rel 263;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -14] + [ap + -4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -15] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 239 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 204;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -19] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 170;
[ap + 1] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 137 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 107;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -14] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -15] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel -21713;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
ret;
ap += 12;
call rel -21744;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22150, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 24;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 23600, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -40] + 7], ap++;
[ap + 0] = [[ap + -41] + 8], ap++;
ret;
ap += 24;
call rel -21775;
[ap + 0] = [ap + -37] + 1, ap++;
[ap + 0] = [ap + -37] + 34000, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
call rel -21791;
[ap + 0] = [ap + -46] + 1, ap++;
[ap + 0] = [ap + -37] + 34350, ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 39;
[ap + 0] = [[ap + -51] + 5], ap++;
[ap + 0] = [ap + -1] + 35890, ap++;
[ap + 0] = [ap + -53] + 9, ap++;
[ap + 0] = [[ap + -54] + 7], ap++;
[ap + 0] = [[ap + -55] + 8], ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 45;
call rel -21831;
[ap + 0] = [ap + -58] + 1, ap++;
[ap + 0] = [ap + -58] + 47130, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 47;
call rel -21847;
[ap + 0] = [ap + -67] + 1, ap++;
[ap + 0] = [ap + -58] + 47480, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 60;
[ap + 0] = [[ap + -72] + 5], ap++;
[ap + 0] = [ap + -1] + 49020, ap++;
[ap + 0] = [ap + -74] + 9, ap++;
[ap + 0] = [[ap + -75] + 7], ap++;
[ap + 0] = [[ap + -76] + 8], ap++;
[ap + 0] = [ap + -72], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 66;
call rel -21887;
[ap + 0] = [ap + -82] + 1, ap++;
[ap + 0] = [ap + -77] + 60260, ap++;
[ap + 0] = [ap + -79], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 78;
[ap + 0] = [[ap + -88] + 5], ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = [ap + -2] + 61710, ap++;
[ap + 0] = [ap + -91] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -94] + 7], ap++;
[ap + 0] = [[ap + -95] + 8], ap++;
ret;
ap += 78;
call rel -21918;
[ap + 0] = [ap + -95] + 1, ap++;
[ap + 0] = [ap + -89] + 72110, ap++;
[ap + 0] = [ap + -91], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 86;
[ap + 0] = [[ap + -96] + 5], ap++;
[ap + 0] = [ap + -90], ap++;
[ap + 0] = [ap + -2] + 73100, ap++;
[ap + 0] = [ap + -99] + 9, ap++;
[ap + 0] = [[ap + -100] + 7], ap++;
[ap + 0] = [[ap + -101] + 8], ap++;
jmp rel 28;
ap += 91;
call rel -21946;
[ap + 0] = [fp + -18] + 1, ap++;
[ap + 0] = [ap + -102] + 84050, ap++;
[ap + 0] = [ap + -104], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 99;
[ap + 0] = [[fp + -16] + 26], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -2] + 85140, ap++;
[ap + 0] = [fp + -16] + 30, ap++;
[ap + 0] = [[fp + -16] + 28], ap++;
[ap + 0] = [[fp + -16] + 29], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 105;
[ap + 0] = [[fp + -16] + 19], ap++;
[ap + 0] = [ap + -1] + 96180, ap++;
[ap + 0] = [fp + -16] + 23, ap++;
[ap + 0] = [[fp + -16] + 21], ap++;
[ap + 0] = [[fp + -16] + 22], ap++;
jmp rel 11;
ap += 110;
[ap + 0] = [[fp + -16] + 12], ap++;
[ap + 0] = [ap + -1] + 107330, ap++;
[ap + 0] = [fp + -16] + 16, ap++;
[ap + 0] = [[fp + -16] + 14], ap++;
[ap + 0] = [[fp + -16] + 15], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 119;
[ap + 0] = [[fp + -16] + 5], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [ap + -2] + 118740, ap++;
[ap + 0] = [fp + -16] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -16] + 7], ap++;
[ap + 0] = [[fp + -16] + 8], ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 1236 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -7] + 0], ap++;
[ap + -4] = [[fp + -7] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -7] + 2];
jmp rel 1183;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -7] + 0], ap++;
[ap + -3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -7] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 1123 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 1059 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 1030 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 992 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 937 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 873 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 844;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 815 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 777 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = 3, ap++;
[ap + 0] = 2, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 727;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 677 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 628;
[ap + 1] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 6993;
jmp rel 582 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 548 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[ap + -43] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 503;
[ap + 1] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 0];
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 7213;
jmp rel 457 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 423 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[ap + -43] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 378;
[ap + 1] = [ap + -44] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -4] = [[ap + -15] + 1];
[fp + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 5], ap++;
jmp rel 328 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 4], ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 273 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 222;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 172 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 119 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 70;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 23 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -206], ap++;
[ap + 0] = [ap + -193], ap++;
[ap + 0] = [ap + -184], ap++;
[ap + 0] = [ap + -175], ap++;
[ap + 0] = [ap + -160], ap++;
[ap + 0] = [ap + -143], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -45], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = [[ap + -30] + 6], ap++;
ret;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -29] + 6], ap++;
[ap + 0] = [[ap + -30] + 7], ap++;
ret;
call rel -22526;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -11] + 10300, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
call rel -25902;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15] + 10400, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 12350, ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -45] + 6], ap++;
[ap + 0] = [[ap + -46] + 7], ap++;
ret;
ap += 16;
call rel -22625;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -27] + 22650, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 16;
call rel -26003;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -31] + 22750, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 32;
[ap + 0] = [[ap + -48] + 4], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -2] + 24800, ap++;
[ap + 0] = [ap + -51] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -63] + 6], ap++;
[ap + 0] = [[ap + -64] + 7], ap++;
ret;
ap += 32;
call rel -22726;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -43] + 35100, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 43;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -45] + 36460, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60], ap++;
ret;
ap += 44;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51] + 36650, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -60], ap++;
[ap + 0] = [ap + -60], ap++;
ret;
ap += 77;
call rel -22822;
[ap + 0] = [ap + -96] + 1, ap++;
[ap + 0] = [ap + -88] + 50790, ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 88;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = [ap + -90] + 52150, ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = [ap + -105], ap++;
ret;
ap += 89;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = [ap + -96] + 52340, ap++;
[ap + 0] = [ap + -96], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -105], ap++;
[ap + 0] = [ap + -105], ap++;
ret;
ap += 122;
call rel -22918;
[ap + 0] = [ap + -139] + 1, ap++;
[ap + 0] = [ap + -133] + 66480, ap++;
[ap + 0] = [ap + -136], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 135;
[ap + 0] = [[ap + -149] + 4], ap++;
[ap + 0] = [ap + -139], ap++;
[ap + 0] = [ap + -2] + 68020, ap++;
[ap + 0] = [ap + -152] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -164] + 6], ap++;
[ap + 0] = [[ap + -165] + 7], ap++;
ret;
ap += 135;
call rel -22985;
[ap + 0] = [ap + -155] + 2, ap++;
[ap + 0] = [ap + -146] + 78320, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 131;
call rel -26381;
[ap + 0] = [ap + -150] + 3, ap++;
[ap + 0] = [ap + -145] + 77590, ap++;
[ap + 0] = [ap + -147], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 38;
ap += 146;
[ap + 0] = [[ap + -160] + 4], ap++;
[ap + 0] = [ap + -150], ap++;
[ap + 0] = [ap + -2] + 79750, ap++;
[ap + 0] = [ap + -163] + 8, ap++;
[ap + 0] = [[ap + -164] + 6], ap++;
[ap + 0] = [[ap + -165] + 7], ap++;
jmp rel 64;
ap += 146;
call rel -23044;
[ap + 0] = [ap + -166] + 2, ap++;
[ap + 0] = [ap + -157] + 90050, ap++;
[ap + 0] = [ap + -163], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 13;
ap += 147;
call rel -26419;
[ap + 0] = [ap + -166] + 3, ap++;
[ap + 0] = [ap + -161] + 89970, ap++;
[ap + 0] = [ap + -163], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 162;
[ap + 0] = [[ap + -170] + 4], ap++;
[ap + 0] = [ap + -166], ap++;
[ap + 0] = [ap + -2] + 92130, ap++;
[ap + 0] = [ap + -173] + 8, ap++;
[ap + 0] = [[ap + -174] + 6], ap++;
[ap + 0] = [[ap + -175] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 157;
call rel -26496;
[ap + 0] = [ap + -176] + 3, ap++;
[ap + 0] = [ap + -171] + 101440, ap++;
[ap + 0] = [ap + -173], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 172;
[ap + 0] = [[ap + -180] + 4], ap++;
[ap + 0] = [ap + -176], ap++;
[ap + 0] = [ap + -2] + 103600, ap++;
[ap + 0] = [ap + -183] + 8, ap++;
[ap + 0] = [[ap + -184] + 6], ap++;
[ap + 0] = [[ap + -185] + 7], ap++;
jmp rel 51;
ap += 167;
call rel -26521;
[ap + 0] = [ap + -186] + 3, ap++;
[ap + 0] = [ap + -181] + 113110, ap++;
[ap + 0] = [ap + -183], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 182;
[ap + 0] = [[ap + -194] + 4], ap++;
[ap + 0] = [ap + -186], ap++;
[ap + 0] = [ap + -2] + 115270, ap++;
[ap + 0] = [ap + -197] + 8, ap++;
[ap + 0] = [[ap + -198] + 6], ap++;
[ap + 0] = [[ap + -199] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 186;
call rel -26760;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -200] + 125930, ap++;
[ap + 0] = [ap + -202], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
ret;
ap += 201;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 127890, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
jmp rel [fp + -16];
jmp rel 114;
jmp rel 98;
jmp rel 79;
jmp rel 61;
jmp rel 40;
jmp rel 22;
[ap + 0] = 1002251722043407796381914257187451154319249077692389745961436558658833170794, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [fp + -14], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 6461;
ret;
ap += 22;
[ap + 0] = 1315073767143914406652148394641927989259025377370678343883420804647012091191, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 10;
[ap + 0] = 1338991570539227629652968659508509452999440546543359046329858247462908514515, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -11], ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 6483;
ret;
ap += 22;
[ap + 0] = 1319269186374849392430702546045695014229445999961461257001705867859968848569, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -10] = [[fp + -5] + 1];
[fp + -9] = [[fp + -5] + 2];
[fp + -8] = [[fp + -5] + 3];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 4, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
ap += 22;
[ap + 0] = 1128437317928784145444825890238045889700295715782934068810737330726780953452, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -5] + 2];
[fp + -9] = [[fp + -3] + 0];
[fp + -8] = [[fp + -3] + 1];
[fp + -7] = [[fp + -3] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
ret;
ap += 22;
[ap + 0] = 1285448261331287045724978357852080410578708920464955352822619350189361317568, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
ap += 22;
[ap + 0] = 1354750726650008468843070812941655424587229077151228878914072867152800995089, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -3] + 0];
[fp + -7] = [[fp + -3] + 1];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7891998437966260601762371672023996916393715052535837300, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1702927071520734616389433910047276443503088949054642808164, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
jmp rel [fp + -4];
jmp rel 63;
jmp rel 42;
jmp rel 21;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
jmp rel [fp + -3];
jmp rel 15;
jmp rel 10;
jmp rel 5;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 435949330309308061794332689512135401393881765891066974922084, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7314016079654608163373270594669336133645042587978273663295604024676, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 25984604973155740606710932073097299372763061263688549, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 435949330309308061797057627592425306483098928051468198896505, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 0];
[fp + -14] = [[fp + -13] + 1];
[fp + -12] = [[fp + -13] + 2];
[fp + -11] = [[fp + -13] + 3];
[fp + -10] = [[fp + -13] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13]) %}
[ap + 0] = [[fp + -13] + 6], ap++;
jmp rel 525 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 7];
[ap + -3] = [[fp + -13] + 8];
[fp + -12] = [[fp + -13] + 9];
[ap + -2] = [[fp + -13] + 10];
[fp + -9] = [[fp + -13] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 7) %}
[ap + 0] = [[fp + -13] + 13], ap++;
jmp rel 500 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 14];
[ap + -3] = [[fp + -13] + 15];
[fp + -12] = [[fp + -13] + 16];
[ap + -2] = [[fp + -13] + 17];
[fp + -8] = [[fp + -13] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 14) %}
[ap + 0] = [[fp + -13] + 20], ap++;
jmp rel 471 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 19], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -13] + 21];
[ap + -3] = [[fp + -13] + 22];
[fp + -12] = [[fp + -13] + 23];
[ap + -2] = [[fp + -13] + 24];
[fp + -7] = [[fp + -13] + 25];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -13] + 21) %}
[ap + 0] = [[fp + -13] + 27], ap++;
jmp rel 442 if [ap + -1] != 0;
[ap + 0] = [[fp + -13] + 26], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -13] + 28, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -15] + 0];
jmp rel 410;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -15] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 377 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 347;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel [fp + -5];
jmp rel 129;
jmp rel 65;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -11] + [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -12] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 125;
ap += 14;
call rel -23720;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -25] + 22500, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 254;
ap += 27;
[ap + 0] = [[ap + -39] + 5], ap++;
[ap + 0] = [ap + -1] + 24040, ap++;
[ap + 0] = [ap + -41] + 9, ap++;
[ap + 0] = [[ap + -42] + 7], ap++;
[ap + 0] = [[ap + -43] + 8], ap++;
jmp rel 262;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -11] + [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -12] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 39 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 12;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 63;
ap += 14;
call rel -23782;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -25] + 22500, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 192;
ap += 27;
[ap + 0] = [[ap + -39] + 5], ap++;
[ap + 0] = [ap + -1] + 24040, ap++;
[ap + 0] = [ap + -41] + 9, ap++;
[ap + 0] = [[ap + -42] + 7], ap++;
[ap + 0] = [[ap + -43] + 8], ap++;
jmp rel 200;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = [fp + -11] + [ap + -4], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -12] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -2] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 176 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -12] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 0];
jmp rel 141;
[ap + 1] = [ap + -13] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 0];
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -19] + memory[ap + -1]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 107;
[ap + 1] = [ap + -20] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -11] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -12] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 16 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
call rel -23927;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -28] + 7], ap++;
[ap + 0] = [[ap + -29] + 8], ap++;
ret;
ap += 12;
call rel -23958;
[ap + 0] = [ap + -25] + 1, ap++;
[ap + 0] = [ap + -25] + 22150, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 14;
call rel -23974;
[ap + 0] = [ap + -34] + 1, ap++;
[ap + 0] = [ap + -25] + 22500, ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 27;
[ap + 0] = [[ap + -39] + 5], ap++;
[ap + 0] = [ap + -1] + 24040, ap++;
[ap + 0] = [ap + -41] + 9, ap++;
[ap + 0] = [[ap + -42] + 7], ap++;
[ap + 0] = [[ap + -43] + 8], ap++;
[ap + 0] = [ap + -39], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 33;
call rel -24014;
[ap + 0] = [ap + -49] + 1, ap++;
[ap + 0] = [ap + -44] + 35280, ap++;
[ap + 0] = [ap + -46], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 45;
[ap + 0] = [[ap + -55] + 5], ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -2] + 36730, ap++;
[ap + 0] = [ap + -58] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -61] + 7], ap++;
[ap + 0] = [[ap + -62] + 8], ap++;
ret;
ap += 45;
call rel -24045;
[ap + 0] = [fp + -15] + 1, ap++;
[ap + 0] = [ap + -56] + 47130, ap++;
[ap + 0] = [ap + -58], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 58;
[ap + 0] = [[fp + -13] + 26], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -2] + 48670, ap++;
[ap + 0] = [fp + -13] + 30, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 28], ap++;
[ap + 0] = [[fp + -13] + 29], ap++;
ret;
ap += 63;
[ap + 0] = [[fp + -13] + 19], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -2] + 59720, ap++;
[ap + 0] = [fp + -13] + 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -13] + 21], ap++;
[ap + 0] = [[fp + -13] + 22], ap++;
ret;
ap += 64;
[ap + 0] = [[fp + -13] + 12], ap++;
[ap + 0] = [ap + -1] + 70310, ap++;
[ap + 0] = [fp + -13] + 16, ap++;
[ap + 0] = [[fp + -13] + 14], ap++;
[ap + 0] = [[fp + -13] + 15], ap++;
jmp rel 11;
ap += 69;
[ap + 0] = [[fp + -13] + 5], ap++;
[ap + 0] = [ap + -1] + 81460, ap++;
[ap + 0] = [fp + -13] + 9, ap++;
[ap + 0] = [[fp + -13] + 7], ap++;
[ap + 0] = [[fp + -13] + 8], ap++;
[ap + 0] = [fp + -15], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 760 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[fp + -7] + 0], ap++;
[ap + 3] = [[fp + -7] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[fp + -7] + 2];
jmp rel 702 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 673 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = memory[ap + -3] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -8] + 0], ap++;
[ap + 3] = [[ap + -9] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[ap + -7] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -13] + 2];
jmp rel 635 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -4] = [[ap + -7] + 1];
[fp + -4] = [[ap + -7] + 2];
[ap + -3] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 591 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 4], ap++;
[ap + 0] = [[ap + -9] + 6], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -13] + 2];
jmp rel 544;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -12] + 2];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -4] = [[ap + -11] + 1];
[fp + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 5], ap++;
jmp rel 495 if [ap + -1] != 0;
[ap + 0] = [[ap + -12] + 4], ap++;
[ap + 0] = 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -15] + 7, ap++;
[ap + 0] = [[ap + -16] + 6], ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -5] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -12] + 0];
jmp rel 450;
[ap + 1] = [ap + -6] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -12] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 406 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [[ap + -14] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 363;
[ap + 1] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 5549;
jmp rel 323 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 295 if [ap + -4] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[ap + -41] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -42] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -13] + 0];
jmp rel 256;
[ap + 1] = [ap + -42] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -13] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -15] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -15] + 0];
[ap + -4] = [[ap + -15] + 1];
[fp + -4] = [[ap + -15] + 2];
[ap + -3] = [[ap + -15] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -15]) %}
[ap + 0] = [[ap + -15] + 5], ap++;
jmp rel 212 if [ap + -1] != 0;
[ap + 0] = [[ap + -16] + 4], ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 163 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 118;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -3] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -4] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 74 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 28 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
ap += 11;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -15] + 1160, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -141], ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -123], ap++;
[ap + 0] = [ap + -107], ap++;
[ap + 0] = [ap + -95], ap++;
[ap + 0] = [ap + -55], ap++;
[ap + 0] = [ap + -43], ap++;
[ap + 0] = [ap + -28], ap++;
ret;
call rel -27794;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 1950, ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -42] + 6], ap++;
[ap + 0] = [[ap + -43] + 7], ap++;
ret;
ap += 16;
call rel -24504;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -27] + 12250, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 16;
call rel -27876;
[ap + 0] = [ap + -36] + 3, ap++;
[ap + 0] = [ap + -31] + 12350, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 32;
[ap + 0] = [[ap + -48] + 4], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = [ap + -2] + 14400, ap++;
[ap + 0] = [ap + -51] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -60] + 6], ap++;
[ap + 0] = [[ap + -61] + 7], ap++;
ret;
ap += 32;
call rel -24587;
[ap + 0] = [ap + -51] + 1, ap++;
[ap + 0] = [ap + -43] + 24700, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 43;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -45] + 26060, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
ret;
ap += 44;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = [ap + -51] + 26250, ap++;
[ap + 0] = [ap + -51], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -57], ap++;
[ap + 0] = [ap + -57], ap++;
ret;
ap += 75;
call rel -24665;
[ap + 0] = [ap + -92] + 1, ap++;
[ap + 0] = [ap + -86] + 40110, ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 88;
[ap + 0] = [[ap + -99] + 4], ap++;
[ap + 0] = [ap + -92], ap++;
[ap + 0] = [ap + -2] + 41650, ap++;
[ap + 0] = [ap + -102] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -111] + 6], ap++;
[ap + 0] = [[ap + -112] + 7], ap++;
ret;
ap += 88;
call rel -24720;
[ap + 0] = [ap + -106] + 1, ap++;
[ap + 0] = [ap + -99] + 51950, ap++;
[ap + 0] = [ap + -102], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 102;
[ap + 0] = [[ap + -114] + 4], ap++;
[ap + 0] = [ap + -106], ap++;
[ap + 0] = [ap + -2] + 53580, ap++;
[ap + 0] = [ap + -117] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -126] + 6], ap++;
[ap + 0] = [[ap + -127] + 7], ap++;
ret;
ap += 101;
call rel -28299;
[ap + 0] = [ap + -120] + 3, ap++;
[ap + 0] = [ap + -115] + 63790, ap++;
[ap + 0] = [ap + -117], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 116;
[ap + 0] = [[ap + -124] + 4], ap++;
[ap + 0] = [ap + -120], ap++;
[ap + 0] = [ap + -2] + 65750, ap++;
[ap + 0] = [ap + -127] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -136] + 6], ap++;
[ap + 0] = [[ap + -137] + 7], ap++;
ret;
ap += 106;
call rel -28192;
[ap + 0] = [ap + -125] + 3, ap++;
[ap + 0] = [ap + -120] + 74610, ap++;
[ap + 0] = [ap + -122], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 121;
[ap + 0] = [[ap + -129] + 4], ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -2] + 76770, ap++;
[ap + 0] = [ap + -132] + 8, ap++;
[ap + 0] = [[ap + -133] + 6], ap++;
[ap + 0] = [[ap + -134] + 7], ap++;
jmp rel 45;
ap += 116;
call rel -28217;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -130] + 86280, ap++;
[ap + 0] = [ap + -132], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
ap += 131;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 88440, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 5959518537025422419532192388965862262535781, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 23632860550747628264353745246870641142126, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -4] + 0], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 51 if [ap + -2] != 0;
jmp rel 8 if [ap + -1] != 0;
ap += 3;
[ap + 0] = 7, ap++;
jmp rel 28;
[ap + -1] = [ap + 0] + 1, ap++;
jmp rel 8 if [ap + -1] != 0;
ap += 2;
[ap + 0] = 5, ap++;
jmp rel 18;
[ap + -2] = [ap + 0] + 2, ap++;
jmp rel 8 if [ap + -1] != 0;
ap += 1;
[ap + 0] = 3, ap++;
jmp rel 8;
[ap + -3] = [ap + 0] + 3, ap++;
jmp rel 10 if [ap + -1] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;
ap += 4;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
ret;
[fp + -15] = [[fp + -3] + 0];
[fp + -14] = [[fp + -3] + 1];
[fp + -13] = [[fp + -3] + 2];
[fp + -12] = [[fp + -3] + 3];
[fp + -11] = [[fp + -3] + 4];
[fp + -10] = [[fp + -3] + 5];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 6, ap++;
jmp rel [fp + -9];
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel [fp + -8];
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -7] = [[ap + -1] + 0];
[fp + -6] = [[ap + -1] + 1];
[fp + -5] = [[ap + -1] + 2];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 3, ap++;
ret;
[fp + -12] = [[fp + -3] + 0];
[fp + -11] = [[fp + -3] + 1];
[fp + -10] = [[fp + -3] + 2];
[fp + -9] = [[fp + -3] + 3];
[fp + -8] = [[fp + -3] + 4];
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
jmp rel [fp + -7];
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -6] = [[ap + -1] + 0];
[fp + -5] = [[ap + -1] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2, ap++;
ret;
[fp + -14] = [[fp + -3] + 0];
[fp + -13] = [[fp + -3] + 1];
[fp + -12] = [[fp + -3] + 2];
[fp + -11] = [[fp + -3] + 3];
[fp + -10] = [[fp + -3] + 4];
[fp + -9] = [[fp + -3] + 5];
[fp + -8] = [[fp + -3] + 6];
[fp + -7] = [[fp + -3] + 7];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
ret;
[fp + -12] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
[fp + -12] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155801121784903550401946791117314617207, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
%{ memory[ap + 0] = 3880 <= memory[fp + -9] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -9] + 340282366920938463463374607431768207576, ap++;
[ap + -1] = [[fp + -10] + 0];
jmp rel 96;
[fp + -9] = [ap + 0] + 3880, ap++;
[ap + -1] = [[fp + -10] + 0];
[ap + 0] = [ap + -1], ap++;
[fp + -8] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -10] + 1];
jmp rel 13;
[ap + -1] = [[fp + -10] + 1];
[ap + 0] = [fp + -10] + 2, ap++;
[ap + 0] = [ap + -4] + 4210, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -8], ap++;
ret;
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -8] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -8] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -10] + 2];
jmp rel 52;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[fp + -10] + 2];
[ap + 0] = [fp + -4] + [fp + -8], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
%{ memory[ap + 0] = (memory[fp + -8] + memory[ap + -4]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -10] + 3];
jmp rel 18;
[ap + 1] = [fp + -8] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[fp + -10] + 3];
[ap + 0] = [fp + -10] + 4, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -72;
ret;
call rel -28006;
[ap + 0] = [fp + -10] + 4, ap++;
[ap + 0] = [ap + -13] + 1370, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -17158;
[ap + 0] = [fp + -10] + 3, ap++;
[ap + 0] = [ap + -11] + 2640, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -23276;
[ap + 0] = [fp + -10] + 1, ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1797457979346250507448225937428672153408765752015891813203, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 141;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[fp + 1] = [[fp + -4] + 0];
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 113;
[fp + 0] = [[ap + -4] + 0];
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 42 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel -16968;
jmp rel 11 if [ap + -6] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 31;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 900, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -6] + 3170, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 15 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -3] + 5160, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 5750, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = 1770 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209686, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 34;
[fp + -7] = [ap + 0] + 1770, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -28;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 2070, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -23500;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
call rel 5469;
[ap + 0] = [ap + -1] + 5468, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 119280, ap++;
%{ memory[ap + 0] = memory[ap + -1] <= memory[fp + -10] %}
jmp rel 8 if [ap + 0] != 0, ap++;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -11] + 0];
jmp rel 403;
[fp + -10] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -11] + 0];
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -7] = [ap + 0] + [fp + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 373;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -7] = [[fp + -9] + 1];
[ap + 0] = [[fp + -9] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -9] + 0], ap++;
[ap + -4] = [[ap + -10] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -12] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -11] + 1], ap++;
[ap + -7] = [[ap + -12] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -9] + 3, ap++;
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + -5] = [[fp + -8] + 1];
[ap + -4] = [[fp + -8] + 2];
[ap + -6] = [[fp + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8]) %}
[ap + 0] = [[fp + -8] + 5], ap++;
jmp rel 300 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 4], ap++;
[ap + 0] = 1362216501404408381030909812262930701040267356755429633801857477237622448702, ap++;
[ap + -1] = [[ap + -6] + 0];
[fp + -7] = [[ap + -6] + 1];
[ap + 0] = [[ap + -6] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -13] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -10] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -12] + 1], ap++;
[ap + -7] = [[ap + -13] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = [ap + -17] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -8] + 7];
[ap + -6] = [[fp + -8] + 8];
[ap + -5] = [[fp + -8] + 9];
[ap + -7] = [[fp + -8] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -8] + 7) %}
[ap + 0] = [[fp + -8] + 12], ap++;
jmp rel 227 if [ap + -1] != 0;
[ap + 0] = [[fp + -8] + 11], ap++;
[ap + 0] = 1025310123145470443248164887320592303314351953140339051646286095766923394624, ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + -2] = [[ap + -7] + 0];
[ap + -1] = [[ap + -7] + 1];
[ap + 0] = [[ap + -7] + 2], ap++;
%{ memory[ap + 5] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285300992 %}
jmp rel 14 if [ap + 5] != 0, ap++;
[ap + -2] = [ap + 5] + 3618502788666131106986593281521497120414687020801267626233049500247285300992, ap++;
%{
(value, scalar) = (memory[ap + 4], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -11] + 0], ap++;
[ap + -4] = [[ap + -12] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833727, ap++;
[ap + -4] = [[ap + -14] + 2];
jmp rel 17;
[ap + 5] = [ap + -2], ap++;
%{
(value, scalar) = (memory[ap + 4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 10633823966279326983230456482242756608, ap++;
[ap + 3] = [ap + -1] + [ap + -2], ap++;
[ap + -3] = [[ap + -11] + 0], ap++;
[ap + -2] = [ap + -4] + 319014718988379809496913694467282698496, ap++;
[ap + -3] = [[ap + -13] + 1], ap++;
[ap + -7] = [[ap + -14] + 2];
[ap + -7] = [ap + -3] + 340282366920938463463374607431768211455;
jmp rel 4 if [ap + -3] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -8] + 14, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
call rel -21793;
[ap + 0] = [ap + -127] + 3, ap++;
jmp rel 160 if [ap + -10] != 0;
[ap + 0] = [ap + -12], ap++;
jmp rel 151 if [ap + -10] != 0;
[ap + 0] = [ap + -1], ap++;
jmp rel 8 if [ap + -131] != 0;
ap += 6;
[ap + 0] = [ap + -7] + 640, ap++;
jmp rel 21;
[ap + -131] = [ap + 0] + [ap + -10], ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 7 if [ap + -2] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1, ap++;
jmp rel 6;
[ap + 0] = [ap + -1] + 100, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 56 if [ap + -1] != 0;
[ap + 0] = [ap + -4], ap++;
jmp rel 13 if [fp + -7] != 0;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -2] + 3640, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -7] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -27] + 0];
jmp rel 16;
[ap + -1] = [[ap + -26] + 0];
[ap + 0] = [ap + -26] + 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -246;
ret;
call rel -21895;
[ap + 0] = [ap + -33] + 1, ap++;
[ap + 0] = [ap + -11] + 2170, ap++;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [ap + -34], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -4] + 1900, ap++;
[fp + -5] = [ap + 1] + [fp + -7], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -25] + 0];
jmp rel 45;
[ap + -1] = [[ap + -24] + 0];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -29] + 1];
jmp rel 19;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -29] + 1];
[ap + 0] = [ap + -29] + 2, ap++;
[ap + 0] = [ap + -5] + 800, ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [ap + -30], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -28569;
[ap + 0] = [ap + -35] + 2, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -36], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -21963;
[ap + 0] = [ap + -31] + 1, ap++;
[ap + 0] = [ap + -11] + 570, ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = [ap + -32], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [ap + -1] + 4540, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 8;
ap += 1;
[ap + 0] = [ap + -13] + 4730, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -18], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [[fp + -8] + 11], ap++;
call rel 5113;
[ap + 0] = [ap + -1] + 5112, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] + 93460, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -8] + [ap + -2], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -8] + 15, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 13], ap++;
[ap + 0] = [[fp + -8] + 14], ap++;
ret;
[ap + 0] = [[fp + -8] + 4], ap++;
call rel 5092;
[ap + 0] = [ap + -1] + 5091, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 2, ap++;
[ap + 0] = [ap + -1] + 106270, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [fp + -8] + 8, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -8] + 6], ap++;
[ap + 0] = [[fp + -8] + 7], ap++;
ret;
call rel 5070;
[ap + 0] = [ap + -1] + 5069, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -1] * 3, ap++;
[ap + 0] = [ap + -1] + 118980, ap++;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -10] + [ap + -2], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -23929;
[ap + 0] = [fp + -11] + 1, ap++;
[ap + 0] = [fp + -10], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 176 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -26012;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -26062;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -26109;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -13] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 18;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 2190, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
ap += 7;
%{ memory[ap + 0] = 5440 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768206016, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 63;
[fp + -7] = [ap + 0] + 5440, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 44;
[fp + 2] = [[fp + -6] + 0];
[fp + 3] = [[fp + -6] + 1];
[fp + 4] = [[fp + -6] + 2];
[fp + 5] = [[fp + -6] + 3];
[fp + 6] = [[fp + -6] + 4];
[fp + 2] = [[fp + -3] + 0];
[fp + 3] = [[fp + -3] + 1];
[fp + 5] = [ap + 0] + [fp + 4], ap++;
[ap + -1] = [[fp + -3] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [fp + 5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
[fp + 0] = [fp + -6] + 5;
[fp + 1] = [fp + -5];
call rel 140;
jmp rel 13 if [ap + -3] != 0;
[fp + 6] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
call rel -51;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2240, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 5740, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -24212;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = 13290 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768198166, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 78;
[fp + -8] = [ap + 0] + 13290, ap++;
[ap + -1] = [[fp + -9] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 14 if [fp + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 13790, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
ret;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
call rel 3788;
jmp rel 36 if [ap + -9] != 0;
[ap + 0] = [ap + -10], ap++;
jmp rel 19 if [ap + -7] != 0;
[ap + -6] = [[fp + -4] + 0];
[ap + -5] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -3] = [[fp + -4] + 3];
[ap + -2] = [[fp + -4] + 4];
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 5, ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -52;
ret;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -2] + 2570, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11] + 2770, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -24305;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = 1770 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209686, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 34;
[fp + -7] = [ap + 0] + 1770, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 15;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -28;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 2070, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -24360;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 1;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 9;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 136 if [ap + -2] != 0;
[fp + 0] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[fp + -6] + 1], ap++;
[ap + -5] = [[fp + -6] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 112 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[fp + -6] + 0];
[ap + 0] = [fp + 0] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 40 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel -19696;
jmp rel 11 if [ap + -6] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 29;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 900, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 3170, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
jmp rel 14 if [ap + -3] != 0;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
ret;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -9] + 4300, ap++;
jmp rel 7;
ap += 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -14] + 5620, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -25], ap++;
[ap + 0] = [fp + -24], ap++;
[ap + 0] = [fp + -23], ap++;
[ap + 0] = [fp + -22], ap++;
[ap + 0] = [fp + -21], ap++;
[ap + 0] = [fp + -20], ap++;
[ap + 0] = [fp + -19], ap++;
[ap + 0] = [fp + -18], ap++;
[ap + 0] = [fp + -17], ap++;
[ap + 0] = [fp + -16], ap++;
[ap + 0] = [fp + -15], ap++;
call rel 3774;
jmp rel 721 if [ap + -4] != 0;
[ap + 0] = [ap + -6], ap++;
jmp rel 705 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -21] + 6, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -3] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -2] = [[ap + -9] + 3];
[fp + -14] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 672 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -20] + 0];
jmp rel 635;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -20] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -22] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -13] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 605 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 578;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -12] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 548 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 521;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -11] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 491 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 464;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -10] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 434 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 407;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -9] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 377 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 6, ap++;
[ap + 0] = 6, ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 345;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -8] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 307 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 272;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -7] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 242 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 215;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -6] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 185 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 158;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 128 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 101;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 71 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -21] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -22] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 19 if [ap + -1] != 0;
ap += 5;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 550, ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = [[ap + -14] + 7], ap++;
[ap + 0] = [[ap + -15] + 8], ap++;
jmp rel 48;
call rel -26980;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [[ap + -27] + 8], ap++;
jmp rel 25;
ap += 12;
call rel -27005;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22250, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 75;
ap += 24;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 23700, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = [[ap + -38] + 7], ap++;
[ap + 0] = [[ap + -39] + 8], ap++;
jmp rel 83;
ap += 24;
call rel -27030;
[ap + 0] = [ap + -40] + 1, ap++;
[ap + 0] = [ap + -35] + 34100, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 50;
ap += 36;
[ap + 0] = [[ap + -46] + 5], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -2] + 35550, ap++;
[ap + 0] = [ap + -49] + 9, ap++;
[ap + 0] = [[ap + -50] + 7], ap++;
[ap + 0] = [[ap + -51] + 8], ap++;
jmp rel 58;
ap += 36;
call rel -27055;
[ap + 0] = [ap + -52] + 1, ap++;
[ap + 0] = [ap + -47] + 45950, ap++;
[ap + 0] = [ap + -49], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 48;
[ap + 0] = [[ap + -58] + 5], ap++;
[ap + 0] = [ap + -52], ap++;
[ap + 0] = [ap + -2] + 47400, ap++;
[ap + 0] = [ap + -61] + 9, ap++;
[ap + 0] = [[ap + -62] + 7], ap++;
[ap + 0] = [[ap + -63] + 8], ap++;
jmp rel 33;
ap += 48;
call rel -27080;
[ap + 0] = [ap + -64] + 1, ap++;
[ap + 0] = [ap + -59] + 57900, ap++;
[ap + 0] = [ap + -61], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 60;
[ap + 0] = [[ap + -70] + 5], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -2] + 59350, ap++;
[ap + 0] = [ap + -73] + 9, ap++;
[ap + 0] = [[ap + -74] + 7], ap++;
[ap + 0] = [[ap + -75] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 65;
call rel -27121;
[ap + 0] = [ap + -82] + 1, ap++;
[ap + 0] = [ap + -76] + 70200, ap++;
[ap + 0] = [ap + -78], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 73;
[ap + 0] = [[ap + -83] + 5], ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = [ap + -2] + 71090, ap++;
[ap + 0] = [ap + -86] + 9, ap++;
[ap + 0] = [[ap + -87] + 7], ap++;
[ap + 0] = [[ap + -88] + 8], ap++;
jmp rel 50;
ap += 73;
call rel -27149;
[ap + 0] = [ap + -89] + 1, ap++;
[ap + 0] = [ap + -84] + 81490, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 85;
[ap + 0] = [[ap + -95] + 5], ap++;
[ap + 0] = [ap + -89], ap++;
[ap + 0] = [ap + -2] + 82940, ap++;
[ap + 0] = [ap + -98] + 9, ap++;
[ap + 0] = [[ap + -99] + 7], ap++;
[ap + 0] = [[ap + -100] + 8], ap++;
jmp rel 25;
ap += 85;
call rel -27174;
[ap + 0] = [ap + -101] + 1, ap++;
[ap + 0] = [ap + -96] + 93440, ap++;
[ap + 0] = [ap + -98], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 75;
ap += 97;
[ap + 0] = [[ap + -107] + 5], ap++;
[ap + 0] = [ap + -101], ap++;
[ap + 0] = [ap + -2] + 94890, ap++;
[ap + 0] = [ap + -110] + 9, ap++;
[ap + 0] = [[ap + -111] + 7], ap++;
[ap + 0] = [[ap + -112] + 8], ap++;
jmp rel 83;
ap += 97;
call rel -27199;
[ap + 0] = [ap + -113] + 1, ap++;
[ap + 0] = [ap + -108] + 105290, ap++;
[ap + 0] = [ap + -110], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 50;
ap += 109;
[ap + 0] = [[ap + -119] + 5], ap++;
[ap + 0] = [ap + -113], ap++;
[ap + 0] = [ap + -2] + 106740, ap++;
[ap + 0] = [ap + -122] + 9, ap++;
[ap + 0] = [[ap + -123] + 7], ap++;
[ap + 0] = [[ap + -124] + 8], ap++;
jmp rel 58;
ap += 109;
call rel -27224;
[ap + 0] = [ap + -125] + 1, ap++;
[ap + 0] = [ap + -120] + 117140, ap++;
[ap + 0] = [ap + -122], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 121;
[ap + 0] = [[ap + -131] + 5], ap++;
[ap + 0] = [ap + -125], ap++;
[ap + 0] = [ap + -2] + 118590, ap++;
[ap + 0] = [ap + -134] + 9, ap++;
[ap + 0] = [[ap + -135] + 7], ap++;
[ap + 0] = [[ap + -136] + 8], ap++;
jmp rel 33;
ap += 121;
call rel -27249;
[ap + 0] = [ap + -147] + 1, ap++;
[ap + 0] = [ap + -132] + 129090, ap++;
[ap + 0] = [ap + -134], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 134;
[ap + 0] = [[ap + -144] + 5], ap++;
[ap + 0] = [ap + -147], ap++;
[ap + 0] = [ap + -2] + 130630, ap++;
[ap + 0] = [ap + -147] + 9, ap++;
[ap + 0] = [[ap + -148] + 7], ap++;
[ap + 0] = [[ap + -149] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 144;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -146] + 142130, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -152], ap++;
ret;
ap += 145;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -152] + 142320, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -152], ap++;
[ap + 0] = [ap + -152], ap++;
ret;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -6] = [[fp + -5] + 1];
[fp + -4] = [[fp + -5] + 2];
[fp + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 286 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -7] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -7] + 1], ap++;
[ap + -5] = [[fp + -7] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 241 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -7] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -7] + 1];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[ap + 0] = [fp + -7] + 2, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -4] = [[ap + -8] + 1];
[fp + -4] = [[ap + -8] + 2];
[ap + -3] = [[ap + -8] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 5], ap++;
jmp rel 198 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -14] + 7];
[ap + -4] = [[ap + -14] + 8];
[fp + -4] = [[ap + -14] + 9];
[ap + -3] = [[ap + -14] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -14] + 7) %}
[ap + 0] = [[ap + -14] + 12], ap++;
jmp rel 161 if [ap + -1] != 0;
[ap + 0] = [[ap + -15] + 11], ap++;
[ap + 0] = [[ap + -16] + 13], ap++;
[ap + 0] = [ap + -17] + 14, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -17] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -19] + 1], ap++;
[ap + -5] = [[ap + -20] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 116 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -14] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -15] + 1];
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -21] + 2];
jmp rel 73;
[ap + 1] = [ap + -4] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -21] + 2];
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 3210;
jmp rel 37 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 16 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -86], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -71], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 90, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 47;
call rel -27491;
[ap + 0] = [ap + -74] + 3, ap++;
[ap + 0] = [ap + -58] + 36650, ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 48;
call rel -30859;
[ap + 0] = [ap + -74] + 3, ap++;
[ap + 0] = [ap + -63] + 36840, ap++;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 64;
[ap + 0] = [[ap + -79] + 11], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 38890, ap++;
[ap + 0] = [ap + -82] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -89] + 13], ap++;
[ap + 0] = [[ap + -90] + 14], ap++;
ret;
ap += 70;
[ap + 0] = [[ap + -79] + 4], ap++;
[ap + 0] = [ap + -74], ap++;
[ap + 0] = [ap + -2] + 49930, ap++;
[ap + 0] = [ap + -82] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -89] + 6], ap++;
[ap + 0] = [[ap + -90] + 7], ap++;
ret;
ap += 65;
call rel -30312;
[ap + 0] = [fp + -7] + 3, ap++;
[ap + 0] = [ap + -80] + 59710, ap++;
[ap + 0] = [ap + -82], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 81;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [ap + -2] + 61760, ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 364 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -8] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -8] + 1], ap++;
[ap + -5] = [[fp + -8] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 319 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -8] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 2];
jmp rel 278;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -5] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 238 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -11] + memory[ap + -4]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -11] + 0];
jmp rel 199;
[ap + 1] = [ap + -12] + [ap + -5], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -11] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -4] = [[ap + -10] + 1];
[fp + -5] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 5], ap++;
jmp rel 159 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 4], ap++;
[ap + 0] = [[ap + -12] + 6], ap++;
[ap + 0] = [ap + -13] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 18446744073709551616 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 18446744073709551616, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808888171140034867494911, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 114 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463444927863358058659840, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 73;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -14] + 3, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [ap + -6], ap++;
call rel 2863;
jmp rel 37 if [ap + -5] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 16 if [ap + -5] != 0;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -97], ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = [ap + -70], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9] + 90, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
ret;
ap += 47;
call rel -27838;
[ap + 0] = [ap + -67] + 3, ap++;
[ap + 0] = [ap + -58] + 36650, ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 47;
call rel -31206;
[ap + 0] = [ap + -67] + 3, ap++;
[ap + 0] = [ap + -62] + 36750, ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 63;
[ap + 0] = [[ap + -74] + 4], ap++;
[ap + 0] = [ap + -67], ap++;
[ap + 0] = [ap + -2] + 38800, ap++;
[ap + 0] = [ap + -77] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -84] + 6], ap++;
[ap + 0] = [[ap + -85] + 7], ap++;
ret;
ap += 63;
call rel -27909;
[ap + 0] = [ap + -80] + 1, ap++;
[ap + 0] = [ap + -74] + 49100, ap++;
[ap + 0] = [ap + -77], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 76;
[ap + 0] = [[ap + -90] + 4], ap++;
[ap + 0] = [ap + -80], ap++;
[ap + 0] = [ap + -2] + 50640, ap++;
[ap + 0] = [ap + -93] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -100] + 6], ap++;
[ap + 0] = [[ap + -101] + 7], ap++;
ret;
ap += 76;
call rel -27956;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -87] + 60940, ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 76;
call rel -30707;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -91] + 61040, ap++;
[ap + 0] = [ap + -93], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
ap += 92;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 63090, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 9230 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768202226, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 56;
[fp + -7] = [ap + 0] + 9230, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 37;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + 0] = [[fp + -6] + 3], ap++;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[fp + 0] = [fp + -6] + 7;
[fp + 1] = [fp + -5];
call rel 2829;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -44;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2090, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 9530, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -26068;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 5040 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768206416, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 58;
[fp + -7] = [ap + 0] + 5040, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 39;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + 0] = [[fp + -6] + 2], ap++;
[ap + -3] = [[fp + -3] + 0];
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -3] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 2, ap++;
[fp + 0] = [fp + -6] + 3;
[fp + 1] = [fp + -5];
call rel -1793;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -46;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2090, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 5340, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -26143;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = 8, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 4] = [[fp + -6] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[fp + -6] + 1], ap++;
[ap + -1] = [[fp + -6] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
%{ memory[ap + 0] = memory[ap + -1] < 7 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 7, ap++;
[ap + -1] = [[fp + -6] + 3];
jmp rel 59;
[ap + 0] = [ap + -2] + 340282366920938463463374607431768211449, ap++;
[ap + -1] = [[fp + -6] + 3];
[ap + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010247, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
[ap + 0] = [fp + -6] + 4, ap++;
jmp rel [ap + -2];
jmp rel 42;
jmp rel 35;
jmp rel 28;
jmp rel 21;
jmp rel 14;
jmp rel 7;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1116352408, ap++;
jmp rel 38;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1899447441, ap++;
jmp rel 33;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 3049323471, ap++;
jmp rel 28;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 3921009573, ap++;
jmp rel 23;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 961987163, ap++;
jmp rel 18;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 1508970993, ap++;
jmp rel 13;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = 2453635748, ap++;
jmp rel 8;
ap += 3;
[ap + 0] = [fp + -6] + 4, ap++;
[ap + 0] = 2870763221, ap++;
[ap + 0] = 7, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -3], memory[ap + -1]) %}
[ap + 4] = [[ap + -3] + 0], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -6] + 1], ap++;
[ap + -1] = [[ap + -7] + 2], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[fp + -3] = [ap + -3] + [ap + -1];
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -2] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -12] + 3];
jmp rel 28;
[ap + 1] = [ap + -3] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -12] + 3];
[ap + 0] = 64, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[ap + -2], memory[ap + -1]) %}
[ap + 4] = [[ap + -13] + 4], ap++;
[ap + -1] = [ap + 3] + 1, ap++;
[ap + -3] = [ap + -1] + [ap + -2], ap++;
[ap + -2] = [[ap + -16] + 5], ap++;
[ap + -1] = [[ap + -17] + 6], ap++;
[ap + -3] = [ap + -6] * [ap + -2];
[ap + -7] = [ap + -3] + [ap + -1];
[ap + 0] = [fp + -5] * [ap + -17], ap++;
[ap + 0] = [ap + -1] + [fp + -4], ap++;
[ap + 0] = [ap + -1] * 1103515245, ap++;
[ap + 0] = [ap + -21] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4] + [ap + -7], ap++;
ret;
ap += 3;
call rel -31037;
[ap + 0] = [ap + -21] + 4, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 12560 <= memory[fp + -8] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -8] + 340282366920938463463374607431768198896, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 286;
[fp + -8] = [ap + 0] + 12560, ap++;
[ap + -1] = [[fp + -9] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[fp + -7] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 265;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 241;
[ap + 1] = [fp + -7] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -8] + 0];
[fp + -3] = [ap + 0] + [fp + -4], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + -4] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 155;
[ap + 0] = [ap + -2], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -7] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 134;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -2]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -14] + 1];
jmp rel 105;
[ap + 1] = [fp + -7] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -14] + 1];
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[ap + -3] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -18] + 2];
jmp rel 80;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -19] + 2];
[ap + 0] = [fp + -4] + [ap + -6], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + 0] = [ap + -1];
[fp + 1] = [ap + -1];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -22] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 9 if [ap + -3] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 5040, ap++;
[ap + 0] = 302652579918965577886386472538583578916, ap++;
jmp rel 29;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
call rel -20607;
jmp rel 32 if [ap + -3] != 0;
[ap + 0] = [ap + -2] * 2147483648, ap++;
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4] + [ap + -3], ap++;
[ap + 0] = 0, ap++;
call rel -20497;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 84;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 3160, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
jmp rel 7;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 5830, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -20344;
[ap + 0] = [ap + -24] + 3, ap++;
[ap + 0] = [ap + -11] + 8880, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -31218;
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -11] + 9450, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -20370;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 10320, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -2] + 7460, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
%{ memory[ap + 0] = memory[fp + -7] < memory[ap + -1] %}
jmp rel 6 if [ap + 0] != 0, ap++;
[fp + -7] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 53;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [fp + -4] + [fp + -7], ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = 2, ap++;
%{ memory[ap + 0] = (memory[fp + -7] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 17;
[ap + 1] = [fp + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel -242;
ret;
call rel -31291;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -14] + 1390, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -20443;
[ap + 0] = [ap + -13] + 1, ap++;
[ap + 0] = [ap + -11] + 2760, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
call rel -31317;
[ap + 0] = [ap + -14] + 1, ap++;
[ap + 0] = [ap + -11] + 11390, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 12760, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -7], ap++;
ret;
call rel -26583;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[fp + -14] = [[fp + -5] + 0];
[fp + -13] = [[fp + -5] + 1];
[fp + -12] = [[fp + -5] + 2];
[fp + -11] = [[fp + -3] + 0];
[fp + -10] = [[fp + -3] + 1];
[fp + -9] = [[fp + -3] + 2];
[fp + -8] = [[fp + -3] + 3];
[fp + -7] = [[fp + -3] + 4];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 5, ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 226 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 6;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8] + 740, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
jmp rel 178;
call rel -28679;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -28729;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -28779;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -7] = [ap + 0] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -28826;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -15] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 20;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 2470, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[fp + -15] = [[fp + -5] + 0];
[fp + -14] = [[fp + -5] + 1];
[fp + -13] = [[fp + -5] + 2];
[fp + -12] = [[fp + -3] + 0];
[fp + -11] = [[fp + -3] + 1];
[fp + -10] = [[fp + -3] + 2];
[fp + -9] = [[fp + -3] + 3];
[fp + -8] = [[fp + -3] + 4];
[fp + -7] = [[fp + -3] + 5];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 6, ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 376 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 12;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -14] + 1580, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 13, ap++;
jmp rel 328;
call rel -28944;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 10;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 1300, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 11, ap++;
jmp rel 278;
call rel -28994;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 8;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -10] + 1020, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 9, ap++;
jmp rel 228;
call rel -29044;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -7] = [ap + 0] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 6;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8] + 740, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
jmp rel 178;
call rel -29094;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -9] = [ap + 0] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -29144;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -11] = [ap + 0] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -29194;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -13] = [ap + 0] + 6, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -29241;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -21] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -27], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 26;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 3310, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 226 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 6;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8] + 740, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
jmp rel 178;
call rel -29343;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -29393;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -29443;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -7] = [ap + 0] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -29490;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -15] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 20;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 2470, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 226 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 6;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -8] + 740, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 7, ap++;
jmp rel 178;
call rel -29592;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -29642;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -29692;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -7] = [ap + 0] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -29739;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -15] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -21], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 20;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 2470, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[fp + -15] = [[fp + -5] + 0];
[fp + -14] = [[fp + -5] + 1];
[fp + -13] = [[fp + -5] + 2];
[fp + -12] = [[fp + -3] + 0];
[fp + -11] = [[fp + -3] + 1];
[fp + -10] = [[fp + -3] + 2];
[fp + -9] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
jmp rel [fp + -8];
jmp rel 30;
jmp rel 20;
jmp rel 10;
[ap + 0] = 0, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 24;
[ap + 0] = 1, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 16;
[ap + 0] = 2, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
jmp rel 8;
[ap + 0] = 3, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 1, ap++;
[fp + -7] = [[ap + -1] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
ret;
[fp + -12] = [[fp + -5] + 0];
[fp + -11] = [[fp + -5] + 1];
[fp + -10] = [[fp + -3] + 0];
[fp + -9] = [[fp + -3] + 1];
[fp + -8] = [[fp + -3] + 2];
[fp + -7] = [[fp + -3] + 3];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 4, ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 176 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
jmp rel 47 if [ap + -3] != 0;
ap += 4;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6] + 460, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 5, ap++;
jmp rel 128;
call rel -29911;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -3] = [ap + 0] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 47 if [ap + -2] != 0;
ap += 2;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4] + 180, ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 3, ap++;
jmp rel 78;
call rel -29961;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
[ap + -5] = [ap + 0] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
jmp rel 44 if [ap + -2] != 0;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 20;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 0];
ap += 1;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -6] + 90, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
jmp rel 31;
call rel -30008;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 4;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 8182695458107238536625027964194420169070405141121692218, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + -13] = [[ap + -2] + 1];
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -8] + 430, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 2, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 18;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 2190, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
ap += 2;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 266;
[fp + 1] = [[fp + -4] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 216 if [ap + -2] != 0;
[fp + 0] = [[ap + -1] + 0];
[ap + 0] = [ap + -5], ap++;
%{ memory[ap + 0] = (memory[fp + 0] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[fp + 0] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -6] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[fp + -6] + 1], ap++;
[ap + -5] = [[fp + -6] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 192 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + 0] = [[fp + -6] + 0];
[ap + 0] = [fp + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[fp + -6] + 1];
[ap + 0] = [fp + -6] + 2, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + -8] = [ap + 0] + [ap + -9], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -14], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 136 if [ap + -2] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [[ap + -8] + 0], ap++;
call rel -23377;
jmp rel 103 if [ap + -6] != 0;
[ap + 0] = [ap + -7], ap++;
jmp rel 93 if [ap + -4] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + -6] = [ap + 0] + [ap + -7], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 11;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 9;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 47 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + 0] = [ap + -6], ap++;
%{ memory[ap + 0] = (memory[ap + -2] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -3] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -22] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -24] + 1], ap++;
[ap + -5] = [[ap + -25] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 24 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -3] = [[ap + -19] + 0];
[ap + 0] = [ap + -3] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -20] + 1];
[ap + 0] = [ap + -20] + 2, ap++;
[ap + 0] = [ap + -4] + 770, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [ap + -14], ap++;
ret;
[ap + 0] = [ap + -25] + 3, ap++;
[ap + 0] = [ap + -9], ap++;
jmp rel 7;
ap += 9;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -15] + 1320, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 2010, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
jmp rel 27;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2710, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
ret;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -6] + 5380, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -9] + 6110, ap++;
jmp rel 7;
ap += 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [ap + -14] + 7430, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 8800, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -11] + 0];
[fp + -12] = [[fp + -11] + 1];
[fp + -10] = [[fp + -11] + 2];
[fp + -9] = [[fp + -11] + 3];
[fp + -8] = [[fp + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11]) %}
[ap + 0] = [[fp + -11] + 6], ap++;
jmp rel 264 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 5], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -11] + 7];
[ap + -3] = [[fp + -11] + 8];
[fp + -10] = [[fp + -11] + 9];
[ap + -2] = [[fp + -11] + 10];
[fp + -7] = [[fp + -11] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11] + 7) %}
[ap + 0] = [[fp + -11] + 13], ap++;
jmp rel 235 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 12], ap++;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [fp + -9] + 2, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -11] + 14];
[ap + -3] = [[fp + -11] + 15];
[fp + -10] = [[fp + -11] + 16];
[ap + -2] = [[fp + -11] + 17];
[fp + -6] = [[fp + -11] + 18];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -11] + 14) %}
[ap + 0] = [[fp + -11] + 20], ap++;
jmp rel 206 if [ap + -1] != 0;
[ap + 0] = [[fp + -11] + 19], ap++;
[ap + 0] = 2, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [fp + -11] + 21, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -4] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -13] + 0];
jmp rel 174;
[ap + 1] = [ap + -5] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -13] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -9] + [ap + -2], ap++;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -10] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -5] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 136 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 101;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -10] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -4] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 71 if [ap + -1] != 0;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -12] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -10] + memory[ap + -3]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -10] + 0];
jmp rel 46;
[ap + 1] = [ap + -11] + [ap + -4], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -10] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -9] + [ap + -2], ap++;
[ap + 0] = [ap + -12] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -9] + 0];
[ap + -4] = [[ap + -9] + 1];
[fp + -10] = [[ap + -9] + 2];
[ap + -3] = [[ap + -9] + 3];
[fp + -3] = [[ap + -9] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -9]) %}
[ap + 0] = [[ap + -9] + 6], ap++;
jmp rel 19 if [ap + -1] != 0;
ap += 5;
[ap + 0] = [[ap + -15] + 5], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -2] + 450, ap++;
[ap + 0] = [ap + -18] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [[ap + -10] + 5], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -13] + 9, ap++;
[ap + 0] = [[ap + -14] + 7], ap++;
[ap + 0] = [[ap + -15] + 8], ap++;
jmp rel 56;
call rel -30514;
[ap + 0] = [ap + -16] + 1, ap++;
[ap + 0] = [ap + -11] + 10400, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 25;
ap += 12;
[ap + 0] = [[ap + -22] + 5], ap++;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -2] + 11750, ap++;
[ap + 0] = [ap + -25] + 9, ap++;
[ap + 0] = [[ap + -26] + 7], ap++;
[ap + 0] = [[ap + -27] + 8], ap++;
jmp rel 33;
ap += 12;
call rel -30539;
[ap + 0] = [ap + -28] + 1, ap++;
[ap + 0] = [ap + -23] + 22250, ap++;
[ap + 0] = [ap + -25], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 24;
[ap + 0] = [[ap + -34] + 5], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -2] + 23700, ap++;
[ap + 0] = [ap + -37] + 9, ap++;
[ap + 0] = [[ap + -38] + 7], ap++;
[ap + 0] = [[ap + -39] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 29;
call rel -30580;
[ap + 0] = [fp + -13] + 1, ap++;
[ap + 0] = [ap + -40] + 34550, ap++;
[ap + 0] = [ap + -42], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
ret;
ap += 42;
[ap + 0] = [[fp + -11] + 19], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -2] + 36090, ap++;
[ap + 0] = [fp + -11] + 23, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 21], ap++;
[ap + 0] = [[fp + -11] + 22], ap++;
ret;
ap += 47;
[ap + 0] = [[fp + -11] + 12], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -2] + 47140, ap++;
[ap + 0] = [fp + -11] + 16, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 14], ap++;
[ap + 0] = [[fp + -11] + 15], ap++;
ret;
ap += 52;
[ap + 0] = [[fp + -11] + 5], ap++;
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [ap + -2] + 58190, ap++;
[ap + 0] = [fp + -11] + 9, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -11] + 7], ap++;
[ap + 0] = [[fp + -11] + 8], ap++;
ret;
[ap + 0] = [fp + -4] + [fp + -3], ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[fp + -5] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 5], ap++;
jmp rel 224 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [fp + -6] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[fp + -8] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[fp + -8] + 1], ap++;
[ap + -5] = [[fp + -8] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 185 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[fp + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[fp + -8] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[fp + -3] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[fp + -8] + 2];
jmp rel 150;
[ap + 1] = [fp + -3] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[fp + -8] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -5] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 116 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [[ap + -15] + 6], ap++;
[ap + 0] = [ap + -16] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 256 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 256, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395961157943551, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 79 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -8] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607431768211200, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
%{ memory[ap + 0] = (memory[ap + -14] + memory[ap + -2]) % PRIME < 256 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 256, ap++;
[ap + -1] = [[ap + -14] + 2];
jmp rel 46;
[ap + 1] = [ap + -15] + [ap + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607431768211200, ap++;
[ap + -2] = [[ap + -14] + 2];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + -4] + [ap + -2], ap++;
[ap + 0] = [ap + -16] + 3, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -13] + 0];
[ap + -4] = [[ap + -13] + 1];
[fp + -5] = [[ap + -13] + 2];
[ap + -3] = [[ap + -13] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -13]) %}
[ap + 0] = [[ap + -13] + 5], ap++;
jmp rel 15 if [ap + -1] != 0;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 7, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [ap + -22], ap++;
[ap + 0] = [[ap + -22] + 6], ap++;
ret;
[ap + 0] = [[ap + -14] + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -17] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -21] + 6], ap++;
[ap + 0] = [[ap + -22] + 7], ap++;
ret;
call rel -30786;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -11] + 10300, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
call rel -30507;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = [ap + -15] + 10400, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 16;
[ap + 0] = [[ap + -30] + 4], ap++;
[ap + 0] = [ap + -20], ap++;
[ap + 0] = [ap + -2] + 12350, ap++;
[ap + 0] = [ap + -33] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -37] + 6], ap++;
[ap + 0] = [[ap + -38] + 7], ap++;
ret;
ap += 16;
call rel -30837;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -27] + 22650, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 16;
call rel -30560;
[ap + 0] = [fp + -8] + 3, ap++;
[ap + 0] = [ap + -31] + 22750, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
ap += 32;
[ap + 0] = [[fp + -6] + 4], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [ap + -2] + 24800, ap++;
[ap + 0] = [fp + -6] + 8, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[fp + -6] + 6], ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
ret;
[fp + -11] = [[fp + -3] + 0];
[fp + -10] = [[fp + -3] + 1];
[fp + -8] = [ap + 0] + [fp + -9], ap++;
[ap + -1] = [[fp + -3] + 2];
[ap + 0] = [fp + -13], ap++;
[ap + 0] = [fp + -12], ap++;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 3, ap++;
call rel -4558;
jmp rel 17 if [ap + -3] != 0;
[fp + -7] = [[ap + -1] + 0];
[fp + -5] = [ap + 0] + [fp + -6], ap++;
[ap + -1] = [ap + 0] * 2, ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 11;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2490, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = 4840 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768206616, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 56;
[fp + -7] = [ap + 0] + 4840, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 37;
[ap + 0] = [[fp + -6] + 0], ap++;
[ap + 0] = [[fp + -6] + 1], ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
[fp + 0] = [fp + -6] + 2;
[fp + 1] = [fp + -5];
call rel -4619;
jmp rel 11 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
call rel -44;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5] + 2090, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3] + 5140, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
call rel -28969;
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
